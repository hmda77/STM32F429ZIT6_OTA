
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  0800c0b8  0800c0b8  0001c0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cac8  0800cac8  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800cac8  0800cac8  0001cac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cad0  0800cad0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cad0  0800cad0  0001cad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cad4  0800cad4  0001cad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800cad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000e3c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ed0  20000ed0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000266da  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052f6  00000000  00000000  0004679e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f18  00000000  00000000  0004ba98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d78  00000000  00000000  0004d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b135  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028858  00000000  00000000  0007a85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed9e9  00000000  00000000  000a30b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00190a9e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c9c  00000000  00000000  00190af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c0a0 	.word	0x0800c0a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800c0a0 	.word	0x0800c0a0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 ffff 	bl	800259c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f899 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb33 	bl	8000c0c <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f901 	bl	80007ac <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f913 	bl	80007d4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 fadd 	bl	8000b6c <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f941 	bl	8000838 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f97f 	bl	80008b8 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9fd 	bl	80009b8 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 fa31 	bl	8000a24 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 faa9 	bl	8000b18 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f00a fa17 	bl	800a9f8 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa7b 	bl	8000ac4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4835      	ldr	r0, [pc, #212]	; (80006ac <main+0x118>)
 80005d6:	f002 fffd 	bl	80035d4 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	4833      	ldr	r0, [pc, #204]	; (80006b0 <main+0x11c>)
 80005e2:	f00a fe39 	bl	800b258 <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <main+0x120>)
 80005e8:	60bb      	str	r3, [r7, #8]
  bool goto_ota_mode = false;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  bool should_backup = false;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

  switch(cfg->reboot_cause)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fa:	d00c      	beq.n	8000616 <main+0x82>
 80005fc:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000600:	d01b      	beq.n	800063a <main+0xa6>
 8000602:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000606:	d827      	bhi.n	8000658 <main+0xc4>
 8000608:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 800060c:	d009      	beq.n	8000622 <main+0x8e>
 800060e:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 8000612:	d00a      	beq.n	800062a <main+0x96>
 8000614:	e020      	b.n	8000658 <main+0xc4>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\nNo Configuration was found\r\n");
 8000616:	4828      	ldr	r0, [pc, #160]	; (80006b8 <main+0x124>)
 8000618:	f00a fea4 	bl	800b364 <puts>
		  goto_ota_mode = true;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
	  }
	  break;
 8000620:	e01a      	b.n	8000658 <main+0xc4>

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot\r\n");
 8000622:	4826      	ldr	r0, [pc, #152]	; (80006bc <main+0x128>)
 8000624:	f00a fe9e 	bl	800b364 <puts>
	  }
	  break;
 8000628:	e016      	b.n	8000658 <main+0xc4>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 800062a:	4825      	ldr	r0, [pc, #148]	; (80006c0 <main+0x12c>)
 800062c:	f00a fe9a 	bl	800b364 <puts>
		  goto_ota_mode = true;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
		  should_backup = true;
 8000634:	2301      	movs	r3, #1
 8000636:	71fb      	strb	r3, [r7, #7]
	  }
	  break;
 8000638:	e00e      	b.n	8000658 <main+0xc4>

	  case OTA_LOAD_PREV_APP:
	  {
		  HAL_StatusTypeDef ret;
		  printf("Update Unsuccessful, Back to previous APP if Available\r\n");
 800063a:	4822      	ldr	r0, [pc, #136]	; (80006c4 <main+0x130>)
 800063c:	f00a fe92 	bl	800b364 <puts>
		  ret = restore_old_version();
 8000640:	f001 f926 	bl	8001890 <restore_old_version>
 8000644:	4603      	mov	r3, r0
 8000646:	71bb      	strb	r3, [r7, #6]
		  if (ret == HAL_OK)
 8000648:	79bb      	ldrb	r3, [r7, #6]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d103      	bne.n	8000656 <main+0xc2>
		  {
			  printf("Updated Successfully!!!Rebooting...");
 800064e:	481e      	ldr	r0, [pc, #120]	; (80006c8 <main+0x134>)
 8000650:	f00a fe02 	bl	800b258 <iprintf>
		  }



	  }
	  break;
 8000654:	e000      	b.n	8000658 <main+0xc4>
			  while(1);
 8000656:	e7fe      	b.n	8000656 <main+0xc2>
  }

  do
  {
	  if (goto_ota_mode){
 8000658:	7bfb      	ldrb	r3, [r7, #15]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d01f      	beq.n	800069e <main+0x10a>
		printf("OTA Update Requested...\r\n");
 800065e:	481b      	ldr	r0, [pc, #108]	; (80006cc <main+0x138>)
 8000660:	f00a fe80 	bl	800b364 <puts>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800066a:	4810      	ldr	r0, [pc, #64]	; (80006ac <main+0x118>)
 800066c:	f002 ffb2 	bl	80035d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <main+0x118>)
 8000678:	f002 ffac 	bl	80035d4 <HAL_GPIO_WritePin>
		go_to_ota_app(&huart5);
 800067c:	4814      	ldr	r0, [pc, #80]	; (80006d0 <main+0x13c>)
 800067e:	f000 fc1b 	bl	8000eb8 <go_to_ota_app>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <main+0x118>)
 800068a:	f002 ffa3 	bl	80035d4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <main+0x118>)
 8000696:	f002 ff9d 	bl	80035d4 <HAL_GPIO_WritePin>
		goto_ota_mode = false;
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
	  }
  }while(false);

  // Validate application
  app_validation();
 800069e:	f001 f801 	bl	80016a4 <app_validation>

  // Jump to Application
  go_to_application();
 80006a2:	f000 fbd5 	bl	8000e50 <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006a6:	f00a f9cd 	bl	800aa44 <MX_USB_HOST_Process>
 80006aa:	e7fc      	b.n	80006a6 <main+0x112>
 80006ac:	40021800 	.word	0x40021800
 80006b0:	0800c0b8 	.word	0x0800c0b8
 80006b4:	08010000 	.word	0x08010000
 80006b8:	0800c0d8 	.word	0x0800c0d8
 80006bc:	0800c108 	.word	0x0800c108
 80006c0:	0800c118 	.word	0x0800c118
 80006c4:	0800c134 	.word	0x0800c134
 80006c8:	0800c16c 	.word	0x0800c16c
 80006cc:	0800c190 	.word	0x0800c190
 80006d0:	20000294 	.word	0x20000294

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f00a fcd0 	bl	800b088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <SystemClock_Config+0xd0>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <SystemClock_Config+0xd0>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xd4>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000726:	6013      	str	r3, [r2, #0]
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xd4>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073e:	2302      	movs	r3, #2
 8000740:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000742:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000748:	2310      	movs	r3, #16
 800074a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800074c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000750:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000756:	2307      	movs	r3, #7
 8000758:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 0320 	add.w	r3, r7, #32
 800075e:	4618      	mov	r0, r3
 8000760:	f005 f884 	bl	800586c <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800076a:	f000 fb9f 	bl	8000eac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000780:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2102      	movs	r1, #2
 800078c:	4618      	mov	r0, r3
 800078e:	f005 fae5 	bl	8005d5c <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000798:	f000 fb88 	bl	8000eac <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_CRC_Init+0x20>)
 80007b2:	4a07      	ldr	r2, [pc, #28]	; (80007d0 <MX_CRC_Init+0x24>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_CRC_Init+0x20>)
 80007b8:	f002 f853 	bl	8002862 <HAL_CRC_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007c2:	f000 fb73 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000b0 	.word	0x200000b0
 80007d0:	40023000 	.word	0x40023000

080007d4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007d8:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <MX_DMA2D_Init+0x60>)
 80007dc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007de:	4b14      	ldr	r3, [pc, #80]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_DMA2D_Init+0x5c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_DMA2D_Init+0x5c>)
 8000804:	2200      	movs	r2, #0
 8000806:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000808:	4809      	ldr	r0, [pc, #36]	; (8000830 <MX_DMA2D_Init+0x5c>)
 800080a:	f002 f846 	bl	800289a <HAL_DMA2D_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000814:	f000 fb4a 	bl	8000eac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000818:	2101      	movs	r1, #1
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_DMA2D_Init+0x5c>)
 800081c:	f002 f996 	bl	8002b4c <HAL_DMA2D_ConfigLayer>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000826:	f000 fb41 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	200000b8 	.word	0x200000b8
 8000834:	4002b000 	.word	0x4002b000

08000838 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_I2C3_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_I2C3_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_I2C3_Init+0x74>)
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <MX_I2C3_Init+0x7c>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800084e:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_I2C3_Init+0x74>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_I2C3_Init+0x74>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_I2C3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <MX_I2C3_Init+0x74>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_I2C3_Init+0x74>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MX_I2C3_Init+0x74>)
 8000876:	f004 fad1 	bl	8004e1c <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fb14 	bl	8000eac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <MX_I2C3_Init+0x74>)
 8000888:	f004 fc0c 	bl	80050a4 <HAL_I2CEx_ConfigAnalogFilter>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000892:	f000 fb0b 	bl	8000eac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_I2C3_Init+0x74>)
 800089a:	f004 fc3f 	bl	800511c <HAL_I2CEx_ConfigDigitalFilter>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008a4:	f000 fb02 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200000f8 	.word	0x200000f8
 80008b0:	40005c00 	.word	0x40005c00
 80008b4:	000186a0 	.word	0x000186a0

080008b8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	; 0x38
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2234      	movs	r2, #52	; 0x34
 80008c2:	2100      	movs	r1, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f00a fbdf 	bl	800b088 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <MX_LTDC_Init+0xfc>)
 80008ce:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008d0:	4b37      	ldr	r3, [pc, #220]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008d6:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008ea:	2209      	movs	r2, #9
 80008ec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008f6:	221d      	movs	r2, #29
 80008f8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_LTDC_Init+0xf8>)
 80008fc:	2203      	movs	r2, #3
 80008fe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_LTDC_Init+0xf8>)
 8000902:	f240 120d 	movw	r2, #269	; 0x10d
 8000906:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_LTDC_Init+0xf8>)
 800090a:	f240 1243 	movw	r2, #323	; 0x143
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <MX_LTDC_Init+0xf8>)
 8000912:	f240 1217 	movw	r2, #279	; 0x117
 8000916:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000918:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_LTDC_Init+0xf8>)
 800091a:	f240 1247 	movw	r2, #327	; 0x147
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_LTDC_Init+0xf8>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000928:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_LTDC_Init+0xf8>)
 800092a:	2200      	movs	r2, #0
 800092c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_LTDC_Init+0xf8>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000938:	481d      	ldr	r0, [pc, #116]	; (80009b0 <MX_LTDC_Init+0xf8>)
 800093a:	f004 fc2f 	bl	800519c <HAL_LTDC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 fab2 	bl	8000eac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 800094c:	23f0      	movs	r3, #240	; 0xf0
 800094e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000954:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000958:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800095e:	23ff      	movs	r3, #255	; 0xff
 8000960:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000966:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800096a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800096c:	2307      	movs	r3, #7
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000970:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000976:	23f0      	movs	r3, #240	; 0xf0
 8000978:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800097a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800097e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_LTDC_Init+0xf8>)
 800099a:	f004 fd91 	bl	80054c0 <HAL_LTDC_ConfigLayer>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80009a4:	f000 fa82 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3738      	adds	r7, #56	; 0x38
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000014c 	.word	0x2000014c
 80009b4:	40016800 	.word	0x40016800

080009b8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009be:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <MX_SPI5_Init+0x68>)
 80009c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009ec:	2218      	movs	r2, #24
 80009ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f0:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009fc:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <MX_SPI5_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <MX_SPI5_Init+0x64>)
 8000a04:	220a      	movs	r2, #10
 8000a06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_SPI5_Init+0x64>)
 8000a0a:	f005 fded 	bl	80065e8 <HAL_SPI_Init>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a14:	f000 fa4a 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200001f4 	.word	0x200001f4
 8000a20:	40015000 	.word	0x40015000

08000a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a42:	4a1f      	ldr	r2, [pc, #124]	; (8000ac0 <MX_TIM1_Init+0x9c>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a6e:	f005 fe44 	bl	80066fa <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 fa18 	bl	8000eac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_TIM1_Init+0x98>)
 8000a8a:	f005 fffd 	bl	8006a88 <HAL_TIM_ConfigClockSource>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a94:	f000 fa0a 	bl	8000eac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_TIM1_Init+0x98>)
 8000aa6:	f006 fa19 	bl	8006edc <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ab0:	f000 f9fc 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	2000024c 	.word	0x2000024c
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_UART5_Init+0x50>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <MX_UART5_Init+0x4c>)
 8000afc:	f006 fa7e 	bl	8006ffc <HAL_UART_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000b06:	f000 f9d1 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000294 	.word	0x20000294
 8000b14:	40005000 	.word	0x40005000

08000b18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <MX_USART1_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_USART1_UART_Init+0x4c>)
 8000b50:	f006 fa54 	bl	8006ffc <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f9a7 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200002d8 	.word	0x200002d8
 8000b68:	40011000 	.word	0x40011000

08000b6c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b84:	4b1f      	ldr	r3, [pc, #124]	; (8000c04 <MX_FMC_Init+0x98>)
 8000b86:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <MX_FMC_Init+0x9c>)
 8000b88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <MX_FMC_Init+0x98>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <MX_FMC_Init+0x98>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <MX_FMC_Init+0x98>)
 8000b98:	2204      	movs	r2, #4
 8000b9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_FMC_Init+0x98>)
 8000b9e:	2210      	movs	r2, #16
 8000ba0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <MX_FMC_Init+0x98>)
 8000ba4:	2240      	movs	r2, #64	; 0x40
 8000ba6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <MX_FMC_Init+0x98>)
 8000baa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000bae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <MX_FMC_Init+0x98>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <MX_FMC_Init+0x98>)
 8000bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <MX_FMC_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <MX_FMC_Init+0x98>)
 8000bc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <MX_FMC_Init+0x98>)
 8000bee:	f005 fcc7 	bl	8006580 <HAL_SDRAM_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bf8:	f000 f958 	bl	8000eac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000031c 	.word	0x2000031c
 8000c08:	a0000140 	.word	0xa0000140

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08e      	sub	sp, #56	; 0x38
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	4b7b      	ldr	r3, [pc, #492]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a7a      	ldr	r2, [pc, #488]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b78      	ldr	r3, [pc, #480]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	4b74      	ldr	r3, [pc, #464]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a73      	ldr	r2, [pc, #460]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b71      	ldr	r3, [pc, #452]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0320 	and.w	r3, r3, #32
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	4b6d      	ldr	r3, [pc, #436]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a6c      	ldr	r2, [pc, #432]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b6a      	ldr	r3, [pc, #424]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	4b66      	ldr	r3, [pc, #408]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a65      	ldr	r2, [pc, #404]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b63      	ldr	r3, [pc, #396]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b5f      	ldr	r3, [pc, #380]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a5e      	ldr	r2, [pc, #376]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b5c      	ldr	r3, [pc, #368]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b58      	ldr	r3, [pc, #352]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a57      	ldr	r2, [pc, #348]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b51      	ldr	r3, [pc, #324]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cf0:	f043 0308 	orr.w	r3, r3, #8
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b47      	ldr	r3, [pc, #284]	; (8000e14 <MX_GPIO_Init+0x208>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0308 	and.w	r3, r3, #8
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2116      	movs	r1, #22
 8000d06:	4844      	ldr	r0, [pc, #272]	; (8000e18 <MX_GPIO_Init+0x20c>)
 8000d08:	f002 fc64 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2180      	movs	r1, #128	; 0x80
 8000d10:	4842      	ldr	r0, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x210>)
 8000d12:	f002 fc5f 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d1c:	4840      	ldr	r0, [pc, #256]	; (8000e20 <MX_GPIO_Init+0x214>)
 8000d1e:	f002 fc59 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d28:	483e      	ldr	r0, [pc, #248]	; (8000e24 <MX_GPIO_Init+0x218>)
 8000d2a:	f002 fc53 	bl	80035d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d2e:	2316      	movs	r3, #22
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d42:	4619      	mov	r1, r3
 8000d44:	4834      	ldr	r0, [pc, #208]	; (8000e18 <MX_GPIO_Init+0x20c>)
 8000d46:	f002 fa99 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d4a:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d50:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	482e      	ldr	r0, [pc, #184]	; (8000e1c <MX_GPIO_Init+0x210>)
 8000d62:	f002 fa8b 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d66:	2380      	movs	r3, #128	; 0x80
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4827      	ldr	r0, [pc, #156]	; (8000e1c <MX_GPIO_Init+0x210>)
 8000d7e:	f002 fa7d 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d82:	2320      	movs	r3, #32
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4820      	ldr	r0, [pc, #128]	; (8000e18 <MX_GPIO_Init+0x20c>)
 8000d98:	f002 fa70 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	481e      	ldr	r0, [pc, #120]	; (8000e28 <MX_GPIO_Init+0x21c>)
 8000db0:	f002 fa64 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <MX_GPIO_Init+0x214>)
 8000dca:	f002 fa57 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	480e      	ldr	r0, [pc, #56]	; (8000e20 <MX_GPIO_Init+0x214>)
 8000de8:	f002 fa48 	bl	800327c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_GPIO_Init+0x218>)
 8000e06:	f002 fa39 	bl	800327c <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3738      	adds	r7, #56	; 0x38
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020000 	.word	0x40020000
 8000e20:	40020c00 	.word	0x40020c00
 8000e24:	40021800 	.word	0x40021800
 8000e28:	40020400 	.word	0x40020400

08000e2c <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e34:	1d39      	adds	r1, r7, #4
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <__io_putchar+0x20>)
 8000e3e:	f006 f92a 	bl	8007096 <HAL_UART_Transmit>
	return ch;
 8000e42:	687b      	ldr	r3, [r7, #4]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	200002d8 	.word	0x200002d8

08000e50 <go_to_application>:

static void go_to_application (void){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000e56:	4809      	ldr	r0, [pc, #36]	; (8000e7c <go_to_application+0x2c>)
 8000e58:	f00a fa84 	bl	800b364 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (OTA_APP_FLASH_ADDR + 4));
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <go_to_application+0x30>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (OTA_APP_FLASH_ADDR)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <go_to_application+0x34>)
 8000e6a:	f002 fbb3 	bl	80035d4 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4798      	blx	r3
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	0800c1ac 	.word	0x0800c1ac
 8000e80:	08020004 	.word	0x08020004
 8000e84:	40021800 	.word	0x40021800

08000e88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e9a:	f001 fba1 	bl	80025e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40001000 	.word	0x40001000

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <go_to_ota_app>:
 * @param hurat uart handler receive ota
 * @param backup should back up?
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <go_to_ota_app+0x40>)
 8000ec2:	f00a fa4f 	bl	800b364 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f81e 	bl	8000f08 <ota_download_and_flash>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000ed2:	480a      	ldr	r0, [pc, #40]	; (8000efc <go_to_ota_app+0x44>)
 8000ed4:	f00a fa46 	bl	800b364 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ede:	4808      	ldr	r0, [pc, #32]	; (8000f00 <go_to_ota_app+0x48>)
 8000ee0:	f002 fb78 	bl	80035d4 <HAL_GPIO_WritePin>
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_NVIC_SystemReset();
    }
}
 8000ee4:	e004      	b.n	8000ef0 <go_to_ota_app+0x38>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <go_to_ota_app+0x4c>)
 8000ee8:	f00a fa3c 	bl	800b364 <puts>
      HAL_NVIC_SystemReset();
 8000eec:	f001 fcb5 	bl	800285a <HAL_NVIC_SystemReset>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	0800c1cc 	.word	0x0800c1cc
 8000efc:	0800c1ec 	.word	0x0800c1ec
 8000f00:	40021800 	.word	0x40021800
 8000f04:	0800c20c 	.word	0x0800c20c

08000f08 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <ota_download_and_flash+0x90>)
 8000f16:	f00a fa25 	bl	800b364 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <ota_download_and_flash+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <ota_download_and_flash+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <ota_download_and_flash+0x9c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <ota_download_and_flash+0xa0>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8000f32:	f240 4209 	movw	r2, #1033	; 0x409
 8000f36:	2100      	movs	r1, #0
 8000f38:	481c      	ldr	r0, [pc, #112]	; (8000fac <ota_download_and_flash+0xa4>)
 8000f3a:	f00a f8a5 	bl	800b088 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8000f3e:	f240 4209 	movw	r2, #1033	; 0x409
 8000f42:	491a      	ldr	r1, [pc, #104]	; (8000fac <ota_download_and_flash+0xa4>)
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 f835 	bl	8000fb4 <ota_receive_chunk>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8000f4e:	89bb      	ldrh	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d007      	beq.n	8000f64 <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8000f54:	89bb      	ldrh	r3, [r7, #12]
 8000f56:	4619      	mov	r1, r3
 8000f58:	4814      	ldr	r0, [pc, #80]	; (8000fac <ota_download_and_flash+0xa4>)
 8000f5a:	f000 f90d 	bl	8001178 <ota_process_data>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e001      	b.n	8000f68 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8000f6e:	4810      	ldr	r0, [pc, #64]	; (8000fb0 <ota_download_and_flash+0xa8>)
 8000f70:	f00a f9f8 	bl	800b364 <puts>
			ota_send_resp(huart, OTA_NACK);
 8000f74:	2101      	movs	r1, #1
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 fd54 	bl	8001a24 <ota_send_resp>
			break;
 8000f7c:	e007      	b.n	8000f8e <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fd4f 	bl	8001a24 <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <ota_download_and_flash+0xa0>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1d1      	bne.n	8000f32 <ota_download_and_flash+0x2a>

	return ret;
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	0800c238 	.word	0x0800c238
 8000f9c:	20000354 	.word	0x20000354
 8000fa0:	2000035c 	.word	0x2000035c
 8000fa4:	20000358 	.word	0x20000358
 8000fa8:	20000350 	.word	0x20000350
 8000fac:	20000360 	.word	0x20000360
 8000fb0:	0800c254 	.word	0x0800c254

08000fb4 <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8000fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	18d1      	adds	r1, r2, r3
 8000fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd8:	2201      	movs	r2, #1
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f006 f8ed 	bl	80071ba <HAL_UART_Receive>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8000fe4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f040 809c 	bne.w	8001126 <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 8000fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2baa      	cmp	r3, #170	; 0xaa
 8000ffe:	f040 8094 	bne.w	800112a <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8001002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	84ba      	strh	r2, [r7, #36]	; 0x24
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1899      	adds	r1, r3, r2
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	2201      	movs	r2, #1
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f006 f8d0 	bl	80071ba <HAL_UART_Receive>
 800101a:	4603      	mov	r3, r0
 800101c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 800101e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001022:	2b00      	cmp	r3, #0
 8001024:	f040 8083 	bne.w	800112e <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8001028:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800102a:	68ba      	ldr	r2, [r7, #8]
 800102c:	18d1      	adds	r1, r2, r3
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2202      	movs	r2, #2
 8001034:	68f8      	ldr	r0, [r7, #12]
 8001036:	f006 f8c0 	bl	80071ba <HAL_UART_Receive>
 800103a:	4603      	mov	r3, r0
 800103c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 800103e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001042:	2b00      	cmp	r3, #0
 8001044:	d175      	bne.n	8001132 <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 8001046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	4413      	add	r3, r2
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 8001050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001052:	3302      	adds	r3, #2
 8001054:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 8001056:	2300      	movs	r3, #0
 8001058:	847b      	strh	r3, [r7, #34]	; 0x22
 800105a:	e014      	b.n	8001086 <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 800105c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	84ba      	strh	r2, [r7, #36]	; 0x24
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	1899      	adds	r1, r3, r2
 8001068:	f04f 33ff 	mov.w	r3, #4294967295
 800106c:	2201      	movs	r2, #1
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f006 f8a3 	bl	80071ba <HAL_UART_Receive>
 8001074:	4603      	mov	r3, r0
 8001076:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 8001078:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800107c:	2b00      	cmp	r3, #0
 800107e:	d107      	bne.n	8001090 <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 8001080:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001082:	3301      	adds	r3, #1
 8001084:	847b      	strh	r3, [r7, #34]	; 0x22
 8001086:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001088:	8afb      	ldrh	r3, [r7, #22]
 800108a:	429a      	cmp	r2, r3
 800108c:	d3e6      	bcc.n	800105c <ota_receive_chunk+0xa8>
 800108e:	e000      	b.n	8001092 <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 8001090:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 8001092:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001096:	2b00      	cmp	r3, #0
 8001098:	d14d      	bne.n	8001136 <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 800109a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	18d1      	adds	r1, r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	2204      	movs	r2, #4
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f006 f887 	bl	80071ba <HAL_UART_Receive>
 80010ac:	4603      	mov	r3, r0
 80010ae:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d140      	bne.n	800113a <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 80010b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
		index +=4u;
 80010c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c4:	3304      	adds	r3, #4
 80010c6:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 80010c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	18d1      	adds	r1, r2, r3
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2201      	movs	r2, #1
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f006 f870 	bl	80071ba <HAL_UART_Receive>
 80010da:	4603      	mov	r3, r0
 80010dc:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d12b      	bne.n	800113e <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 80010e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	84ba      	strh	r2, [r7, #36]	; 0x24
 80010ec:	461a      	mov	r2, r3
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	4413      	add	r3, r2
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2bbb      	cmp	r3, #187	; 0xbb
 80010f6:	d002      	beq.n	80010fe <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80010fc:	e020      	b.n	8001140 <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	3304      	adds	r3, #4
 8001102:	8afa      	ldrh	r2, [r7, #22]
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fcb8 	bl	8001a7c <ota_calcCRC>
 800110c:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	429a      	cmp	r2, r3
 8001114:	d014      	beq.n	8001140 <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	69f9      	ldr	r1, [r7, #28]
 800111a:	4815      	ldr	r0, [pc, #84]	; (8001170 <ota_receive_chunk+0x1bc>)
 800111c:	f00a f89c 	bl	800b258 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 8001120:	2301      	movs	r3, #1
 8001122:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 8001124:	e00c      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 8001126:	bf00      	nop
 8001128:	e00a      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 800112a:	bf00      	nop
 800112c:	e008      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 800112e:	bf00      	nop
 8001130:	e006      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 8001132:	bf00      	nop
 8001134:	e004      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 8001136:	bf00      	nop
 8001138:	e002      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 800113a:	bf00      	nop
 800113c:	e000      	b.n	8001140 <ota_receive_chunk+0x18c>
			break;
 800113e:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 8001140:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 8001148:	2300      	movs	r3, #0
 800114a:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 800114c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	429a      	cmp	r2, r3
 8001152:	d907      	bls.n	8001164 <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <ota_receive_chunk+0x1c0>)
 800115c:	f00a f87c 	bl	800b258 <iprintf>
															  	  max_len, index );
		index = 0u;
 8001160:	2300      	movs	r3, #0
 8001162:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 8001164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 8001166:	4618      	mov	r0, r3
 8001168:	3728      	adds	r7, #40	; 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	0800c264 	.word	0x0800c264
 8001174:	0800c2a4 	.word	0x0800c2a4

08001178 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b097      	sub	sp, #92	; 0x5c
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		if( (buf== NULL) || (len == 0u))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 8151 	beq.w	8001434 <ota_process_data+0x2bc>
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 814d 	beq.w	8001434 <ota_process_data+0x2bc>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	653b      	str	r3, [r7, #80]	; 0x50
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 800119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011a0:	785b      	ldrb	r3, [r3, #1]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 80011a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011a8:	791b      	ldrb	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	f000 8144 	beq.w	8001438 <ota_process_data+0x2c0>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 80011b0:	4bab      	ldr	r3, [pc, #684]	; (8001460 <ota_process_data+0x2e8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b04      	cmp	r3, #4
 80011b6:	f200 8139 	bhi.w	800142c <ota_process_data+0x2b4>
 80011ba:	a201      	add	r2, pc, #4	; (adr r2, 80011c0 <ota_process_data+0x48>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011d5 	.word	0x080011d5
 80011c4:	080011e3 	.word	0x080011e3
 80011c8:	0800120f 	.word	0x0800120f
 80011cc:	0800124b 	.word	0x0800124b
 80011d0:	08001379 	.word	0x08001379
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 80011d4:	48a3      	ldr	r0, [pc, #652]	; (8001464 <ota_process_data+0x2ec>)
 80011d6:	f00a f8c5 	bl	800b364 <puts>
				ret = OTA_EX_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80011e0:	e137      	b.n	8001452 <ota_process_data+0x2da>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	63bb      	str	r3, [r7, #56]	; 0x38
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80011e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f040 8126 	bne.w	800143c <ota_process_data+0x2c4>
				{
					if( cmd->cmd == OTA_CMD_START)
 80011f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f2:	791b      	ldrb	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f040 8121 	bne.w	800143c <ota_process_data+0x2c4>
					{
						printf("Received OTA Start command\r\n");
 80011fa:	489b      	ldr	r0, [pc, #620]	; (8001468 <ota_process_data+0x2f0>)
 80011fc:	f00a f8b2 	bl	800b364 <puts>
						ota_state = OTA_STATE_HEADER;
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <ota_process_data+0x2e8>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 800120c:	e116      	b.n	800143c <ota_process_data+0x2c4>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	63fb      	str	r3, [r7, #60]	; 0x3c

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 8001212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001214:	785b      	ldrb	r3, [r3, #1]
 8001216:	2b02      	cmp	r3, #2
 8001218:	f040 8112 	bne.w	8001440 <ota_process_data+0x2c8>
				{
					ota_fw_total_size = header->meta_data.package_size;
 800121c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a92      	ldr	r2, [pc, #584]	; (800146c <ota_process_data+0x2f4>)
 8001222:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 8001224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a91      	ldr	r2, [pc, #580]	; (8001470 <ota_process_data+0x2f8>)
 800122a:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 800122c:	4b8f      	ldr	r3, [pc, #572]	; (800146c <ota_process_data+0x2f4>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a8f      	ldr	r2, [pc, #572]	; (8001470 <ota_process_data+0x2f8>)
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	488f      	ldr	r0, [pc, #572]	; (8001474 <ota_process_data+0x2fc>)
 8001238:	f00a f80e 	bl	800b258 <iprintf>
													ota_fw_total_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 800123c:	4b88      	ldr	r3, [pc, #544]	; (8001460 <ota_process_data+0x2e8>)
 800123e:	2203      	movs	r2, #3
 8001240:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				}
			}
			break;
 8001248:	e0fa      	b.n	8001440 <ota_process_data+0x2c8>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	647b      	str	r3, [r7, #68]	; 0x44
				uint16_t			data_len = data->data_len;
 800124e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001250:	789a      	ldrb	r2, [r3, #2]
 8001252:	78db      	ldrb	r3, [r3, #3]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	4313      	orrs	r3, r2
 8001258:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 8001262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	2b01      	cmp	r3, #1
 8001268:	f040 80ec 	bne.w	8001444 <ota_process_data+0x2cc>

					bool is_first_block = false;
 800126c:	2300      	movs	r3, #0
 800126e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

					if( ota_fw_received_size == 0){
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <ota_process_data+0x300>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d157      	bne.n	800132a <ota_process_data+0x1b2>
						// This is the first block
						is_first_block = true;
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

						/* Read the configuration */
						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8001280:	4b7e      	ldr	r3, [pc, #504]	; (800147c <ota_process_data+0x304>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	461c      	mov	r4, r3
 8001286:	f107 0608 	add.w	r6, r7, #8
 800128a:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800128e:	4635      	mov	r5, r6
 8001290:	4623      	mov	r3, r4
 8001292:	6818      	ldr	r0, [r3, #0]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129c:	3410      	adds	r4, #16
 800129e:	3610      	adds	r6, #16
 80012a0:	4564      	cmp	r4, ip
 80012a2:	d1f4      	bne.n	800128e <ota_process_data+0x116>

						cfg.backup_table.is_this_slot_not_valid = 1u;
 80012a4:	2301      	movs	r3, #1
 80012a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						cfg.backup_table.is_this_slot_active 	= 0u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						/* write back the updated config */
			            ret = write_cfg_to_flash( &cfg );
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f979 	bl	80015ac <write_cfg_to_flash>
 80012ba:	4603      	mov	r3, r0
 80012bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 80012c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 80bf 	bne.w	8001448 <ota_process_data+0x2d0>
			            {
			              break;
			            }

						if( cfg.reboot_cause == OTA_UPDATE_APP)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 80012d0:	d112      	bne.n	80012f8 <ota_process_data+0x180>
						{
							printf("Backing up from previous FW version\r\n");
 80012d2:	486b      	ldr	r0, [pc, #428]	; (8001480 <ota_process_data+0x308>)
 80012d4:	f00a f846 	bl	800b364 <puts>
							ex = backup_old_version();
 80012d8:	f000 fa5e 	bl	8001798 <backup_old_version>
 80012dc:	4603      	mov	r3, r0
 80012de:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

							if (ex != HAL_OK){
 80012e2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <ota_process_data+0x17a>
								printf("Unsuccessful Backup \r\n");
 80012ea:	4866      	ldr	r0, [pc, #408]	; (8001484 <ota_process_data+0x30c>)
 80012ec:	f00a f83a 	bl	800b364 <puts>
								break;
 80012f0:	e0af      	b.n	8001452 <ota_process_data+0x2da>
							}
							printf("Done!!!\r\n");
 80012f2:	4865      	ldr	r0, [pc, #404]	; (8001488 <ota_process_data+0x310>)
 80012f4:	f00a f836 	bl	800b364 <puts>
						}

						cfg.backup_table.fw_crc 				= cfg.app_table.fw_crc;
 80012f8:	f8d7 3012 	ldr.w	r3, [r7, #18]
 80012fc:	62bb      	str	r3, [r7, #40]	; 0x28
						cfg.backup_table.fw_size				= cfg.app_table.fw_size;
 80012fe:	f8d7 300e 	ldr.w	r3, [r7, #14]
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
						cfg.backup_table.is_this_slot_active 	= 1u;
 8001304:	2301      	movs	r3, #1
 8001306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						cfg.backup_table.is_this_slot_not_valid = 0u;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* write back the updated configuration */
			            ret = write_cfg_to_flash( &cfg );
 8001310:	f107 0308 	add.w	r3, r7, #8
 8001314:	4618      	mov	r0, r3
 8001316:	f000 f949 	bl	80015ac <write_cfg_to_flash>
 800131a:	4603      	mov	r3, r0
 800131c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 8001320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001324:	2b00      	cmp	r3, #0
 8001326:	f040 8091 	bne.w	800144c <ota_process_data+0x2d4>
			            }

					}

					/* Write the chunk to the Flash */
					ex = write_data_to_flash(buf+4, data_len, is_first_block);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3304      	adds	r3, #4
 800132e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001332:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f8b4 	bl	80014a4 <write_data_to_flash>
 800133c:	4603      	mov	r3, r0
 800133e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					if( ex == HAL_OK)
 8001342:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001346:	2b00      	cmp	r3, #0
 8001348:	d17c      	bne.n	8001444 <ota_process_data+0x2cc>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 800134a:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <ota_process_data+0x300>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	0a99      	lsrs	r1, r3, #10
 8001350:	4b46      	ldr	r3, [pc, #280]	; (800146c <ota_process_data+0x2f4>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	0a9b      	lsrs	r3, r3, #10
 8001356:	461a      	mov	r2, r3
 8001358:	484c      	ldr	r0, [pc, #304]	; (800148c <ota_process_data+0x314>)
 800135a:	f009 ff7d 	bl	800b258 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 800135e:	4b46      	ldr	r3, [pc, #280]	; (8001478 <ota_process_data+0x300>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <ota_process_data+0x2f4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d302      	bcc.n	8001370 <ota_process_data+0x1f8>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 800136a:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <ota_process_data+0x2e8>)
 800136c:	2204      	movs	r2, #4
 800136e:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 8001376:	e065      	b.n	8001444 <ota_process_data+0x2cc>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	64fb      	str	r3, [r7, #76]	; 0x4c

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 800137c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137e:	785b      	ldrb	r3, [r3, #1]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d165      	bne.n	8001450 <ota_process_data+0x2d8>
				{
					if( cmd->cmd )
 8001384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001386:	791b      	ldrb	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d061      	beq.n	8001450 <ota_process_data+0x2d8>
					{
						printf("Received OTA END COMMAND\r\n");
 800138c:	4840      	ldr	r0, [pc, #256]	; (8001490 <ota_process_data+0x318>)
 800138e:	f009 ffe9 	bl	800b364 <puts>

						printf("Validating the received Binary....\r\n");
 8001392:	4840      	ldr	r0, [pc, #256]	; (8001494 <ota_process_data+0x31c>)
 8001394:	f009 ffe6 	bl	800b364 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_APP_FLASH_ADDR
 8001398:	4b34      	ldr	r3, [pc, #208]	; (800146c <ota_process_data+0x2f4>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	483e      	ldr	r0, [pc, #248]	; (8001498 <ota_process_data+0x320>)
 80013a0:	f000 fb6c 	bl	8001a7c <ota_calcCRC>
 80013a4:	64b8      	str	r0, [r7, #72]	; 0x48
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <ota_process_data+0x2f8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d007      	beq.n	80013c0 <ota_process_data+0x248>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 80013b0:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <ota_process_data+0x2f8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80013b8:	4838      	ldr	r0, [pc, #224]	; (800149c <ota_process_data+0x324>)
 80013ba:	f009 ff4d 	bl	800b258 <iprintf>
 80013be:	e048      	b.n	8001452 <ota_process_data+0x2da>
																			cal_crc, ota_fw_crc);
							break;
						}

						printf("Validated Successfully!\r\n");
 80013c0:	4837      	ldr	r0, [pc, #220]	; (80014a0 <ota_process_data+0x328>)
 80013c2:	f009 ffcf 	bl	800b364 <puts>


						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <ota_process_data+0x304>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	461c      	mov	r4, r3
 80013cc:	f107 0608 	add.w	r6, r7, #8
 80013d0:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013d4:	4635      	mov	r5, r6
 80013d6:	4623      	mov	r3, r4
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013e2:	3410      	adds	r4, #16
 80013e4:	3610      	adds	r6, #16
 80013e6:	4564      	cmp	r4, ip
 80013e8:	d1f4      	bne.n	80013d4 <ota_process_data+0x25c>

						// update information
						cfg.app_table.fw_crc					= cal_crc;
 80013ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ec:	f8c7 3012 	str.w	r3, [r7, #18]
						cfg.app_table.fw_size					= ota_fw_total_size;
 80013f0:	4b1e      	ldr	r3, [pc, #120]	; (800146c <ota_process_data+0x2f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8c7 300e 	str.w	r3, [r7, #14]
						cfg.app_table.is_this_slot_not_valid	= 0u;
 80013f8:	2300      	movs	r3, #0
 80013fa:	733b      	strb	r3, [r7, #12]
						cfg.app_table.is_this_slot_active		= 0u;
 80013fc:	2300      	movs	r3, #0
 80013fe:	737b      	strb	r3, [r7, #13]

						// update the reboot reason
						cfg.reboot_cause = OTA_NORMAL_BOOT;
 8001400:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 8001404:	60bb      	str	r3, [r7, #8]

						// Write config to flash
						ret = write_cfg_to_flash( &cfg );
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f8ce 	bl	80015ac <write_cfg_to_flash>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if( ret == OTA_EX_OK )
 8001416:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800141a:	2b00      	cmp	r3, #0
 800141c:	d118      	bne.n	8001450 <ota_process_data+0x2d8>
						{
							ota_state = OTA_STATE_IDLE;
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <ota_process_data+0x2e8>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
							ret = OTA_EX_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						}
					}
				}
			}
			break;
 800142a:	e011      	b.n	8001450 <ota_process_data+0x2d8>

			default:
			{
				ret = OTA_EX_ERR;
 800142c:	2301      	movs	r3, #1
 800142e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8001432:	e00e      	b.n	8001452 <ota_process_data+0x2da>
		};
 8001434:	bf00      	nop
 8001436:	e00c      	b.n	8001452 <ota_process_data+0x2da>
				break;
 8001438:	bf00      	nop
 800143a:	e00a      	b.n	8001452 <ota_process_data+0x2da>
			break;
 800143c:	bf00      	nop
 800143e:	e008      	b.n	8001452 <ota_process_data+0x2da>
			break;
 8001440:	bf00      	nop
 8001442:	e006      	b.n	8001452 <ota_process_data+0x2da>
			break;
 8001444:	bf00      	nop
 8001446:	e004      	b.n	8001452 <ota_process_data+0x2da>
			              break;
 8001448:	bf00      	nop
 800144a:	e002      	b.n	8001452 <ota_process_data+0x2da>
			              break;
 800144c:	bf00      	nop
 800144e:	e000      	b.n	8001452 <ota_process_data+0x2da>
			break;
 8001450:	bf00      	nop
	}while(false);

	return ret;
 8001452:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001456:	4618      	mov	r0, r3
 8001458:	375c      	adds	r7, #92	; 0x5c
 800145a:	46bd      	mov	sp, r7
 800145c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000350 	.word	0x20000350
 8001464:	0800c2e8 	.word	0x0800c2e8
 8001468:	0800c2fc 	.word	0x0800c2fc
 800146c:	20000354 	.word	0x20000354
 8001470:	20000358 	.word	0x20000358
 8001474:	0800c318 	.word	0x0800c318
 8001478:	2000035c 	.word	0x2000035c
 800147c:	20000000 	.word	0x20000000
 8001480:	0800c354 	.word	0x0800c354
 8001484:	0800c37c 	.word	0x0800c37c
 8001488:	0800c394 	.word	0x0800c394
 800148c:	0800c3a0 	.word	0x0800c3a0
 8001490:	0800c3ac 	.word	0x0800c3ac
 8001494:	0800c3c8 	.word	0x0800c3c8
 8001498:	08020000 	.word	0x08020000
 800149c:	0800c3ec 	.word	0x0800c3ec
 80014a0:	0800c430 	.word	0x0800c430

080014a4 <write_data_to_flash>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_flash(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	b08e      	sub	sp, #56	; 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	4613      	mov	r3, r2
 80014b0:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 80014b8:	f001 fc2e 	bl	8002d18 <HAL_FLASH_Unlock>
 80014bc:	4603      	mov	r3, r0
 80014be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 80014c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d15d      	bne.n	8001586 <write_data_to_flash+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d01f      	beq.n	8001510 <write_data_to_flash+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 80014d0:	4831      	ldr	r0, [pc, #196]	; (8001598 <write_data_to_flash+0xf4>)
 80014d2:	f009 ff47 	bl	800b364 <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_APP_SECTOR;
 80014da:	2305      	movs	r3, #5
 80014dc:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_APP_NB_SECTOR;
 80014de:	2307      	movs	r3, #7
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80014e6:	f107 0214 	add.w	r2, r7, #20
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fd83 	bl	8002ffc <HAL_FLASHEx_Erase>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 80014fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <write_data_to_flash+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	4619      	mov	r1, r3
 8001508:	4824      	ldr	r0, [pc, #144]	; (800159c <write_data_to_flash+0xf8>)
 800150a:	f009 fea5 	bl	800b258 <iprintf>
 800150e:	e03d      	b.n	800158c <write_data_to_flash+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_APP_FLASH_ADDR;
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <write_data_to_flash+0xfc>)
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	; 0x30
 8001518:	e024      	b.n	8001564 <write_data_to_flash+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <write_data_to_flash+0x100>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2200      	movs	r2, #0
 800152e:	461c      	mov	r4, r3
 8001530:	4615      	mov	r5, r2
 8001532:	4622      	mov	r2, r4
 8001534:	462b      	mov	r3, r5
 8001536:	2000      	movs	r0, #0
 8001538:	f001 fb9a 	bl	8002c70 <HAL_FLASH_Program>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 8001542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <write_data_to_flash+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 800154a:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <write_data_to_flash+0x100>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	3301      	adds	r3, #1
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <write_data_to_flash+0x100>)
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e003      	b.n	800155e <write_data_to_flash+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <write_data_to_flash+0x104>)
 8001558:	f009 ff04 	bl	800b364 <puts>
				break;
 800155c:	e006      	b.n	800156c <write_data_to_flash+0xc8>
		for( int i = 0; i < data_len; i++)
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	3301      	adds	r3, #1
 8001562:	633b      	str	r3, [r7, #48]	; 0x30
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8d6      	bhi.n	800151a <write_data_to_flash+0x76>
			}
		}

		if( ret != HAL_OK )
 800156c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10a      	bne.n	800158a <write_data_to_flash+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 8001574:	f001 fbf2 	bl	8002d5c <HAL_FLASH_Lock>
 8001578:	4603      	mov	r3, r0
 800157a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 800157e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001582:	2b00      	cmp	r3, #0
 8001584:	e002      	b.n	800158c <write_data_to_flash+0xe8>
			break;
 8001586:	bf00      	nop
 8001588:	e000      	b.n	800158c <write_data_to_flash+0xe8>
			break;
 800158a:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 800158c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001590:	4618      	mov	r0, r3
 8001592:	3738      	adds	r7, #56	; 0x38
 8001594:	46bd      	mov	sp, r7
 8001596:	bdb0      	pop	{r4, r5, r7, pc}
 8001598:	0800c44c 	.word	0x0800c44c
 800159c:	0800c470 	.word	0x0800c470
 80015a0:	08020000 	.word	0x08020000
 80015a4:	2000035c 	.word	0x2000035c
 80015a8:	0800c498 	.word	0x0800c498

080015ac <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 80015ac:	b5b0      	push	{r4, r5, r7, lr}
 80015ae:	b08c      	sub	sp, #48	; 0x30
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d05f      	beq.n	8001680 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 80015c0:	f001 fbaa 	bl	8002d18 <HAL_FLASH_Unlock>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d158      	bne.n	8001684 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295
 80015d6:	f001 fbd1 	bl	8002d7c <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 80015de:	2304      	movs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015ea:	4b2c      	ldr	r3, [pc, #176]	; (800169c <write_cfg_to_flash+0xf0>)
 80015ec:	2273      	movs	r2, #115	; 0x73
 80015ee:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80015f0:	f107 020c 	add.w	r2, r7, #12
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 fcfe 	bl	8002ffc <HAL_FLASHEx_Erase>
 8001600:	4603      	mov	r3, r0
 8001602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 8001606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800160a:	2b00      	cmp	r3, #0
 800160c:	d13c      	bne.n	8001688 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 8001612:	2300      	movs	r3, #0
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
 8001616:	e01f      	b.n	8001658 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161a:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800161e:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	4413      	add	r3, r2
 8001628:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2200      	movs	r2, #0
 800162e:	461c      	mov	r4, r3
 8001630:	4615      	mov	r5, r2
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	2000      	movs	r0, #0
 8001638:	f001 fb1a 	bl	8002c70 <HAL_FLASH_Program>
 800163c:	4603      	mov	r3, r0
 800163e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 8001642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 800164a:	4815      	ldr	r0, [pc, #84]	; (80016a0 <write_cfg_to_flash+0xf4>)
 800164c:	f009 fe8a 	bl	800b364 <puts>
				break;
 8001650:	e005      	b.n	800165e <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	3301      	adds	r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	2b2f      	cmp	r3, #47	; 0x2f
 800165c:	d9dc      	bls.n	8001618 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800165e:	f04f 30ff 	mov.w	r0, #4294967295
 8001662:	f001 fb8b 	bl	8002d7c <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10e      	bne.n	800168c <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 800166e:	f001 fb75 	bl	8002d5c <HAL_FLASH_Lock>
 8001672:	4603      	mov	r3, r0
 8001674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8001678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800167c:	2b00      	cmp	r3, #0
 800167e:	e006      	b.n	800168e <write_cfg_to_flash+0xe2>
			break;
 8001680:	bf00      	nop
 8001682:	e004      	b.n	800168e <write_cfg_to_flash+0xe2>
			break;
 8001684:	bf00      	nop
 8001686:	e002      	b.n	800168e <write_cfg_to_flash+0xe2>
			break;
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <write_cfg_to_flash+0xe2>
	      break;
 800168c:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 800168e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001692:	4618      	mov	r0, r3
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00
 80016a0:	0800c4ac 	.word	0x0800c4ac

080016a4 <app_validation>:
 * @brief Validate Current APP in APP SLOT
 * @param none
 * @retval none
 */
void app_validation()
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b091      	sub	sp, #68	; 0x44
 80016a8:	af00      	add	r7, sp, #0
	bool is_app_updated = false;
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_StatusTypeDef ret;

	/* read configuration */
	OTA_GNRL_CFG_ cfg;
	memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80016b0:	4b32      	ldr	r3, [pc, #200]	; (800177c <app_validation+0xd8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	461c      	mov	r4, r3
 80016b6:	1d3e      	adds	r6, r7, #4
 80016b8:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80016bc:	4635      	mov	r5, r6
 80016be:	4623      	mov	r3, r4
 80016c0:	6818      	ldr	r0, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016ca:	3410      	adds	r4, #16
 80016cc:	3610      	adds	r6, #16
 80016ce:	4564      	cmp	r4, ip
 80016d0:	d1f4      	bne.n	80016bc <app_validation+0x18>

	if(cfg.app_table.is_this_slot_active == 0)
 80016d2:	7a7b      	ldrb	r3, [r7, #9]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <app_validation+0x40>
	{
		printf("New Application found!\r\n");
 80016d8:	4829      	ldr	r0, [pc, #164]	; (8001780 <app_validation+0xdc>)
 80016da:	f009 fe43 	bl	800b364 <puts>
		is_app_updated = true;
 80016de:	2301      	movs	r3, #1
 80016e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Validating
	printf("Validating...\r\n");
 80016e4:	4827      	ldr	r0, [pc, #156]	; (8001784 <app_validation+0xe0>)
 80016e6:	f009 fe3d 	bl	800b364 <puts>

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80016ea:	f04f 30ff 	mov.w	r0, #4294967295
 80016ee:	f001 fb45 	bl	8002d7c <FLASH_WaitForLastOperation>

	// Check CRC
	uint32_t cal_data_crc = ota_calcCRC((uint8_t *)OTA_APP_FLASH_ADDR, cfg.app_table.fw_size);
 80016f2:	f8d7 300a 	ldr.w	r3, [r7, #10]
 80016f6:	4619      	mov	r1, r3
 80016f8:	4823      	ldr	r0, [pc, #140]	; (8001788 <app_validation+0xe4>)
 80016fa:	f000 f9bf 	bl	8001a7c <ota_calcCRC>
 80016fe:	63b8      	str	r0, [r7, #56]	; 0x38

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f001 fb3a 	bl	8002d7c <FLASH_WaitForLastOperation>

	// Verify the CRC
	if( cal_data_crc != cfg.app_table.fw_crc)
 8001708:	f8d7 300e 	ldr.w	r3, [r7, #14]
 800170c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800170e:	429a      	cmp	r2, r3
 8001710:	d017      	beq.n	8001742 <app_validation+0x9e>
	{
		printf("CRC Mismatch!!! calc_crc = [0x%08lx], rec_crc = [0x%08lx]\r\nHALT...\r\n",
 8001712:	f8d7 300e 	ldr.w	r3, [r7, #14]
 8001716:	461a      	mov	r2, r3
 8001718:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800171a:	481c      	ldr	r0, [pc, #112]	; (800178c <app_validation+0xe8>)
 800171c:	f009 fd9c 	bl	800b258 <iprintf>
										cal_data_crc, cfg.app_table.fw_crc);

		cfg.app_table.is_this_slot_not_valid = 1u;
 8001720:	2301      	movs	r3, #1
 8001722:	723b      	strb	r3, [r7, #8]
		ret = write_cfg_to_flash( &cfg );
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff40 	bl	80015ac <write_cfg_to_flash>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001732:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <app_validation+0x9c>
		{
			printf("Configuration Flash write Error\r\n");
 800173a:	4815      	ldr	r0, [pc, #84]	; (8001790 <app_validation+0xec>)
 800173c:	f009 fe12 	bl	800b364 <puts>
		}

		// TODO: Restore previous APP if APP Updated
		// At this time:
		while(1); //HALT
 8001740:	e7fe      	b.n	8001740 <app_validation+0x9c>
	}
	printf("Validation DONE!!!\r\n");
 8001742:	4814      	ldr	r0, [pc, #80]	; (8001794 <app_validation+0xf0>)
 8001744:	f009 fe0e 	bl	800b364 <puts>

	if( is_app_updated ){
 8001748:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800174c:	2b00      	cmp	r3, #0
 800174e:	d011      	beq.n	8001774 <app_validation+0xd0>
		cfg.app_table.is_this_slot_active = 1u;
 8001750:	2301      	movs	r3, #1
 8001752:	727b      	strb	r3, [r7, #9]
		cfg.app_table.is_this_slot_not_valid = 0u;
 8001754:	2300      	movs	r3, #0
 8001756:	723b      	strb	r3, [r7, #8]

		ret = write_cfg_to_flash( &cfg );
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff26 	bl	80015ac <write_cfg_to_flash>
 8001760:	4603      	mov	r3, r0
 8001762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001766:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <app_validation+0xd0>
		{
			printf("Configuration Flash write Error\r\n");
 800176e:	4808      	ldr	r0, [pc, #32]	; (8001790 <app_validation+0xec>)
 8001770:	f009 fdf8 	bl	800b364 <puts>
		}

	}

}
 8001774:	bf00      	nop
 8001776:	3744      	adds	r7, #68	; 0x44
 8001778:	46bd      	mov	sp, r7
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	0800c4cc 	.word	0x0800c4cc
 8001784:	0800c4e4 	.word	0x0800c4e4
 8001788:	08020000 	.word	0x08020000
 800178c:	0800c4f4 	.word	0x0800c4f4
 8001790:	0800c53c 	.word	0x0800c53c
 8001794:	0800c560 	.word	0x0800c560

08001798 <backup_old_version>:
 * @brief backup current APP slot to backup Slot
 * @param none
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef backup_old_version()
{
 8001798:	b5b0      	push	{r4, r5, r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		ret = HAL_FLASH_Unlock();
 80017a4:	f001 fab8 	bl	8002d18 <HAL_FLASH_Unlock>
 80017a8:	4603      	mov	r3, r0
 80017aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80017ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d159      	bne.n	800186a <backup_old_version+0xd2>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80017b6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ba:	f001 fadf 	bl	8002d7c <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
		EraseInitStruct.Sector			= OTA_SLOT_SECTOR;
 80017c2:	2311      	movs	r3, #17
 80017c4:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.NbSectors		= OTA_SLOT_NB_SECTOR;
 80017c6:	2307      	movs	r3, #7
 80017c8:	613b      	str	r3, [r7, #16]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <backup_old_version+0xe8>)
 80017d0:	2273      	movs	r2, #115	; 0x73
 80017d2:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80017d4:	463a      	mov	r2, r7
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fc0e 	bl	8002ffc <HAL_FLASHEx_Erase>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80017e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13f      	bne.n	800186e <backup_old_version+0xd6>
		{
			break;
		}

		// Write the old app
		OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <backup_old_version+0xec>)
 80017f0:	61fb      	str	r3, [r7, #28]
		uint8_t *data = (uint8_t *) OTA_APP_FLASH_ADDR;
 80017f2:	4b25      	ldr	r3, [pc, #148]	; (8001888 <backup_old_version+0xf0>)
 80017f4:	61bb      	str	r3, [r7, #24]
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
 80017fa:	e01f      	b.n	800183c <backup_old_version+0xa4>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	f103 6101 	add.w	r1, r3, #135266304	; 0x8100000
 8001802:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_SLOT_FLASH_ADDR + i,
									data[i]);
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800180e:	b2db      	uxtb	r3, r3
 8001810:	2200      	movs	r2, #0
 8001812:	461c      	mov	r4, r3
 8001814:	4615      	mov	r5, r2
 8001816:	4622      	mov	r2, r4
 8001818:	462b      	mov	r3, r5
 800181a:	2000      	movs	r0, #0
 800181c:	f001 fa28 	bl	8002c70 <HAL_FLASH_Program>
 8001820:	4603      	mov	r3, r0
 8001822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( ret != HAL_OK )
 8001826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800182a:	2b00      	cmp	r3, #0
 800182c:	d003      	beq.n	8001836 <backup_old_version+0x9e>
			{
				printf("Slot Flash Write Error\r\n");
 800182e:	4817      	ldr	r0, [pc, #92]	; (800188c <backup_old_version+0xf4>)
 8001830:	f009 fd98 	bl	800b364 <puts>
				break;
 8001834:	e008      	b.n	8001848 <backup_old_version+0xb0>
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	3301      	adds	r3, #1
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001842:	6a3a      	ldr	r2, [r7, #32]
 8001844:	429a      	cmp	r2, r3
 8001846:	d3d9      	bcc.n	80017fc <backup_old_version+0x64>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f001 fa96 	bl	8002d7c <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <backup_old_version+0xda>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8001858:	f001 fa80 	bl	8002d5c <HAL_FLASH_Lock>
 800185c:	4603      	mov	r3, r0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    if( ret != HAL_OK )
 8001862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001866:	2b00      	cmp	r3, #0
 8001868:	e004      	b.n	8001874 <backup_old_version+0xdc>
			break;
 800186a:	bf00      	nop
 800186c:	e002      	b.n	8001874 <backup_old_version+0xdc>
			break;
 800186e:	bf00      	nop
 8001870:	e000      	b.n	8001874 <backup_old_version+0xdc>
	      break;
 8001872:	bf00      	nop
	    }


	}while(false);

	return ret;
 8001874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001878:	4618      	mov	r0, r3
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	40023c00 	.word	0x40023c00
 8001884:	08010000 	.word	0x08010000
 8001888:	08020000 	.word	0x08020000
 800188c:	0800c574 	.word	0x0800c574

08001890 <restore_old_version>:
/**
 * @brief Restore APP in backup slot
 */

HAL_StatusTypeDef restore_old_version()
{
 8001890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001894:	b097      	sub	sp, #92	; 0x5c
 8001896:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		OTA_GNRL_CFG_ cfg;
		memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 800189e:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <restore_old_version+0x174>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	461c      	mov	r4, r3
 80018a4:	463e      	mov	r6, r7
 80018a6:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80018aa:	4635      	mov	r5, r6
 80018ac:	4623      	mov	r3, r4
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	6859      	ldr	r1, [r3, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018b8:	3410      	adds	r4, #16
 80018ba:	3610      	adds	r6, #16
 80018bc:	4564      	cmp	r4, ip
 80018be:	d1f4      	bne.n	80018aa <restore_old_version+0x1a>

		if(cfg.app_table.is_this_slot_active != 1u)
 80018c0:	797b      	ldrb	r3, [r7, #5]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d003      	beq.n	80018ce <restore_old_version+0x3e>
		{
			printf("No backup FW found\r\n");
 80018c6:	4850      	ldr	r0, [pc, #320]	; (8001a08 <restore_old_version+0x178>)
 80018c8:	f009 fd4c 	bl	800b364 <puts>
			break;
 80018cc:	e093      	b.n	80019f6 <restore_old_version+0x166>
		}

		//Validate Backup
		printf("Validation DONE!!!\r\n");
 80018ce:	484f      	ldr	r0, [pc, #316]	; (8001a0c <restore_old_version+0x17c>)
 80018d0:	f009 fd48 	bl	800b364 <puts>
		uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_SLOT_FLASH_ADDR,
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4619      	mov	r1, r3
 80018d8:	484d      	ldr	r0, [pc, #308]	; (8001a10 <restore_old_version+0x180>)
 80018da:	f000 f8cf 	bl	8001a7c <ota_calcCRC>
 80018de:	64f8      	str	r0, [r7, #76]	; 0x4c
				 	 	 	 	 	 	 	 	 cfg.backup_table.fw_size);

		if( cal_crc != cfg.backup_table.fw_crc)
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d006      	beq.n	80018f6 <restore_old_version+0x66>
		{
			printf("CRC Mismatch!!! cal_crc = [0x%08lx], rec_CRC = [0x%08lx]\r\n",
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	461a      	mov	r2, r3
 80018ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80018ee:	4849      	ldr	r0, [pc, #292]	; (8001a14 <restore_old_version+0x184>)
 80018f0:	f009 fcb2 	bl	800b258 <iprintf>
												cal_crc,
												cfg.backup_table.fw_size);
			break;
 80018f4:	e07f      	b.n	80019f6 <restore_old_version+0x166>
		}

		printf("Validation DONE!!!\r\nRestore...\r\n");
 80018f6:	4848      	ldr	r0, [pc, #288]	; (8001a18 <restore_old_version+0x188>)
 80018f8:	f009 fd34 	bl	800b364 <puts>

		ret = HAL_FLASH_Unlock();
 80018fc:	f001 fa0c 	bl	8002d18 <HAL_FLASH_Unlock>
 8001900:	4603      	mov	r3, r0
 8001902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if( ret != HAL_OK )
 8001906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800190a:	2b00      	cmp	r3, #0
 800190c:	d16c      	bne.n	80019e8 <restore_old_version+0x158>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 800190e:	f04f 30ff 	mov.w	r0, #4294967295
 8001912:	f001 fa33 	bl	8002d7c <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8001916:	2300      	movs	r3, #0
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
		EraseInitStruct.Sector			= OTA_APP_SECTOR;
 800191a:	2305      	movs	r3, #5
 800191c:	63fb      	str	r3, [r7, #60]	; 0x3c
		EraseInitStruct.NbSectors		= OTA_APP_NB_SECTOR;
 800191e:	2307      	movs	r3, #7
 8001920:	643b      	str	r3, [r7, #64]	; 0x40
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 8001922:	2302      	movs	r3, #2
 8001924:	647b      	str	r3, [r7, #68]	; 0x44

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 8001926:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <restore_old_version+0x18c>)
 8001928:	2273      	movs	r2, #115	; 0x73
 800192a:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 800192c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f001 fb60 	bl	8002ffc <HAL_FLASHEx_Erase>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if( ret != HAL_OK )
 8001942:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001946:	2b00      	cmp	r3, #0
 8001948:	d150      	bne.n	80019ec <restore_old_version+0x15c>
		{
			break;
		}

		// Write the old app
		uint8_t *data = (uint8_t *) OTA_SLOT_FLASH_ADDR;
 800194a:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <restore_old_version+0x180>)
 800194c:	64bb      	str	r3, [r7, #72]	; 0x48
		for( uint32_t i = 0u; i<cfg.backup_table.fw_size; i++ )
 800194e:	2300      	movs	r3, #0
 8001950:	653b      	str	r3, [r7, #80]	; 0x50
 8001952:	e01f      	b.n	8001994 <restore_old_version+0x104>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001956:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 800195a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_APP_FLASH_ADDR + i,
									data[i]);
 800195e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2200      	movs	r2, #0
 800196a:	4698      	mov	r8, r3
 800196c:	4691      	mov	r9, r2
 800196e:	4642      	mov	r2, r8
 8001970:	464b      	mov	r3, r9
 8001972:	2000      	movs	r0, #0
 8001974:	f001 f97c 	bl	8002c70 <HAL_FLASH_Program>
 8001978:	4603      	mov	r3, r0
 800197a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if( ret != HAL_OK )
 800197e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <restore_old_version+0xfe>
			{
				printf("APP Flash Write Error\r\n");
 8001986:	4826      	ldr	r0, [pc, #152]	; (8001a20 <restore_old_version+0x190>)
 8001988:	f009 fcec 	bl	800b364 <puts>
				break;
 800198c:	e006      	b.n	800199c <restore_old_version+0x10c>
		for( uint32_t i = 0u; i<cfg.backup_table.fw_size; i++ )
 800198e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001990:	3301      	adds	r3, #1
 8001992:	653b      	str	r3, [r7, #80]	; 0x50
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001998:	429a      	cmp	r2, r3
 800199a:	d3db      	bcc.n	8001954 <restore_old_version+0xc4>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f001 f9ec 	bl	8002d7c <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 80019a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d121      	bne.n	80019f0 <restore_old_version+0x160>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 80019ac:	f001 f9d6 	bl	8002d5c <HAL_FLASH_Lock>
 80019b0:	4603      	mov	r3, r0
 80019b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	    if( ret != HAL_OK )
 80019b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11a      	bne.n	80019f4 <restore_old_version+0x164>
	    }

	    // UPDATE APP Configuration

		// update information
		cfg.app_table.fw_crc					= cal_crc;
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c0:	f8c7 300a 	str.w	r3, [r7, #10]
		cfg.app_table.fw_size					= cfg.backup_table.fw_size;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f8c7 3006 	str.w	r3, [r7, #6]
		cfg.app_table.is_this_slot_not_valid	= 0u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	713b      	strb	r3, [r7, #4]
		cfg.app_table.is_this_slot_active		= 0u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	717b      	strb	r3, [r7, #5]

		// update the reboot reason
		cfg.reboot_cause = OTA_NORMAL_BOOT;
 80019d2:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 80019d6:	603b      	str	r3, [r7, #0]

		// Write configuration to flash
		ret = write_cfg_to_flash( &cfg );
 80019d8:	463b      	mov	r3, r7
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fde6 	bl	80015ac <write_cfg_to_flash>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80019e6:	e006      	b.n	80019f6 <restore_old_version+0x166>
			break;
 80019e8:	bf00      	nop
 80019ea:	e004      	b.n	80019f6 <restore_old_version+0x166>
			break;
 80019ec:	bf00      	nop
 80019ee:	e002      	b.n	80019f6 <restore_old_version+0x166>
	      break;
 80019f0:	bf00      	nop
 80019f2:	e000      	b.n	80019f6 <restore_old_version+0x166>
	      break;
 80019f4:	bf00      	nop

	}while(false);

	return ret;
 80019f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	375c      	adds	r7, #92	; 0x5c
 80019fe:	46bd      	mov	sp, r7
 8001a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a04:	20000000 	.word	0x20000000
 8001a08:	0800c58c 	.word	0x0800c58c
 8001a0c:	0800c560 	.word	0x0800c560
 8001a10:	08120000 	.word	0x08120000
 8001a14:	0800c5a0 	.word	0x0800c5a0
 8001a18:	0800c5dc 	.word	0x0800c5dc
 8001a1c:	40023c00 	.word	0x40023c00
 8001a20:	0800c5fc 	.word	0x0800c5fc

08001a24 <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	811a      	strh	r2, [r3, #8]
 8001a3c:	23aa      	movs	r3, #170	; 0xaa
 8001a3e:	733b      	strb	r3, [r7, #12]
 8001a40:	2303      	movs	r3, #3
 8001a42:	737b      	strb	r3, [r7, #13]
 8001a44:	2301      	movs	r3, #1
 8001a46:	81fb      	strh	r3, [r7, #14]
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	743b      	strb	r3, [r7, #16]
 8001a4c:	23bb      	movs	r3, #187	; 0xbb
 8001a4e:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	3304      	adds	r3, #4
 8001a56:	2101      	movs	r1, #1
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 f80f 	bl	8001a7c <ota_calcCRC>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 8001a64:	f107 010c 	add.w	r1, r7, #12
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	220a      	movs	r2, #10
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f005 fb11 	bl	8007096 <HAL_UART_Transmit>

}
 8001a74:	bf00      	nop
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e014      	b.n	8001abc <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	0e1b      	lsrs	r3, r3, #24
 8001a96:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	781a      	ldrb	r2, [r3, #0]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4053      	eors	r3, r2
 8001aa4:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	021a      	lsls	r2, r3, #8
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4909      	ldr	r1, [pc, #36]	; (8001ad4 <ota_calcCRC+0x58>)
 8001aae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ab2:	4053      	eors	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3e6      	bcc.n	8001a92 <ota_calcCRC+0x16>
    }
    return Checksum;
 8001ac4:	697b      	ldr	r3, [r7, #20]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	0800c618 	.word	0x0800c618

08001ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_MspInit+0x4c>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	; 0x44
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_CRC_MspInit+0x3c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10d      	bne.n	8001b56 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_CRC_MspInit+0x40>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_CRC_MspInit+0x40>)
 8001b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_CRC_MspInit+0x40>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023000 	.word	0x40023000
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <HAL_DMA2D_MspInit+0x48>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d115      	bne.n	8001baa <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <HAL_DMA2D_MspInit+0x4c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_DMA2D_MspInit+0x4c>)
 8001b88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_DMA2D_MspInit+0x4c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	205a      	movs	r0, #90	; 0x5a
 8001ba0:	f000 fe31 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ba4:	205a      	movs	r0, #90	; 0x5a
 8001ba6:	f000 fe4a 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	4002b000 	.word	0x4002b000
 8001bb8:	40023800 	.word	0x40023800

08001bbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <HAL_I2C_MspInit+0xc4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d14b      	bne.n	8001c76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	4a20      	ldr	r2, [pc, #128]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0a:	4b1e      	ldr	r3, [pc, #120]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c1c:	2312      	movs	r3, #18
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c20:	2301      	movs	r3, #1
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c2c:	f107 0314 	add.w	r3, r7, #20
 8001c30:	4619      	mov	r1, r3
 8001c32:	4815      	ldr	r0, [pc, #84]	; (8001c88 <HAL_I2C_MspInit+0xcc>)
 8001c34:	f001 fb22 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c3e:	2312      	movs	r3, #18
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	480d      	ldr	r0, [pc, #52]	; (8001c8c <HAL_I2C_MspInit+0xd0>)
 8001c56:	f001 fb11 	bl	800327c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_I2C_MspInit+0xc8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40005c00 	.word	0x40005c00
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020000 	.word	0x40020000

08001c90 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b09a      	sub	sp, #104	; 0x68
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	2230      	movs	r2, #48	; 0x30
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f009 f9e9 	bl	800b088 <memset>
  if(hltdc->Instance==LTDC)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a85      	ldr	r2, [pc, #532]	; (8001ed0 <HAL_LTDC_MspInit+0x240>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f040 8102 	bne.w	8001ec6 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001cc2:	2308      	movs	r3, #8
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8001cc6:	2331      	movs	r3, #49	; 0x31
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f004 fa92 	bl	8006200 <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001ce2:	f7ff f8e3 	bl	8000eac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a79      	ldr	r2, [pc, #484]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	6313      	str	r3, [r2, #48]	; 0x30
 8001d12:	4b70      	ldr	r3, [pc, #448]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	4b6c      	ldr	r3, [pc, #432]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	4a6b      	ldr	r2, [pc, #428]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2e:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]
 8001d3e:	4b65      	ldr	r3, [pc, #404]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a64      	ldr	r2, [pc, #400]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d44:	f043 0302 	orr.w	r3, r3, #2
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b62      	ldr	r3, [pc, #392]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b5b      	ldr	r3, [pc, #364]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a56      	ldr	r2, [pc, #344]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b54      	ldr	r3, [pc, #336]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	4b50      	ldr	r3, [pc, #320]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a4f      	ldr	r2, [pc, #316]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b4d      	ldr	r3, [pc, #308]	; (8001ed4 <HAL_LTDC_MspInit+0x244>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	60bb      	str	r3, [r7, #8]
 8001da8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001daa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dbc:	230e      	movs	r3, #14
 8001dbe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4844      	ldr	r0, [pc, #272]	; (8001ed8 <HAL_LTDC_MspInit+0x248>)
 8001dc8:	f001 fa58 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001dcc:	f641 0358 	movw	r3, #6232	; 0x1858
 8001dd0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dde:	230e      	movs	r3, #14
 8001de0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001de6:	4619      	mov	r1, r3
 8001de8:	483c      	ldr	r0, [pc, #240]	; (8001edc <HAL_LTDC_MspInit+0x24c>)
 8001dea:	f001 fa47 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001dee:	2303      	movs	r3, #3
 8001df0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dfe:	2309      	movs	r3, #9
 8001e00:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e06:	4619      	mov	r1, r3
 8001e08:	4835      	ldr	r0, [pc, #212]	; (8001ee0 <HAL_LTDC_MspInit+0x250>)
 8001e0a:	f001 fa37 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e0e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e12:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e20:	230e      	movs	r3, #14
 8001e22:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e28:	4619      	mov	r1, r3
 8001e2a:	482d      	ldr	r0, [pc, #180]	; (8001ee0 <HAL_LTDC_MspInit+0x250>)
 8001e2c:	f001 fa26 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e42:	230e      	movs	r3, #14
 8001e44:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4825      	ldr	r0, [pc, #148]	; (8001ee4 <HAL_LTDC_MspInit+0x254>)
 8001e4e:	f001 fa15 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001e52:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e56:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e64:	230e      	movs	r3, #14
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481e      	ldr	r0, [pc, #120]	; (8001ee8 <HAL_LTDC_MspInit+0x258>)
 8001e70:	f001 fa04 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001e74:	2348      	movs	r3, #72	; 0x48
 8001e76:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e84:	230e      	movs	r3, #14
 8001e86:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4817      	ldr	r0, [pc, #92]	; (8001eec <HAL_LTDC_MspInit+0x25c>)
 8001e90:	f001 f9f4 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e94:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e98:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eae:	4619      	mov	r1, r3
 8001eb0:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <HAL_LTDC_MspInit+0x254>)
 8001eb2:	f001 f9e3 	bl	800327c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2105      	movs	r1, #5
 8001eba:	2058      	movs	r0, #88	; 0x58
 8001ebc:	f000 fca3 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001ec0:	2058      	movs	r0, #88	; 0x58
 8001ec2:	f000 fcbc 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3768      	adds	r7, #104	; 0x68
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40016800 	.word	0x40016800
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40021400 	.word	0x40021400
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40020400 	.word	0x40020400
 8001ee4:	40021800 	.word	0x40021800
 8001ee8:	40020800 	.word	0x40020800
 8001eec:	40020c00 	.word	0x40020c00

08001ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_SPI_MspInit+0x84>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12c      	bne.n	8001f6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f20:	6453      	str	r3, [r2, #68]	; 0x44
 8001f22:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_SPI_MspInit+0x88>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001f4a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_SPI_MspInit+0x8c>)
 8001f68:	f001 f988 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3728      	adds	r7, #40	; 0x28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40015000 	.word	0x40015000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40021400 	.word	0x40021400

08001f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_TIM_Base_MspInit+0x3c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10d      	bne.n	8001fae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_TIM_Base_MspInit+0x40>)
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	4a09      	ldr	r2, [pc, #36]	; (8001fc0 <HAL_TIM_Base_MspInit+0x40>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <HAL_TIM_Base_MspInit+0x40>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	40023800 	.word	0x40023800

08001fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08c      	sub	sp, #48	; 0x30
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	605a      	str	r2, [r3, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	60da      	str	r2, [r3, #12]
 8001fda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a42      	ldr	r2, [pc, #264]	; (80020ec <HAL_UART_MspInit+0x128>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d14b      	bne.n	800207e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a40      	ldr	r2, [pc, #256]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8001ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b3e      	ldr	r3, [pc, #248]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ffe:	61bb      	str	r3, [r7, #24]
 8002000:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 800200c:	f043 0304 	orr.w	r3, r3, #4
 8002010:	6313      	str	r3, [r2, #48]	; 0x30
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b33      	ldr	r3, [pc, #204]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	4a32      	ldr	r2, [pc, #200]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002028:	f043 0308 	orr.w	r3, r3, #8
 800202c:	6313      	str	r3, [r2, #48]	; 0x30
 800202e:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800204c:	2308      	movs	r3, #8
 800204e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4827      	ldr	r0, [pc, #156]	; (80020f4 <HAL_UART_MspInit+0x130>)
 8002058:	f001 f910 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800205c:	2304      	movs	r3, #4
 800205e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002060:	2302      	movs	r3, #2
 8002062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002068:	2303      	movs	r3, #3
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800206c:	2308      	movs	r3, #8
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4820      	ldr	r0, [pc, #128]	; (80020f8 <HAL_UART_MspInit+0x134>)
 8002078:	f001 f900 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800207c:	e031      	b.n	80020e2 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_UART_MspInit+0x138>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d12c      	bne.n	80020e2 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 8002092:	f043 0310 	orr.w	r3, r3, #16
 8002096:	6453      	str	r3, [r2, #68]	; 0x44
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 80020aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ac:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6313      	str	r3, [r2, #48]	; 0x30
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_UART_MspInit+0x12c>)
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80020c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c6:	2302      	movs	r3, #2
 80020c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ce:	2303      	movs	r3, #3
 80020d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020d2:	2307      	movs	r3, #7
 80020d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_UART_MspInit+0x13c>)
 80020de:	f001 f8cd 	bl	800327c <HAL_GPIO_Init>
}
 80020e2:	bf00      	nop
 80020e4:	3730      	adds	r7, #48	; 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40005000 	.word	0x40005000
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40020800 	.word	0x40020800
 80020f8:	40020c00 	.word	0x40020c00
 80020fc:	40011000 	.word	0x40011000
 8002100:	40020000 	.word	0x40020000

08002104 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002118:	4b3b      	ldr	r3, [pc, #236]	; (8002208 <HAL_FMC_MspInit+0x104>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d16f      	bne.n	8002200 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002120:	4b39      	ldr	r3, [pc, #228]	; (8002208 <HAL_FMC_MspInit+0x104>)
 8002122:	2201      	movs	r2, #1
 8002124:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b38      	ldr	r3, [pc, #224]	; (800220c <HAL_FMC_MspInit+0x108>)
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	4a37      	ldr	r2, [pc, #220]	; (800220c <HAL_FMC_MspInit+0x108>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6393      	str	r3, [r2, #56]	; 0x38
 8002136:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_FMC_MspInit+0x108>)
 8002138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002142:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002146:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002150:	2303      	movs	r3, #3
 8002152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002154:	230c      	movs	r3, #12
 8002156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	482c      	ldr	r0, [pc, #176]	; (8002210 <HAL_FMC_MspInit+0x10c>)
 800215e:	f001 f88d 	bl	800327c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002162:	2301      	movs	r3, #1
 8002164:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002172:	230c      	movs	r3, #12
 8002174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	4619      	mov	r1, r3
 800217a:	4826      	ldr	r0, [pc, #152]	; (8002214 <HAL_FMC_MspInit+0x110>)
 800217c:	f001 f87e 	bl	800327c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002180:	f248 1333 	movw	r3, #33075	; 0x8133
 8002184:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002192:	230c      	movs	r3, #12
 8002194:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4619      	mov	r1, r3
 800219a:	481f      	ldr	r0, [pc, #124]	; (8002218 <HAL_FMC_MspInit+0x114>)
 800219c:	f001 f86e 	bl	800327c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80021a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80021a4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021b2:	230c      	movs	r3, #12
 80021b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4818      	ldr	r0, [pc, #96]	; (800221c <HAL_FMC_MspInit+0x118>)
 80021bc:	f001 f85e 	bl	800327c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80021c0:	f24c 7303 	movw	r3, #50947	; 0xc703
 80021c4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2302      	movs	r3, #2
 80021c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021d2:	230c      	movs	r3, #12
 80021d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4811      	ldr	r0, [pc, #68]	; (8002220 <HAL_FMC_MspInit+0x11c>)
 80021dc:	f001 f84e 	bl	800327c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80021e0:	2360      	movs	r3, #96	; 0x60
 80021e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	2302      	movs	r3, #2
 80021e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ec:	2303      	movs	r3, #3
 80021ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021f0:	230c      	movs	r3, #12
 80021f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	480a      	ldr	r0, [pc, #40]	; (8002224 <HAL_FMC_MspInit+0x120>)
 80021fa:	f001 f83f 	bl	800327c <HAL_GPIO_Init>
 80021fe:	e000      	b.n	8002202 <HAL_FMC_MspInit+0xfe>
    return;
 8002200:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2000076c 	.word	0x2000076c
 800220c:	40023800 	.word	0x40023800
 8002210:	40021400 	.word	0x40021400
 8002214:	40020800 	.word	0x40020800
 8002218:	40021800 	.word	0x40021800
 800221c:	40021000 	.word	0x40021000
 8002220:	40020c00 	.word	0x40020c00
 8002224:	40020400 	.word	0x40020400

08002228 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002230:	f7ff ff68 	bl	8002104 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08e      	sub	sp, #56	; 0x38
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <HAL_InitTick+0xe4>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a32      	ldr	r2, [pc, #200]	; (8002320 <HAL_InitTick+0xe4>)
 8002256:	f043 0310 	orr.w	r3, r3, #16
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b30      	ldr	r3, [pc, #192]	; (8002320 <HAL_InitTick+0xe4>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002268:	f107 0210 	add.w	r2, r7, #16
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f003 ff92 	bl	800619c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002282:	f003 ff63 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8002286:	6378      	str	r0, [r7, #52]	; 0x34
 8002288:	e004      	b.n	8002294 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800228a:	f003 ff5f 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800228e:	4603      	mov	r3, r0
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_InitTick+0xe8>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	0c9b      	lsrs	r3, r3, #18
 800229e:	3b01      	subs	r3, #1
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_InitTick+0xec>)
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <HAL_InitTick+0xf0>)
 80022a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80022a8:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_InitTick+0xec>)
 80022aa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022ae:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_InitTick+0xec>)
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80022b6:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_InitTick+0xec>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <HAL_InitTick+0xec>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_InitTick+0xec>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80022c8:	4817      	ldr	r0, [pc, #92]	; (8002328 <HAL_InitTick+0xec>)
 80022ca:	f004 fa16 	bl	80066fa <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80022d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11b      	bne.n	8002314 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80022dc:	4812      	ldr	r0, [pc, #72]	; (8002328 <HAL_InitTick+0xec>)
 80022de:	f004 fa5b 	bl	8006798 <HAL_TIM_Base_Start_IT>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80022e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022f0:	2036      	movs	r0, #54	; 0x36
 80022f2:	f000 faa4 	bl	800283e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	d808      	bhi.n	800230e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022fc:	2200      	movs	r2, #0
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	2036      	movs	r0, #54	; 0x36
 8002302:	f000 fa80 	bl	8002806 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002306:	4a0a      	ldr	r2, [pc, #40]	; (8002330 <HAL_InitTick+0xf4>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e002      	b.n	8002314 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002314:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002318:	4618      	mov	r0, r3
 800231a:	3738      	adds	r7, #56	; 0x38
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	431bde83 	.word	0x431bde83
 8002328:	20000770 	.word	0x20000770
 800232c:	40001000 	.word	0x40001000
 8002330:	20000008 	.word	0x20000008

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <TIM6_DAC_IRQHandler+0x10>)
 8002392:	f004 fa71 	bl	8006878 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000770 	.word	0x20000770

080023a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <OTG_HS_IRQHandler+0x10>)
 80023a6:	f001 fb99 	bl	8003adc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000bbc 	.word	0x20000bbc

080023b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <LTDC_IRQHandler+0x10>)
 80023ba:	f002 ffbf 	bl	800533c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000014c 	.word	0x2000014c

080023c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA2D_IRQHandler+0x10>)
 80023ce:	f000 faad 	bl	800292c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200000b8 	.word	0x200000b8

080023dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e00a      	b.n	8002404 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ee:	f3af 8000 	nop.w
 80023f2:	4601      	mov	r1, r0
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	60ba      	str	r2, [r7, #8]
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	3301      	adds	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	dbf0      	blt.n	80023ee <_read+0x12>
  }

  return len;
 800240c:	687b      	ldr	r3, [r7, #4]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	e009      	b.n	800243c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	60ba      	str	r2, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe fcfb 	bl	8000e2c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	429a      	cmp	r2, r3
 8002442:	dbf1      	blt.n	8002428 <_write+0x12>
  }
  return len;
 8002444:	687b      	ldr	r3, [r7, #4]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <_close>:

int _close(int file)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002476:	605a      	str	r2, [r3, #4]
  return 0;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_isatty>:

int _isatty(int file)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800248e:	2301      	movs	r3, #1
}
 8002490:	4618      	mov	r0, r3
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024c0:	4a14      	ldr	r2, [pc, #80]	; (8002514 <_sbrk+0x5c>)
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <_sbrk+0x60>)
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024cc:	4b13      	ldr	r3, [pc, #76]	; (800251c <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d102      	bne.n	80024da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <_sbrk+0x64>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <_sbrk+0x68>)
 80024d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <_sbrk+0x64>)
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d207      	bcs.n	80024f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e8:	f008 fd94 	bl	800b014 <__errno>
 80024ec:	4603      	mov	r3, r0
 80024ee:	220c      	movs	r2, #12
 80024f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
 80024f6:	e009      	b.n	800250c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <_sbrk+0x64>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024fe:	4b07      	ldr	r3, [pc, #28]	; (800251c <_sbrk+0x64>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4413      	add	r3, r2
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <_sbrk+0x64>)
 8002508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800250a:	68fb      	ldr	r3, [r7, #12]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20030000 	.word	0x20030000
 8002518:	00000400 	.word	0x00000400
 800251c:	200007b8 	.word	0x200007b8
 8002520:	20000ed0 	.word	0x20000ed0

08002524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <SystemInit+0x20>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	4a05      	ldr	r2, [pc, #20]	; (8002544 <SystemInit+0x20>)
 8002530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002548:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002580 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800254c:	480d      	ldr	r0, [pc, #52]	; (8002584 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800254e:	490e      	ldr	r1, [pc, #56]	; (8002588 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002550:	4a0e      	ldr	r2, [pc, #56]	; (800258c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002554:	e002      	b.n	800255c <LoopCopyDataInit>

08002556 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002556:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002558:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255a:	3304      	adds	r3, #4

0800255c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800255c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002560:	d3f9      	bcc.n	8002556 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002562:	4a0b      	ldr	r2, [pc, #44]	; (8002590 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002564:	4c0b      	ldr	r4, [pc, #44]	; (8002594 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002566:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002568:	e001      	b.n	800256e <LoopFillZerobss>

0800256a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800256c:	3204      	adds	r2, #4

0800256e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002570:	d3fb      	bcc.n	800256a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002572:	f7ff ffd7 	bl	8002524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002576:	f008 fd53 	bl	800b020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257a:	f7fe f80b 	bl	8000594 <main>
  bx  lr    
 800257e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002580:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002588:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800258c:	0800cad8 	.word	0x0800cad8
  ldr r2, =_sbss
 8002590:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002594:	20000ed0 	.word	0x20000ed0

08002598 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002598:	e7fe      	b.n	8002598 <ADC_IRQHandler>
	...

0800259c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a0:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a0d      	ldr	r2, [pc, #52]	; (80025dc <HAL_Init+0x40>)
 80025a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025ac:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <HAL_Init+0x40>)
 80025b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_Init+0x40>)
 80025be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c4:	2003      	movs	r0, #3
 80025c6:	f000 f913 	bl	80027f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ca:	200f      	movs	r0, #15
 80025cc:	f7ff fe36 	bl	800223c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d0:	f7ff fa82 	bl	8001ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00

080025e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <HAL_IncTick+0x20>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_IncTick+0x24>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	4a04      	ldr	r2, [pc, #16]	; (8002604 <HAL_IncTick+0x24>)
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	2000000c 	.word	0x2000000c
 8002604:	200007bc 	.word	0x200007bc

08002608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return uwTick;
 800260c:	4b03      	ldr	r3, [pc, #12]	; (800261c <HAL_GetTick+0x14>)
 800260e:	681b      	ldr	r3, [r3, #0]
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	200007bc 	.word	0x200007bc

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff ffee 	bl	8002608 <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffde 	bl	8002608 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	2000000c 	.word	0x2000000c

08002668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002678:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002684:	4013      	ands	r3, r2
 8002686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <__NVIC_SetPriorityGrouping+0x44>)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	60d3      	str	r3, [r2, #12]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <__NVIC_GetPriorityGrouping+0x18>)
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	f003 0307 	and.w	r3, r3, #7
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	db0b      	blt.n	80026f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	f003 021f 	and.w	r2, r3, #31
 80026e4:	4907      	ldr	r1, [pc, #28]	; (8002704 <__NVIC_EnableIRQ+0x38>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2001      	movs	r0, #1
 80026ee:	fa00 f202 	lsl.w	r2, r0, r2
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e100 	.word	0xe000e100

08002708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	2b00      	cmp	r3, #0
 800271a:	db0a      	blt.n	8002732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	490c      	ldr	r1, [pc, #48]	; (8002754 <__NVIC_SetPriority+0x4c>)
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	b2d2      	uxtb	r2, r2
 800272a:	440b      	add	r3, r1
 800272c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002730:	e00a      	b.n	8002748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <__NVIC_SetPriority+0x50>)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	3b04      	subs	r3, #4
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	440b      	add	r3, r1
 8002746:	761a      	strb	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000e100 	.word	0xe000e100
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275c:	b480      	push	{r7}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	bf28      	it	cs
 800277a:	2304      	movcs	r3, #4
 800277c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3304      	adds	r3, #4
 8002782:	2b06      	cmp	r3, #6
 8002784:	d902      	bls.n	800278c <NVIC_EncodePriority+0x30>
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3b03      	subs	r3, #3
 800278a:	e000      	b.n	800278e <NVIC_EncodePriority+0x32>
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	401a      	ands	r2, r3
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a4:	f04f 31ff 	mov.w	r1, #4294967295
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	fa01 f303 	lsl.w	r3, r1, r3
 80027ae:	43d9      	mvns	r1, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b4:	4313      	orrs	r3, r2
         );
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
	...

080027c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027c8:	f3bf 8f4f 	dsb	sy
}
 80027cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <__NVIC_SystemReset+0x24>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027d6:	4904      	ldr	r1, [pc, #16]	; (80027e8 <__NVIC_SystemReset+0x24>)
 80027d8:	4b04      	ldr	r3, [pc, #16]	; (80027ec <__NVIC_SystemReset+0x28>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027de:	f3bf 8f4f 	dsb	sy
}
 80027e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <__NVIC_SystemReset+0x20>
 80027e8:	e000ed00 	.word	0xe000ed00
 80027ec:	05fa0004 	.word	0x05fa0004

080027f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff35 	bl	8002668 <__NVIC_SetPriorityGrouping>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	4603      	mov	r3, r0
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	607a      	str	r2, [r7, #4]
 8002812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002818:	f7ff ff4a 	bl	80026b0 <__NVIC_GetPriorityGrouping>
 800281c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff9a 	bl	800275c <NVIC_EncodePriority>
 8002828:	4602      	mov	r2, r0
 800282a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff69 	bl	8002708 <__NVIC_SetPriority>
}
 8002836:	bf00      	nop
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	4603      	mov	r3, r0
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff3d 	bl	80026cc <__NVIC_EnableIRQ>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800285e:	f7ff ffb1 	bl	80027c4 <__NVIC_SystemReset>

08002862 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e00e      	b.n	8002892 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	795b      	ldrb	r3, [r3, #5]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff f94f 	bl	8001b28 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e03b      	b.n	8002924 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d106      	bne.n	80028c6 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff f953 	bl	8001b6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2202      	movs	r2, #2
 80028ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ea:	f023 0107 	bic.w	r1, r3, #7
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002904:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68d1      	ldr	r1, [r2, #12]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6812      	ldr	r2, [r2, #0]
 8002910:	430b      	orrs	r3, r1
 8002912:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d026      	beq.n	800299c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d021      	beq.n	800299c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002966:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	f043 0201 	orr.w	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d026      	beq.n	80029f4 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d021      	beq.n	80029f4 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029be:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d003      	beq.n	80029f4 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d026      	beq.n	8002a4c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d021      	beq.n	8002a4c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a16:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a24:	f043 0204 	orr.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0304 	and.w	r3, r3, #4
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d013      	beq.n	8002a7e <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2204      	movs	r2, #4
 8002a76:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f853 	bl	8002b24 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d024      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01f      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2202      	movs	r2, #2
 8002aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01f      	beq.n	8002b1c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01a      	beq.n	8002b1c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2210      	movs	r2, #16
 8002afc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f80e 	bl	8002b38 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_DMA2D_ConfigLayer+0x20>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e079      	b.n	8002c60 <HAL_DMA2D_ConfigLayer+0x114>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	3318      	adds	r3, #24
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	041b      	lsls	r3, r3, #16
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002b96:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_DMA2D_ConfigLayer+0x120>)
 8002b98:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b0a      	cmp	r3, #10
 8002ba0:	d003      	beq.n	8002baa <HAL_DMA2D_ConfigLayer+0x5e>
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b09      	cmp	r3, #9
 8002ba8:	d107      	bne.n	8002bba <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	061b      	lsls	r3, r3, #24
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d120      	bne.n	8002c0e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	ea02 0103 	and.w	r1, r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b0a      	cmp	r3, #10
 8002bf4:	d003      	beq.n	8002bfe <HAL_DMA2D_ConfigLayer+0xb2>
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b09      	cmp	r3, #9
 8002bfc:	d127      	bne.n	8002c4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8002c0c:	e01f      	b.n	8002c4e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	69da      	ldr	r2, [r3, #28]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	ea02 0103 	and.w	r1, r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b0a      	cmp	r3, #10
 8002c36:	d003      	beq.n	8002c40 <HAL_DMA2D_ConfigLayer+0xf4>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b09      	cmp	r3, #9
 8002c3e:	d106      	bne.n	8002c4e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	68da      	ldr	r2, [r3, #12]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002c4c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	371c      	adds	r7, #28
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	ff03000f 	.word	0xff03000f

08002c70 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <HAL_FLASH_Program+0xa0>)
 8002c84:	7e1b      	ldrb	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d101      	bne.n	8002c8e <HAL_FLASH_Program+0x1e>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e03b      	b.n	8002d06 <HAL_FLASH_Program+0x96>
 8002c8e:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <HAL_FLASH_Program+0xa0>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002c94:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002c98:	f000 f870 	bl	8002d7c <FLASH_WaitForLastOperation>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d12b      	bne.n	8002cfe <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002cac:	783b      	ldrb	r3, [r7, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	68b8      	ldr	r0, [r7, #8]
 8002cb2:	f000 f91b 	bl	8002eec <FLASH_Program_Byte>
 8002cb6:	e016      	b.n	8002ce6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d105      	bne.n	8002cca <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002cbe:	883b      	ldrh	r3, [r7, #0]
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	68b8      	ldr	r0, [r7, #8]
 8002cc4:	f000 f8ee 	bl	8002ea4 <FLASH_Program_HalfWord>
 8002cc8:	e00d      	b.n	8002ce6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d105      	bne.n	8002cdc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	68b8      	ldr	r0, [r7, #8]
 8002cd6:	f000 f8c3 	bl	8002e60 <FLASH_Program_Word>
 8002cda:	e004      	b.n	8002ce6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002cdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce0:	68b8      	ldr	r0, [r7, #8]
 8002ce2:	f000 f88b 	bl	8002dfc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ce6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002cea:	f000 f847 	bl	8002d7c <FLASH_WaitForLastOperation>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <HAL_FLASH_Program+0xa4>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <HAL_FLASH_Program+0xa4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_FLASH_Program+0xa0>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200007c0 	.word	0x200007c0
 8002d14:	40023c00 	.word	0x40023c00

08002d18 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_FLASH_Unlock+0x38>)
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	da0b      	bge.n	8002d42 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_FLASH_Unlock+0x38>)
 8002d2c:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_FLASH_Unlock+0x3c>)
 8002d2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_FLASH_Unlock+0x38>)
 8002d32:	4a09      	ldr	r2, [pc, #36]	; (8002d58 <HAL_FLASH_Unlock+0x40>)
 8002d34:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_FLASH_Unlock+0x38>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	da01      	bge.n	8002d42 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002d42:	79fb      	ldrb	r3, [r7, #7]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	45670123 	.word	0x45670123
 8002d58:	cdef89ab 	.word	0xcdef89ab

08002d5c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_FLASH_Lock+0x1c>)
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_FLASH_Lock+0x1c>)
 8002d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d6a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40023c00 	.word	0x40023c00

08002d7c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <FLASH_WaitForLastOperation+0x78>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002d8e:	f7ff fc3b 	bl	8002608 <HAL_GetTick>
 8002d92:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002d94:	e010      	b.n	8002db8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9c:	d00c      	beq.n	8002db8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <FLASH_WaitForLastOperation+0x38>
 8002da4:	f7ff fc30 	bl	8002608 <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d201      	bcs.n	8002db8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e019      	b.n	8002dec <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <FLASH_WaitForLastOperation+0x7c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e8      	bne.n	8002d96 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <FLASH_WaitForLastOperation+0x7c>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <FLASH_WaitForLastOperation+0x7c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <FLASH_WaitForLastOperation+0x7c>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002de2:	f000 f8a5 	bl	8002f30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
  
}  
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200007c0 	.word	0x200007c0
 8002df8:	40023c00 	.word	0x40023c00

08002dfc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e1a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002e1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e20:	4b0e      	ldr	r3, [pc, #56]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4a0d      	ldr	r2, [pc, #52]	; (8002e5c <FLASH_Program_DoubleWord+0x60>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002e32:	f3bf 8f6f 	isb	sy
}
 8002e36:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002e38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	000a      	movs	r2, r1
 8002e46:	2300      	movs	r3, #0
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	3104      	adds	r1, #4
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	600b      	str	r3, [r1, #0]
}
 8002e50:	bf00      	nop
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40023c00 	.word	0x40023c00

08002e60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002e82:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4a06      	ldr	r2, [pc, #24]	; (8002ea0 <FLASH_Program_Word+0x40>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	601a      	str	r2, [r3, #0]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	40023c00 	.word	0x40023c00

08002ea4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	460b      	mov	r3, r1
 8002eae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002eb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002eb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002ebc:	4b0a      	ldr	r3, [pc, #40]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <FLASH_Program_HalfWord+0x44>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	801a      	strh	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40023c00 	.word	0x40023c00

08002eec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4a0b      	ldr	r2, [pc, #44]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4a06      	ldr	r2, [pc, #24]	; (8002f2c <FLASH_Program_Byte+0x40>)
 8002f12:	f043 0301 	orr.w	r3, r3, #1
 8002f16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	701a      	strb	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002f34:	4b2f      	ldr	r3, [pc, #188]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f043 0310 	orr.w	r3, r3, #16
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f4a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002f4c:	4b29      	ldr	r3, [pc, #164]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f4e:	2210      	movs	r2, #16
 8002f50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002f52:	4b28      	ldr	r3, [pc, #160]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d008      	beq.n	8002f70 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f68:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002f6a:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002f70:	4b20      	ldr	r3, [pc, #128]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d008      	beq.n	8002f8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002f7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f7e:	69db      	ldr	r3, [r3, #28]
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	4a1c      	ldr	r2, [pc, #112]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002f88:	4b1a      	ldr	r3, [pc, #104]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f8a:	2240      	movs	r2, #64	; 0x40
 8002f8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f043 0302 	orr.w	r3, r3, #2
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002fa4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002fa8:	2280      	movs	r2, #128	; 0x80
 8002faa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002fac:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d009      	beq.n	8002fcc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	4a0d      	ldr	r2, [pc, #52]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002fc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d008      	beq.n	8002fea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <FLASH_SetErrorCode+0xc8>)
 8002fe2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <FLASH_SetErrorCode+0xc4>)
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	60da      	str	r2, [r3, #12]
  }
}
 8002fea:	bf00      	nop
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40023c00 	.word	0x40023c00
 8002ff8:	200007c0 	.word	0x200007c0

08002ffc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_FLASHEx_Erase+0xdc>)
 8003010:	7e1b      	ldrb	r3, [r3, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d101      	bne.n	800301a <HAL_FLASHEx_Erase+0x1e>
 8003016:	2302      	movs	r3, #2
 8003018:	e05a      	b.n	80030d0 <HAL_FLASHEx_Erase+0xd4>
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <HAL_FLASHEx_Erase+0xdc>)
 800301c:	2201      	movs	r2, #1
 800301e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003020:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003024:	f7ff feaa 	bl	8002d7c <FLASH_WaitForLastOperation>
 8003028:	4603      	mov	r3, r0
 800302a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d14a      	bne.n	80030c8 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f04f 32ff 	mov.w	r2, #4294967295
 8003038:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d117      	bne.n	8003072 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f000 f846 	bl	80030e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003054:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003058:	f7ff fe90 	bl	8002d7c <FLASH_WaitForLastOperation>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_FLASHEx_Erase+0xe0>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	4a1d      	ldr	r2, [pc, #116]	; (80030dc <HAL_FLASHEx_Erase+0xe0>)
 8003066:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800306a:	f023 0304 	bic.w	r3, r3, #4
 800306e:	6113      	str	r3, [r2, #16]
 8003070:	e028      	b.n	80030c4 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	e01c      	b.n	80030b4 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	68b8      	ldr	r0, [r7, #8]
 8003084:	f000 f866 	bl	8003154 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003088:	f24c 3050 	movw	r0, #50000	; 0xc350
 800308c:	f7ff fe76 	bl	8002d7c <FLASH_WaitForLastOperation>
 8003090:	4603      	mov	r3, r0
 8003092:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003094:	4b11      	ldr	r3, [pc, #68]	; (80030dc <HAL_FLASHEx_Erase+0xe0>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	4a10      	ldr	r2, [pc, #64]	; (80030dc <HAL_FLASHEx_Erase+0xe0>)
 800309a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800309e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d003      	beq.n	80030ae <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	601a      	str	r2, [r3, #0]
          break;
 80030ac:	e00a      	b.n	80030c4 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	3301      	adds	r3, #1
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	4413      	add	r3, r2
 80030be:	68ba      	ldr	r2, [r7, #8]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d3da      	bcc.n	800307a <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030c4:	f000 f894 	bl	80031f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_FLASHEx_Erase+0xdc>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	761a      	strb	r2, [r3, #24]

  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200007c0 	.word	0x200007c0
 80030dc:	40023c00 	.word	0x40023c00

080030e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80030ec:	4b18      	ldr	r3, [pc, #96]	; (8003150 <FLASH_MassErase+0x70>)
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <FLASH_MassErase+0x70>)
 80030f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030f6:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d108      	bne.n	8003110 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <FLASH_MassErase+0x70>)
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	4a13      	ldr	r2, [pc, #76]	; (8003150 <FLASH_MassErase+0x70>)
 8003104:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	6113      	str	r3, [r2, #16]
 800310e:	e00f      	b.n	8003130 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d106      	bne.n	8003124 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <FLASH_MassErase+0x70>)
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	4a0d      	ldr	r2, [pc, #52]	; (8003150 <FLASH_MassErase+0x70>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6113      	str	r3, [r2, #16]
 8003122:	e005      	b.n	8003130 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <FLASH_MassErase+0x70>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4a09      	ldr	r2, [pc, #36]	; (8003150 <FLASH_MassErase+0x70>)
 800312a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800312e:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <FLASH_MassErase+0x70>)
 8003132:	691a      	ldr	r2, [r3, #16]
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	4313      	orrs	r3, r2
 800313a:	4a05      	ldr	r2, [pc, #20]	; (8003150 <FLASH_MassErase+0x70>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003140:	6113      	str	r3, [r2, #16]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	40023c00 	.word	0x40023c00

08003154 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003164:	78fb      	ldrb	r3, [r7, #3]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d102      	bne.n	8003170 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e010      	b.n	8003192 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d103      	bne.n	800317e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003176:	f44f 7380 	mov.w	r3, #256	; 0x100
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e009      	b.n	8003192 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d103      	bne.n	800318c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e002      	b.n	8003192 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800318c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003190:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0b      	cmp	r3, #11
 8003196:	d902      	bls.n	800319e <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	4a12      	ldr	r2, [pc, #72]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	490f      	ldr	r1, [pc, #60]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	4a0c      	ldr	r2, [pc, #48]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80031c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80031c2:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031c4:	691a      	ldr	r2, [r3, #16]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4313      	orrs	r3, r2
 80031cc:	4a07      	ldr	r2, [pc, #28]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <FLASH_Erase_Sector+0x98>)
 80031da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031de:	6113      	str	r3, [r2, #16]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40023c00 	.word	0x40023c00

080031f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <FLASH_FlushCaches+0x88>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d017      	beq.n	8003230 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003206:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800320a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800320c:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <FLASH_FlushCaches+0x88>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a19      	ldr	r2, [pc, #100]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003216:	6013      	str	r3, [r2, #0]
 8003218:	4b17      	ldr	r3, [pc, #92]	; (8003278 <FLASH_FlushCaches+0x88>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <FLASH_FlushCaches+0x88>)
 800321e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003222:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a13      	ldr	r2, [pc, #76]	; (8003278 <FLASH_FlushCaches+0x88>)
 800322a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800322e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d017      	beq.n	800326c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800323c:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <FLASH_FlushCaches+0x88>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003242:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003246:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003248:	4b0b      	ldr	r3, [pc, #44]	; (8003278 <FLASH_FlushCaches+0x88>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <FLASH_FlushCaches+0x88>)
 800324e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a07      	ldr	r2, [pc, #28]	; (8003278 <FLASH_FlushCaches+0x88>)
 800325a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800325e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <FLASH_FlushCaches+0x88>)
 8003266:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800326a:	6013      	str	r3, [r2, #0]
  }
}
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00

0800327c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e177      	b.n	8003588 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003298:	2201      	movs	r2, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	f040 8166 	bne.w	8003582 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d005      	beq.n	80032ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d130      	bne.n	8003330 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	2203      	movs	r2, #3
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003304:	2201      	movs	r2, #1
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f003 0201 	and.w	r2, r3, #1
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 0303 	and.w	r3, r3, #3
 8003338:	2b03      	cmp	r3, #3
 800333a:	d017      	beq.n	800336c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	2203      	movs	r2, #3
 8003348:	fa02 f303 	lsl.w	r3, r2, r3
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4313      	orrs	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d123      	bne.n	80033c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	08da      	lsrs	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3208      	adds	r2, #8
 8003380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003384:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	220f      	movs	r2, #15
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	08da      	lsrs	r2, r3, #3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	3208      	adds	r2, #8
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	2203      	movs	r2, #3
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 80c0 	beq.w	8003582 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	4b66      	ldr	r3, [pc, #408]	; (80035a0 <HAL_GPIO_Init+0x324>)
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <HAL_GPIO_Init+0x324>)
 800340c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <HAL_GPIO_Init+0x324>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800341e:	4a61      	ldr	r2, [pc, #388]	; (80035a4 <HAL_GPIO_Init+0x328>)
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	089b      	lsrs	r3, r3, #2
 8003424:	3302      	adds	r3, #2
 8003426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_GPIO_Init+0x32c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d037      	beq.n	80034ba <HAL_GPIO_Init+0x23e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a57      	ldr	r2, [pc, #348]	; (80035ac <HAL_GPIO_Init+0x330>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d031      	beq.n	80034b6 <HAL_GPIO_Init+0x23a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a56      	ldr	r2, [pc, #344]	; (80035b0 <HAL_GPIO_Init+0x334>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d02b      	beq.n	80034b2 <HAL_GPIO_Init+0x236>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a55      	ldr	r2, [pc, #340]	; (80035b4 <HAL_GPIO_Init+0x338>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d025      	beq.n	80034ae <HAL_GPIO_Init+0x232>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <HAL_GPIO_Init+0x33c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01f      	beq.n	80034aa <HAL_GPIO_Init+0x22e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a53      	ldr	r2, [pc, #332]	; (80035bc <HAL_GPIO_Init+0x340>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d019      	beq.n	80034a6 <HAL_GPIO_Init+0x22a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a52      	ldr	r2, [pc, #328]	; (80035c0 <HAL_GPIO_Init+0x344>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_GPIO_Init+0x226>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a51      	ldr	r2, [pc, #324]	; (80035c4 <HAL_GPIO_Init+0x348>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00d      	beq.n	800349e <HAL_GPIO_Init+0x222>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a50      	ldr	r2, [pc, #320]	; (80035c8 <HAL_GPIO_Init+0x34c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <HAL_GPIO_Init+0x21e>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4f      	ldr	r2, [pc, #316]	; (80035cc <HAL_GPIO_Init+0x350>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d101      	bne.n	8003496 <HAL_GPIO_Init+0x21a>
 8003492:	2309      	movs	r3, #9
 8003494:	e012      	b.n	80034bc <HAL_GPIO_Init+0x240>
 8003496:	230a      	movs	r3, #10
 8003498:	e010      	b.n	80034bc <HAL_GPIO_Init+0x240>
 800349a:	2308      	movs	r3, #8
 800349c:	e00e      	b.n	80034bc <HAL_GPIO_Init+0x240>
 800349e:	2307      	movs	r3, #7
 80034a0:	e00c      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034a2:	2306      	movs	r3, #6
 80034a4:	e00a      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034a6:	2305      	movs	r3, #5
 80034a8:	e008      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034aa:	2304      	movs	r3, #4
 80034ac:	e006      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034ae:	2303      	movs	r3, #3
 80034b0:	e004      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034b2:	2302      	movs	r3, #2
 80034b4:	e002      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_GPIO_Init+0x240>
 80034ba:	2300      	movs	r3, #0
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	f002 0203 	and.w	r2, r2, #3
 80034c2:	0092      	lsls	r2, r2, #2
 80034c4:	4093      	lsls	r3, r2
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034cc:	4935      	ldr	r1, [pc, #212]	; (80035a4 <HAL_GPIO_Init+0x328>)
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	089b      	lsrs	r3, r3, #2
 80034d2:	3302      	adds	r3, #2
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b3d      	ldr	r3, [pc, #244]	; (80035d0 <HAL_GPIO_Init+0x354>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <HAL_GPIO_Init+0x354>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b32      	ldr	r3, [pc, #200]	; (80035d0 <HAL_GPIO_Init+0x354>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a29      	ldr	r2, [pc, #164]	; (80035d0 <HAL_GPIO_Init+0x354>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_GPIO_Init+0x354>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	43db      	mvns	r3, r3
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	4013      	ands	r3, r2
 800353c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003552:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_GPIO_Init+0x354>)
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_GPIO_Init+0x354>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800357c:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_GPIO_Init+0x354>)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3301      	adds	r3, #1
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	2b0f      	cmp	r3, #15
 800358c:	f67f ae84 	bls.w	8003298 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40020000 	.word	0x40020000
 80035ac:	40020400 	.word	0x40020400
 80035b0:	40020800 	.word	0x40020800
 80035b4:	40020c00 	.word	0x40020c00
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40021400 	.word	0x40021400
 80035c0:	40021800 	.word	0x40021800
 80035c4:	40021c00 	.word	0x40021c00
 80035c8:	40022000 	.word	0x40022000
 80035cc:	40022400 	.word	0x40022400
 80035d0:	40013c00 	.word	0x40013c00

080035d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	807b      	strh	r3, [r7, #2]
 80035e0:	4613      	mov	r3, r2
 80035e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035e4:	787b      	ldrb	r3, [r7, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035f0:	e003      	b.n	80035fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035f2:	887b      	ldrh	r3, [r7, #2]
 80035f4:	041a      	lsls	r2, r3, #16
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	619a      	str	r2, [r3, #24]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003606:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003608:	b08f      	sub	sp, #60	; 0x3c
 800360a:	af0a      	add	r7, sp, #40	; 0x28
 800360c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e054      	b.n	80036c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f007 fa3e 	bl	800aab4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2203      	movs	r2, #3
 800363c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f004 fa6c 	bl	8007b34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	603b      	str	r3, [r7, #0]
 8003662:	687e      	ldr	r6, [r7, #4]
 8003664:	466d      	mov	r5, sp
 8003666:	f106 0410 	add.w	r4, r6, #16
 800366a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003676:	e885 0003 	stmia.w	r5, {r0, r1}
 800367a:	1d33      	adds	r3, r6, #4
 800367c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367e:	6838      	ldr	r0, [r7, #0]
 8003680:	f004 f9e6 	bl	8007a50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2101      	movs	r1, #1
 800368a:	4618      	mov	r0, r3
 800368c:	f004 fa63 	bl	8007b56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	687e      	ldr	r6, [r7, #4]
 8003698:	466d      	mov	r5, sp
 800369a:	f106 0410 	add.w	r4, r6, #16
 800369e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ae:	1d33      	adds	r3, r6, #4
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	6838      	ldr	r0, [r7, #0]
 80036b4:	f004 fbec 	bl	8007e90 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80036ca:	b590      	push	{r4, r7, lr}
 80036cc:	b089      	sub	sp, #36	; 0x24
 80036ce:	af04      	add	r7, sp, #16
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	4608      	mov	r0, r1
 80036d4:	4611      	mov	r1, r2
 80036d6:	461a      	mov	r2, r3
 80036d8:	4603      	mov	r3, r0
 80036da:	70fb      	strb	r3, [r7, #3]
 80036dc:	460b      	mov	r3, r1
 80036de:	70bb      	strb	r3, [r7, #2]
 80036e0:	4613      	mov	r3, r2
 80036e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <HAL_HCD_HC_Init+0x28>
 80036ee:	2302      	movs	r3, #2
 80036f0:	e076      	b.n	80037e0 <HAL_HCD_HC_Init+0x116>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036fa:	78fb      	ldrb	r3, [r7, #3]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	212c      	movs	r1, #44	; 0x2c
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	4413      	add	r3, r2
 8003706:	333d      	adds	r3, #61	; 0x3d
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	787a      	ldrb	r2, [r7, #1]
 800371c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800371e:	78fb      	ldrb	r3, [r7, #3]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	3340      	adds	r3, #64	; 0x40
 800372c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800372e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3339      	adds	r3, #57	; 0x39
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	212c      	movs	r1, #44	; 0x2c
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	333f      	adds	r3, #63	; 0x3f
 8003750:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003754:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	78ba      	ldrb	r2, [r7, #2]
 800375a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800375e:	b2d0      	uxtb	r0, r2
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	333a      	adds	r3, #58	; 0x3a
 800376c:	4602      	mov	r2, r0
 800376e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003770:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003774:	2b00      	cmp	r3, #0
 8003776:	da09      	bge.n	800378c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	212c      	movs	r1, #44	; 0x2c
 800377e:	fb01 f303 	mul.w	r3, r1, r3
 8003782:	4413      	add	r3, r2
 8003784:	333b      	adds	r3, #59	; 0x3b
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	e008      	b.n	800379e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	212c      	movs	r1, #44	; 0x2c
 8003792:	fb01 f303 	mul.w	r3, r1, r3
 8003796:	4413      	add	r3, r2
 8003798:	333b      	adds	r3, #59	; 0x3b
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	333c      	adds	r3, #60	; 0x3c
 80037ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80037b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	787c      	ldrb	r4, [r7, #1]
 80037b8:	78ba      	ldrb	r2, [r7, #2]
 80037ba:	78f9      	ldrb	r1, [r7, #3]
 80037bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037c4:	9301      	str	r3, [sp, #4]
 80037c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4623      	mov	r3, r4
 80037ce:	f004 fce5 	bl	800819c <USB_HC_Init>
 80037d2:	4603      	mov	r3, r0
 80037d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd90      	pop	{r4, r7, pc}

080037e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_HCD_HC_Halt+0x1e>
 8003802:	2302      	movs	r3, #2
 8003804:	e00f      	b.n	8003826 <HAL_HCD_HC_Halt+0x3e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f004 ff35 	bl	8008686 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	4608      	mov	r0, r1
 800383a:	4611      	mov	r1, r2
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	70fb      	strb	r3, [r7, #3]
 8003842:	460b      	mov	r3, r1
 8003844:	70bb      	strb	r3, [r7, #2]
 8003846:	4613      	mov	r3, r2
 8003848:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	333b      	adds	r3, #59	; 0x3b
 8003858:	78ba      	ldrb	r2, [r7, #2]
 800385a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800385c:	78fb      	ldrb	r3, [r7, #3]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	333f      	adds	r3, #63	; 0x3f
 800386a:	787a      	ldrb	r2, [r7, #1]
 800386c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800386e:	7c3b      	ldrb	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d112      	bne.n	800389a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	212c      	movs	r1, #44	; 0x2c
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	3342      	adds	r3, #66	; 0x42
 8003882:	2203      	movs	r2, #3
 8003884:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	333d      	adds	r3, #61	; 0x3d
 8003894:	7f3a      	ldrb	r2, [r7, #28]
 8003896:	701a      	strb	r2, [r3, #0]
 8003898:	e008      	b.n	80038ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3342      	adds	r3, #66	; 0x42
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80038ac:	787b      	ldrb	r3, [r7, #1]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	f200 80c6 	bhi.w	8003a40 <HAL_HCD_HC_SubmitRequest+0x210>
 80038b4:	a201      	add	r2, pc, #4	; (adr r2, 80038bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80038b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ba:	bf00      	nop
 80038bc:	080038cd 	.word	0x080038cd
 80038c0:	08003a2d 	.word	0x08003a2d
 80038c4:	08003931 	.word	0x08003931
 80038c8:	080039af 	.word	0x080039af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80038cc:	7c3b      	ldrb	r3, [r7, #16]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	f040 80b8 	bne.w	8003a44 <HAL_HCD_HC_SubmitRequest+0x214>
 80038d4:	78bb      	ldrb	r3, [r7, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80b4 	bne.w	8003a44 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80038dc:	8b3b      	ldrh	r3, [r7, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	212c      	movs	r1, #44	; 0x2c
 80038e8:	fb01 f303 	mul.w	r3, r1, r3
 80038ec:	4413      	add	r3, r2
 80038ee:	3355      	adds	r3, #85	; 0x55
 80038f0:	2201      	movs	r2, #1
 80038f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038f4:	78fb      	ldrb	r3, [r7, #3]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	212c      	movs	r1, #44	; 0x2c
 80038fa:	fb01 f303 	mul.w	r3, r1, r3
 80038fe:	4413      	add	r3, r2
 8003900:	3355      	adds	r3, #85	; 0x55
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d109      	bne.n	800391c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3342      	adds	r3, #66	; 0x42
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800391a:	e093      	b.n	8003a44 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800391c:	78fb      	ldrb	r3, [r7, #3]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	212c      	movs	r1, #44	; 0x2c
 8003922:	fb01 f303 	mul.w	r3, r1, r3
 8003926:	4413      	add	r3, r2
 8003928:	3342      	adds	r3, #66	; 0x42
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
      break;
 800392e:	e089      	b.n	8003a44 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003930:	78bb      	ldrb	r3, [r7, #2]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11d      	bne.n	8003972 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	212c      	movs	r1, #44	; 0x2c
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	4413      	add	r3, r2
 8003942:	3355      	adds	r3, #85	; 0x55
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	212c      	movs	r1, #44	; 0x2c
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	4413      	add	r3, r2
 8003956:	3342      	adds	r3, #66	; 0x42
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800395c:	e073      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	212c      	movs	r1, #44	; 0x2c
 8003964:	fb01 f303 	mul.w	r3, r1, r3
 8003968:	4413      	add	r3, r2
 800396a:	3342      	adds	r3, #66	; 0x42
 800396c:	2202      	movs	r2, #2
 800396e:	701a      	strb	r2, [r3, #0]
      break;
 8003970:	e069      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003972:	78fb      	ldrb	r3, [r7, #3]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3354      	adds	r3, #84	; 0x54
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3342      	adds	r3, #66	; 0x42
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
      break;
 8003998:	e055      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800399a:	78fb      	ldrb	r3, [r7, #3]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3342      	adds	r3, #66	; 0x42
 80039a8:	2202      	movs	r2, #2
 80039aa:	701a      	strb	r2, [r3, #0]
      break;
 80039ac:	e04b      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80039ae:	78bb      	ldrb	r3, [r7, #2]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3355      	adds	r3, #85	; 0x55
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	212c      	movs	r1, #44	; 0x2c
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	4413      	add	r3, r2
 80039d4:	3342      	adds	r3, #66	; 0x42
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80039da:	e034      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3342      	adds	r3, #66	; 0x42
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
      break;
 80039ee:	e02a      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3354      	adds	r3, #84	; 0x54
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	212c      	movs	r1, #44	; 0x2c
 8003a0a:	fb01 f303 	mul.w	r3, r1, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	3342      	adds	r3, #66	; 0x42
 8003a12:	2200      	movs	r2, #0
 8003a14:	701a      	strb	r2, [r3, #0]
      break;
 8003a16:	e016      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	212c      	movs	r1, #44	; 0x2c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	4413      	add	r3, r2
 8003a24:	3342      	adds	r3, #66	; 0x42
 8003a26:	2202      	movs	r2, #2
 8003a28:	701a      	strb	r2, [r3, #0]
      break;
 8003a2a:	e00c      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	212c      	movs	r1, #44	; 0x2c
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	4413      	add	r3, r2
 8003a38:	3342      	adds	r3, #66	; 0x42
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003a40:	bf00      	nop
 8003a42:	e000      	b.n	8003a46 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a44:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a46:	78fb      	ldrb	r3, [r7, #3]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3344      	adds	r3, #68	; 0x44
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	8b3a      	ldrh	r2, [r7, #24]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	202c      	movs	r0, #44	; 0x2c
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	440b      	add	r3, r1
 8003a66:	334c      	adds	r3, #76	; 0x4c
 8003a68:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	212c      	movs	r1, #44	; 0x2c
 8003a70:	fb01 f303 	mul.w	r3, r1, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	3360      	adds	r3, #96	; 0x60
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a7c:	78fb      	ldrb	r3, [r7, #3]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3350      	adds	r3, #80	; 0x50
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a8e:	78fb      	ldrb	r3, [r7, #3]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	3339      	adds	r3, #57	; 0x39
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3361      	adds	r3, #97	; 0x61
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	222c      	movs	r2, #44	; 0x2c
 8003aba:	fb02 f303 	mul.w	r3, r2, r3
 8003abe:	3338      	adds	r3, #56	; 0x38
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	18d1      	adds	r1, r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	f004 fc88 	bl	80083e0 <USB_HC_StartXfer>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop

08003adc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f004 f989 	bl	8007e0a <USB_GetMode>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	f040 80f6 	bne.w	8003cec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f004 f96d 	bl	8007de4 <USB_ReadInterrupts>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80ec 	beq.w	8003cea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 f964 	bl	8007de4 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b26:	d104      	bne.n	8003b32 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003b30:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 f954 	bl	8007de4 <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b46:	d104      	bne.n	8003b52 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b50:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f004 f944 	bl	8007de4 <USB_ReadInterrupts>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b66:	d104      	bne.n	8003b72 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b70:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 f934 	bl	8007de4 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d103      	bne.n	8003b8e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f004 f926 	bl	8007de4 <USB_ReadInterrupts>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ba2:	d11c      	bne.n	8003bde <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003bac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10f      	bne.n	8003bde <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003bbe:	2110      	movs	r1, #16
 8003bc0:	6938      	ldr	r0, [r7, #16]
 8003bc2:	f004 f815 	bl	8007bf0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003bc6:	6938      	ldr	r0, [r7, #16]
 8003bc8:	f004 f846 	bl	8007c58 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 fa1c 	bl	8008010 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f006 ffe5 	bl	800aba8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f004 f8fe 	bl	8007de4 <USB_ReadInterrupts>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf2:	d102      	bne.n	8003bfa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f001 f89e 	bl	8004d36 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f004 f8f0 	bl	8007de4 <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d106      	bne.n	8003c1c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f006 ffae 	bl	800ab70 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 f8df 	bl	8007de4 <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d101      	bne.n	8003c34 <HAL_HCD_IRQHandler+0x158>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_HCD_IRQHandler+0x15a>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699a      	ldr	r2, [r3, #24]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0210 	bic.w	r2, r2, #16
 8003c48:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 ffa1 	bl	8004b92 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	699a      	ldr	r2, [r3, #24]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0210 	orr.w	r2, r2, #16
 8003c5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 f8bd 	bl	8007de4 <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c74:	d13a      	bne.n	8003cec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f004 fcf2 	bl	8008664 <USB_HC_ReadInterrupt>
 8003c80:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	e025      	b.n	8003cd4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d018      	beq.n	8003cce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f8ab 	bl	8003e16 <HCD_HC_IN_IRQHandler>
 8003cc0:	e005      	b.n	8003cce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fbf9 	bl	80044c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d3d4      	bcc.n	8003c88 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ce6:	615a      	str	r2, [r3, #20]
 8003ce8:	e000      	b.n	8003cec <HAL_HCD_IRQHandler+0x210>
      return;
 8003cea:	bf00      	nop
    }
  }
}
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b082      	sub	sp, #8
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_HCD_Start+0x16>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e013      	b.n	8003d30 <HAL_HCD_Start+0x3e>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2101      	movs	r1, #1
 8003d16:	4618      	mov	r0, r3
 8003d18:	f004 f9de 	bl	80080d8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f003 fef6 	bl	8007b12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d101      	bne.n	8003d4e <HAL_HCD_Stop+0x16>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e00d      	b.n	8003d6a <HAL_HCD_Stop+0x32>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fdcc 	bl	80088f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 f980 	bl	8008084 <USB_ResetPort>
 8003d84:	4603      	mov	r3, r0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	212c      	movs	r1, #44	; 0x2c
 8003da0:	fb01 f303 	mul.w	r3, r1, r3
 8003da4:	4413      	add	r3, r2
 8003da6:	3360      	adds	r3, #96	; 0x60
 8003da8:	781b      	ldrb	r3, [r3, #0]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	3350      	adds	r3, #80	; 0x50
 8003dd0:	681b      	ldr	r3, [r3, #0]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f004 f9c4 	bl	8008178 <USB_GetCurrentFrame>
 8003df0:	4603      	mov	r3, r0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 f99f 	bl	800814a <USB_GetHostSpeed>
 8003e0c:	4603      	mov	r3, r0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d11a      	bne.n	8003e7c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e52:	461a      	mov	r2, r3
 8003e54:	2304      	movs	r3, #4
 8003e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	212c      	movs	r1, #44	; 0x2c
 8003e5e:	fb01 f303 	mul.w	r3, r1, r3
 8003e62:	4413      	add	r3, r2
 8003e64:	3361      	adds	r3, #97	; 0x61
 8003e66:	2206      	movs	r2, #6
 8003e68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f004 fc06 	bl	8008686 <USB_HC_Halt>
 8003e7a:	e0af      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e92:	d11b      	bne.n	8003ecc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ea6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	212c      	movs	r1, #44	; 0x2c
 8003eae:	fb01 f303 	mul.w	r3, r1, r3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	3361      	adds	r3, #97	; 0x61
 8003eb6:	2207      	movs	r2, #7
 8003eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f004 fbde 	bl	8008686 <USB_HC_Halt>
 8003eca:	e087      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d109      	bne.n	8003ef6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	461a      	mov	r2, r3
 8003ef0:	2320      	movs	r3, #32
 8003ef2:	6093      	str	r3, [r2, #8]
 8003ef4:	e072      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d11a      	bne.n	8003f42 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2308      	movs	r3, #8
 8003f1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3361      	adds	r3, #97	; 0x61
 8003f2c:	2205      	movs	r2, #5
 8003f2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fba3 	bl	8008686 <USB_HC_Halt>
 8003f40:	e04c      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f58:	d11b      	bne.n	8003f92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	212c      	movs	r1, #44	; 0x2c
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	4413      	add	r3, r2
 8003f7a:	3361      	adds	r3, #97	; 0x61
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	4611      	mov	r1, r2
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f004 fb7b 	bl	8008686 <USB_HC_Halt>
 8003f90:	e024      	b.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fa4:	2b80      	cmp	r3, #128	; 0x80
 8003fa6:	d119      	bne.n	8003fdc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3361      	adds	r3, #97	; 0x61
 8003fc8:	2206      	movs	r2, #6
 8003fca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f004 fb55 	bl	8008686 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff2:	d112      	bne.n	800401a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f004 fb41 	bl	8008686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004016:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004018:	e24e      	b.n	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	4413      	add	r3, r2
 8004022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b01      	cmp	r3, #1
 800402e:	f040 80df 	bne.w	80041f0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d019      	beq.n	800406e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3348      	adds	r3, #72	; 0x48
 8004048:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	0159      	lsls	r1, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	440b      	add	r3, r1
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800405c:	1ad2      	subs	r2, r2, r3
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	202c      	movs	r0, #44	; 0x2c
 8004064:	fb00 f303 	mul.w	r3, r0, r3
 8004068:	440b      	add	r3, r1
 800406a:	3350      	adds	r3, #80	; 0x50
 800406c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	212c      	movs	r1, #44	; 0x2c
 8004074:	fb01 f303 	mul.w	r3, r1, r3
 8004078:	4413      	add	r3, r2
 800407a:	3361      	adds	r3, #97	; 0x61
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	212c      	movs	r1, #44	; 0x2c
 8004086:	fb01 f303 	mul.w	r3, r1, r3
 800408a:	4413      	add	r3, r2
 800408c:	335c      	adds	r3, #92	; 0x5c
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409e:	461a      	mov	r2, r3
 80040a0:	2301      	movs	r3, #1
 80040a2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	333f      	adds	r3, #63	; 0x3f
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	333f      	adds	r3, #63	; 0x3f
 80040c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d111      	bne.n	80040f0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fad5 	bl	8008686 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2310      	movs	r3, #16
 80040ec:	6093      	str	r3, [r2, #8]
 80040ee:	e03a      	b.n	8004166 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	333f      	adds	r3, #63	; 0x3f
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d009      	beq.n	8004118 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	333f      	adds	r3, #63	; 0x3f
 8004112:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004114:	2b01      	cmp	r3, #1
 8004116:	d126      	bne.n	8004166 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	440a      	add	r2, r1
 800412e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004136:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3360      	adds	r3, #96	; 0x60
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	b2d9      	uxtb	r1, r3
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	202c      	movs	r0, #44	; 0x2c
 8004154:	fb00 f303 	mul.w	r3, r0, r3
 8004158:	4413      	add	r3, r2
 800415a:	3360      	adds	r3, #96	; 0x60
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f006 fd2f 	bl	800abc4 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d12b      	bne.n	80041c6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	3348      	adds	r3, #72	; 0x48
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	202c      	movs	r0, #44	; 0x2c
 8004184:	fb00 f202 	mul.w	r2, r0, r2
 8004188:	440a      	add	r2, r1
 800418a:	3240      	adds	r2, #64	; 0x40
 800418c:	8812      	ldrh	r2, [r2, #0]
 800418e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 818e 	beq.w	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3354      	adds	r3, #84	; 0x54
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f083 0301 	eor.w	r3, r3, #1
 80041b0:	b2d8      	uxtb	r0, r3
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	3354      	adds	r3, #84	; 0x54
 80041c0:	4602      	mov	r2, r0
 80041c2:	701a      	strb	r2, [r3, #0]
}
 80041c4:	e178      	b.n	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	3354      	adds	r3, #84	; 0x54
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	f083 0301 	eor.w	r3, r3, #1
 80041da:	b2d8      	uxtb	r0, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	3354      	adds	r3, #84	; 0x54
 80041ea:	4602      	mov	r2, r0
 80041ec:	701a      	strb	r2, [r3, #0]
}
 80041ee:	e163      	b.n	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	f040 80f6 	bne.w	80043f4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	212c      	movs	r1, #44	; 0x2c
 800420e:	fb01 f303 	mul.w	r3, r1, r3
 8004212:	4413      	add	r3, r2
 8004214:	3361      	adds	r3, #97	; 0x61
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d109      	bne.n	8004230 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	212c      	movs	r1, #44	; 0x2c
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3360      	adds	r3, #96	; 0x60
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e0c9      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3361      	adds	r3, #97	; 0x61
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b05      	cmp	r3, #5
 8004242:	d109      	bne.n	8004258 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	212c      	movs	r1, #44	; 0x2c
 800424a:	fb01 f303 	mul.w	r3, r1, r3
 800424e:	4413      	add	r3, r2
 8004250:	3360      	adds	r3, #96	; 0x60
 8004252:	2205      	movs	r2, #5
 8004254:	701a      	strb	r2, [r3, #0]
 8004256:	e0b5      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	212c      	movs	r1, #44	; 0x2c
 800425e:	fb01 f303 	mul.w	r3, r1, r3
 8004262:	4413      	add	r3, r2
 8004264:	3361      	adds	r3, #97	; 0x61
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b06      	cmp	r3, #6
 800426a:	d009      	beq.n	8004280 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3361      	adds	r3, #97	; 0x61
 800427a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800427c:	2b08      	cmp	r3, #8
 800427e:	d150      	bne.n	8004322 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	335c      	adds	r3, #92	; 0x5c
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	202c      	movs	r0, #44	; 0x2c
 8004298:	fb00 f303 	mul.w	r3, r0, r3
 800429c:	440b      	add	r3, r1
 800429e:	335c      	adds	r3, #92	; 0x5c
 80042a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	335c      	adds	r3, #92	; 0x5c
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d912      	bls.n	80042dc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	335c      	adds	r3, #92	; 0x5c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	212c      	movs	r1, #44	; 0x2c
 80042ce:	fb01 f303 	mul.w	r3, r1, r3
 80042d2:	4413      	add	r3, r2
 80042d4:	3360      	adds	r3, #96	; 0x60
 80042d6:	2204      	movs	r2, #4
 80042d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042da:	e073      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3360      	adds	r3, #96	; 0x60
 80042ea:	2202      	movs	r2, #2
 80042ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004304:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4413      	add	r3, r2
 8004316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431a:	461a      	mov	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004320:	e050      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	212c      	movs	r1, #44	; 0x2c
 8004328:	fb01 f303 	mul.w	r3, r1, r3
 800432c:	4413      	add	r3, r2
 800432e:	3361      	adds	r3, #97	; 0x61
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b03      	cmp	r3, #3
 8004334:	d122      	bne.n	800437c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	212c      	movs	r1, #44	; 0x2c
 800433c:	fb01 f303 	mul.w	r3, r1, r3
 8004340:	4413      	add	r3, r2
 8004342:	3360      	adds	r3, #96	; 0x60
 8004344:	2202      	movs	r2, #2
 8004346:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800435e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004366:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4413      	add	r3, r2
 8004370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e023      	b.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	212c      	movs	r1, #44	; 0x2c
 8004382:	fb01 f303 	mul.w	r3, r1, r3
 8004386:	4413      	add	r3, r2
 8004388:	3361      	adds	r3, #97	; 0x61
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b07      	cmp	r3, #7
 800438e:	d119      	bne.n	80043c4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	212c      	movs	r1, #44	; 0x2c
 8004396:	fb01 f303 	mul.w	r3, r1, r3
 800439a:	4413      	add	r3, r2
 800439c:	335c      	adds	r3, #92	; 0x5c
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	202c      	movs	r0, #44	; 0x2c
 80043a8:	fb00 f303 	mul.w	r3, r0, r3
 80043ac:	440b      	add	r3, r1
 80043ae:	335c      	adds	r3, #92	; 0x5c
 80043b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	212c      	movs	r1, #44	; 0x2c
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	4413      	add	r3, r2
 80043be:	3360      	adds	r3, #96	; 0x60
 80043c0:	2204      	movs	r2, #4
 80043c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	461a      	mov	r2, r3
 80043d2:	2302      	movs	r3, #2
 80043d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	b2d9      	uxtb	r1, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	202c      	movs	r0, #44	; 0x2c
 80043e0:	fb00 f303 	mul.w	r3, r0, r3
 80043e4:	4413      	add	r3, r2
 80043e6:	3360      	adds	r3, #96	; 0x60
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f006 fbe9 	bl	800abc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043f2:	e061      	b.n	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d156      	bne.n	80044b8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	212c      	movs	r1, #44	; 0x2c
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	333f      	adds	r3, #63	; 0x3f
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d111      	bne.n	8004442 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	212c      	movs	r1, #44	; 0x2c
 8004424:	fb01 f303 	mul.w	r3, r1, r3
 8004428:	4413      	add	r3, r2
 800442a:	335c      	adds	r3, #92	; 0x5c
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f004 f923 	bl	8008686 <USB_HC_Halt>
 8004440:	e031      	b.n	80044a6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	212c      	movs	r1, #44	; 0x2c
 8004448:	fb01 f303 	mul.w	r3, r1, r3
 800444c:	4413      	add	r3, r2
 800444e:	333f      	adds	r3, #63	; 0x3f
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	212c      	movs	r1, #44	; 0x2c
 800445c:	fb01 f303 	mul.w	r3, r1, r3
 8004460:	4413      	add	r3, r2
 8004462:	333f      	adds	r3, #63	; 0x3f
 8004464:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004466:	2b02      	cmp	r3, #2
 8004468:	d11d      	bne.n	80044a6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	212c      	movs	r1, #44	; 0x2c
 8004470:	fb01 f303 	mul.w	r3, r1, r3
 8004474:	4413      	add	r3, r2
 8004476:	335c      	adds	r3, #92	; 0x5c
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d110      	bne.n	80044a6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	212c      	movs	r1, #44	; 0x2c
 800448a:	fb01 f303 	mul.w	r3, r1, r3
 800448e:	4413      	add	r3, r2
 8004490:	3361      	adds	r3, #97	; 0x61
 8004492:	2203      	movs	r2, #3
 8004494:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 f8f0 	bl	8008686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044b2:	461a      	mov	r2, r3
 80044b4:	2310      	movs	r3, #16
 80044b6:	6093      	str	r3, [r2, #8]
}
 80044b8:	bf00      	nop
 80044ba:	3718      	adds	r7, #24
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d11a      	bne.n	8004526 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044fc:	461a      	mov	r2, r3
 80044fe:	2304      	movs	r3, #4
 8004500:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	212c      	movs	r1, #44	; 0x2c
 8004508:	fb01 f303 	mul.w	r3, r1, r3
 800450c:	4413      	add	r3, r2
 800450e:	3361      	adds	r3, #97	; 0x61
 8004510:	2206      	movs	r2, #6
 8004512:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	4611      	mov	r1, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f004 f8b1 	bl	8008686 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004524:	e331      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	4413      	add	r3, r2
 800452e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0320 	and.w	r3, r3, #32
 8004538:	2b20      	cmp	r3, #32
 800453a:	d12e      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	4413      	add	r3, r2
 8004544:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004548:	461a      	mov	r2, r3
 800454a:	2320      	movs	r3, #32
 800454c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	333d      	adds	r3, #61	; 0x3d
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	f040 8313 	bne.w	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	212c      	movs	r1, #44	; 0x2c
 800456a:	fb01 f303 	mul.w	r3, r1, r3
 800456e:	4413      	add	r3, r2
 8004570:	333d      	adds	r3, #61	; 0x3d
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	3360      	adds	r3, #96	; 0x60
 8004584:	2202      	movs	r2, #2
 8004586:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	4611      	mov	r1, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f004 f877 	bl	8008686 <USB_HC_Halt>
}
 8004598:	e2f7      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045b0:	d112      	bne.n	80045d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	4611      	mov	r1, r2
 80045d0:	4618      	mov	r0, r3
 80045d2:	f004 f858 	bl	8008686 <USB_HC_Halt>
}
 80045d6:	e2d8      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d140      	bne.n	8004670 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	335c      	adds	r3, #92	; 0x5c
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4413      	add	r3, r2
 8004608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d111      	bne.n	800463a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	212c      	movs	r1, #44	; 0x2c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	333d      	adds	r3, #61	; 0x3d
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	2340      	movs	r3, #64	; 0x40
 8004638:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	4413      	add	r3, r2
 8004642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004646:	461a      	mov	r2, r3
 8004648:	2301      	movs	r3, #1
 800464a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	212c      	movs	r1, #44	; 0x2c
 8004652:	fb01 f303 	mul.w	r3, r1, r3
 8004656:	4413      	add	r3, r2
 8004658:	3361      	adds	r3, #97	; 0x61
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f004 f80c 	bl	8008686 <USB_HC_Halt>
}
 800466e:	e28c      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004682:	2b40      	cmp	r3, #64	; 0x40
 8004684:	d12c      	bne.n	80046e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	212c      	movs	r1, #44	; 0x2c
 800468c:	fb01 f303 	mul.w	r3, r1, r3
 8004690:	4413      	add	r3, r2
 8004692:	3361      	adds	r3, #97	; 0x61
 8004694:	2204      	movs	r2, #4
 8004696:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	212c      	movs	r1, #44	; 0x2c
 800469e:	fb01 f303 	mul.w	r3, r1, r3
 80046a2:	4413      	add	r3, r2
 80046a4:	333d      	adds	r3, #61	; 0x3d
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	212c      	movs	r1, #44	; 0x2c
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	4413      	add	r3, r2
 80046b6:	335c      	adds	r3, #92	; 0x5c
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f003 ffdd 	bl	8008686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d8:	461a      	mov	r2, r3
 80046da:	2340      	movs	r3, #64	; 0x40
 80046dc:	6093      	str	r3, [r2, #8]
}
 80046de:	e254      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	d11a      	bne.n	800472c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004702:	461a      	mov	r2, r3
 8004704:	2308      	movs	r3, #8
 8004706:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3361      	adds	r3, #97	; 0x61
 8004716:	2205      	movs	r2, #5
 8004718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f003 ffae 	bl	8008686 <USB_HC_Halt>
}
 800472a:	e22e      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b10      	cmp	r3, #16
 8004740:	d140      	bne.n	80047c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	335c      	adds	r3, #92	; 0x5c
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	3361      	adds	r3, #97	; 0x61
 8004762:	2203      	movs	r2, #3
 8004764:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	333d      	adds	r3, #61	; 0x3d
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d112      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	212c      	movs	r1, #44	; 0x2c
 8004780:	fb01 f303 	mul.w	r3, r1, r3
 8004784:	4413      	add	r3, r2
 8004786:	333c      	adds	r3, #60	; 0x3c
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d108      	bne.n	80047a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	212c      	movs	r1, #44	; 0x2c
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	4413      	add	r3, r2
 800479a:	333d      	adds	r3, #61	; 0x3d
 800479c:	2201      	movs	r2, #1
 800479e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	4611      	mov	r1, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f003 ff6b 	bl	8008686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047bc:	461a      	mov	r2, r3
 80047be:	2310      	movs	r3, #16
 80047c0:	6093      	str	r3, [r2, #8]
}
 80047c2:	e1e2      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d6:	2b80      	cmp	r3, #128	; 0x80
 80047d8:	d164      	bne.n	80048a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d111      	bne.n	8004806 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	212c      	movs	r1, #44	; 0x2c
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	3361      	adds	r3, #97	; 0x61
 80047f0:	2206      	movs	r2, #6
 80047f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	4611      	mov	r1, r2
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 ff41 	bl	8008686 <USB_HC_Halt>
 8004804:	e044      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	212c      	movs	r1, #44	; 0x2c
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	335c      	adds	r3, #92	; 0x5c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	202c      	movs	r0, #44	; 0x2c
 800481e:	fb00 f303 	mul.w	r3, r0, r3
 8004822:	440b      	add	r3, r1
 8004824:	335c      	adds	r3, #92	; 0x5c
 8004826:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	212c      	movs	r1, #44	; 0x2c
 800482e:	fb01 f303 	mul.w	r3, r1, r3
 8004832:	4413      	add	r3, r2
 8004834:	335c      	adds	r3, #92	; 0x5c
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b02      	cmp	r3, #2
 800483a:	d920      	bls.n	800487e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	212c      	movs	r1, #44	; 0x2c
 8004842:	fb01 f303 	mul.w	r3, r1, r3
 8004846:	4413      	add	r3, r2
 8004848:	335c      	adds	r3, #92	; 0x5c
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	212c      	movs	r1, #44	; 0x2c
 8004854:	fb01 f303 	mul.w	r3, r1, r3
 8004858:	4413      	add	r3, r2
 800485a:	3360      	adds	r3, #96	; 0x60
 800485c:	2204      	movs	r2, #4
 800485e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	b2d9      	uxtb	r1, r3
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	202c      	movs	r0, #44	; 0x2c
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	4413      	add	r3, r2
 8004870:	3360      	adds	r3, #96	; 0x60
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	461a      	mov	r2, r3
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f006 f9a4 	bl	800abc4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800487c:	e008      	b.n	8004890 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	212c      	movs	r1, #44	; 0x2c
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	3360      	adds	r3, #96	; 0x60
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	461a      	mov	r2, r3
 800489e:	2380      	movs	r3, #128	; 0x80
 80048a0:	6093      	str	r3, [r2, #8]
}
 80048a2:	e172      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d11b      	bne.n	80048f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	3361      	adds	r3, #97	; 0x61
 80048ca:	2208      	movs	r2, #8
 80048cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f003 fed4 	bl	8008686 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f0:	6093      	str	r3, [r2, #8]
}
 80048f2:	e14a      	b.n	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b02      	cmp	r3, #2
 8004908:	f040 813f 	bne.w	8004b8a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	3361      	adds	r3, #97	; 0x61
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d17d      	bne.n	8004a1c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	212c      	movs	r1, #44	; 0x2c
 8004926:	fb01 f303 	mul.w	r3, r1, r3
 800492a:	4413      	add	r3, r2
 800492c:	3360      	adds	r3, #96	; 0x60
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	333f      	adds	r3, #63	; 0x3f
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d00a      	beq.n	800495c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	212c      	movs	r1, #44	; 0x2c
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	4413      	add	r3, r2
 8004952:	333f      	adds	r3, #63	; 0x3f
 8004954:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004956:	2b03      	cmp	r3, #3
 8004958:	f040 8100 	bne.w	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d113      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3355      	adds	r3, #85	; 0x55
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f083 0301 	eor.w	r3, r3, #1
 8004978:	b2d8      	uxtb	r0, r3
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3355      	adds	r3, #85	; 0x55
 8004988:	4602      	mov	r2, r0
 800498a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 80e3 	bne.w	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	334c      	adds	r3, #76	; 0x4c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80d8 	beq.w	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	212c      	movs	r1, #44	; 0x2c
 80049b2:	fb01 f303 	mul.w	r3, r1, r3
 80049b6:	4413      	add	r3, r2
 80049b8:	334c      	adds	r3, #76	; 0x4c
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	202c      	movs	r0, #44	; 0x2c
 80049c2:	fb00 f202 	mul.w	r2, r0, r2
 80049c6:	440a      	add	r2, r1
 80049c8:	3240      	adds	r2, #64	; 0x40
 80049ca:	8812      	ldrh	r2, [r2, #0]
 80049cc:	4413      	add	r3, r2
 80049ce:	3b01      	subs	r3, #1
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	202c      	movs	r0, #44	; 0x2c
 80049d6:	fb00 f202 	mul.w	r2, r0, r2
 80049da:	440a      	add	r2, r1
 80049dc:	3240      	adds	r2, #64	; 0x40
 80049de:	8812      	ldrh	r2, [r2, #0]
 80049e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80b5 	beq.w	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3355      	adds	r3, #85	; 0x55
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	f083 0301 	eor.w	r3, r3, #1
 8004a06:	b2d8      	uxtb	r0, r3
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3355      	adds	r3, #85	; 0x55
 8004a16:	4602      	mov	r2, r0
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e09f      	b.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	212c      	movs	r1, #44	; 0x2c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	3361      	adds	r3, #97	; 0x61
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d109      	bne.n	8004a44 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	212c      	movs	r1, #44	; 0x2c
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3360      	adds	r3, #96	; 0x60
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e08b      	b.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3361      	adds	r3, #97	; 0x61
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d109      	bne.n	8004a6c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	212c      	movs	r1, #44	; 0x2c
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	3360      	adds	r3, #96	; 0x60
 8004a66:	2202      	movs	r2, #2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e077      	b.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3361      	adds	r3, #97	; 0x61
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d109      	bne.n	8004a94 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	212c      	movs	r1, #44	; 0x2c
 8004a86:	fb01 f303 	mul.w	r3, r1, r3
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3360      	adds	r3, #96	; 0x60
 8004a8e:	2205      	movs	r2, #5
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e063      	b.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3361      	adds	r3, #97	; 0x61
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d009      	beq.n	8004abc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	212c      	movs	r1, #44	; 0x2c
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3361      	adds	r3, #97	; 0x61
 8004ab6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d14f      	bne.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	212c      	movs	r1, #44	; 0x2c
 8004ac2:	fb01 f303 	mul.w	r3, r1, r3
 8004ac6:	4413      	add	r3, r2
 8004ac8:	335c      	adds	r3, #92	; 0x5c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	202c      	movs	r0, #44	; 0x2c
 8004ad4:	fb00 f303 	mul.w	r3, r0, r3
 8004ad8:	440b      	add	r3, r1
 8004ada:	335c      	adds	r3, #92	; 0x5c
 8004adc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	212c      	movs	r1, #44	; 0x2c
 8004ae4:	fb01 f303 	mul.w	r3, r1, r3
 8004ae8:	4413      	add	r3, r2
 8004aea:	335c      	adds	r3, #92	; 0x5c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d912      	bls.n	8004b18 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	335c      	adds	r3, #92	; 0x5c
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	3360      	adds	r3, #96	; 0x60
 8004b12:	2204      	movs	r2, #4
 8004b14:	701a      	strb	r2, [r3, #0]
 8004b16:	e021      	b.n	8004b5c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	212c      	movs	r1, #44	; 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	3360      	adds	r3, #96	; 0x60
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b40:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b48:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b56:	461a      	mov	r2, r3
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	b2d9      	uxtb	r1, r3
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	202c      	movs	r0, #44	; 0x2c
 8004b78:	fb00 f303 	mul.w	r3, r0, r3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3360      	adds	r3, #96	; 0x60
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f006 f81d 	bl	800abc4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004b8a:	bf00      	nop
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08a      	sub	sp, #40	; 0x28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	0c5b      	lsrs	r3, r3, #17
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bc6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d004      	beq.n	8004bd8 <HCD_RXQLVL_IRQHandler+0x46>
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	f000 80a9 	beq.w	8004d28 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bd6:	e0aa      	b.n	8004d2e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80a6 	beq.w	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	212c      	movs	r1, #44	; 0x2c
 8004be6:	fb01 f303 	mul.w	r3, r1, r3
 8004bea:	4413      	add	r3, r2
 8004bec:	3344      	adds	r3, #68	; 0x44
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 809b 	beq.w	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	212c      	movs	r1, #44	; 0x2c
 8004bfc:	fb01 f303 	mul.w	r3, r1, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	3350      	adds	r3, #80	; 0x50
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	441a      	add	r2, r3
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	202c      	movs	r0, #44	; 0x2c
 8004c10:	fb00 f303 	mul.w	r3, r0, r3
 8004c14:	440b      	add	r3, r1
 8004c16:	334c      	adds	r3, #76	; 0x4c
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d87a      	bhi.n	8004d14 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	212c      	movs	r1, #44	; 0x2c
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3344      	adds	r3, #68	; 0x44
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	b292      	uxth	r2, r2
 8004c36:	4619      	mov	r1, r3
 8004c38:	f003 f87c 	bl	8007d34 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	212c      	movs	r1, #44	; 0x2c
 8004c42:	fb01 f303 	mul.w	r3, r1, r3
 8004c46:	4413      	add	r3, r2
 8004c48:	3344      	adds	r3, #68	; 0x44
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	441a      	add	r2, r3
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	202c      	movs	r0, #44	; 0x2c
 8004c56:	fb00 f303 	mul.w	r3, r0, r3
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3344      	adds	r3, #68	; 0x44
 8004c5e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3350      	adds	r3, #80	; 0x50
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	441a      	add	r2, r3
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	202c      	movs	r0, #44	; 0x2c
 8004c7a:	fb00 f303 	mul.w	r3, r0, r3
 8004c7e:	440b      	add	r3, r1
 8004c80:	3350      	adds	r3, #80	; 0x50
 8004c82:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	0cdb      	lsrs	r3, r3, #19
 8004c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	212c      	movs	r1, #44	; 0x2c
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3340      	adds	r3, #64	; 0x40
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	461a      	mov	r2, r3
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d13c      	bne.n	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d039      	beq.n	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004cce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cd6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	212c      	movs	r1, #44	; 0x2c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3354      	adds	r3, #84	; 0x54
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f083 0301 	eor.w	r3, r3, #1
 8004cfe:	b2d8      	uxtb	r0, r3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	212c      	movs	r1, #44	; 0x2c
 8004d06:	fb01 f303 	mul.w	r3, r1, r3
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3354      	adds	r3, #84	; 0x54
 8004d0e:	4602      	mov	r2, r0
 8004d10:	701a      	strb	r2, [r3, #0]
      break;
 8004d12:	e00b      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	212c      	movs	r1, #44	; 0x2c
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	4413      	add	r3, r2
 8004d20:	3360      	adds	r3, #96	; 0x60
 8004d22:	2204      	movs	r2, #4
 8004d24:	701a      	strb	r2, [r3, #0]
      break;
 8004d26:	e001      	b.n	8004d2c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004d28:	bf00      	nop
 8004d2a:	e000      	b.n	8004d2e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004d2c:	bf00      	nop
  }
}
 8004d2e:	bf00      	nop
 8004d30:	3728      	adds	r7, #40	; 0x28
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004d62:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d10b      	bne.n	8004d86 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d102      	bne.n	8004d7e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f005 ff07 	bl	800ab8c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d132      	bne.n	8004df6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f043 0308 	orr.w	r3, r3, #8
 8004d96:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d126      	bne.n	8004df0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d113      	bne.n	8004dd2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004db4:	d106      	bne.n	8004dc4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2102      	movs	r1, #2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f003 f927 	bl	8008010 <USB_InitFSLSPClkSel>
 8004dc2:	e011      	b.n	8004de8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f003 f920 	bl	8008010 <USB_InitFSLSPClkSel>
 8004dd0:	e00a      	b.n	8004de8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d106      	bne.n	8004de8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de0:	461a      	mov	r2, r3
 8004de2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004de6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f005 fef9 	bl	800abe0 <HAL_HCD_PortEnabled_Callback>
 8004dee:	e002      	b.n	8004df6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f005 ff03 	bl	800abfc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d103      	bne.n	8004e08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f043 0320 	orr.w	r3, r3, #32
 8004e06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6013      	str	r3, [r2, #0]
}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e12b      	b.n	8005086 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fc feba 	bl	8001bbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2224      	movs	r2, #36	; 0x24
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e80:	f001 f964 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8004e84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4a81      	ldr	r2, [pc, #516]	; (8005090 <HAL_I2C_Init+0x274>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d807      	bhi.n	8004ea0 <HAL_I2C_Init+0x84>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a80      	ldr	r2, [pc, #512]	; (8005094 <HAL_I2C_Init+0x278>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bf94      	ite	ls
 8004e98:	2301      	movls	r3, #1
 8004e9a:	2300      	movhi	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	e006      	b.n	8004eae <HAL_I2C_Init+0x92>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_I2C_Init+0x27c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	bf94      	ite	ls
 8004ea8:	2301      	movls	r3, #1
 8004eaa:	2300      	movhi	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e0e7      	b.n	8005086 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a78      	ldr	r2, [pc, #480]	; (800509c <HAL_I2C_Init+0x280>)
 8004eba:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebe:	0c9b      	lsrs	r3, r3, #18
 8004ec0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4a6a      	ldr	r2, [pc, #424]	; (8005090 <HAL_I2C_Init+0x274>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d802      	bhi.n	8004ef0 <HAL_I2C_Init+0xd4>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	3301      	adds	r3, #1
 8004eee:	e009      	b.n	8004f04 <HAL_I2C_Init+0xe8>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	4a69      	ldr	r2, [pc, #420]	; (80050a0 <HAL_I2C_Init+0x284>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	3301      	adds	r3, #1
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	495c      	ldr	r1, [pc, #368]	; (8005090 <HAL_I2C_Init+0x274>)
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d819      	bhi.n	8004f58 <HAL_I2C_Init+0x13c>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e59      	subs	r1, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f32:	1c59      	adds	r1, r3, #1
 8004f34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f38:	400b      	ands	r3, r1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_I2C_Init+0x138>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1e59      	subs	r1, r3, #1
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4c:	3301      	adds	r3, #1
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	e051      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f54:	2304      	movs	r3, #4
 8004f56:	e04f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d111      	bne.n	8004f84 <HAL_I2C_Init+0x168>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	1e58      	subs	r0, r3, #1
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6859      	ldr	r1, [r3, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	440b      	add	r3, r1
 8004f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f72:	3301      	adds	r3, #1
 8004f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bf0c      	ite	eq
 8004f7c:	2301      	moveq	r3, #1
 8004f7e:	2300      	movne	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e012      	b.n	8004faa <HAL_I2C_Init+0x18e>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	1e58      	subs	r0, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6859      	ldr	r1, [r3, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	0099      	lsls	r1, r3, #2
 8004f94:	440b      	add	r3, r1
 8004f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf0c      	ite	eq
 8004fa4:	2301      	moveq	r3, #1
 8004fa6:	2300      	movne	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Init+0x196>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e022      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_I2C_Init+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	1e58      	subs	r0, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	440b      	add	r3, r1
 8004fc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Init+0x1dc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	1e58      	subs	r0, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6859      	ldr	r1, [r3, #4]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	0099      	lsls	r1, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	6809      	ldr	r1, [r1, #0]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	6911      	ldr	r1, [r2, #16]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	4311      	orrs	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	430b      	orrs	r3, r1
 800503a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	000186a0 	.word	0x000186a0
 8005094:	001e847f 	.word	0x001e847f
 8005098:	003d08ff 	.word	0x003d08ff
 800509c:	431bde83 	.word	0x431bde83
 80050a0:	10624dd3 	.word	0x10624dd3

080050a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d129      	bne.n	800510e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2224      	movs	r2, #36	; 0x24
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0201 	bic.w	r2, r2, #1
 80050d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0210 	bic.w	r2, r2, #16
 80050e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	e000      	b.n	8005110 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
  }
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b20      	cmp	r3, #32
 8005134:	d12a      	bne.n	800518c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	; 0x24
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005156:	89fb      	ldrh	r3, [r7, #14]
 8005158:	f023 030f 	bic.w	r3, r3, #15
 800515c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	b29a      	uxth	r2, r3
 8005162:	89fb      	ldrh	r3, [r7, #14]
 8005164:	4313      	orrs	r3, r2
 8005166:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	89fa      	ldrh	r2, [r7, #14]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005188:	2300      	movs	r3, #0
 800518a:	e000      	b.n	800518e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800518c:	2302      	movs	r3, #2
  }
}
 800518e:	4618      	mov	r0, r3
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
	...

0800519c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0bf      	b.n	800532e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc fd64 	bl	8001c90 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80051de:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	6999      	ldr	r1, [r3, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051f4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	4b4a      	ldr	r3, [pc, #296]	; (8005338 <HAL_LTDC_Init+0x19c>)
 8005210:	400b      	ands	r3, r1
 8005212:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	699a      	ldr	r2, [r3, #24]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	431a      	orrs	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68d9      	ldr	r1, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b3e      	ldr	r3, [pc, #248]	; (8005338 <HAL_LTDC_Init+0x19c>)
 800523e:	400b      	ands	r3, r1
 8005240:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	041b      	lsls	r3, r3, #16
 8005248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68d9      	ldr	r1, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6919      	ldr	r1, [r3, #16]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b33      	ldr	r3, [pc, #204]	; (8005338 <HAL_LTDC_Init+0x19c>)
 800526c:	400b      	ands	r3, r1
 800526e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6919      	ldr	r1, [r3, #16]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6959      	ldr	r1, [r3, #20]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	4b27      	ldr	r3, [pc, #156]	; (8005338 <HAL_LTDC_Init+0x19c>)
 800529a:	400b      	ands	r3, r1
 800529c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	041b      	lsls	r3, r3, #16
 80052a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6959      	ldr	r1, [r3, #20]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80052de:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0206 	orr.w	r2, r2, #6
 800530a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	f000f800 	.word	0xf000f800

0800533c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005352:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b00      	cmp	r3, #0
 800535c:	d023      	beq.n	80053a6 <HAL_LTDC_IRQHandler+0x6a>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01e      	beq.n	80053a6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f022 0204 	bic.w	r2, r2, #4
 8005376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2204      	movs	r2, #4
 800537e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005386:	f043 0201 	orr.w	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2204      	movs	r2, #4
 8005394:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f86f 	bl	8005484 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d023      	beq.n	80053f8 <HAL_LTDC_IRQHandler+0xbc>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01e      	beq.n	80053f8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f022 0202 	bic.w	r2, r2, #2
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2202      	movs	r2, #2
 80053d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053d8:	f043 0202 	orr.w	r2, r3, #2
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f846 	bl	8005484 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d01b      	beq.n	800543a <HAL_LTDC_IRQHandler+0xfe>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d016      	beq.n	800543a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0201 	bic.w	r2, r2, #1
 800541a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2201      	movs	r2, #1
 8005422:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f82f 	bl	8005498 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01b      	beq.n	800547c <HAL_LTDC_IRQHandler+0x140>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d016      	beq.n	800547c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0208 	bic.w	r2, r2, #8
 800545c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2208      	movs	r2, #8
 8005464:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f818 	bl	80054ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800547c:	bf00      	nop
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80054c0:	b5b0      	push	{r4, r5, r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <HAL_LTDC_ConfigLayer+0x1a>
 80054d6:	2302      	movs	r3, #2
 80054d8:	e02c      	b.n	8005534 <HAL_LTDC_ConfigLayer+0x74>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2134      	movs	r1, #52	; 0x34
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	4413      	add	r3, r2
 80054f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800550a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f811 	bl	800553c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2201      	movs	r2, #1
 8005520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bdb0      	pop	{r4, r5, r7, pc}

0800553c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800553c:	b480      	push	{r7}
 800553e:	b089      	sub	sp, #36	; 0x24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005558:	4413      	add	r3, r2
 800555a:	041b      	lsls	r3, r3, #16
 800555c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	01db      	lsls	r3, r3, #7
 8005568:	4413      	add	r3, r2
 800556a:	3384      	adds	r3, #132	; 0x84
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	4611      	mov	r1, r2
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	01d2      	lsls	r2, r2, #7
 8005578:	440a      	add	r2, r1
 800557a:	3284      	adds	r2, #132	; 0x84
 800557c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005580:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005592:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005594:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	440b      	add	r3, r1
 80055a2:	3384      	adds	r3, #132	; 0x84
 80055a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80055aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	68da      	ldr	r2, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055ba:	4413      	add	r3, r2
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	01db      	lsls	r3, r3, #7
 80055ca:	4413      	add	r3, r2
 80055cc:	3384      	adds	r3, #132	; 0x84
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	4611      	mov	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	01d2      	lsls	r2, r2, #7
 80055da:	440a      	add	r2, r1
 80055dc:	3284      	adds	r2, #132	; 0x84
 80055de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80055e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055f2:	4413      	add	r3, r2
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	440b      	add	r3, r1
 8005602:	3384      	adds	r3, #132	; 0x84
 8005604:	4619      	mov	r1, r3
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	4313      	orrs	r3, r2
 800560a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	4413      	add	r3, r2
 8005618:	3384      	adds	r3, #132	; 0x84
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	4611      	mov	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	01d2      	lsls	r2, r2, #7
 8005626:	440a      	add	r2, r1
 8005628:	3284      	adds	r2, #132	; 0x84
 800562a:	f023 0307 	bic.w	r3, r3, #7
 800562e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	; 0x84
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800564c:	021b      	lsls	r3, r3, #8
 800564e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005656:	041b      	lsls	r3, r3, #16
 8005658:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	061b      	lsls	r3, r3, #24
 8005660:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	01db      	lsls	r3, r3, #7
 800566c:	4413      	add	r3, r2
 800566e:	3384      	adds	r3, #132	; 0x84
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	01db      	lsls	r3, r3, #7
 800567c:	4413      	add	r3, r2
 800567e:	3384      	adds	r3, #132	; 0x84
 8005680:	461a      	mov	r2, r3
 8005682:	2300      	movs	r3, #0
 8005684:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800568c:	461a      	mov	r2, r3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	431a      	orrs	r2, r3
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	431a      	orrs	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	01db      	lsls	r3, r3, #7
 80056a0:	440b      	add	r3, r1
 80056a2:	3384      	adds	r3, #132	; 0x84
 80056a4:	4619      	mov	r1, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	; 0x84
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	4611      	mov	r1, r2
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	01d2      	lsls	r2, r2, #7
 80056c6:	440a      	add	r2, r1
 80056c8:	3284      	adds	r2, #132	; 0x84
 80056ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	461a      	mov	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	01db      	lsls	r3, r3, #7
 80056da:	4413      	add	r3, r2
 80056dc:	3384      	adds	r3, #132	; 0x84
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	01db      	lsls	r3, r3, #7
 80056f0:	4413      	add	r3, r2
 80056f2:	3384      	adds	r3, #132	; 0x84
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	4611      	mov	r1, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	01d2      	lsls	r2, r2, #7
 8005700:	440a      	add	r2, r1
 8005702:	3284      	adds	r2, #132	; 0x84
 8005704:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005708:	f023 0307 	bic.w	r3, r3, #7
 800570c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	69da      	ldr	r2, [r3, #28]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	68f9      	ldr	r1, [r7, #12]
 8005718:	6809      	ldr	r1, [r1, #0]
 800571a:	4608      	mov	r0, r1
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	01c9      	lsls	r1, r1, #7
 8005720:	4401      	add	r1, r0
 8005722:	3184      	adds	r1, #132	; 0x84
 8005724:	4313      	orrs	r3, r2
 8005726:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	01db      	lsls	r3, r3, #7
 8005732:	4413      	add	r3, r2
 8005734:	3384      	adds	r3, #132	; 0x84
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	; 0x84
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	461a      	mov	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	01db      	lsls	r3, r3, #7
 8005756:	4413      	add	r3, r2
 8005758:	3384      	adds	r3, #132	; 0x84
 800575a:	461a      	mov	r2, r3
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800576a:	2304      	movs	r3, #4
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	e01b      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d102      	bne.n	800577e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005778:	2303      	movs	r3, #3
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	e014      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	2b04      	cmp	r3, #4
 8005784:	d00b      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800578a:	2b02      	cmp	r3, #2
 800578c:	d007      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005792:	2b03      	cmp	r3, #3
 8005794:	d003      	beq.n	800579e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800579a:	2b07      	cmp	r3, #7
 800579c:	d102      	bne.n	80057a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800579e:	2302      	movs	r3, #2
 80057a0:	61fb      	str	r3, [r7, #28]
 80057a2:	e001      	b.n	80057a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80057a4:	2301      	movs	r3, #1
 80057a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	461a      	mov	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	01db      	lsls	r3, r3, #7
 80057b2:	4413      	add	r3, r2
 80057b4:	3384      	adds	r3, #132	; 0x84
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	6812      	ldr	r2, [r2, #0]
 80057bc:	4611      	mov	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	01d2      	lsls	r2, r2, #7
 80057c2:	440a      	add	r2, r1
 80057c4:	3284      	adds	r2, #132	; 0x84
 80057c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	fb02 f303 	mul.w	r3, r2, r3
 80057d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	6859      	ldr	r1, [r3, #4]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	1acb      	subs	r3, r1, r3
 80057e2:	69f9      	ldr	r1, [r7, #28]
 80057e4:	fb01 f303 	mul.w	r3, r1, r3
 80057e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	6809      	ldr	r1, [r1, #0]
 80057ee:	4608      	mov	r0, r1
 80057f0:	6879      	ldr	r1, [r7, #4]
 80057f2:	01c9      	lsls	r1, r1, #7
 80057f4:	4401      	add	r1, r0
 80057f6:	3184      	adds	r1, #132	; 0x84
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	; 0x84
 800580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	6812      	ldr	r2, [r2, #0]
 8005810:	4611      	mov	r1, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	01d2      	lsls	r2, r2, #7
 8005816:	440a      	add	r2, r1
 8005818:	3284      	adds	r2, #132	; 0x84
 800581a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800581e:	f023 0307 	bic.w	r3, r3, #7
 8005822:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	01db      	lsls	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	3384      	adds	r3, #132	; 0x84
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	01db      	lsls	r3, r3, #7
 8005844:	4413      	add	r3, r2
 8005846:	3384      	adds	r3, #132	; 0x84
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	4611      	mov	r1, r2
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	01d2      	lsls	r2, r2, #7
 8005854:	440a      	add	r2, r1
 8005856:	3284      	adds	r2, #132	; 0x84
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	3724      	adds	r7, #36	; 0x24
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
	...

0800586c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e267      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d075      	beq.n	8005976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800588a:	4b88      	ldr	r3, [pc, #544]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f003 030c 	and.w	r3, r3, #12
 8005892:	2b04      	cmp	r3, #4
 8005894:	d00c      	beq.n	80058b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005896:	4b85      	ldr	r3, [pc, #532]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d112      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80058a2:	4b82      	ldr	r3, [pc, #520]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058ae:	d10b      	bne.n	80058c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058b0:	4b7e      	ldr	r3, [pc, #504]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d05b      	beq.n	8005974 <HAL_RCC_OscConfig+0x108>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d157      	bne.n	8005974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e242      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d106      	bne.n	80058e0 <HAL_RCC_OscConfig+0x74>
 80058d2:	4b76      	ldr	r3, [pc, #472]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a75      	ldr	r2, [pc, #468]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058dc:	6013      	str	r3, [r2, #0]
 80058de:	e01d      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058e8:	d10c      	bne.n	8005904 <HAL_RCC_OscConfig+0x98>
 80058ea:	4b70      	ldr	r3, [pc, #448]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6f      	ldr	r2, [pc, #444]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	4b6d      	ldr	r3, [pc, #436]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a6c      	ldr	r2, [pc, #432]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e00b      	b.n	800591c <HAL_RCC_OscConfig+0xb0>
 8005904:	4b69      	ldr	r3, [pc, #420]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a68      	ldr	r2, [pc, #416]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800590a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	4b66      	ldr	r3, [pc, #408]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a65      	ldr	r2, [pc, #404]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800591a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d013      	beq.n	800594c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fc fe70 	bl	8002608 <HAL_GetTick>
 8005928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800592c:	f7fc fe6c 	bl	8002608 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e207      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800593e:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCC_OscConfig+0xc0>
 800594a:	e014      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fc fe5c 	bl	8002608 <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005954:	f7fc fe58 	bl	8002608 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b64      	cmp	r3, #100	; 0x64
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1f3      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005966:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f0      	bne.n	8005954 <HAL_RCC_OscConfig+0xe8>
 8005972:	e000      	b.n	8005976 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d063      	beq.n	8005a4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005982:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800598e:	4b47      	ldr	r3, [pc, #284]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005996:	2b08      	cmp	r3, #8
 8005998:	d11c      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800599a:	4b44      	ldr	r3, [pc, #272]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d116      	bne.n	80059d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059a6:	4b41      	ldr	r3, [pc, #260]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e1c7      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059be:	4b3b      	ldr	r3, [pc, #236]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	4937      	ldr	r1, [pc, #220]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059d2:	e03a      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d020      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059dc:	4b34      	ldr	r3, [pc, #208]	; (8005ab0 <HAL_RCC_OscConfig+0x244>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e2:	f7fc fe11 	bl	8002608 <HAL_GetTick>
 80059e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059e8:	e008      	b.n	80059fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ea:	f7fc fe0d 	bl	8002608 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d901      	bls.n	80059fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e1a8      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059fc:	4b2b      	ldr	r3, [pc, #172]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d0f0      	beq.n	80059ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a08:	4b28      	ldr	r3, [pc, #160]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	4925      	ldr	r1, [pc, #148]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	600b      	str	r3, [r1, #0]
 8005a1c:	e015      	b.n	8005a4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <HAL_RCC_OscConfig+0x244>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a24:	f7fc fdf0 	bl	8002608 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fc fdec 	bl	8002608 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e187      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a3e:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d036      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a60:	2201      	movs	r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a64:	f7fc fdd0 	bl	8002608 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a6c:	f7fc fdcc 	bl	8002608 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e167      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a7e:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <HAL_RCC_OscConfig+0x240>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d0f0      	beq.n	8005a6c <HAL_RCC_OscConfig+0x200>
 8005a8a:	e01b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <HAL_RCC_OscConfig+0x248>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a92:	f7fc fdb9 	bl	8002608 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a98:	e00e      	b.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a9a:	f7fc fdb5 	bl	8002608 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d907      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e150      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	42470000 	.word	0x42470000
 8005ab4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ab8:	4b88      	ldr	r3, [pc, #544]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005abc:	f003 0302 	and.w	r3, r3, #2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ea      	bne.n	8005a9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8097 	beq.w	8005c00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ad6:	4b81      	ldr	r3, [pc, #516]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	4b7d      	ldr	r3, [pc, #500]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	4a7c      	ldr	r2, [pc, #496]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af0:	6413      	str	r3, [r2, #64]	; 0x40
 8005af2:	4b7a      	ldr	r3, [pc, #488]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005afe:	2301      	movs	r3, #1
 8005b00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b02:	4b77      	ldr	r3, [pc, #476]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d118      	bne.n	8005b40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b0e:	4b74      	ldr	r3, [pc, #464]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a73      	ldr	r2, [pc, #460]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b1a:	f7fc fd75 	bl	8002608 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b22:	f7fc fd71 	bl	8002608 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e10c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b34:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <HAL_RCC_OscConfig+0x474>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d106      	bne.n	8005b56 <HAL_RCC_OscConfig+0x2ea>
 8005b48:	4b64      	ldr	r3, [pc, #400]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a63      	ldr	r2, [pc, #396]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
 8005b54:	e01c      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b05      	cmp	r3, #5
 8005b5c:	d10c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x30c>
 8005b5e:	4b5f      	ldr	r3, [pc, #380]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	4a5e      	ldr	r2, [pc, #376]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b64:	f043 0304 	orr.w	r3, r3, #4
 8005b68:	6713      	str	r3, [r2, #112]	; 0x70
 8005b6a:	4b5c      	ldr	r3, [pc, #368]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6e:	4a5b      	ldr	r2, [pc, #364]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b70:	f043 0301 	orr.w	r3, r3, #1
 8005b74:	6713      	str	r3, [r2, #112]	; 0x70
 8005b76:	e00b      	b.n	8005b90 <HAL_RCC_OscConfig+0x324>
 8005b78:	4b58      	ldr	r3, [pc, #352]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4a57      	ldr	r2, [pc, #348]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b7e:	f023 0301 	bic.w	r3, r3, #1
 8005b82:	6713      	str	r3, [r2, #112]	; 0x70
 8005b84:	4b55      	ldr	r3, [pc, #340]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b88:	4a54      	ldr	r2, [pc, #336]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005b8a:	f023 0304 	bic.w	r3, r3, #4
 8005b8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d015      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b98:	f7fc fd36 	bl	8002608 <HAL_GetTick>
 8005b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba0:	f7fc fd32 	bl	8002608 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e0cb      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb6:	4b49      	ldr	r3, [pc, #292]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0ee      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x334>
 8005bc2:	e014      	b.n	8005bee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bc4:	f7fc fd20 	bl	8002608 <HAL_GetTick>
 8005bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005bca:	e00a      	b.n	8005be2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bcc:	f7fc fd1c 	bl	8002608 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e0b5      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005be2:	4b3e      	ldr	r3, [pc, #248]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1ee      	bne.n	8005bcc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bf4:	4b39      	ldr	r3, [pc, #228]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	4a38      	ldr	r2, [pc, #224]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a1 	beq.w	8005d4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005c0a:	4b34      	ldr	r3, [pc, #208]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	d05c      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d141      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1e:	4b31      	ldr	r3, [pc, #196]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c24:	f7fc fcf0 	bl	8002608 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fc fcec 	bl	8002608 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e087      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3e:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69da      	ldr	r2, [r3, #28]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	019b      	lsls	r3, r3, #6
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	3b01      	subs	r3, #1
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	491b      	ldr	r1, [pc, #108]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c70:	4313      	orrs	r3, r2
 8005c72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7a:	f7fc fcc5 	bl	8002608 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c82:	f7fc fcc1 	bl	8002608 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e05c      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d0f0      	beq.n	8005c82 <HAL_RCC_OscConfig+0x416>
 8005ca0:	e054      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ca2:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <HAL_RCC_OscConfig+0x478>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca8:	f7fc fcae 	bl	8002608 <HAL_GetTick>
 8005cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cae:	e008      	b.n	8005cc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cb0:	f7fc fcaa 	bl	8002608 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	1ad3      	subs	r3, r2, r3
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d901      	bls.n	8005cc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e045      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCC_OscConfig+0x470>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1f0      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x444>
 8005cce:	e03d      	b.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d107      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e038      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40007000 	.word	0x40007000
 8005ce4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ce8:	4b1b      	ldr	r3, [pc, #108]	; (8005d58 <HAL_RCC_OscConfig+0x4ec>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d028      	beq.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d121      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d11a      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d111      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	3b01      	subs	r3, #1
 8005d32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d107      	bne.n	8005d48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d001      	beq.n	8005d4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40023800 	.word	0x40023800

08005d5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e0cc      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d70:	4b68      	ldr	r3, [pc, #416]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	683a      	ldr	r2, [r7, #0]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d90c      	bls.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7e:	4b65      	ldr	r3, [pc, #404]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d86:	4b63      	ldr	r3, [pc, #396]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d001      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e0b8      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d020      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0304 	and.w	r3, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d005      	beq.n	8005dbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005db0:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4a58      	ldr	r2, [pc, #352]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005db6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005dba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0308 	and.w	r3, r3, #8
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005dc8:	4b53      	ldr	r3, [pc, #332]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	4a52      	ldr	r2, [pc, #328]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005dd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dd4:	4b50      	ldr	r3, [pc, #320]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	494d      	ldr	r1, [pc, #308]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d044      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d107      	bne.n	8005e0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dfa:	4b47      	ldr	r3, [pc, #284]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d119      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e07f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d003      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d107      	bne.n	8005e2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e1a:	4b3f      	ldr	r3, [pc, #252]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d109      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e06f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2a:	4b3b      	ldr	r3, [pc, #236]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e067      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f023 0203 	bic.w	r2, r3, #3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	4934      	ldr	r1, [pc, #208]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7fc fbdc 	bl	8002608 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e52:	e00a      	b.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e54:	f7fc fbd8 	bl	8002608 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e04f      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 020c 	and.w	r2, r3, #12
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d1eb      	bne.n	8005e54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e7c:	4b25      	ldr	r3, [pc, #148]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d20c      	bcs.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e8a:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e92:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <HAL_RCC_ClockConfig+0x1b8>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 030f 	and.w	r3, r3, #15
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e032      	b.n	8005f0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	4916      	ldr	r1, [pc, #88]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ece:	4b12      	ldr	r3, [pc, #72]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	490e      	ldr	r1, [pc, #56]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ee2:	f000 f821 	bl	8005f28 <HAL_RCC_GetSysClockFreq>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	; (8005f18 <HAL_RCC_ClockConfig+0x1bc>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	091b      	lsrs	r3, r3, #4
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	490a      	ldr	r1, [pc, #40]	; (8005f1c <HAL_RCC_ClockConfig+0x1c0>)
 8005ef4:	5ccb      	ldrb	r3, [r1, r3]
 8005ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8005efa:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <HAL_RCC_ClockConfig+0x1c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fc f99a 	bl	800223c <HAL_InitTick>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40023c00 	.word	0x40023c00
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	0800ca18 	.word	0x0800ca18
 8005f20:	20000004 	.word	0x20000004
 8005f24:	20000008 	.word	0x20000008

08005f28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f2c:	b094      	sub	sp, #80	; 0x50
 8005f2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	647b      	str	r3, [r7, #68]	; 0x44
 8005f34:	2300      	movs	r3, #0
 8005f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f38:	2300      	movs	r3, #0
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f40:	4b79      	ldr	r3, [pc, #484]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f003 030c 	and.w	r3, r3, #12
 8005f48:	2b08      	cmp	r3, #8
 8005f4a:	d00d      	beq.n	8005f68 <HAL_RCC_GetSysClockFreq+0x40>
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	f200 80e1 	bhi.w	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_RCC_GetSysClockFreq+0x34>
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d003      	beq.n	8005f62 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f5a:	e0db      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f5c:	4b73      	ldr	r3, [pc, #460]	; (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f60:	e0db      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f62:	4b73      	ldr	r3, [pc, #460]	; (8006130 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f66:	e0d8      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f68:	4b6f      	ldr	r3, [pc, #444]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f72:	4b6d      	ldr	r3, [pc, #436]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d063      	beq.n	8006046 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7e:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	2200      	movs	r2, #0
 8005f86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f90:	633b      	str	r3, [r7, #48]	; 0x30
 8005f92:	2300      	movs	r3, #0
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
 8005f96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	f04f 0000 	mov.w	r0, #0
 8005fa2:	f04f 0100 	mov.w	r1, #0
 8005fa6:	0159      	lsls	r1, r3, #5
 8005fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fac:	0150      	lsls	r0, r2, #5
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	1a51      	subs	r1, r2, r1
 8005fb6:	6139      	str	r1, [r7, #16]
 8005fb8:	4629      	mov	r1, r5
 8005fba:	eb63 0301 	sbc.w	r3, r3, r1
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fcc:	4659      	mov	r1, fp
 8005fce:	018b      	lsls	r3, r1, #6
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	018a      	lsls	r2, r1, #6
 8005fda:	4651      	mov	r1, sl
 8005fdc:	ebb2 0801 	subs.w	r8, r2, r1
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	eb63 0901 	sbc.w	r9, r3, r1
 8005fe6:	f04f 0200 	mov.w	r2, #0
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ffa:	4690      	mov	r8, r2
 8005ffc:	4699      	mov	r9, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	eb18 0303 	adds.w	r3, r8, r3
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	462b      	mov	r3, r5
 8006008:	eb49 0303 	adc.w	r3, r9, r3
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	f04f 0200 	mov.w	r2, #0
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800601a:	4629      	mov	r1, r5
 800601c:	024b      	lsls	r3, r1, #9
 800601e:	4621      	mov	r1, r4
 8006020:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006024:	4621      	mov	r1, r4
 8006026:	024a      	lsls	r2, r1, #9
 8006028:	4610      	mov	r0, r2
 800602a:	4619      	mov	r1, r3
 800602c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800602e:	2200      	movs	r2, #0
 8006030:	62bb      	str	r3, [r7, #40]	; 0x28
 8006032:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006038:	f7fa f92a 	bl	8000290 <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4613      	mov	r3, r2
 8006042:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006044:	e058      	b.n	80060f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006046:	4b38      	ldr	r3, [pc, #224]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	099b      	lsrs	r3, r3, #6
 800604c:	2200      	movs	r2, #0
 800604e:	4618      	mov	r0, r3
 8006050:	4611      	mov	r1, r2
 8006052:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006056:	623b      	str	r3, [r7, #32]
 8006058:	2300      	movs	r3, #0
 800605a:	627b      	str	r3, [r7, #36]	; 0x24
 800605c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	f04f 0000 	mov.w	r0, #0
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	0159      	lsls	r1, r3, #5
 800606e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006072:	0150      	lsls	r0, r2, #5
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4641      	mov	r1, r8
 800607a:	ebb2 0a01 	subs.w	sl, r2, r1
 800607e:	4649      	mov	r1, r9
 8006080:	eb63 0b01 	sbc.w	fp, r3, r1
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006090:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006094:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006098:	ebb2 040a 	subs.w	r4, r2, sl
 800609c:	eb63 050b 	sbc.w	r5, r3, fp
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	464b      	mov	r3, r9
 80060bc:	eb45 0303 	adc.w	r3, r5, r3
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ce:	4629      	mov	r1, r5
 80060d0:	028b      	lsls	r3, r1, #10
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060d8:	4621      	mov	r1, r4
 80060da:	028a      	lsls	r2, r1, #10
 80060dc:	4610      	mov	r0, r2
 80060de:	4619      	mov	r1, r3
 80060e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e2:	2200      	movs	r2, #0
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	61fa      	str	r2, [r7, #28]
 80060e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060ec:	f7fa f8d0 	bl	8000290 <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4613      	mov	r3, r2
 80060f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCC_GetSysClockFreq+0x200>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	3301      	adds	r3, #1
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006108:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800610a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006110:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006112:	e002      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <HAL_RCC_GetSysClockFreq+0x204>)
 8006116:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800611a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800611c:	4618      	mov	r0, r3
 800611e:	3750      	adds	r7, #80	; 0x50
 8006120:	46bd      	mov	sp, r7
 8006122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200

08006134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000004 	.word	0x20000004

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a9b      	lsrs	r3, r3, #10
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4903      	ldr	r1, [pc, #12]	; (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006168:	4618      	mov	r0, r3
 800616a:	bd80      	pop	{r7, pc}
 800616c:	40023800 	.word	0x40023800
 8006170:	0800ca28 	.word	0x0800ca28

08006174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006178:	f7ff ffdc 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 800617c:	4602      	mov	r2, r0
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0b5b      	lsrs	r3, r3, #13
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	4903      	ldr	r1, [pc, #12]	; (8006198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800618a:	5ccb      	ldrb	r3, [r1, r3]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006190:	4618      	mov	r0, r3
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40023800 	.word	0x40023800
 8006198:	0800ca28 	.word	0x0800ca28

0800619c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	220f      	movs	r2, #15
 80061aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0203 	and.w	r2, r3, #3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80061d0:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <HAL_RCC_GetClockConfig+0x5c>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	08db      	lsrs	r3, r3, #3
 80061d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <HAL_RCC_GetClockConfig+0x60>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f003 020f 	and.w	r2, r3, #15
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	601a      	str	r2, [r3, #0]
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800
 80061fc:	40023c00 	.word	0x40023c00

08006200 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10b      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006224:	2b00      	cmp	r3, #0
 8006226:	d105      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006230:	2b00      	cmp	r3, #0
 8006232:	d075      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006234:	4b91      	ldr	r3, [pc, #580]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800623a:	f7fc f9e5 	bl	8002608 <HAL_GetTick>
 800623e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006240:	e008      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006242:	f7fc f9e1 	bl	8002608 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	2b02      	cmp	r3, #2
 800624e:	d901      	bls.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e189      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006254:	4b8a      	ldr	r3, [pc, #552]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f0      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	d009      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	019a      	lsls	r2, r3, #6
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	071b      	lsls	r3, r3, #28
 8006278:	4981      	ldr	r1, [pc, #516]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800627a:	4313      	orrs	r3, r2
 800627c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800628c:	4b7c      	ldr	r3, [pc, #496]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006292:	0f1b      	lsrs	r3, r3, #28
 8006294:	f003 0307 	and.w	r3, r3, #7
 8006298:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	019a      	lsls	r2, r3, #6
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	431a      	orrs	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	071b      	lsls	r3, r3, #28
 80062ac:	4974      	ldr	r1, [pc, #464]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062b4:	4b72      	ldr	r3, [pc, #456]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062ba:	f023 021f 	bic.w	r2, r3, #31
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	69db      	ldr	r3, [r3, #28]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	496e      	ldr	r1, [pc, #440]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	019a      	lsls	r2, r3, #6
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	061b      	lsls	r3, r3, #24
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	071b      	lsls	r3, r3, #28
 80062ec:	4964      	ldr	r1, [pc, #400]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062f4:	4b61      	ldr	r3, [pc, #388]	; (800647c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80062f6:	2201      	movs	r2, #1
 80062f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062fa:	f7fc f985 	bl	8002608 <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006302:	f7fc f981 	bl	8002608 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e129      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006314:	4b5a      	ldr	r3, [pc, #360]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0304 	and.w	r3, r3, #4
 8006328:	2b00      	cmp	r3, #0
 800632a:	d105      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006334:	2b00      	cmp	r3, #0
 8006336:	d079      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006338:	4b52      	ldr	r3, [pc, #328]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800633e:	f7fc f963 	bl	8002608 <HAL_GetTick>
 8006342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006344:	e008      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006346:	f7fc f95f 	bl	8002608 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e107      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006358:	4b49      	ldr	r3, [pc, #292]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006364:	d0ef      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0304 	and.w	r3, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006372:	4b43      	ldr	r3, [pc, #268]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006378:	0f1b      	lsrs	r3, r3, #28
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	019a      	lsls	r2, r3, #6
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	061b      	lsls	r3, r3, #24
 800638c:	431a      	orrs	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	071b      	lsls	r3, r3, #28
 8006392:	493b      	ldr	r1, [pc, #236]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006394:	4313      	orrs	r3, r2
 8006396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800639a:	4b39      	ldr	r3, [pc, #228]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	021b      	lsls	r3, r3, #8
 80063ac:	4934      	ldr	r1, [pc, #208]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01e      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063c0:	4b2f      	ldr	r3, [pc, #188]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c6:	0e1b      	lsrs	r3, r3, #24
 80063c8:	f003 030f 	and.w	r3, r3, #15
 80063cc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	019a      	lsls	r2, r3, #6
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	071b      	lsls	r3, r3, #28
 80063e0:	4927      	ldr	r1, [pc, #156]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f6:	4922      	ldr	r1, [pc, #136]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80063fe:	4b21      	ldr	r3, [pc, #132]	; (8006484 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006400:	2201      	movs	r2, #1
 8006402:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006404:	f7fc f900 	bl	8002608 <HAL_GetTick>
 8006408:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800640a:	e008      	b.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800640c:	f7fc f8fc 	bl	8002608 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e0a4      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800641e:	4b18      	ldr	r3, [pc, #96]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800642a:	d1ef      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0320 	and.w	r3, r3, #32
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 808b 	beq.w	8006550 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	4b10      	ldr	r3, [pc, #64]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	4a0f      	ldr	r2, [pc, #60]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006448:	6413      	str	r3, [r2, #64]	; 0x40
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006456:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0b      	ldr	r2, [pc, #44]	; (8006488 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800645c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006460:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006462:	f7fc f8d1 	bl	8002608 <HAL_GetTick>
 8006466:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006468:	e010      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800646a:	f7fc f8cd 	bl	8002608 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d909      	bls.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e075      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800647c:	42470068 	.word	0x42470068
 8006480:	40023800 	.word	0x40023800
 8006484:	42470070 	.word	0x42470070
 8006488:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800648c:	4b38      	ldr	r3, [pc, #224]	; (8006570 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d0e8      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006498:	4b36      	ldr	r3, [pc, #216]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b0:	693a      	ldr	r2, [r7, #16]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d028      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064b6:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064c0:	4b2d      	ldr	r3, [pc, #180]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064c6:	4b2c      	ldr	r3, [pc, #176]	; (8006578 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064cc:	4a29      	ldr	r2, [pc, #164]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80064d2:	4b28      	ldr	r3, [pc, #160]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d114      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80064de:	f7fc f893 	bl	8002608 <HAL_GetTick>
 80064e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064e4:	e00a      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064e6:	f7fc f88f 	bl	8002608 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d901      	bls.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e035      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006500:	f003 0302 	and.w	r3, r3, #2
 8006504:	2b00      	cmp	r3, #0
 8006506:	d0ee      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006514:	d10d      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006522:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800652a:	4912      	ldr	r1, [pc, #72]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800652c:	4313      	orrs	r3, r2
 800652e:	608b      	str	r3, [r1, #8]
 8006530:	e005      	b.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006532:	4b10      	ldr	r3, [pc, #64]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	4a0f      	ldr	r2, [pc, #60]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006538:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800653c:	6093      	str	r3, [r2, #8]
 800653e:	4b0d      	ldr	r3, [pc, #52]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006540:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800654c:	4313      	orrs	r3, r2
 800654e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d004      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006564:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	40007000 	.word	0x40007000
 8006574:	40023800 	.word	0x40023800
 8006578:	42470e40 	.word	0x42470e40
 800657c:	424711e0 	.word	0x424711e0

08006580 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e025      	b.n	80065e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fb fe3d 	bl	8002228 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2202      	movs	r2, #2
 80065b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f001 f97f 	bl	80078c4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	461a      	mov	r2, r3
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	f001 f9d4 	bl	800797e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3708      	adds	r7, #8
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e07b      	b.n	80066f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d108      	bne.n	8006614 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800660a:	d009      	beq.n	8006620 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	61da      	str	r2, [r3, #28]
 8006612:	e005      	b.n	8006620 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb fc58 	bl	8001ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006656:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	431a      	orrs	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006690:	431a      	orrs	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800669a:	431a      	orrs	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a1b      	ldr	r3, [r3, #32]
 80066a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a4:	ea42 0103 	orr.w	r1, r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	0c1b      	lsrs	r3, r3, #16
 80066be:	f003 0104 	and.w	r1, r3, #4
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	f003 0210 	and.w	r2, r3, #16
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e041      	b.n	8006790 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b00      	cmp	r3, #0
 8006716:	d106      	bne.n	8006726 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fb fc2d 	bl	8001f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2202      	movs	r2, #2
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f000 fa95 	bl	8006c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e04e      	b.n	800684e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <HAL_TIM_Base_Start_IT+0xc4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067da:	d01d      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <HAL_TIM_Base_Start_IT+0xc8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1e      	ldr	r2, [pc, #120]	; (8006864 <HAL_TIM_Base_Start_IT+0xcc>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a1c      	ldr	r2, [pc, #112]	; (8006868 <HAL_TIM_Base_Start_IT+0xd0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1b      	ldr	r2, [pc, #108]	; (800686c <HAL_TIM_Base_Start_IT+0xd4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a19      	ldr	r2, [pc, #100]	; (8006870 <HAL_TIM_Base_Start_IT+0xd8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_TIM_Base_Start_IT+0x80>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a18      	ldr	r2, [pc, #96]	; (8006874 <HAL_TIM_Base_Start_IT+0xdc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d111      	bne.n	800683c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 0307 	and.w	r3, r3, #7
 8006822:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b06      	cmp	r3, #6
 8006828:	d010      	beq.n	800684c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800683a:	e007      	b.n	800684c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0201 	orr.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	40010000 	.word	0x40010000
 8006860:	40000400 	.word	0x40000400
 8006864:	40000800 	.word	0x40000800
 8006868:	40000c00 	.word	0x40000c00
 800686c:	40010400 	.word	0x40010400
 8006870:	40014000 	.word	0x40014000
 8006874:	40001800 	.word	0x40001800

08006878 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d122      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0302 	and.w	r3, r3, #2
 8006898:	2b02      	cmp	r3, #2
 800689a:	d11b      	bne.n	80068d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0202 	mvn.w	r2, #2
 80068a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9b5 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 80068c0:	e005      	b.n	80068ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9a7 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f9b8 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0304 	and.w	r3, r3, #4
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d122      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b04      	cmp	r3, #4
 80068ee:	d11b      	bne.n	8006928 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f06f 0204 	mvn.w	r2, #4
 80068f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800690a:	2b00      	cmp	r3, #0
 800690c:	d003      	beq.n	8006916 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f98b 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 8006914:	e005      	b.n	8006922 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f97d 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f98e 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b08      	cmp	r3, #8
 8006934:	d122      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d11b      	bne.n	800697c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0208 	mvn.w	r2, #8
 800694c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2204      	movs	r2, #4
 8006952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f961 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 8006968:	e005      	b.n	8006976 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f953 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f964 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b10      	cmp	r3, #16
 8006988:	d122      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b10      	cmp	r3, #16
 8006996:	d11b      	bne.n	80069d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2208      	movs	r2, #8
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f937 	bl	8006c2a <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f929 	bl	8006c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f93a 	bl	8006c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d10e      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d107      	bne.n	80069fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f06f 0201 	mvn.w	r2, #1
 80069f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fa fa46 	bl	8000e88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a06:	2b80      	cmp	r3, #128	; 0x80
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fae0 	bl	8006fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a32:	2b40      	cmp	r3, #64	; 0x40
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f8ff 	bl	8006c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d10e      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0320 	and.w	r3, r3, #32
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	d107      	bne.n	8006a80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f06f 0220 	mvn.w	r2, #32
 8006a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 faaa 	bl	8006fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_TIM_ConfigClockSource+0x1c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e0b4      	b.n	8006c0e <HAL_TIM_ConfigClockSource+0x186>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006adc:	d03e      	beq.n	8006b5c <HAL_TIM_ConfigClockSource+0xd4>
 8006ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae2:	f200 8087 	bhi.w	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aea:	f000 8086 	beq.w	8006bfa <HAL_TIM_ConfigClockSource+0x172>
 8006aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006af2:	d87f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d01a      	beq.n	8006b2e <HAL_TIM_ConfigClockSource+0xa6>
 8006af8:	2b70      	cmp	r3, #112	; 0x70
 8006afa:	d87b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d050      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x11a>
 8006b00:	2b60      	cmp	r3, #96	; 0x60
 8006b02:	d877      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d03c      	beq.n	8006b82 <HAL_TIM_ConfigClockSource+0xfa>
 8006b08:	2b50      	cmp	r3, #80	; 0x50
 8006b0a:	d873      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d058      	beq.n	8006bc2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b10:	2b40      	cmp	r3, #64	; 0x40
 8006b12:	d86f      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d064      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b18:	2b30      	cmp	r3, #48	; 0x30
 8006b1a:	d86b      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d060      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d867      	bhi.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d05c      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b28:	2b10      	cmp	r3, #16
 8006b2a:	d05a      	beq.n	8006be2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b2c:	e062      	b.n	8006bf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6818      	ldr	r0, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	6899      	ldr	r1, [r3, #8]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	f000 f9ad 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	609a      	str	r2, [r3, #8]
      break;
 8006b5a:	e04f      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	6899      	ldr	r1, [r3, #8]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	f000 f996 	bl	8006e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689a      	ldr	r2, [r3, #8]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7e:	609a      	str	r2, [r3, #8]
      break;
 8006b80:	e03c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6818      	ldr	r0, [r3, #0]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	6859      	ldr	r1, [r3, #4]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 f90a 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2150      	movs	r1, #80	; 0x50
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 f963 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006ba0:	e02c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6818      	ldr	r0, [r3, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6859      	ldr	r1, [r3, #4]
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f000 f929 	bl	8006e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2160      	movs	r1, #96	; 0x60
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f953 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bc0:	e01c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6818      	ldr	r0, [r3, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	6859      	ldr	r1, [r3, #4]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f000 f8ea 	bl	8006da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2140      	movs	r1, #64	; 0x40
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f000 f943 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f000 f93a 	bl	8006e66 <TIM_ITRx_SetConfig>
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c16:	b480      	push	{r7}
 8006c18:	b083      	sub	sp, #12
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1e:	bf00      	nop
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
	...

08006c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a40      	ldr	r2, [pc, #256]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d013      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c86:	d00f      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a3d      	ldr	r2, [pc, #244]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d00b      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a3c      	ldr	r2, [pc, #240]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d007      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a3b      	ldr	r2, [pc, #236]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_Base_SetConfig+0x40>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a3a      	ldr	r2, [pc, #232]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d108      	bne.n	8006cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d02b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc8:	d027      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	; (8006d80 <TIM_Base_SetConfig+0x118>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d023      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a2b      	ldr	r2, [pc, #172]	; (8006d84 <TIM_Base_SetConfig+0x11c>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d01f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <TIM_Base_SetConfig+0x120>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d017      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a28      	ldr	r2, [pc, #160]	; (8006d90 <TIM_Base_SetConfig+0x128>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a27      	ldr	r2, [pc, #156]	; (8006d94 <TIM_Base_SetConfig+0x12c>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00f      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	; (8006d98 <TIM_Base_SetConfig+0x130>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00b      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a25      	ldr	r2, [pc, #148]	; (8006d9c <TIM_Base_SetConfig+0x134>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d007      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a24      	ldr	r2, [pc, #144]	; (8006da0 <TIM_Base_SetConfig+0x138>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d003      	beq.n	8006d1a <TIM_Base_SetConfig+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a23      	ldr	r2, [pc, #140]	; (8006da4 <TIM_Base_SetConfig+0x13c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d108      	bne.n	8006d2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a0a      	ldr	r2, [pc, #40]	; (8006d7c <TIM_Base_SetConfig+0x114>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_Base_SetConfig+0xf8>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a0c      	ldr	r2, [pc, #48]	; (8006d8c <TIM_Base_SetConfig+0x124>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d103      	bne.n	8006d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	691a      	ldr	r2, [r3, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]
}
 8006d6e:	bf00      	nop
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40000400 	.word	0x40000400
 8006d84:	40000800 	.word	0x40000800
 8006d88:	40000c00 	.word	0x40000c00
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800
 8006d9c:	40001800 	.word	0x40001800
 8006da0:	40001c00 	.word	0x40001c00
 8006da4:	40002000 	.word	0x40002000

08006da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6a1b      	ldr	r3, [r3, #32]
 8006db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0201 	bic.w	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	011b      	lsls	r3, r3, #4
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 030a 	bic.w	r3, r3, #10
 8006de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	693a      	ldr	r2, [r7, #16]
 8006df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	621a      	str	r2, [r3, #32]
}
 8006dfa:	bf00      	nop
 8006dfc:	371c      	adds	r7, #28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b087      	sub	sp, #28
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	f023 0210 	bic.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a1b      	ldr	r3, [r3, #32]
 8006e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	031b      	lsls	r3, r3, #12
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e66:	b480      	push	{r7}
 8006e68:	b085      	sub	sp, #20
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f043 0307 	orr.w	r3, r3, #7
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	021a      	lsls	r2, r3, #8
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d101      	bne.n	8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	e05a      	b.n	8006faa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d022      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d01d      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d018      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d013      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00e      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a18      	ldr	r2, [pc, #96]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d009      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a17      	ldr	r2, [pc, #92]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a15      	ldr	r2, [pc, #84]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10c      	bne.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40010000 	.word	0x40010000
 8006fbc:	40000400 	.word	0x40000400
 8006fc0:	40000800 	.word	0x40000800
 8006fc4:	40000c00 	.word	0x40000c00
 8006fc8:	40010400 	.word	0x40010400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40001800 	.word	0x40001800

08006fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e03f      	b.n	800708e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d106      	bne.n	8007028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7fa ffce 	bl	8001fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2224      	movs	r2, #36	; 0x24
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68da      	ldr	r2, [r3, #12]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800703e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f9cb 	bl	80073dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691a      	ldr	r2, [r3, #16]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	695a      	ldr	r2, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2220      	movs	r2, #32
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3708      	adds	r7, #8
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b08a      	sub	sp, #40	; 0x28
 800709a:	af02      	add	r7, sp, #8
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	603b      	str	r3, [r7, #0]
 80070a2:	4613      	mov	r3, r2
 80070a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d17c      	bne.n	80071b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Transmit+0x2c>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e075      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Transmit+0x3e>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e06e      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2221      	movs	r2, #33	; 0x21
 80070e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ea:	f7fb fa8d 	bl	8002608 <HAL_GetTick>
 80070ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	88fa      	ldrh	r2, [r7, #6]
 80070f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	88fa      	ldrh	r2, [r7, #6]
 80070fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007104:	d108      	bne.n	8007118 <HAL_UART_Transmit+0x82>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d104      	bne.n	8007118 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	61bb      	str	r3, [r7, #24]
 8007116:	e003      	b.n	8007120 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800711c:	2300      	movs	r3, #0
 800711e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007128:	e02a      	b.n	8007180 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2200      	movs	r2, #0
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f8e2 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e036      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10b      	bne.n	8007162 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3302      	adds	r3, #2
 800715e:	61bb      	str	r3, [r7, #24]
 8007160:	e007      	b.n	8007172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	781a      	ldrb	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007176:	b29b      	uxth	r3, r3
 8007178:	3b01      	subs	r3, #1
 800717a:	b29a      	uxth	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1cf      	bne.n	800712a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	2140      	movs	r1, #64	; 0x40
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 f8b2 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d001      	beq.n	80071a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3720      	adds	r7, #32
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b08a      	sub	sp, #40	; 0x28
 80071be:	af02      	add	r7, sp, #8
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	60b9      	str	r1, [r7, #8]
 80071c4:	603b      	str	r3, [r7, #0]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b20      	cmp	r3, #32
 80071d8:	f040 808c 	bne.w	80072f4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_UART_Receive+0x2e>
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e084      	b.n	80072f6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_UART_Receive+0x40>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e07d      	b.n	80072f6 <HAL_UART_Receive+0x13c>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2222      	movs	r2, #34	; 0x22
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2200      	movs	r2, #0
 8007214:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007216:	f7fb f9f7 	bl	8002608 <HAL_GetTick>
 800721a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	88fa      	ldrh	r2, [r7, #6]
 8007220:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	88fa      	ldrh	r2, [r7, #6]
 8007226:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007230:	d108      	bne.n	8007244 <HAL_UART_Receive+0x8a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d104      	bne.n	8007244 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	e003      	b.n	800724c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007248:	2300      	movs	r3, #0
 800724a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007254:	e043      	b.n	80072de <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	2120      	movs	r1, #32
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f84c 	bl	80072fe <UART_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d001      	beq.n	8007270 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e042      	b.n	80072f6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10c      	bne.n	8007290 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	b29a      	uxth	r2, r3
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	3302      	adds	r3, #2
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e01f      	b.n	80072d0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007298:	d007      	beq.n	80072aa <HAL_UART_Receive+0xf0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d10a      	bne.n	80072b8 <HAL_UART_Receive+0xfe>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e008      	b.n	80072ca <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072c4:	b2da      	uxtb	r2, r3
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	3301      	adds	r3, #1
 80072ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3b01      	subs	r3, #1
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1b6      	bne.n	8007256 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2220      	movs	r2, #32
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	e000      	b.n	80072f6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80072f4:	2302      	movs	r3, #2
  }
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3720      	adds	r7, #32
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b090      	sub	sp, #64	; 0x40
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	4613      	mov	r3, r2
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	e050      	b.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d04c      	beq.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <UART_WaitOnFlagUntilTimeout+0x30>
 800731e:	f7fb f973 	bl	8002608 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800732a:	429a      	cmp	r2, r3
 800732c:	d241      	bcs.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	330c      	adds	r3, #12
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007338:	e853 3f00 	ldrex	r3, [r3]
 800733c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	330c      	adds	r3, #12
 800734c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800734e:	637a      	str	r2, [r7, #52]	; 0x34
 8007350:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e5      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3314      	adds	r3, #20
 8007368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	613b      	str	r3, [r7, #16]
   return(result);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f023 0301 	bic.w	r3, r3, #1
 8007378:	63bb      	str	r3, [r7, #56]	; 0x38
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	3314      	adds	r3, #20
 8007380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007382:	623a      	str	r2, [r7, #32]
 8007384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	69f9      	ldr	r1, [r7, #28]
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e5      	bne.n	8007362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e00f      	b.n	80073d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	429a      	cmp	r2, r3
 80073c0:	bf0c      	ite	eq
 80073c2:	2301      	moveq	r3, #1
 80073c4:	2300      	movne	r3, #0
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	461a      	mov	r2, r3
 80073ca:	79fb      	ldrb	r3, [r7, #7]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d09f      	beq.n	8007310 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3740      	adds	r7, #64	; 0x40
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e0:	b0c0      	sub	sp, #256	; 0x100
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	68d9      	ldr	r1, [r3, #12]
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	ea40 0301 	orr.w	r3, r0, r1
 8007404:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	431a      	orrs	r2, r3
 8007414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	431a      	orrs	r2, r3
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007434:	f021 010c 	bic.w	r1, r1, #12
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007442:	430b      	orrs	r3, r1
 8007444:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007456:	6999      	ldr	r1, [r3, #24]
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	ea40 0301 	orr.w	r3, r0, r1
 8007462:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b8f      	ldr	r3, [pc, #572]	; (80076a8 <UART_SetConfig+0x2cc>)
 800746c:	429a      	cmp	r2, r3
 800746e:	d005      	beq.n	800747c <UART_SetConfig+0xa0>
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	4b8d      	ldr	r3, [pc, #564]	; (80076ac <UART_SetConfig+0x2d0>)
 8007478:	429a      	cmp	r2, r3
 800747a:	d104      	bne.n	8007486 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800747c:	f7fe fe7a 	bl	8006174 <HAL_RCC_GetPCLK2Freq>
 8007480:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007484:	e003      	b.n	800748e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007486:	f7fe fe61 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800748a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800748e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007498:	f040 810c 	bne.w	80076b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800749c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a0:	2200      	movs	r2, #0
 80074a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074ae:	4622      	mov	r2, r4
 80074b0:	462b      	mov	r3, r5
 80074b2:	1891      	adds	r1, r2, r2
 80074b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074b6:	415b      	adcs	r3, r3
 80074b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074be:	4621      	mov	r1, r4
 80074c0:	eb12 0801 	adds.w	r8, r2, r1
 80074c4:	4629      	mov	r1, r5
 80074c6:	eb43 0901 	adc.w	r9, r3, r1
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074de:	4690      	mov	r8, r2
 80074e0:	4699      	mov	r9, r3
 80074e2:	4623      	mov	r3, r4
 80074e4:	eb18 0303 	adds.w	r3, r8, r3
 80074e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074ec:	462b      	mov	r3, r5
 80074ee:	eb49 0303 	adc.w	r3, r9, r3
 80074f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007502:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007506:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800750a:	460b      	mov	r3, r1
 800750c:	18db      	adds	r3, r3, r3
 800750e:	653b      	str	r3, [r7, #80]	; 0x50
 8007510:	4613      	mov	r3, r2
 8007512:	eb42 0303 	adc.w	r3, r2, r3
 8007516:	657b      	str	r3, [r7, #84]	; 0x54
 8007518:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800751c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007520:	f7f8 feb6 	bl	8000290 <__aeabi_uldivmod>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	4b61      	ldr	r3, [pc, #388]	; (80076b0 <UART_SetConfig+0x2d4>)
 800752a:	fba3 2302 	umull	r2, r3, r3, r2
 800752e:	095b      	lsrs	r3, r3, #5
 8007530:	011c      	lsls	r4, r3, #4
 8007532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007536:	2200      	movs	r2, #0
 8007538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800753c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007540:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007544:	4642      	mov	r2, r8
 8007546:	464b      	mov	r3, r9
 8007548:	1891      	adds	r1, r2, r2
 800754a:	64b9      	str	r1, [r7, #72]	; 0x48
 800754c:	415b      	adcs	r3, r3
 800754e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007550:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007554:	4641      	mov	r1, r8
 8007556:	eb12 0a01 	adds.w	sl, r2, r1
 800755a:	4649      	mov	r1, r9
 800755c:	eb43 0b01 	adc.w	fp, r3, r1
 8007560:	f04f 0200 	mov.w	r2, #0
 8007564:	f04f 0300 	mov.w	r3, #0
 8007568:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800756c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007574:	4692      	mov	sl, r2
 8007576:	469b      	mov	fp, r3
 8007578:	4643      	mov	r3, r8
 800757a:	eb1a 0303 	adds.w	r3, sl, r3
 800757e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007582:	464b      	mov	r3, r9
 8007584:	eb4b 0303 	adc.w	r3, fp, r3
 8007588:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800758c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007598:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800759c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075a0:	460b      	mov	r3, r1
 80075a2:	18db      	adds	r3, r3, r3
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
 80075a6:	4613      	mov	r3, r2
 80075a8:	eb42 0303 	adc.w	r3, r2, r3
 80075ac:	647b      	str	r3, [r7, #68]	; 0x44
 80075ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075b6:	f7f8 fe6b 	bl	8000290 <__aeabi_uldivmod>
 80075ba:	4602      	mov	r2, r0
 80075bc:	460b      	mov	r3, r1
 80075be:	4611      	mov	r1, r2
 80075c0:	4b3b      	ldr	r3, [pc, #236]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075c2:	fba3 2301 	umull	r2, r3, r3, r1
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	2264      	movs	r2, #100	; 0x64
 80075ca:	fb02 f303 	mul.w	r3, r2, r3
 80075ce:	1acb      	subs	r3, r1, r3
 80075d0:	00db      	lsls	r3, r3, #3
 80075d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075d6:	4b36      	ldr	r3, [pc, #216]	; (80076b0 <UART_SetConfig+0x2d4>)
 80075d8:	fba3 2302 	umull	r2, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075e4:	441c      	add	r4, r3
 80075e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ea:	2200      	movs	r2, #0
 80075ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80075f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	1891      	adds	r1, r2, r2
 80075fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007600:	415b      	adcs	r3, r3
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007608:	4641      	mov	r1, r8
 800760a:	1851      	adds	r1, r2, r1
 800760c:	6339      	str	r1, [r7, #48]	; 0x30
 800760e:	4649      	mov	r1, r9
 8007610:	414b      	adcs	r3, r1
 8007612:	637b      	str	r3, [r7, #52]	; 0x34
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007620:	4659      	mov	r1, fp
 8007622:	00cb      	lsls	r3, r1, #3
 8007624:	4651      	mov	r1, sl
 8007626:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762a:	4651      	mov	r1, sl
 800762c:	00ca      	lsls	r2, r1, #3
 800762e:	4610      	mov	r0, r2
 8007630:	4619      	mov	r1, r3
 8007632:	4603      	mov	r3, r0
 8007634:	4642      	mov	r2, r8
 8007636:	189b      	adds	r3, r3, r2
 8007638:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800763c:	464b      	mov	r3, r9
 800763e:	460a      	mov	r2, r1
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007654:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007658:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800765c:	460b      	mov	r3, r1
 800765e:	18db      	adds	r3, r3, r3
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
 8007662:	4613      	mov	r3, r2
 8007664:	eb42 0303 	adc.w	r3, r2, r3
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800766e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007672:	f7f8 fe0d 	bl	8000290 <__aeabi_uldivmod>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <UART_SetConfig+0x2d4>)
 800767c:	fba3 1302 	umull	r1, r3, r3, r2
 8007680:	095b      	lsrs	r3, r3, #5
 8007682:	2164      	movs	r1, #100	; 0x64
 8007684:	fb01 f303 	mul.w	r3, r1, r3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	3332      	adds	r3, #50	; 0x32
 800768e:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <UART_SetConfig+0x2d4>)
 8007690:	fba2 2303 	umull	r2, r3, r2, r3
 8007694:	095b      	lsrs	r3, r3, #5
 8007696:	f003 0207 	and.w	r2, r3, #7
 800769a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4422      	add	r2, r4
 80076a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076a4:	e105      	b.n	80078b2 <UART_SetConfig+0x4d6>
 80076a6:	bf00      	nop
 80076a8:	40011000 	.word	0x40011000
 80076ac:	40011400 	.word	0x40011400
 80076b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076c6:	4642      	mov	r2, r8
 80076c8:	464b      	mov	r3, r9
 80076ca:	1891      	adds	r1, r2, r2
 80076cc:	6239      	str	r1, [r7, #32]
 80076ce:	415b      	adcs	r3, r3
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24
 80076d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076d6:	4641      	mov	r1, r8
 80076d8:	1854      	adds	r4, r2, r1
 80076da:	4649      	mov	r1, r9
 80076dc:	eb43 0501 	adc.w	r5, r3, r1
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	00eb      	lsls	r3, r5, #3
 80076ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076ee:	00e2      	lsls	r2, r4, #3
 80076f0:	4614      	mov	r4, r2
 80076f2:	461d      	mov	r5, r3
 80076f4:	4643      	mov	r3, r8
 80076f6:	18e3      	adds	r3, r4, r3
 80076f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80076fc:	464b      	mov	r3, r9
 80076fe:	eb45 0303 	adc.w	r3, r5, r3
 8007702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007712:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007722:	4629      	mov	r1, r5
 8007724:	008b      	lsls	r3, r1, #2
 8007726:	4621      	mov	r1, r4
 8007728:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800772c:	4621      	mov	r1, r4
 800772e:	008a      	lsls	r2, r1, #2
 8007730:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007734:	f7f8 fdac 	bl	8000290 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4b60      	ldr	r3, [pc, #384]	; (80078c0 <UART_SetConfig+0x4e4>)
 800773e:	fba3 2302 	umull	r2, r3, r3, r2
 8007742:	095b      	lsrs	r3, r3, #5
 8007744:	011c      	lsls	r4, r3, #4
 8007746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800774a:	2200      	movs	r2, #0
 800774c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007754:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	1891      	adds	r1, r2, r2
 800775e:	61b9      	str	r1, [r7, #24]
 8007760:	415b      	adcs	r3, r3
 8007762:	61fb      	str	r3, [r7, #28]
 8007764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007768:	4641      	mov	r1, r8
 800776a:	1851      	adds	r1, r2, r1
 800776c:	6139      	str	r1, [r7, #16]
 800776e:	4649      	mov	r1, r9
 8007770:	414b      	adcs	r3, r1
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	f04f 0300 	mov.w	r3, #0
 800777c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007780:	4659      	mov	r1, fp
 8007782:	00cb      	lsls	r3, r1, #3
 8007784:	4651      	mov	r1, sl
 8007786:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800778a:	4651      	mov	r1, sl
 800778c:	00ca      	lsls	r2, r1, #3
 800778e:	4610      	mov	r0, r2
 8007790:	4619      	mov	r1, r3
 8007792:	4603      	mov	r3, r0
 8007794:	4642      	mov	r2, r8
 8007796:	189b      	adds	r3, r3, r2
 8007798:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800779c:	464b      	mov	r3, r9
 800779e:	460a      	mov	r2, r1
 80077a0:	eb42 0303 	adc.w	r3, r2, r3
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077c0:	4649      	mov	r1, r9
 80077c2:	008b      	lsls	r3, r1, #2
 80077c4:	4641      	mov	r1, r8
 80077c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ca:	4641      	mov	r1, r8
 80077cc:	008a      	lsls	r2, r1, #2
 80077ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077d2:	f7f8 fd5d 	bl	8000290 <__aeabi_uldivmod>
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4b39      	ldr	r3, [pc, #228]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077dc:	fba3 1302 	umull	r1, r3, r3, r2
 80077e0:	095b      	lsrs	r3, r3, #5
 80077e2:	2164      	movs	r1, #100	; 0x64
 80077e4:	fb01 f303 	mul.w	r3, r1, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	3332      	adds	r3, #50	; 0x32
 80077ee:	4a34      	ldr	r2, [pc, #208]	; (80078c0 <UART_SetConfig+0x4e4>)
 80077f0:	fba2 2303 	umull	r2, r3, r2, r3
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077fa:	441c      	add	r4, r3
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007800:	2200      	movs	r2, #0
 8007802:	673b      	str	r3, [r7, #112]	; 0x70
 8007804:	677a      	str	r2, [r7, #116]	; 0x74
 8007806:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800780a:	4642      	mov	r2, r8
 800780c:	464b      	mov	r3, r9
 800780e:	1891      	adds	r1, r2, r2
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	415b      	adcs	r3, r3
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800781a:	4641      	mov	r1, r8
 800781c:	1851      	adds	r1, r2, r1
 800781e:	6039      	str	r1, [r7, #0]
 8007820:	4649      	mov	r1, r9
 8007822:	414b      	adcs	r3, r1
 8007824:	607b      	str	r3, [r7, #4]
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	f04f 0300 	mov.w	r3, #0
 800782e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007832:	4659      	mov	r1, fp
 8007834:	00cb      	lsls	r3, r1, #3
 8007836:	4651      	mov	r1, sl
 8007838:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800783c:	4651      	mov	r1, sl
 800783e:	00ca      	lsls	r2, r1, #3
 8007840:	4610      	mov	r0, r2
 8007842:	4619      	mov	r1, r3
 8007844:	4603      	mov	r3, r0
 8007846:	4642      	mov	r2, r8
 8007848:	189b      	adds	r3, r3, r2
 800784a:	66bb      	str	r3, [r7, #104]	; 0x68
 800784c:	464b      	mov	r3, r9
 800784e:	460a      	mov	r2, r1
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	663b      	str	r3, [r7, #96]	; 0x60
 8007860:	667a      	str	r2, [r7, #100]	; 0x64
 8007862:	f04f 0200 	mov.w	r2, #0
 8007866:	f04f 0300 	mov.w	r3, #0
 800786a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800786e:	4649      	mov	r1, r9
 8007870:	008b      	lsls	r3, r1, #2
 8007872:	4641      	mov	r1, r8
 8007874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007878:	4641      	mov	r1, r8
 800787a:	008a      	lsls	r2, r1, #2
 800787c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007880:	f7f8 fd06 	bl	8000290 <__aeabi_uldivmod>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <UART_SetConfig+0x4e4>)
 800788a:	fba3 1302 	umull	r1, r3, r3, r2
 800788e:	095b      	lsrs	r3, r3, #5
 8007890:	2164      	movs	r1, #100	; 0x64
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	3332      	adds	r3, #50	; 0x32
 800789c:	4a08      	ldr	r2, [pc, #32]	; (80078c0 <UART_SetConfig+0x4e4>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	f003 020f 	and.w	r2, r3, #15
 80078a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4422      	add	r2, r4
 80078b0:	609a      	str	r2, [r3, #8]
}
 80078b2:	bf00      	nop
 80078b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078b8:	46bd      	mov	sp, r7
 80078ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078be:	bf00      	nop
 80078c0:	51eb851f 	.word	0x51eb851f

080078c4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d123      	bne.n	800791e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80078de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	6851      	ldr	r1, [r2, #4]
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	6892      	ldr	r2, [r2, #8]
 80078ea:	4311      	orrs	r1, r2
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	68d2      	ldr	r2, [r2, #12]
 80078f0:	4311      	orrs	r1, r2
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	6912      	ldr	r2, [r2, #16]
 80078f6:	4311      	orrs	r1, r2
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	6952      	ldr	r2, [r2, #20]
 80078fc:	4311      	orrs	r1, r2
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	6992      	ldr	r2, [r2, #24]
 8007902:	4311      	orrs	r1, r2
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	69d2      	ldr	r2, [r2, #28]
 8007908:	4311      	orrs	r1, r2
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	6a12      	ldr	r2, [r2, #32]
 800790e:	4311      	orrs	r1, r2
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007914:	430a      	orrs	r2, r1
 8007916:	431a      	orrs	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	e028      	b.n	8007970 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	69d9      	ldr	r1, [r3, #28]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	4319      	orrs	r1, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	430b      	orrs	r3, r1
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007944:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	6851      	ldr	r1, [r2, #4]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6892      	ldr	r2, [r2, #8]
 8007950:	4311      	orrs	r1, r2
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	68d2      	ldr	r2, [r2, #12]
 8007956:	4311      	orrs	r1, r2
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	6912      	ldr	r2, [r2, #16]
 800795c:	4311      	orrs	r1, r2
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	6952      	ldr	r2, [r2, #20]
 8007962:	4311      	orrs	r1, r2
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	6992      	ldr	r2, [r2, #24]
 8007968:	430a      	orrs	r2, r1
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	370c      	adds	r7, #12
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800797e:	b480      	push	{r7}
 8007980:	b085      	sub	sp, #20
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d128      	bne.n	80079e2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	1e59      	subs	r1, r3, #1
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4319      	orrs	r1, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	021b      	lsls	r3, r3, #8
 80079b0:	4319      	orrs	r1, r3
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	031b      	lsls	r3, r3, #12
 80079ba:	4319      	orrs	r1, r3
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	041b      	lsls	r3, r3, #16
 80079c4:	4319      	orrs	r1, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	3b01      	subs	r3, #1
 80079cc:	051b      	lsls	r3, r3, #20
 80079ce:	4319      	orrs	r1, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	699b      	ldr	r3, [r3, #24]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	061b      	lsls	r3, r3, #24
 80079d8:	430b      	orrs	r3, r1
 80079da:	431a      	orrs	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	609a      	str	r2, [r3, #8]
 80079e0:	e02f      	b.n	8007a42 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	68d2      	ldr	r2, [r2, #12]
 80079f2:	3a01      	subs	r2, #1
 80079f4:	0311      	lsls	r1, r2, #12
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	6952      	ldr	r2, [r2, #20]
 80079fa:	3a01      	subs	r2, #1
 80079fc:	0512      	lsls	r2, r2, #20
 80079fe:	430a      	orrs	r2, r1
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	1e59      	subs	r1, r3, #1
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	011b      	lsls	r3, r3, #4
 8007a1c:	4319      	orrs	r1, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	021b      	lsls	r3, r3, #8
 8007a26:	4319      	orrs	r1, r3
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	4319      	orrs	r1, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	061b      	lsls	r3, r3, #24
 8007a3a:	430b      	orrs	r3, r1
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3714      	adds	r7, #20
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a50:	b084      	sub	sp, #16
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
 8007a5a:	f107 001c 	add.w	r0, r7, #28
 8007a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d122      	bne.n	8007aae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a80:	687a      	ldr	r2, [r7, #4]
 8007a82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d105      	bne.n	8007aa2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f9c0 	bl	8007e28 <USB_CoreReset>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73fb      	strb	r3, [r7, #15]
 8007aac:	e01a      	b.n	8007ae4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f9b4 	bl	8007e28 <USB_CoreReset>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d106      	bne.n	8007ad8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ace:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ad6:	e005      	b.n	8007ae4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10b      	bne.n	8007b02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f043 0206 	orr.w	r2, r3, #6
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f043 0220 	orr.w	r2, r3, #32
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b0e:	b004      	add	sp, #16
 8007b10:	4770      	bx	lr

08007b12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f043 0201 	orr.w	r2, r3, #1
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	f023 0201 	bic.w	r2, r3, #1
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	370c      	adds	r7, #12
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr

08007b56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d115      	bne.n	8007ba4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b84:	2001      	movs	r0, #1
 8007b86:	f7fa fd4b 	bl	8002620 <HAL_Delay>
      ms++;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f93a 	bl	8007e0a <USB_GetMode>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d01e      	beq.n	8007bda <USB_SetCurrentMode+0x84>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b31      	cmp	r3, #49	; 0x31
 8007ba0:	d9f0      	bls.n	8007b84 <USB_SetCurrentMode+0x2e>
 8007ba2:	e01a      	b.n	8007bda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d115      	bne.n	8007bd6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007bb6:	2001      	movs	r0, #1
 8007bb8:	f7fa fd32 	bl	8002620 <HAL_Delay>
      ms++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f921 	bl	8007e0a <USB_GetMode>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <USB_SetCurrentMode+0x84>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2b31      	cmp	r3, #49	; 0x31
 8007bd2:	d9f0      	bls.n	8007bb6 <USB_SetCurrentMode+0x60>
 8007bd4:	e001      	b.n	8007bda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e005      	b.n	8007be6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b32      	cmp	r3, #50	; 0x32
 8007bde:	d101      	bne.n	8007be4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
	...

08007bf0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	4a13      	ldr	r2, [pc, #76]	; (8007c54 <USB_FlushTxFifo+0x64>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d901      	bls.n	8007c10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e01b      	b.n	8007c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	daf2      	bge.n	8007bfe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	019b      	lsls	r3, r3, #6
 8007c20:	f043 0220 	orr.w	r2, r3, #32
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4a08      	ldr	r2, [pc, #32]	; (8007c54 <USB_FlushTxFifo+0x64>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d901      	bls.n	8007c3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e006      	b.n	8007c48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	f003 0320 	and.w	r3, r3, #32
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d0f0      	beq.n	8007c28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr
 8007c54:	00030d40 	.word	0x00030d40

08007c58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <USB_FlushRxFifo+0x5c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d901      	bls.n	8007c76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e018      	b.n	8007ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	daf2      	bge.n	8007c64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2210      	movs	r2, #16
 8007c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4a08      	ldr	r2, [pc, #32]	; (8007cb4 <USB_FlushRxFifo+0x5c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d901      	bls.n	8007c9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e006      	b.n	8007ca8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d0f0      	beq.n	8007c88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3714      	adds	r7, #20
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	00030d40 	.word	0x00030d40

08007cb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b089      	sub	sp, #36	; 0x24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	71fb      	strb	r3, [r7, #7]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d123      	bne.n	8007d26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007cde:	88bb      	ldrh	r3, [r7, #4]
 8007ce0:	3303      	adds	r3, #3
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	e018      	b.n	8007d1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	031a      	lsls	r2, r3, #12
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3301      	adds	r3, #1
 8007d16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d3e2      	bcc.n	8007cec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3724      	adds	r7, #36	; 0x24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b08b      	sub	sp, #44	; 0x2c
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	089b      	lsrs	r3, r3, #2
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	623b      	str	r3, [r7, #32]
 8007d5e:	e014      	b.n	8007d8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	3301      	adds	r3, #1
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	3301      	adds	r3, #1
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d80:	3301      	adds	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	3301      	adds	r3, #1
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	6a3a      	ldr	r2, [r7, #32]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d3e6      	bcc.n	8007d60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007d92:	8bfb      	ldrh	r3, [r7, #30]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01e      	beq.n	8007dd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da2:	461a      	mov	r2, r3
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	701a      	strb	r2, [r3, #0]
      i++;
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007dca:	8bfb      	ldrh	r3, [r7, #30]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007dd0:	8bfb      	ldrh	r3, [r7, #30]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1ea      	bne.n	8007dac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	372c      	adds	r7, #44	; 0x2c
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	f003 0301 	and.w	r3, r3, #1
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	3301      	adds	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a13      	ldr	r2, [pc, #76]	; (8007e8c <USB_CoreReset+0x64>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d901      	bls.n	8007e46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e42:	2303      	movs	r3, #3
 8007e44:	e01b      	b.n	8007e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	daf2      	bge.n	8007e34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	f043 0201 	orr.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	3301      	adds	r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <USB_CoreReset+0x64>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d901      	bls.n	8007e70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e006      	b.n	8007e7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	691b      	ldr	r3, [r3, #16]
 8007e74:	f003 0301 	and.w	r3, r3, #1
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d0f0      	beq.n	8007e5e <USB_CoreReset+0x36>

  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	00030d40 	.word	0x00030d40

08007e90 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e90:	b084      	sub	sp, #16
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b086      	sub	sp, #24
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d018      	beq.n	8007f18 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d10a      	bne.n	8007f02 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007efa:	f043 0304 	orr.w	r3, r3, #4
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	e014      	b.n	8007f2c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	6013      	str	r3, [r2, #0]
 8007f16:	e009      	b.n	8007f2c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f26:	f023 0304 	bic.w	r3, r3, #4
 8007f2a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f2c:	2110      	movs	r1, #16
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7ff fe5e 	bl	8007bf0 <USB_FlushTxFifo>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff fe8a 	bl	8007c58 <USB_FlushRxFifo>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
 8007f52:	e015      	b.n	8007f80 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f60:	461a      	mov	r2, r3
 8007f62:	f04f 33ff 	mov.w	r3, #4294967295
 8007f66:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	613b      	str	r3, [r7, #16]
 8007f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f82:	693a      	ldr	r2, [r7, #16]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d3e5      	bcc.n	8007f54 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f04f 32ff 	mov.w	r2, #4294967295
 8007f94:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00b      	beq.n	8007fba <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fa8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a13      	ldr	r2, [pc, #76]	; (8007ffc <USB_HostInit+0x16c>)
 8007fae:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a13      	ldr	r2, [pc, #76]	; (8008000 <USB_HostInit+0x170>)
 8007fb4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fb8:	e009      	b.n	8007fce <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2280      	movs	r2, #128	; 0x80
 8007fbe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a10      	ldr	r2, [pc, #64]	; (8008004 <USB_HostInit+0x174>)
 8007fc4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a0f      	ldr	r2, [pc, #60]	; (8008008 <USB_HostInit+0x178>)
 8007fca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f043 0210 	orr.w	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699a      	ldr	r2, [r3, #24]
 8007fe4:	4b09      	ldr	r3, [pc, #36]	; (800800c <USB_HostInit+0x17c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3718      	adds	r7, #24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ff8:	b004      	add	sp, #16
 8007ffa:	4770      	bx	lr
 8007ffc:	01000200 	.word	0x01000200
 8008000:	00e00300 	.word	0x00e00300
 8008004:	00600080 	.word	0x00600080
 8008008:	004000e0 	.word	0x004000e0
 800800c:	a3200008 	.word	0xa3200008

08008010 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008010:	b480      	push	{r7}
 8008012:	b085      	sub	sp, #20
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008048:	4313      	orrs	r3, r2
 800804a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800804c:	78fb      	ldrb	r3, [r7, #3]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d107      	bne.n	8008062 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008058:	461a      	mov	r2, r3
 800805a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800805e:	6053      	str	r3, [r2, #4]
 8008060:	e009      	b.n	8008076 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	2b02      	cmp	r3, #2
 8008066:	d106      	bne.n	8008076 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806e:	461a      	mov	r2, r3
 8008070:	f241 7370 	movw	r3, #6000	; 0x1770
 8008074:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080a4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080b4:	2064      	movs	r0, #100	; 0x64
 80080b6:	f7fa fab3 	bl	8002620 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080c8:	200a      	movs	r0, #10
 80080ca:	f7fa faa9 	bl	8002620 <HAL_Delay>

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080fc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008104:	2b00      	cmp	r3, #0
 8008106:	d109      	bne.n	800811c <USB_DriveVbus+0x44>
 8008108:	78fb      	ldrb	r3, [r7, #3]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d106      	bne.n	800811c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800811a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008126:	d109      	bne.n	800813c <USB_DriveVbus+0x64>
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800813a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	0c5b      	lsrs	r3, r3, #17
 8008168:	f003 0303 	and.w	r3, r3, #3
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	b29b      	uxth	r3, r3
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b088      	sub	sp, #32
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	4608      	mov	r0, r1
 80081a6:	4611      	mov	r1, r2
 80081a8:	461a      	mov	r2, r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	70fb      	strb	r3, [r7, #3]
 80081ae:	460b      	mov	r3, r1
 80081b0:	70bb      	strb	r3, [r7, #2]
 80081b2:	4613      	mov	r3, r2
 80081b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081be:	78fb      	ldrb	r3, [r7, #3]
 80081c0:	015a      	lsls	r2, r3, #5
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	4413      	add	r3, r2
 80081c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ca:	461a      	mov	r2, r3
 80081cc:	f04f 33ff 	mov.w	r3, #4294967295
 80081d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081d6:	2b03      	cmp	r3, #3
 80081d8:	d87e      	bhi.n	80082d8 <USB_HC_Init+0x13c>
 80081da:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <USB_HC_Init+0x44>)
 80081dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	0800829b 	.word	0x0800829b
 80081e8:	080081f1 	.word	0x080081f1
 80081ec:	0800825d 	.word	0x0800825d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081fc:	461a      	mov	r2, r3
 80081fe:	f240 439d 	movw	r3, #1181	; 0x49d
 8008202:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008204:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008208:	2b00      	cmp	r3, #0
 800820a:	da10      	bge.n	800822e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	4413      	add	r3, r2
 8008214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	78fa      	ldrb	r2, [r7, #3]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	440a      	add	r2, r1
 8008222:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800822a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800822c:	e057      	b.n	80082de <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008236:	2b00      	cmp	r3, #0
 8008238:	d051      	beq.n	80082de <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	4413      	add	r3, r2
 8008242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	78fa      	ldrb	r2, [r7, #3]
 800824a:	0151      	lsls	r1, r2, #5
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	440a      	add	r2, r1
 8008250:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008254:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008258:	60d3      	str	r3, [r2, #12]
      break;
 800825a:	e040      	b.n	80082de <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	4413      	add	r3, r2
 8008264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008268:	461a      	mov	r2, r3
 800826a:	f240 639d 	movw	r3, #1693	; 0x69d
 800826e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008270:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008274:	2b00      	cmp	r3, #0
 8008276:	da34      	bge.n	80082e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	015a      	lsls	r2, r3, #5
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	4413      	add	r3, r2
 8008280:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	78fa      	ldrb	r2, [r7, #3]
 8008288:	0151      	lsls	r1, r2, #5
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	440a      	add	r2, r1
 800828e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008296:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008298:	e023      	b.n	80082e2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a6:	461a      	mov	r2, r3
 80082a8:	f240 2325 	movw	r3, #549	; 0x225
 80082ac:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	da17      	bge.n	80082e6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082d0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80082d4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082d6:	e006      	b.n	80082e6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	77fb      	strb	r3, [r7, #31]
      break;
 80082dc:	e004      	b.n	80082e8 <USB_HC_Init+0x14c>
      break;
 80082de:	bf00      	nop
 80082e0:	e002      	b.n	80082e8 <USB_HC_Init+0x14c>
      break;
 80082e2:	bf00      	nop
 80082e4:	e000      	b.n	80082e8 <USB_HC_Init+0x14c>
      break;
 80082e6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	015a      	lsls	r2, r3, #5
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	4413      	add	r3, r2
 80082f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	78fa      	ldrb	r2, [r7, #3]
 80082f8:	0151      	lsls	r1, r2, #5
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	440a      	add	r2, r1
 80082fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008302:	f043 0302 	orr.w	r3, r3, #2
 8008306:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800830e:	699a      	ldr	r2, [r3, #24]
 8008310:	78fb      	ldrb	r3, [r7, #3]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	2101      	movs	r1, #1
 8008318:	fa01 f303 	lsl.w	r3, r1, r3
 800831c:	6939      	ldr	r1, [r7, #16]
 800831e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008322:	4313      	orrs	r3, r2
 8008324:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008332:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008336:	2b00      	cmp	r3, #0
 8008338:	da03      	bge.n	8008342 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800833a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	e001      	b.n	8008346 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff feff 	bl	800814a <USB_GetHostSpeed>
 800834c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800834e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008352:	2b02      	cmp	r3, #2
 8008354:	d106      	bne.n	8008364 <USB_HC_Init+0x1c8>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d003      	beq.n	8008364 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800835c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e001      	b.n	8008368 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008368:	787b      	ldrb	r3, [r7, #1]
 800836a:	059b      	lsls	r3, r3, #22
 800836c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008370:	78bb      	ldrb	r3, [r7, #2]
 8008372:	02db      	lsls	r3, r3, #11
 8008374:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008378:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800837a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800837e:	049b      	lsls	r3, r3, #18
 8008380:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008384:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008386:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008388:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800838c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	0159      	lsls	r1, r3, #5
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	440b      	add	r3, r1
 800839a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80083a4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80083a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d003      	beq.n	80083b6 <USB_HC_Init+0x21a>
 80083ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d10f      	bne.n	80083d6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80083b6:	78fb      	ldrb	r3, [r7, #3]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	78fa      	ldrb	r2, [r7, #3]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083d4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3720      	adds	r7, #32
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af02      	add	r7, sp, #8
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	785b      	ldrb	r3, [r3, #1]
 80083f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80083f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083fc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008406:	2b00      	cmp	r3, #0
 8008408:	d02d      	beq.n	8008466 <USB_HC_StartXfer+0x86>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d129      	bne.n	8008466 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d117      	bne.n	8008448 <USB_HC_StartXfer+0x68>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	79db      	ldrb	r3, [r3, #7]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d003      	beq.n	8008428 <USB_HC_StartXfer+0x48>
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	79db      	ldrb	r3, [r3, #7]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d10f      	bne.n	8008448 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	0151      	lsls	r1, r2, #5
 800843a:	6a3a      	ldr	r2, [r7, #32]
 800843c:	440a      	add	r2, r1
 800843e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008448:	79fb      	ldrb	r3, [r7, #7]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10b      	bne.n	8008466 <USB_HC_StartXfer+0x86>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d107      	bne.n	8008466 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	785b      	ldrb	r3, [r3, #1]
 800845a:	4619      	mov	r1, r3
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 fa0f 	bl	8008880 <USB_DoPing>
      return HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e0f8      	b.n	8008658 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d018      	beq.n	80084a0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	8912      	ldrh	r2, [r2, #8]
 8008476:	4413      	add	r3, r2
 8008478:	3b01      	subs	r3, #1
 800847a:	68ba      	ldr	r2, [r7, #8]
 800847c:	8912      	ldrh	r2, [r2, #8]
 800847e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008482:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008484:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008486:	8b7b      	ldrh	r3, [r7, #26]
 8008488:	429a      	cmp	r2, r3
 800848a:	d90b      	bls.n	80084a4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800848c:	8b7b      	ldrh	r3, [r7, #26]
 800848e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	8912      	ldrh	r2, [r2, #8]
 8008496:	fb03 f202 	mul.w	r2, r3, r2
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	611a      	str	r2, [r3, #16]
 800849e:	e001      	b.n	80084a4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80084a0:	2301      	movs	r3, #1
 80084a2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	78db      	ldrb	r3, [r3, #3]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d007      	beq.n	80084bc <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80084ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	8912      	ldrh	r2, [r2, #8]
 80084b2:	fb03 f202 	mul.w	r2, r3, r2
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	611a      	str	r2, [r3, #16]
 80084ba:	e003      	b.n	80084c4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084ce:	04d9      	lsls	r1, r3, #19
 80084d0:	4b63      	ldr	r3, [pc, #396]	; (8008660 <USB_HC_StartXfer+0x280>)
 80084d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	7a9b      	ldrb	r3, [r3, #10]
 80084da:	075b      	lsls	r3, r3, #29
 80084dc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084e0:	69f9      	ldr	r1, [r7, #28]
 80084e2:	0148      	lsls	r0, r1, #5
 80084e4:	6a39      	ldr	r1, [r7, #32]
 80084e6:	4401      	add	r1, r0
 80084e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80084ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	68d9      	ldr	r1, [r3, #12]
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	6a3b      	ldr	r3, [r7, #32]
 8008500:	4413      	add	r3, r2
 8008502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008506:	460a      	mov	r2, r1
 8008508:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	bf0c      	ite	eq
 800851a:	2301      	moveq	r3, #1
 800851c:	2300      	movne	r3, #0
 800851e:	b2db      	uxtb	r3, r3
 8008520:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	6a3b      	ldr	r3, [r7, #32]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69fa      	ldr	r2, [r7, #28]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	6a3a      	ldr	r2, [r7, #32]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008540:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	4413      	add	r3, r2
 800854a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	7e7b      	ldrb	r3, [r7, #25]
 8008552:	075b      	lsls	r3, r3, #29
 8008554:	69f9      	ldr	r1, [r7, #28]
 8008556:	0148      	lsls	r0, r1, #5
 8008558:	6a39      	ldr	r1, [r7, #32]
 800855a:	4401      	add	r1, r0
 800855c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008560:	4313      	orrs	r3, r2
 8008562:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	015a      	lsls	r2, r3, #5
 8008568:	6a3b      	ldr	r3, [r7, #32]
 800856a:	4413      	add	r3, r2
 800856c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800857a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	78db      	ldrb	r3, [r3, #3]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	e003      	b.n	8008596 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008594:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800859c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085aa:	461a      	mov	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e04e      	b.n	8008658 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	78db      	ldrb	r3, [r3, #3]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d149      	bne.n	8008656 <USB_HC_StartXfer+0x276>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d045      	beq.n	8008656 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	79db      	ldrb	r3, [r3, #7]
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d830      	bhi.n	8008634 <USB_HC_StartXfer+0x254>
 80085d2:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <USB_HC_StartXfer+0x1f8>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	080085e9 	.word	0x080085e9
 80085dc:	0800860d 	.word	0x0800860d
 80085e0:	080085e9 	.word	0x080085e9
 80085e4:	0800860d 	.word	0x0800860d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	3303      	adds	r3, #3
 80085ee:	089b      	lsrs	r3, r3, #2
 80085f0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80085f2:	8afa      	ldrh	r2, [r7, #22]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d91c      	bls.n	8008638 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f043 0220 	orr.w	r2, r3, #32
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	619a      	str	r2, [r3, #24]
        }
        break;
 800860a:	e015      	b.n	8008638 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	3303      	adds	r3, #3
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008616:	8afa      	ldrh	r2, [r7, #22]
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	b29b      	uxth	r3, r3
 8008622:	429a      	cmp	r2, r3
 8008624:	d90a      	bls.n	800863c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	619a      	str	r2, [r3, #24]
        }
        break;
 8008632:	e003      	b.n	800863c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008634:	bf00      	nop
 8008636:	e002      	b.n	800863e <USB_HC_StartXfer+0x25e>
        break;
 8008638:	bf00      	nop
 800863a:	e000      	b.n	800863e <USB_HC_StartXfer+0x25e>
        break;
 800863c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	68d9      	ldr	r1, [r3, #12]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	785a      	ldrb	r2, [r3, #1]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	b29b      	uxth	r3, r3
 800864c:	2000      	movs	r0, #0
 800864e:	9000      	str	r0, [sp, #0]
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fb31 	bl	8007cb8 <USB_WritePacket>
  }

  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3728      	adds	r7, #40	; 0x28
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	1ff80000 	.word	0x1ff80000

08008664 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	b29b      	uxth	r3, r3
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr

08008686 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008686:	b480      	push	{r7}
 8008688:	b089      	sub	sp, #36	; 0x24
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
 800868e:	460b      	mov	r3, r1
 8008690:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008696:	78fb      	ldrb	r3, [r7, #3]
 8008698:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	015a      	lsls	r2, r3, #5
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	4413      	add	r3, r2
 80086a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	0c9b      	lsrs	r3, r3, #18
 80086ae:	f003 0303 	and.w	r3, r3, #3
 80086b2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	69fb      	ldr	r3, [r7, #28]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	0fdb      	lsrs	r3, r3, #31
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d104      	bne.n	80086e0 <USB_HC_Halt+0x5a>
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	e0c8      	b.n	8008872 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d002      	beq.n	80086ec <USB_HC_Halt+0x66>
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d163      	bne.n	80087b4 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	69fa      	ldr	r2, [r7, #28]
 8008700:	440a      	add	r2, r1
 8008702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800870a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	f040 80ab 	bne.w	8008870 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d133      	bne.n	800878e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	440a      	add	r2, r1
 800873c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008740:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008744:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	4413      	add	r3, r2
 800874e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69ba      	ldr	r2, [r7, #24]
 8008756:	0151      	lsls	r1, r2, #5
 8008758:	69fa      	ldr	r2, [r7, #28]
 800875a:	440a      	add	r2, r1
 800875c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008760:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008764:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3301      	adds	r3, #1
 800876a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008772:	d81d      	bhi.n	80087b0 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	015a      	lsls	r2, r3, #5
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	4413      	add	r3, r2
 800877c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800878a:	d0ec      	beq.n	8008766 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800878c:	e070      	b.n	8008870 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	0151      	lsls	r1, r2, #5
 80087a0:	69fa      	ldr	r2, [r7, #28]
 80087a2:	440a      	add	r2, r1
 80087a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087ac:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087ae:	e05f      	b.n	8008870 <USB_HC_Halt+0x1ea>
            break;
 80087b0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087b2:	e05d      	b.n	8008870 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087d2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d133      	bne.n	800884c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69ba      	ldr	r2, [r7, #24]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	69fa      	ldr	r2, [r7, #28]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008802:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	015a      	lsls	r2, r3, #5
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	4413      	add	r3, r2
 800880c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	0151      	lsls	r1, r2, #5
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	440a      	add	r2, r1
 800881a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800881e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008822:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008830:	d81d      	bhi.n	800886e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	015a      	lsls	r2, r3, #5
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008848:	d0ec      	beq.n	8008824 <USB_HC_Halt+0x19e>
 800884a:	e011      	b.n	8008870 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	0151      	lsls	r1, r2, #5
 800885e:	69fa      	ldr	r2, [r7, #28]
 8008860:	440a      	add	r2, r1
 8008862:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	e000      	b.n	8008870 <USB_HC_Halt+0x1ea>
          break;
 800886e:	bf00      	nop
    }
  }

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3724      	adds	r7, #36	; 0x24
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
	...

08008880 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008880:	b480      	push	{r7}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008894:	2301      	movs	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	04da      	lsls	r2, r3, #19
 800889c:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <USB_DoPing+0x74>)
 800889e:	4013      	ands	r3, r2
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	697a      	ldr	r2, [r7, #20]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	461a      	mov	r2, r3
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	371c      	adds	r7, #28
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	1ff80000 	.word	0x1ff80000

080088f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f7ff f911 	bl	8007b34 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008912:	2110      	movs	r1, #16
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff f96b 	bl	8007bf0 <USB_FlushTxFifo>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff f997 	bl	8007c58 <USB_FlushRxFifo>
 800892a:	4603      	mov	r3, r0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d001      	beq.n	8008934 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008934:	2300      	movs	r3, #0
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	e01f      	b.n	800897a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008950:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008958:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008960:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	4413      	add	r3, r2
 800896a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800896e:	461a      	mov	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	3301      	adds	r3, #1
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b0f      	cmp	r3, #15
 800897e:	d9dc      	bls.n	800893a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	e034      	b.n	80089f0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	4413      	add	r3, r2
 800898e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800899c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ba:	461a      	mov	r2, r3
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089cc:	d80c      	bhi.n	80089e8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e4:	d0ec      	beq.n	80089c0 <USB_StopHost+0xc8>
 80089e6:	e000      	b.n	80089ea <USB_StopHost+0xf2>
        break;
 80089e8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	3301      	adds	r3, #1
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2b0f      	cmp	r3, #15
 80089f4:	d9c7      	bls.n	8008986 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089fc:	461a      	mov	r2, r3
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f04f 32ff 	mov.w	r2, #4294967295
 8008a0a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff f880 	bl	8007b12 <USB_EnableGlobalInt>

  return ret;
 8008a12:	7ffb      	ldrb	r3, [r7, #31]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008a1c:	b590      	push	{r4, r7, lr}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af04      	add	r7, sp, #16
 8008a22:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008a24:	2301      	movs	r3, #1
 8008a26:	2202      	movs	r2, #2
 8008a28:	2102      	movs	r1, #2
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fc66 	bl	80092fc <USBH_FindInterface>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2bff      	cmp	r3, #255	; 0xff
 8008a38:	d002      	beq.n	8008a40 <USBH_CDC_InterfaceInit+0x24>
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d901      	bls.n	8008a44 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a40:	2302      	movs	r3, #2
 8008a42:	e13d      	b.n	8008cc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc3b 	bl	80092c4 <USBH_SelectInterface>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e131      	b.n	8008cc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008a62:	2050      	movs	r0, #80	; 0x50
 8008a64:	f002 fb00 	bl	800b068 <malloc>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e11f      	b.n	8008cc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008a80:	2250      	movs	r2, #80	; 0x50
 8008a82:	2100      	movs	r1, #0
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f002 faff 	bl	800b088 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	211a      	movs	r1, #26
 8008a90:	fb01 f303 	mul.w	r3, r1, r3
 8008a94:	4413      	add	r3, r2
 8008a96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	b25b      	sxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da15      	bge.n	8008ace <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	211a      	movs	r1, #26
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	4413      	add	r3, r2
 8008aae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ab2:	781a      	ldrb	r2, [r3, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	211a      	movs	r1, #26
 8008abe:	fb01 f303 	mul.w	r3, r1, r3
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ac8:	881a      	ldrh	r2, [r3, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	785b      	ldrb	r3, [r3, #1]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 ff2c 	bl	800a932 <USBH_AllocPipe>
 8008ada:	4603      	mov	r3, r0
 8008adc:	461a      	mov	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	7819      	ldrb	r1, [r3, #0]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	7858      	ldrb	r0, [r3, #1]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	8952      	ldrh	r2, [r2, #10]
 8008afa:	9202      	str	r2, [sp, #8]
 8008afc:	2203      	movs	r2, #3
 8008afe:	9201      	str	r2, [sp, #4]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	4623      	mov	r3, r4
 8008b04:	4602      	mov	r2, r0
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f001 fee4 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f002 f9f9 	bl	800af0c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	210a      	movs	r1, #10
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fbeb 	bl	80092fc <USBH_FindInterface>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	2bff      	cmp	r3, #255	; 0xff
 8008b2e:	d002      	beq.n	8008b36 <USBH_CDC_InterfaceInit+0x11a>
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b01      	cmp	r3, #1
 8008b34:	d901      	bls.n	8008b3a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b36:	2302      	movs	r3, #2
 8008b38:	e0c2      	b.n	8008cc0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	211a      	movs	r1, #26
 8008b40:	fb01 f303 	mul.w	r3, r1, r3
 8008b44:	4413      	add	r3, r2
 8008b46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da16      	bge.n	8008b80 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	211a      	movs	r1, #26
 8008b58:	fb01 f303 	mul.w	r3, r1, r3
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	211a      	movs	r1, #26
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008b78:	881a      	ldrh	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	835a      	strh	r2, [r3, #26]
 8008b7e:	e015      	b.n	8008bac <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008b80:	7bfb      	ldrb	r3, [r7, #15]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	211a      	movs	r1, #26
 8008b86:	fb01 f303 	mul.w	r3, r1, r3
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008b90:	781a      	ldrb	r2, [r3, #0]
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	211a      	movs	r1, #26
 8008b9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ba6:	881a      	ldrh	r2, [r3, #0]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	211a      	movs	r1, #26
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	b25b      	sxtb	r3, r3
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da16      	bge.n	8008bf2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	211a      	movs	r1, #26
 8008bca:	fb01 f303 	mul.w	r3, r1, r3
 8008bce:	4413      	add	r3, r2
 8008bd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	211a      	movs	r1, #26
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008bea:	881a      	ldrh	r2, [r3, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	835a      	strh	r2, [r3, #26]
 8008bf0:	e015      	b.n	8008c1e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	211a      	movs	r1, #26
 8008bf8:	fb01 f303 	mul.w	r3, r1, r3
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c02:	781a      	ldrb	r2, [r3, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c08:	7bfb      	ldrb	r3, [r7, #15]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	211a      	movs	r1, #26
 8008c0e:	fb01 f303 	mul.w	r3, r1, r3
 8008c12:	4413      	add	r3, r2
 8008c14:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c18:	881a      	ldrh	r2, [r3, #0]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	7b9b      	ldrb	r3, [r3, #14]
 8008c22:	4619      	mov	r1, r3
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f001 fe84 	bl	800a932 <USBH_AllocPipe>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	7bdb      	ldrb	r3, [r3, #15]
 8008c36:	4619      	mov	r1, r3
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f001 fe7a 	bl	800a932 <USBH_AllocPipe>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	461a      	mov	r2, r3
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	7b59      	ldrb	r1, [r3, #13]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	7b98      	ldrb	r0, [r3, #14]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	8b12      	ldrh	r2, [r2, #24]
 8008c5e:	9202      	str	r2, [sp, #8]
 8008c60:	2202      	movs	r2, #2
 8008c62:	9201      	str	r2, [sp, #4]
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	4623      	mov	r3, r4
 8008c68:	4602      	mov	r2, r0
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fe32 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	7b19      	ldrb	r1, [r3, #12]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	7bd8      	ldrb	r0, [r3, #15]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c84:	68ba      	ldr	r2, [r7, #8]
 8008c86:	8b52      	ldrh	r2, [r2, #26]
 8008c88:	9202      	str	r2, [sp, #8]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	9201      	str	r2, [sp, #4]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	4623      	mov	r3, r4
 8008c92:	4602      	mov	r2, r0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 fe1d 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	7b5b      	ldrb	r3, [r3, #13]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f002 f92e 	bl	800af0c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	7b1b      	ldrb	r3, [r3, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f002 f927 	bl	800af0c <USBH_LL_SetToggle>

  return USBH_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd90      	pop	{r4, r7, pc}

08008cc8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00e      	beq.n	8008d00 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 fe12 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 fe3d 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	7b1b      	ldrb	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00e      	beq.n	8008d26 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	7b1b      	ldrb	r3, [r3, #12]
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f001 fdff 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	7b1b      	ldrb	r3, [r3, #12]
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f001 fe2a 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	7b5b      	ldrb	r3, [r3, #13]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	7b5b      	ldrb	r3, [r3, #13]
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 fdec 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	7b5b      	ldrb	r3, [r3, #13]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fe17 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 f989 	bl	800b078 <free>
    phost->pActiveClass->pData = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d88:	69db      	ldr	r3, [r3, #28]
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	3340      	adds	r3, #64	; 0x40
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 f8b1 	bl	8008efa <GetLineCoding>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008d9c:	7afb      	ldrb	r3, [r7, #11]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008da8:	2102      	movs	r1, #2
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008dae:	7afb      	ldrb	r3, [r7, #11]
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3710      	adds	r7, #16
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d877      	bhi.n	8008ecc <USBH_CDC_Process+0x114>
 8008ddc:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <USBH_CDC_Process+0x2c>)
 8008dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de2:	bf00      	nop
 8008de4:	08008df9 	.word	0x08008df9
 8008de8:	08008dff 	.word	0x08008dff
 8008dec:	08008e2f 	.word	0x08008e2f
 8008df0:	08008ea3 	.word	0x08008ea3
 8008df4:	08008eb1 	.word	0x08008eb1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008dfc:	e06d      	b.n	8008eda <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f897 	bl	8008f38 <SetLineCoding>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d104      	bne.n	8008e1e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e1c:	e058      	b.n	8008ed0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d055      	beq.n	8008ed0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2204      	movs	r2, #4
 8008e28:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008e2c:	e050      	b.n	8008ed0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	3340      	adds	r3, #64	; 0x40
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 f860 	bl	8008efa <GetLineCoding>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d126      	bne.n	8008e92 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e56:	791b      	ldrb	r3, [r3, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d13b      	bne.n	8008ed4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e66:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d133      	bne.n	8008ed4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e76:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d12b      	bne.n	8008ed4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e84:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d124      	bne.n	8008ed4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f958 	bl	8009140 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008e90:	e020      	b.n	8008ed4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d01d      	beq.n	8008ed4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008ea0:	e018      	b.n	8008ed4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f000 f867 	bl	8008f76 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f8da 	bl	8009062 <CDC_ProcessReception>
      break;
 8008eae:	e014      	b.n	8008eda <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 ffef 	bl	8009e96 <USBH_ClrFeature>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008eca:	e005      	b.n	8008ed8 <USBH_CDC_Process+0x120>

    default:
      break;
 8008ecc:	bf00      	nop
 8008ece:	e004      	b.n	8008eda <USBH_CDC_Process+0x122>
      break;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <USBH_CDC_Process+0x122>
      break;
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <USBH_CDC_Process+0x122>
      break;
 8008ed8:	bf00      	nop

  }

  return status;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b082      	sub	sp, #8
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	6078      	str	r0, [r7, #4]
 8008f02:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	22a1      	movs	r2, #161	; 0xa1
 8008f08:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2221      	movs	r2, #33	; 0x21
 8008f0e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2207      	movs	r2, #7
 8008f20:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2207      	movs	r2, #7
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f001 fa81 	bl	800a430 <USBH_CtlReq>
 8008f2e:	4603      	mov	r3, r0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3708      	adds	r7, #8
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2221      	movs	r2, #33	; 0x21
 8008f46:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2207      	movs	r2, #7
 8008f5e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2207      	movs	r2, #7
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fa62 	bl	800a430 <USBH_CtlReq>
 8008f6c:	4603      	mov	r3, r0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af02      	add	r7, sp, #8
 8008f7c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d002      	beq.n	8008f9c <CDC_ProcessTransmission+0x26>
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d023      	beq.n	8008fe2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008f9a:	e05e      	b.n	800905a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	68fa      	ldr	r2, [r7, #12]
 8008fa2:	8b12      	ldrh	r2, [r2, #24]
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d90b      	bls.n	8008fc0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	69d9      	ldr	r1, [r3, #28]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	8b1a      	ldrh	r2, [r3, #24]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	7b5b      	ldrb	r3, [r3, #13]
 8008fb4:	2001      	movs	r0, #1
 8008fb6:	9000      	str	r0, [sp, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 fc48 	bl	800a84e <USBH_BulkSendData>
 8008fbe:	e00b      	b.n	8008fd8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	7b5b      	ldrb	r3, [r3, #13]
 8008fce:	2001      	movs	r0, #1
 8008fd0:	9000      	str	r0, [sp, #0]
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 fc3b 	bl	800a84e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008fe0:	e03b      	b.n	800905a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	7b5b      	ldrb	r3, [r3, #13]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f001 ff65 	bl	800aeb8 <USBH_LL_GetURBState>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ff2:	7afb      	ldrb	r3, [r7, #11]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d128      	bne.n	800904a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	8b12      	ldrh	r2, [r2, #24]
 8009000:	4293      	cmp	r3, r2
 8009002:	d90e      	bls.n	8009022 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	8b12      	ldrh	r2, [r2, #24]
 800900c:	1a9a      	subs	r2, r3, r2
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	8b12      	ldrh	r2, [r2, #24]
 800901a:	441a      	add	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	61da      	str	r2, [r3, #28]
 8009020:	e002      	b.n	8009028 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009038:	e00e      	b.n	8009058 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f868 	bl	8009118 <USBH_CDC_TransmitCallback>
      break;
 8009048:	e006      	b.n	8009058 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800904a:	7afb      	ldrb	r3, [r7, #11]
 800904c:	2b02      	cmp	r3, #2
 800904e:	d103      	bne.n	8009058 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009058:	bf00      	nop
  }
}
 800905a:	bf00      	nop
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}

08009062 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009062:	b580      	push	{r7, lr}
 8009064:	b086      	sub	sp, #24
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009074:	2300      	movs	r3, #0
 8009076:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800907e:	2b03      	cmp	r3, #3
 8009080:	d002      	beq.n	8009088 <CDC_ProcessReception+0x26>
 8009082:	2b04      	cmp	r3, #4
 8009084:	d00e      	beq.n	80090a4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009086:	e043      	b.n	8009110 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	6a19      	ldr	r1, [r3, #32]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	8b5a      	ldrh	r2, [r3, #26]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	7b1b      	ldrb	r3, [r3, #12]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 fbff 	bl	800a898 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	2204      	movs	r2, #4
 800909e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090a2:	e035      	b.n	8009110 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	7b1b      	ldrb	r3, [r3, #12]
 80090a8:	4619      	mov	r1, r3
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f001 ff04 	bl	800aeb8 <USBH_LL_GetURBState>
 80090b0:	4603      	mov	r3, r0
 80090b2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80090b4:	7cfb      	ldrb	r3, [r7, #19]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d129      	bne.n	800910e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	7b1b      	ldrb	r3, [r3, #12]
 80090be:	4619      	mov	r1, r3
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f001 fe67 	bl	800ad94 <USBH_LL_GetLastXferSize>
 80090c6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d016      	beq.n	8009100 <CDC_ProcessReception+0x9e>
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	8b5b      	ldrh	r3, [r3, #26]
 80090d6:	461a      	mov	r2, r3
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4293      	cmp	r3, r2
 80090dc:	d910      	bls.n	8009100 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	1ad2      	subs	r2, r2, r3
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	6a1a      	ldr	r2, [r3, #32]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	441a      	add	r2, r3
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2203      	movs	r2, #3
 80090fa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80090fe:	e006      	b.n	800910e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f80f 	bl	800912c <USBH_CDC_ReceiveCallback>
      break;
 800910e:	bf00      	nop
  }
}
 8009110:	bf00      	nop
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4613      	mov	r3, r2
 8009160:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009168:	2302      	movs	r3, #2
 800916a:	e029      	b.n	80091c0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	79fa      	ldrb	r2, [r7, #7]
 8009170:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f000 f81f 	bl	80091c8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d003      	beq.n	80091b8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f001 fd2d 	bl	800ac18 <USBH_LL_Init>

  return USBH_OK;
 80091be:	2300      	movs	r3, #0
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3710      	adds	r7, #16
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091d4:	2300      	movs	r3, #0
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e009      	b.n	80091ee <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	33e0      	adds	r3, #224	; 0xe0
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3301      	adds	r3, #1
 80091ec:	60fb      	str	r3, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b0f      	cmp	r3, #15
 80091f2:	d9f2      	bls.n	80091da <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80091f4:	2300      	movs	r3, #0
 80091f6:	60fb      	str	r3, [r7, #12]
 80091f8:	e009      	b.n	800920e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009204:	2200      	movs	r2, #0
 8009206:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009214:	d3f1      	bcc.n	80091fa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2240      	movs	r2, #64	; 0x40
 800923a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2200      	movs	r2, #0
 8009240:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009262:	2300      	movs	r3, #0
}
 8009264:	4618      	mov	r0, r3
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d016      	beq.n	80092b2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10e      	bne.n	80092ac <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009294:	1c59      	adds	r1, r3, #1
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	33de      	adds	r3, #222	; 0xde
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
 80092aa:	e004      	b.n	80092b6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092ac:	2302      	movs	r3, #2
 80092ae:	73fb      	strb	r3, [r7, #15]
 80092b0:	e001      	b.n	80092b6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80092b2:	2302      	movs	r3, #2
 80092b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3714      	adds	r7, #20
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80092c4:	b480      	push	{r7}
 80092c6:	b085      	sub	sp, #20
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	460b      	mov	r3, r1
 80092ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d204      	bcs.n	80092ea <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	78fa      	ldrb	r2, [r7, #3]
 80092e4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80092e8:	e001      	b.n	80092ee <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80092ea:	2302      	movs	r3, #2
 80092ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	4608      	mov	r0, r1
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	4603      	mov	r3, r0
 800930c:	70fb      	strb	r3, [r7, #3]
 800930e:	460b      	mov	r3, r1
 8009310:	70bb      	strb	r3, [r7, #2]
 8009312:	4613      	mov	r3, r2
 8009314:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009316:	2300      	movs	r3, #0
 8009318:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009324:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009326:	e025      	b.n	8009374 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009328:	7dfb      	ldrb	r3, [r7, #23]
 800932a:	221a      	movs	r2, #26
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	3308      	adds	r3, #8
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	3302      	adds	r3, #2
 8009338:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	795b      	ldrb	r3, [r3, #5]
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	429a      	cmp	r2, r3
 8009342:	d002      	beq.n	800934a <USBH_FindInterface+0x4e>
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	2bff      	cmp	r3, #255	; 0xff
 8009348:	d111      	bne.n	800936e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800934e:	78ba      	ldrb	r2, [r7, #2]
 8009350:	429a      	cmp	r2, r3
 8009352:	d002      	beq.n	800935a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009354:	78bb      	ldrb	r3, [r7, #2]
 8009356:	2bff      	cmp	r3, #255	; 0xff
 8009358:	d109      	bne.n	800936e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800935e:	787a      	ldrb	r2, [r7, #1]
 8009360:	429a      	cmp	r2, r3
 8009362:	d002      	beq.n	800936a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009364:	787b      	ldrb	r3, [r7, #1]
 8009366:	2bff      	cmp	r3, #255	; 0xff
 8009368:	d101      	bne.n	800936e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	e006      	b.n	800937c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800936e:	7dfb      	ldrb	r3, [r7, #23]
 8009370:	3301      	adds	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d9d6      	bls.n	8009328 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800937a:	23ff      	movs	r3, #255	; 0xff
}
 800937c:	4618      	mov	r0, r3
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 fc87 	bl	800aca4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009396:	2101      	movs	r1, #1
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 fda0 	bl	800aede <USBH_LL_DriverVBUS>

  return USBH_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b088      	sub	sp, #32
 80093ac:	af04      	add	r7, sp, #16
 80093ae:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80093b0:	2302      	movs	r3, #2
 80093b2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80093b4:	2300      	movs	r3, #0
 80093b6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d102      	bne.n	80093ca <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2203      	movs	r2, #3
 80093c8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b0b      	cmp	r3, #11
 80093d2:	f200 81be 	bhi.w	8009752 <USBH_Process+0x3aa>
 80093d6:	a201      	add	r2, pc, #4	; (adr r2, 80093dc <USBH_Process+0x34>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800940d 	.word	0x0800940d
 80093e0:	0800943f 	.word	0x0800943f
 80093e4:	080094a7 	.word	0x080094a7
 80093e8:	080096ed 	.word	0x080096ed
 80093ec:	08009753 	.word	0x08009753
 80093f0:	0800954b 	.word	0x0800954b
 80093f4:	08009693 	.word	0x08009693
 80093f8:	08009581 	.word	0x08009581
 80093fc:	080095a1 	.word	0x080095a1
 8009400:	080095c1 	.word	0x080095c1
 8009404:	08009605 	.word	0x08009605
 8009408:	080096d5 	.word	0x080096d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009412:	b2db      	uxtb	r3, r3
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 819e 	beq.w	8009756 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009420:	20c8      	movs	r0, #200	; 0xc8
 8009422:	f001 fda3 	bl	800af6c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f001 fc99 	bl	800ad5e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800943c:	e18b      	b.n	8009756 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009444:	2b01      	cmp	r3, #1
 8009446:	d107      	bne.n	8009458 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009456:	e18d      	b.n	8009774 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800945e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009462:	d914      	bls.n	800948e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800946a:	3301      	adds	r3, #1
 800946c:	b2da      	uxtb	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800947a:	2b03      	cmp	r3, #3
 800947c:	d903      	bls.n	8009486 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	220d      	movs	r2, #13
 8009482:	701a      	strb	r2, [r3, #0]
      break;
 8009484:	e176      	b.n	8009774 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	701a      	strb	r2, [r3, #0]
      break;
 800948c:	e172      	b.n	8009774 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009494:	f103 020a 	add.w	r2, r3, #10
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800949e:	200a      	movs	r0, #10
 80094a0:	f001 fd64 	bl	800af6c <USBH_Delay>
      break;
 80094a4:	e166      	b.n	8009774 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094b6:	2104      	movs	r1, #4
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80094bc:	2064      	movs	r0, #100	; 0x64
 80094be:	f001 fd55 	bl	800af6c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 fc24 	bl	800ad10 <USBH_LL_GetSpeed>
 80094c8:	4603      	mov	r3, r0
 80094ca:	461a      	mov	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2205      	movs	r2, #5
 80094d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80094d8:	2100      	movs	r1, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fa29 	bl	800a932 <USBH_AllocPipe>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80094e8:	2180      	movs	r1, #128	; 0x80
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f001 fa21 	bl	800a932 <USBH_AllocPipe>
 80094f0:	4603      	mov	r3, r0
 80094f2:	461a      	mov	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	7919      	ldrb	r1, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800950c:	b292      	uxth	r2, r2
 800950e:	9202      	str	r2, [sp, #8]
 8009510:	2200      	movs	r2, #0
 8009512:	9201      	str	r2, [sp, #4]
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4603      	mov	r3, r0
 8009518:	2280      	movs	r2, #128	; 0x80
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f001 f9da 	bl	800a8d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	7959      	ldrb	r1, [r3, #5]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009534:	b292      	uxth	r2, r2
 8009536:	9202      	str	r2, [sp, #8]
 8009538:	2200      	movs	r2, #0
 800953a:	9201      	str	r2, [sp, #4]
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	4603      	mov	r3, r0
 8009540:	2200      	movs	r2, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 f9c6 	bl	800a8d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009548:	e114      	b.n	8009774 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f918 	bl	8009780 <USBH_HandleEnum>
 8009550:	4603      	mov	r3, r0
 8009552:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	f040 80fe 	bne.w	800975a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800956c:	2b01      	cmp	r3, #1
 800956e:	d103      	bne.n	8009578 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2208      	movs	r2, #8
 8009574:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009576:	e0f0      	b.n	800975a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2207      	movs	r2, #7
 800957c:	701a      	strb	r2, [r3, #0]
      break;
 800957e:	e0ec      	b.n	800975a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 80e9 	beq.w	800975e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009592:	2101      	movs	r1, #1
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2208      	movs	r2, #8
 800959c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800959e:	e0de      	b.n	800975e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fc2c 	bl	8009e08 <USBH_SetCfg>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 80d5 	bne.w	8009762 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2209      	movs	r2, #9
 80095bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095be:	e0d0      	b.n	8009762 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80095c6:	f003 0320 	and.w	r3, r3, #32
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d016      	beq.n	80095fc <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80095ce:	2101      	movs	r1, #1
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fc3c 	bl	8009e4e <USBH_SetFeature>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095da:	7bbb      	ldrb	r3, [r7, #14]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d103      	bne.n	80095ea <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220a      	movs	r2, #10
 80095e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095e8:	e0bd      	b.n	8009766 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80095ea:	7bbb      	ldrb	r3, [r7, #14]
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	f040 80b9 	bne.w	8009766 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	220a      	movs	r2, #10
 80095f8:	701a      	strb	r2, [r3, #0]
      break;
 80095fa:	e0b4      	b.n	8009766 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	220a      	movs	r2, #10
 8009600:	701a      	strb	r2, [r3, #0]
      break;
 8009602:	e0b0      	b.n	8009766 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80ad 	beq.w	800976a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009618:	2300      	movs	r3, #0
 800961a:	73fb      	strb	r3, [r7, #15]
 800961c:	e016      	b.n	800964c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800961e:	7bfa      	ldrb	r2, [r7, #15]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	32de      	adds	r2, #222	; 0xde
 8009624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009628:	791a      	ldrb	r2, [r3, #4]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009630:	429a      	cmp	r2, r3
 8009632:	d108      	bne.n	8009646 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	32de      	adds	r2, #222	; 0xde
 800963a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009644:	e005      	b.n	8009652 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	3301      	adds	r3, #1
 800964a:	73fb      	strb	r3, [r7, #15]
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0e5      	beq.n	800961e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009658:	2b00      	cmp	r3, #0
 800965a:	d016      	beq.n	800968a <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	4798      	blx	r3
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2206      	movs	r2, #6
 8009672:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800967a:	2103      	movs	r1, #3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009680:	e073      	b.n	800976a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	220d      	movs	r2, #13
 8009686:	701a      	strb	r2, [r3, #0]
      break;
 8009688:	e06f      	b.n	800976a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	220d      	movs	r2, #13
 800968e:	701a      	strb	r2, [r3, #0]
      break;
 8009690:	e06b      	b.n	800976a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d017      	beq.n	80096cc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	4798      	blx	r3
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	220b      	movs	r2, #11
 80096b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096ba:	e058      	b.n	800976e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 80096bc:	7bbb      	ldrb	r3, [r7, #14]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b02      	cmp	r3, #2
 80096c2:	d154      	bne.n	800976e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	220d      	movs	r2, #13
 80096c8:	701a      	strb	r2, [r3, #0]
      break;
 80096ca:	e050      	b.n	800976e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	220d      	movs	r2, #13
 80096d0:	701a      	strb	r2, [r3, #0]
      break;
 80096d2:	e04c      	b.n	800976e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d049      	beq.n	8009772 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
      }
      break;
 80096ea:	e042      	b.n	8009772 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f7ff fd67 	bl	80091c8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009728:	2105      	movs	r1, #5
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b01      	cmp	r3, #1
 8009738:	d107      	bne.n	800974a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fe20 	bl	8009388 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009748:	e014      	b.n	8009774 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f001 faaa 	bl	800aca4 <USBH_LL_Start>
      break;
 8009750:	e010      	b.n	8009774 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009752:	bf00      	nop
 8009754:	e00e      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 8009756:	bf00      	nop
 8009758:	e00c      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 800975a:	bf00      	nop
 800975c:	e00a      	b.n	8009774 <USBH_Process+0x3cc>
    break;
 800975e:	bf00      	nop
 8009760:	e008      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 8009762:	bf00      	nop
 8009764:	e006      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 8009766:	bf00      	nop
 8009768:	e004      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 800976a:	bf00      	nop
 800976c:	e002      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 800976e:	bf00      	nop
 8009770:	e000      	b.n	8009774 <USBH_Process+0x3cc>
      break;
 8009772:	bf00      	nop
  }
  return USBH_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop

08009780 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af04      	add	r7, sp, #16
 8009786:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009788:	2301      	movs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800978c:	2301      	movs	r3, #1
 800978e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	785b      	ldrb	r3, [r3, #1]
 8009794:	2b07      	cmp	r3, #7
 8009796:	f200 81c1 	bhi.w	8009b1c <USBH_HandleEnum+0x39c>
 800979a:	a201      	add	r2, pc, #4	; (adr r2, 80097a0 <USBH_HandleEnum+0x20>)
 800979c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a0:	080097c1 	.word	0x080097c1
 80097a4:	0800987f 	.word	0x0800987f
 80097a8:	080098e9 	.word	0x080098e9
 80097ac:	08009977 	.word	0x08009977
 80097b0:	080099e1 	.word	0x080099e1
 80097b4:	08009a51 	.word	0x08009a51
 80097b8:	08009a97 	.word	0x08009a97
 80097bc:	08009add 	.word	0x08009add
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80097c0:	2108      	movs	r1, #8
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa50 	bl	8009c68 <USBH_Get_DevDesc>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d130      	bne.n	8009834 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	7919      	ldrb	r1, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80097f6:	b292      	uxth	r2, r2
 80097f8:	9202      	str	r2, [sp, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	9201      	str	r2, [sp, #4]
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	4603      	mov	r3, r0
 8009802:	2280      	movs	r2, #128	; 0x80
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f001 f865 	bl	800a8d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	7959      	ldrb	r1, [r3, #5]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800981e:	b292      	uxth	r2, r2
 8009820:	9202      	str	r2, [sp, #8]
 8009822:	2200      	movs	r2, #0
 8009824:	9201      	str	r2, [sp, #4]
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4603      	mov	r3, r0
 800982a:	2200      	movs	r2, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 f851 	bl	800a8d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009832:	e175      	b.n	8009b20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009834:	7bbb      	ldrb	r3, [r7, #14]
 8009836:	2b03      	cmp	r3, #3
 8009838:	f040 8172 	bne.w	8009b20 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009842:	3301      	adds	r3, #1
 8009844:	b2da      	uxtb	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009852:	2b03      	cmp	r3, #3
 8009854:	d903      	bls.n	800985e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	220d      	movs	r2, #13
 800985a:	701a      	strb	r2, [r3, #0]
      break;
 800985c:	e160      	b.n	8009b20 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f885 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	791b      	ldrb	r3, [r3, #4]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f87f 	bl	800a974 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
      break;
 800987c:	e150      	b.n	8009b20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800987e:	2112      	movs	r1, #18
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f9f1 	bl	8009c68 <USBH_Get_DevDesc>
 8009886:	4603      	mov	r3, r0
 8009888:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d103      	bne.n	8009898 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009896:	e145      	b.n	8009b24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009898:	7bbb      	ldrb	r3, [r7, #14]
 800989a:	2b03      	cmp	r3, #3
 800989c:	f040 8142 	bne.w	8009b24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098a6:	3301      	adds	r3, #1
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d903      	bls.n	80098c2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	220d      	movs	r2, #13
 80098be:	701a      	strb	r2, [r3, #0]
      break;
 80098c0:	e130      	b.n	8009b24 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	795b      	ldrb	r3, [r3, #5]
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 f853 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	791b      	ldrb	r3, [r3, #4]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f001 f84d 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	701a      	strb	r2, [r3, #0]
      break;
 80098e6:	e11d      	b.n	8009b24 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80098e8:	2101      	movs	r1, #1
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 fa68 	bl	8009dc0 <USBH_SetAddress>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098f4:	7bbb      	ldrb	r3, [r7, #14]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d132      	bne.n	8009960 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80098fa:	2002      	movs	r0, #2
 80098fc:	f001 fb36 	bl	800af6c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2203      	movs	r2, #3
 800990c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7919      	ldrb	r1, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009922:	b292      	uxth	r2, r2
 8009924:	9202      	str	r2, [sp, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	9201      	str	r2, [sp, #4]
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4603      	mov	r3, r0
 800992e:	2280      	movs	r2, #128	; 0x80
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 ffcf 	bl	800a8d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	7959      	ldrb	r1, [r3, #5]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800994a:	b292      	uxth	r2, r2
 800994c:	9202      	str	r2, [sp, #8]
 800994e:	2200      	movs	r2, #0
 8009950:	9201      	str	r2, [sp, #4]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4603      	mov	r3, r0
 8009956:	2200      	movs	r2, #0
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 ffbb 	bl	800a8d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800995e:	e0e3      	b.n	8009b28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b03      	cmp	r3, #3
 8009964:	f040 80e0 	bne.w	8009b28 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	220d      	movs	r2, #13
 800996c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	705a      	strb	r2, [r3, #1]
      break;
 8009974:	e0d8      	b.n	8009b28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009976:	2109      	movs	r1, #9
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f99d 	bl	8009cb8 <USBH_Get_CfgDesc>
 800997e:	4603      	mov	r3, r0
 8009980:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009982:	7bbb      	ldrb	r3, [r7, #14]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d103      	bne.n	8009990 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2204      	movs	r2, #4
 800998c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800998e:	e0cd      	b.n	8009b2c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009990:	7bbb      	ldrb	r3, [r7, #14]
 8009992:	2b03      	cmp	r3, #3
 8009994:	f040 80ca 	bne.w	8009b2c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800999e:	3301      	adds	r3, #1
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d903      	bls.n	80099ba <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	220d      	movs	r2, #13
 80099b6:	701a      	strb	r2, [r3, #0]
      break;
 80099b8:	e0b8      	b.n	8009b2c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	795b      	ldrb	r3, [r3, #5]
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 ffd7 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	791b      	ldrb	r3, [r3, #4]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 ffd1 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	701a      	strb	r2, [r3, #0]
      break;
 80099de:	e0a5      	b.n	8009b2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80099e6:	4619      	mov	r1, r3
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f965 	bl	8009cb8 <USBH_Get_CfgDesc>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2205      	movs	r2, #5
 80099fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099fe:	e097      	b.n	8009b30 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	f040 8094 	bne.w	8009b30 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a0e:	3301      	adds	r3, #1
 8009a10:	b2da      	uxtb	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d903      	bls.n	8009a2a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	220d      	movs	r2, #13
 8009a26:	701a      	strb	r2, [r3, #0]
      break;
 8009a28:	e082      	b.n	8009b30 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	795b      	ldrb	r3, [r3, #5]
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 ff9f 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	791b      	ldrb	r3, [r3, #4]
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 ff99 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	701a      	strb	r2, [r3, #0]
      break;
 8009a4e:	e06f      	b.n	8009b30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d019      	beq.n	8009a8e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009a66:	23ff      	movs	r3, #255	; 0xff
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 f949 	bl	8009d00 <USBH_Get_StringDesc>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a72:	7bbb      	ldrb	r3, [r7, #14]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2206      	movs	r2, #6
 8009a7c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a7e:	e059      	b.n	8009b34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a80:	7bbb      	ldrb	r3, [r7, #14]
 8009a82:	2b03      	cmp	r3, #3
 8009a84:	d156      	bne.n	8009b34 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2206      	movs	r2, #6
 8009a8a:	705a      	strb	r2, [r3, #1]
      break;
 8009a8c:	e052      	b.n	8009b34 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2206      	movs	r2, #6
 8009a92:	705a      	strb	r2, [r3, #1]
      break;
 8009a94:	e04e      	b.n	8009b34 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d019      	beq.n	8009ad4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009aac:	23ff      	movs	r3, #255	; 0xff
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f926 	bl	8009d00 <USBH_Get_StringDesc>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d103      	bne.n	8009ac6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009ac4:	e038      	b.n	8009b38 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ac6:	7bbb      	ldrb	r3, [r7, #14]
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d135      	bne.n	8009b38 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2207      	movs	r2, #7
 8009ad0:	705a      	strb	r2, [r3, #1]
      break;
 8009ad2:	e031      	b.n	8009b38 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2207      	movs	r2, #7
 8009ad8:	705a      	strb	r2, [r3, #1]
      break;
 8009ada:	e02d      	b.n	8009b38 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d017      	beq.n	8009b16 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009af2:	23ff      	movs	r3, #255	; 0xff
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f903 	bl	8009d00 <USBH_Get_StringDesc>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b08:	e018      	b.n	8009b3c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b0a:	7bbb      	ldrb	r3, [r7, #14]
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d115      	bne.n	8009b3c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	73fb      	strb	r3, [r7, #15]
      break;
 8009b14:	e012      	b.n	8009b3c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]
      break;
 8009b1a:	e00f      	b.n	8009b3c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b1c:	bf00      	nop
 8009b1e:	e00e      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b20:	bf00      	nop
 8009b22:	e00c      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b24:	bf00      	nop
 8009b26:	e00a      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b28:	bf00      	nop
 8009b2a:	e008      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b2c:	bf00      	nop
 8009b2e:	e006      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b30:	bf00      	nop
 8009b32:	e004      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b34:	bf00      	nop
 8009b36:	e002      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b38:	bf00      	nop
 8009b3a:	e000      	b.n	8009b3e <USBH_HandleEnum+0x3be>
      break;
 8009b3c:	bf00      	nop
  }
  return Status;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3710      	adds	r7, #16
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009b5a:	bf00      	nop
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009b74:	1c5a      	adds	r2, r3, #1
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f804 	bl	8009b8a <USBH_HandleSof>
}
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b0b      	cmp	r3, #11
 8009b9a:	d10a      	bne.n	8009bb2 <USBH_HandleSof+0x28>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d005      	beq.n	8009bb2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009bba:	b480      	push	{r7}
 8009bbc:	b083      	sub	sp, #12
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009bca:	bf00      	nop
}
 8009bcc:	370c      	adds	r7, #12
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009be6:	bf00      	nop
}
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f84a 	bl	800acda <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	791b      	ldrb	r3, [r3, #4]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 fe91 	bl	800a974 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	795b      	ldrb	r3, [r3, #5]
 8009c56:	4619      	mov	r1, r3
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fe8b 	bl	800a974 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b086      	sub	sp, #24
 8009c6c:	af02      	add	r7, sp, #8
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009c7a:	78fb      	ldrb	r3, [r7, #3]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	4613      	mov	r3, r2
 8009c82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f864 	bl	8009d56 <USBH_GetDescriptor>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009c92:	7bfb      	ldrb	r3, [r7, #15]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ca4:	78fa      	ldrb	r2, [r7, #3]
 8009ca6:	b292      	uxth	r2, r2
 8009ca8:	4619      	mov	r1, r3
 8009caa:	f000 f918 	bl	8009ede <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af02      	add	r7, sp, #8
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	331c      	adds	r3, #28
 8009cc8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009cca:	887b      	ldrh	r3, [r7, #2]
 8009ccc:	9300      	str	r3, [sp, #0]
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f83d 	bl	8009d56 <USBH_GetDescriptor>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d107      	bne.n	8009cf6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	68b9      	ldr	r1, [r7, #8]
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f987 	bl	800a000 <USBH_ParseCfgDesc>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b088      	sub	sp, #32
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	607a      	str	r2, [r7, #4]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	72fb      	strb	r3, [r7, #11]
 8009d10:	4613      	mov	r3, r2
 8009d12:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009d14:	7afb      	ldrb	r3, [r7, #11]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d1c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009d24:	893b      	ldrh	r3, [r7, #8]
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	68f8      	ldr	r0, [r7, #12]
 8009d2e:	f000 f812 	bl	8009d56 <USBH_GetDescriptor>
 8009d32:	4603      	mov	r3, r0
 8009d34:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009d36:	7dfb      	ldrb	r3, [r7, #23]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d107      	bne.n	8009d4c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d42:	893a      	ldrh	r2, [r7, #8]
 8009d44:	6879      	ldr	r1, [r7, #4]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f000 fb24 	bl	800a394 <USBH_ParseStringDesc>
  }

  return status;
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b084      	sub	sp, #16
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	60f8      	str	r0, [r7, #12]
 8009d5e:	607b      	str	r3, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	72fb      	strb	r3, [r7, #11]
 8009d64:	4613      	mov	r3, r2
 8009d66:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	789b      	ldrb	r3, [r3, #2]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d11c      	bne.n	8009daa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009d70:	7afb      	ldrb	r3, [r7, #11]
 8009d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2206      	movs	r2, #6
 8009d80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	893a      	ldrh	r2, [r7, #8]
 8009d86:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009d88:	893b      	ldrh	r3, [r7, #8]
 8009d8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d92:	d104      	bne.n	8009d9e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f240 4209 	movw	r2, #1033	; 0x409
 8009d9a:	829a      	strh	r2, [r3, #20]
 8009d9c:	e002      	b.n	8009da4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	8b3a      	ldrh	r2, [r7, #24]
 8009da8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009daa:	8b3b      	ldrh	r3, [r7, #24]
 8009dac:	461a      	mov	r2, r3
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fb3d 	bl	800a430 <USBH_CtlReq>
 8009db6:	4603      	mov	r3, r0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	789b      	ldrb	r3, [r3, #2]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d10f      	bne.n	8009df4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2205      	movs	r2, #5
 8009dde:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009df4:	2200      	movs	r2, #0
 8009df6:	2100      	movs	r1, #0
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 fb19 	bl	800a430 <USBH_CtlReq>
 8009dfe:	4603      	mov	r3, r0
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}

08009e08 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	460b      	mov	r3, r1
 8009e12:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	789b      	ldrb	r3, [r3, #2]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d10e      	bne.n	8009e3a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2209      	movs	r2, #9
 8009e26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	887a      	ldrh	r2, [r7, #2]
 8009e2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 faf6 	bl	800a430 <USBH_CtlReq>
 8009e44:	4603      	mov	r3, r0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}

08009e4e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b082      	sub	sp, #8
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
 8009e56:	460b      	mov	r3, r1
 8009e58:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	789b      	ldrb	r3, [r3, #2]
 8009e5e:	2b01      	cmp	r3, #1
 8009e60:	d10f      	bne.n	8009e82 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2203      	movs	r2, #3
 8009e6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009e6e:	78fb      	ldrb	r3, [r7, #3]
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009e82:	2200      	movs	r2, #0
 8009e84:	2100      	movs	r1, #0
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fad2 	bl	800a430 <USBH_CtlReq>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	789b      	ldrb	r3, [r3, #2]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d10f      	bne.n	8009eca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2202      	movs	r2, #2
 8009eae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ebc:	78fb      	ldrb	r3, [r7, #3]
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 faae 	bl	800a430 <USBH_CtlReq>
 8009ed4:	4603      	mov	r3, r0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b085      	sub	sp, #20
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	60b9      	str	r1, [r7, #8]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	781a      	ldrb	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	785a      	ldrb	r2, [r3, #1]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	3302      	adds	r3, #2
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	3303      	adds	r3, #3
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	021b      	lsls	r3, r3, #8
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	4313      	orrs	r3, r2
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	791a      	ldrb	r2, [r3, #4]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	795a      	ldrb	r2, [r3, #5]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	799a      	ldrb	r2, [r3, #6]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	79da      	ldrb	r2, [r3, #7]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	79db      	ldrb	r3, [r3, #7]
 8009f3c:	2b20      	cmp	r3, #32
 8009f3e:	dc11      	bgt.n	8009f64 <USBH_ParseDevDesc+0x86>
 8009f40:	2b08      	cmp	r3, #8
 8009f42:	db16      	blt.n	8009f72 <USBH_ParseDevDesc+0x94>
 8009f44:	3b08      	subs	r3, #8
 8009f46:	2201      	movs	r2, #1
 8009f48:	fa02 f303 	lsl.w	r3, r2, r3
 8009f4c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009f50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	bf14      	ite	ne
 8009f58:	2301      	movne	r3, #1
 8009f5a:	2300      	moveq	r3, #0
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <USBH_ParseDevDesc+0x8a>
 8009f62:	e006      	b.n	8009f72 <USBH_ParseDevDesc+0x94>
 8009f64:	2b40      	cmp	r3, #64	; 0x40
 8009f66:	d104      	bne.n	8009f72 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	79da      	ldrb	r2, [r3, #7]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	71da      	strb	r2, [r3, #7]
      break;
 8009f70:	e003      	b.n	8009f7a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2240      	movs	r2, #64	; 0x40
 8009f76:	71da      	strb	r2, [r3, #7]
      break;
 8009f78:	bf00      	nop
  }

  if (length > 8U)
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	d939      	bls.n	8009ff4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	3308      	adds	r3, #8
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3309      	adds	r3, #9
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4313      	orrs	r3, r2
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	330a      	adds	r3, #10
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	330b      	adds	r3, #11
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	021b      	lsls	r3, r3, #8
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	330c      	adds	r3, #12
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	330d      	adds	r3, #13
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	021b      	lsls	r3, r3, #8
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	7b9a      	ldrb	r2, [r3, #14]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	7bda      	ldrb	r2, [r3, #15]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	7c1a      	ldrb	r2, [r3, #16]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	7c5a      	ldrb	r2, [r3, #17]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	745a      	strb	r2, [r3, #17]
  }
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08c      	sub	sp, #48	; 0x30
 800a004:	af00      	add	r7, sp, #0
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	4613      	mov	r3, r2
 800a00c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a014:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a020:	2300      	movs	r3, #0
 800a022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	781a      	ldrb	r2, [r3, #0]
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	785a      	ldrb	r2, [r3, #1]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	3302      	adds	r3, #2
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	b29a      	uxth	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	3303      	adds	r3, #3
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	021b      	lsls	r3, r3, #8
 800a052:	b29b      	uxth	r3, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05c:	bf28      	it	cs
 800a05e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a062:	b29a      	uxth	r2, r3
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	791a      	ldrb	r2, [r3, #4]
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	795a      	ldrb	r2, [r3, #5]
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	799a      	ldrb	r2, [r3, #6]
 800a07c:	6a3b      	ldr	r3, [r7, #32]
 800a07e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	79da      	ldrb	r2, [r3, #7]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	7a1a      	ldrb	r2, [r3, #8]
 800a08c:	6a3b      	ldr	r3, [r7, #32]
 800a08e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a090:	6a3b      	ldr	r3, [r7, #32]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b09      	cmp	r3, #9
 800a096:	d002      	beq.n	800a09e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a098:	6a3b      	ldr	r3, [r7, #32]
 800a09a:	2209      	movs	r2, #9
 800a09c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a09e:	88fb      	ldrh	r3, [r7, #6]
 800a0a0:	2b09      	cmp	r3, #9
 800a0a2:	f240 809d 	bls.w	800a1e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0a6:	2309      	movs	r3, #9
 800a0a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0ae:	e081      	b.n	800a1b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0b0:	f107 0316 	add.w	r3, r7, #22
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0b8:	f000 f99f 	bl	800a3fa <USBH_GetNextDesc>
 800a0bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d176      	bne.n	800a1b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b09      	cmp	r3, #9
 800a0cc:	d002      	beq.n	800a0d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d0:	2209      	movs	r2, #9
 800a0d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a0d8:	221a      	movs	r2, #26
 800a0da:	fb02 f303 	mul.w	r3, r2, r3
 800a0de:	3308      	adds	r3, #8
 800a0e0:	6a3a      	ldr	r2, [r7, #32]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3302      	adds	r3, #2
 800a0e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0ea:	69f8      	ldr	r0, [r7, #28]
 800a0ec:	f000 f87e 	bl	800a1ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0fa:	e043      	b.n	800a184 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0fc:	f107 0316 	add.w	r3, r7, #22
 800a100:	4619      	mov	r1, r3
 800a102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a104:	f000 f979 	bl	800a3fa <USBH_GetNextDesc>
 800a108:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	d138      	bne.n	800a184 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	795b      	ldrb	r3, [r3, #5]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d10f      	bne.n	800a13a <USBH_ParseCfgDesc+0x13a>
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	799b      	ldrb	r3, [r3, #6]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d10b      	bne.n	800a13a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	79db      	ldrb	r3, [r3, #7]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10f      	bne.n	800a14a <USBH_ParseCfgDesc+0x14a>
 800a12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	2b09      	cmp	r3, #9
 800a130:	d00b      	beq.n	800a14a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a134:	2209      	movs	r2, #9
 800a136:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a138:	e007      	b.n	800a14a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	2b07      	cmp	r3, #7
 800a140:	d004      	beq.n	800a14c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	2207      	movs	r2, #7
 800a146:	701a      	strb	r2, [r3, #0]
 800a148:	e000      	b.n	800a14c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a14a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a14c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a150:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a154:	3201      	adds	r2, #1
 800a156:	00d2      	lsls	r2, r2, #3
 800a158:	211a      	movs	r1, #26
 800a15a:	fb01 f303 	mul.w	r3, r1, r3
 800a15e:	4413      	add	r3, r2
 800a160:	3308      	adds	r3, #8
 800a162:	6a3a      	ldr	r2, [r7, #32]
 800a164:	4413      	add	r3, r2
 800a166:	3304      	adds	r3, #4
 800a168:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a16a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a16c:	69b9      	ldr	r1, [r7, #24]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f86b 	bl	800a24a <USBH_ParseEPDesc>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a17a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a17e:	3301      	adds	r3, #1
 800a180:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d204      	bcs.n	800a19a <USBH_ParseCfgDesc+0x19a>
 800a190:	6a3b      	ldr	r3, [r7, #32]
 800a192:	885a      	ldrh	r2, [r3, #2]
 800a194:	8afb      	ldrh	r3, [r7, #22]
 800a196:	429a      	cmp	r2, r3
 800a198:	d8b0      	bhi.n	800a0fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a19a:	69fb      	ldr	r3, [r7, #28]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d201      	bcs.n	800a1aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e01c      	b.n	800a1e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a1aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d805      	bhi.n	800a1c8 <USBH_ParseCfgDesc+0x1c8>
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	885a      	ldrh	r2, [r3, #2]
 800a1c0:	8afb      	ldrh	r3, [r7, #22]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	f63f af74 	bhi.w	800a0b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a1c8:	6a3b      	ldr	r3, [r7, #32]
 800a1ca:	791b      	ldrb	r3, [r3, #4]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	bf28      	it	cs
 800a1d0:	2302      	movcs	r3, #2
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d201      	bcs.n	800a1e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e001      	b.n	800a1e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a1e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3730      	adds	r7, #48	; 0x30
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781a      	ldrb	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785a      	ldrb	r2, [r3, #1]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	789a      	ldrb	r2, [r3, #2]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	78da      	ldrb	r2, [r3, #3]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	791a      	ldrb	r2, [r3, #4]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	795a      	ldrb	r2, [r3, #5]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	799a      	ldrb	r2, [r3, #6]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	79da      	ldrb	r2, [r3, #7]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	7a1a      	ldrb	r2, [r3, #8]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	721a      	strb	r2, [r3, #8]
}
 800a23e:	bf00      	nop
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b087      	sub	sp, #28
 800a24e:	af00      	add	r7, sp, #0
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	781a      	ldrb	r2, [r3, #0]
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	785a      	ldrb	r2, [r3, #1]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	789a      	ldrb	r2, [r3, #2]
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	78da      	ldrb	r2, [r3, #3]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	3304      	adds	r3, #4
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	b29a      	uxth	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3305      	adds	r3, #5
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	b29b      	uxth	r3, r3
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	4313      	orrs	r3, r2
 800a290:	b29a      	uxth	r2, r3
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	799a      	ldrb	r2, [r3, #6]
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	889b      	ldrh	r3, [r3, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d102      	bne.n	800a2ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	75fb      	strb	r3, [r7, #23]
 800a2aa:	e033      	b.n	800a314 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	889b      	ldrh	r3, [r3, #4]
 800a2b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a2b4:	f023 0307 	bic.w	r3, r3, #7
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	889b      	ldrh	r3, [r3, #4]
 800a2c2:	b21a      	sxth	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	3304      	adds	r3, #4
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	b299      	uxth	r1, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3305      	adds	r3, #5
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	021b      	lsls	r3, r3, #8
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d110      	bne.n	800a306 <USBH_ParseEPDesc+0xbc>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	3304      	adds	r3, #4
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b299      	uxth	r1, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3305      	adds	r3, #5
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	021b      	lsls	r3, r3, #8
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	b21b      	sxth	r3, r3
 800a2fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a302:	b21b      	sxth	r3, r3
 800a304:	e001      	b.n	800a30a <USBH_ParseEPDesc+0xc0>
 800a306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a30a:	4313      	orrs	r3, r2
 800a30c:	b21b      	sxth	r3, r3
 800a30e:	b29a      	uxth	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d116      	bne.n	800a34c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	78db      	ldrb	r3, [r3, #3]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b01      	cmp	r3, #1
 800a328:	d005      	beq.n	800a336 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	78db      	ldrb	r3, [r3, #3]
 800a32e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a332:	2b03      	cmp	r3, #3
 800a334:	d127      	bne.n	800a386 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	799b      	ldrb	r3, [r3, #6]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <USBH_ParseEPDesc+0xfc>
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	799b      	ldrb	r3, [r3, #6]
 800a342:	2b10      	cmp	r3, #16
 800a344:	d91f      	bls.n	800a386 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a346:	2303      	movs	r3, #3
 800a348:	75fb      	strb	r3, [r7, #23]
 800a34a:	e01c      	b.n	800a386 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	78db      	ldrb	r3, [r3, #3]
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	2b01      	cmp	r3, #1
 800a356:	d10a      	bne.n	800a36e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	799b      	ldrb	r3, [r3, #6]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <USBH_ParseEPDesc+0x11e>
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	799b      	ldrb	r3, [r3, #6]
 800a364:	2b10      	cmp	r3, #16
 800a366:	d90e      	bls.n	800a386 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a368:	2303      	movs	r3, #3
 800a36a:	75fb      	strb	r3, [r7, #23]
 800a36c:	e00b      	b.n	800a386 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	78db      	ldrb	r3, [r3, #3]
 800a372:	f003 0303 	and.w	r3, r3, #3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d105      	bne.n	800a386 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	799b      	ldrb	r3, [r3, #6]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a382:	2303      	movs	r3, #3
 800a384:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a386:	7dfb      	ldrb	r3, [r7, #23]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	371c      	adds	r7, #28
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	4613      	mov	r3, r2
 800a3a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d120      	bne.n	800a3ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	1e9a      	subs	r2, r3, #2
 800a3b2:	88fb      	ldrh	r3, [r7, #6]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	bf28      	it	cs
 800a3b8:	4613      	movcs	r3, r2
 800a3ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3302      	adds	r3, #2
 800a3c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	82fb      	strh	r3, [r7, #22]
 800a3c6:	e00b      	b.n	800a3e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3c8:	8afb      	ldrh	r3, [r7, #22]
 800a3ca:	68fa      	ldr	r2, [r7, #12]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3da:	8afb      	ldrh	r3, [r7, #22]
 800a3dc:	3302      	adds	r3, #2
 800a3de:	82fb      	strh	r3, [r7, #22]
 800a3e0:	8afa      	ldrh	r2, [r7, #22]
 800a3e2:	8abb      	ldrh	r3, [r7, #20]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d3ef      	bcc.n	800a3c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	701a      	strb	r2, [r3, #0]
  }
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b085      	sub	sp, #20
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	881a      	ldrh	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4413      	add	r3, r2
 800a410:	b29a      	uxth	r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4413      	add	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a43e:	2301      	movs	r3, #1
 800a440:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	789b      	ldrb	r3, [r3, #2]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d002      	beq.n	800a450 <USBH_CtlReq+0x20>
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d00f      	beq.n	800a46e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a44e:	e027      	b.n	800a4a0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	68ba      	ldr	r2, [r7, #8]
 800a454:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	88fa      	ldrh	r2, [r7, #6]
 800a45a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2201      	movs	r2, #1
 800a460:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2202      	movs	r2, #2
 800a466:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a468:	2301      	movs	r3, #1
 800a46a:	75fb      	strb	r3, [r7, #23]
      break;
 800a46c:	e018      	b.n	800a4a0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 f81c 	bl	800a4ac <USBH_HandleControl>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <USBH_CtlReq+0x54>
 800a47e:	7dfb      	ldrb	r3, [r7, #23]
 800a480:	2b03      	cmp	r3, #3
 800a482:	d106      	bne.n	800a492 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2201      	movs	r2, #1
 800a488:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	761a      	strb	r2, [r3, #24]
      break;
 800a490:	e005      	b.n	800a49e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a492:	7dfb      	ldrb	r3, [r7, #23]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d102      	bne.n	800a49e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	709a      	strb	r2, [r3, #2]
      break;
 800a49e:	bf00      	nop
  }
  return status;
 800a4a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
	...

0800a4ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7e1b      	ldrb	r3, [r3, #24]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	f200 8156 	bhi.w	800a774 <USBH_HandleControl+0x2c8>
 800a4c8:	a201      	add	r2, pc, #4	; (adr r2, 800a4d0 <USBH_HandleControl+0x24>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	0800a517 	.word	0x0800a517
 800a4d8:	0800a581 	.word	0x0800a581
 800a4dc:	0800a5a7 	.word	0x0800a5a7
 800a4e0:	0800a5df 	.word	0x0800a5df
 800a4e4:	0800a609 	.word	0x0800a609
 800a4e8:	0800a65b 	.word	0x0800a65b
 800a4ec:	0800a67d 	.word	0x0800a67d
 800a4f0:	0800a6b9 	.word	0x0800a6b9
 800a4f4:	0800a6df 	.word	0x0800a6df
 800a4f8:	0800a71d 	.word	0x0800a71d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f103 0110 	add.w	r1, r3, #16
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	795b      	ldrb	r3, [r3, #5]
 800a506:	461a      	mov	r2, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f943 	bl	800a794 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2202      	movs	r2, #2
 800a512:	761a      	strb	r2, [r3, #24]
      break;
 800a514:	e139      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	795b      	ldrb	r3, [r3, #5]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fccb 	bl	800aeb8 <USBH_LL_GetURBState>
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d11e      	bne.n	800a56a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7c1b      	ldrb	r3, [r3, #16]
 800a530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a534:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8adb      	ldrh	r3, [r3, #22]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a53e:	7b7b      	ldrb	r3, [r7, #13]
 800a540:	2b80      	cmp	r3, #128	; 0x80
 800a542:	d103      	bne.n	800a54c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2203      	movs	r2, #3
 800a548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a54a:	e115      	b.n	800a778 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2205      	movs	r2, #5
 800a550:	761a      	strb	r2, [r3, #24]
      break;
 800a552:	e111      	b.n	800a778 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a554:	7b7b      	ldrb	r3, [r7, #13]
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d103      	bne.n	800a562 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2209      	movs	r2, #9
 800a55e:	761a      	strb	r2, [r3, #24]
      break;
 800a560:	e10a      	b.n	800a778 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2207      	movs	r2, #7
 800a566:	761a      	strb	r2, [r3, #24]
      break;
 800a568:	e106      	b.n	800a778 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d003      	beq.n	800a578 <USBH_HandleControl+0xcc>
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b02      	cmp	r3, #2
 800a574:	f040 8100 	bne.w	800a778 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	220b      	movs	r2, #11
 800a57c:	761a      	strb	r2, [r3, #24]
      break;
 800a57e:	e0fb      	b.n	800a778 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6899      	ldr	r1, [r3, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	899a      	ldrh	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	791b      	ldrb	r3, [r3, #4]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f93a 	bl	800a812 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	761a      	strb	r2, [r3, #24]
      break;
 800a5a4:	e0f1      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	791b      	ldrb	r3, [r3, #4]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fc83 	bl	800aeb8 <USBH_LL_GetURBState>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d102      	bne.n	800a5c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2209      	movs	r2, #9
 800a5c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d102      	bne.n	800a5ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5cc:	e0d6      	b.n	800a77c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	f040 80d3 	bne.w	800a77c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	220b      	movs	r2, #11
 800a5da:	761a      	strb	r2, [r3, #24]
      break;
 800a5dc:	e0ce      	b.n	800a77c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6899      	ldr	r1, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	899a      	ldrh	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	795b      	ldrb	r3, [r3, #5]
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	9000      	str	r0, [sp, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f8ea 	bl	800a7c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2206      	movs	r2, #6
 800a604:	761a      	strb	r2, [r3, #24]
      break;
 800a606:	e0c0      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	795b      	ldrb	r3, [r3, #5]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fc52 	bl	800aeb8 <USBH_LL_GetURBState>
 800a614:	4603      	mov	r3, r0
 800a616:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d103      	bne.n	800a626 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2207      	movs	r2, #7
 800a622:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a624:	e0ac      	b.n	800a780 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b05      	cmp	r3, #5
 800a62a:	d105      	bne.n	800a638 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	220c      	movs	r2, #12
 800a630:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a632:	2303      	movs	r3, #3
 800a634:	73fb      	strb	r3, [r7, #15]
      break;
 800a636:	e0a3      	b.n	800a780 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d103      	bne.n	800a646 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2205      	movs	r2, #5
 800a642:	761a      	strb	r2, [r3, #24]
      break;
 800a644:	e09c      	b.n	800a780 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b04      	cmp	r3, #4
 800a64a:	f040 8099 	bne.w	800a780 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	220b      	movs	r2, #11
 800a652:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a654:	2302      	movs	r3, #2
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	e092      	b.n	800a780 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f8d5 	bl	800a812 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2208      	movs	r2, #8
 800a678:	761a      	strb	r2, [r3, #24]

      break;
 800a67a:	e086      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fc18 	bl	800aeb8 <USBH_LL_GetURBState>
 800a688:	4603      	mov	r3, r0
 800a68a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d105      	bne.n	800a69e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	220d      	movs	r2, #13
 800a696:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a69c:	e072      	b.n	800a784 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d103      	bne.n	800a6ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	220b      	movs	r2, #11
 800a6a8:	761a      	strb	r2, [r3, #24]
      break;
 800a6aa:	e06b      	b.n	800a784 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d168      	bne.n	800a784 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b6:	e065      	b.n	800a784 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	795b      	ldrb	r3, [r3, #5]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	9200      	str	r2, [sp, #0]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f87f 	bl	800a7c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	220a      	movs	r2, #10
 800a6da:	761a      	strb	r2, [r3, #24]
      break;
 800a6dc:	e055      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	795b      	ldrb	r3, [r3, #5]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fbe7 	bl	800aeb8 <USBH_LL_GetURBState>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d105      	bne.n	800a700 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	220d      	movs	r2, #13
 800a6fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6fe:	e043      	b.n	800a788 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d103      	bne.n	800a70e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2209      	movs	r2, #9
 800a70a:	761a      	strb	r2, [r3, #24]
      break;
 800a70c:	e03c      	b.n	800a788 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2b04      	cmp	r3, #4
 800a712:	d139      	bne.n	800a788 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	220b      	movs	r2, #11
 800a718:	761a      	strb	r2, [r3, #24]
      break;
 800a71a:	e035      	b.n	800a788 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7e5b      	ldrb	r3, [r3, #25]
 800a720:	3301      	adds	r3, #1
 800a722:	b2da      	uxtb	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	765a      	strb	r2, [r3, #25]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7e5b      	ldrb	r3, [r3, #25]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d806      	bhi.n	800a73e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a73c:	e025      	b.n	800a78a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a744:	2106      	movs	r1, #6
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	795b      	ldrb	r3, [r3, #5]
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f90c 	bl	800a974 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	791b      	ldrb	r3, [r3, #4]
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f906 	bl	800a974 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a76e:	2302      	movs	r3, #2
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	e00a      	b.n	800a78a <USBH_HandleControl+0x2de>

    default:
      break;
 800a774:	bf00      	nop
 800a776:	e008      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a778:	bf00      	nop
 800a77a:	e006      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a77c:	bf00      	nop
 800a77e:	e004      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a780:	bf00      	nop
 800a782:	e002      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a784:	bf00      	nop
 800a786:	e000      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a788:	bf00      	nop
  }

  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af04      	add	r7, sp, #16
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7a2:	79f9      	ldrb	r1, [r7, #7]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	9302      	str	r3, [sp, #8]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fb4c 	bl	800ae56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af04      	add	r7, sp, #16
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	80fb      	strh	r3, [r7, #6]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7ec:	7979      	ldrb	r1, [r7, #5]
 800a7ee:	7e3b      	ldrb	r3, [r7, #24]
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	2200      	movs	r2, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fb27 	bl	800ae56 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b088      	sub	sp, #32
 800a816:	af04      	add	r7, sp, #16
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	4611      	mov	r1, r2
 800a81e:	461a      	mov	r2, r3
 800a820:	460b      	mov	r3, r1
 800a822:	80fb      	strh	r3, [r7, #6]
 800a824:	4613      	mov	r3, r2
 800a826:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a828:	7979      	ldrb	r1, [r7, #5]
 800a82a:	2300      	movs	r3, #0
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	2301      	movs	r3, #1
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	2201      	movs	r2, #1
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fb09 	bl	800ae56 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a844:	2300      	movs	r3, #0

}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b088      	sub	sp, #32
 800a852:	af04      	add	r7, sp, #16
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	4611      	mov	r1, r2
 800a85a:	461a      	mov	r2, r3
 800a85c:	460b      	mov	r3, r1
 800a85e:	80fb      	strh	r3, [r7, #6]
 800a860:	4613      	mov	r3, r2
 800a862:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a872:	7979      	ldrb	r1, [r7, #5]
 800a874:	7e3b      	ldrb	r3, [r7, #24]
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	88fb      	ldrh	r3, [r7, #6]
 800a87a:	9302      	str	r3, [sp, #8]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	2301      	movs	r3, #1
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	2302      	movs	r3, #2
 800a886:	2200      	movs	r2, #0
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fae4 	bl	800ae56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af04      	add	r7, sp, #16
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	80fb      	strh	r3, [r7, #6]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8ae:	7979      	ldrb	r1, [r7, #5]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	2301      	movs	r3, #1
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fac6 	bl	800ae56 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af04      	add	r7, sp, #16
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	4608      	mov	r0, r1
 800a8de:	4611      	mov	r1, r2
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	70fb      	strb	r3, [r7, #3]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70bb      	strb	r3, [r7, #2]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8ee:	7878      	ldrb	r0, [r7, #1]
 800a8f0:	78ba      	ldrb	r2, [r7, #2]
 800a8f2:	78f9      	ldrb	r1, [r7, #3]
 800a8f4:	8b3b      	ldrh	r3, [r7, #24]
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	7d3b      	ldrb	r3, [r7, #20]
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	7c3b      	ldrb	r3, [r7, #16]
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	4603      	mov	r3, r0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa59 	bl	800adba <USBH_LL_OpenPipe>

  return USBH_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa78 	bl	800ae18 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f836 	bl	800a9b0 <USBH_GetFreePipe>
 800a944:	4603      	mov	r3, r0
 800a946:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a948:	89fb      	ldrh	r3, [r7, #14]
 800a94a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00a      	beq.n	800a968 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	33e0      	adds	r3, #224	; 0xe0
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	440b      	add	r3, r1
 800a966:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	b2db      	uxtb	r3, r3
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	2b0f      	cmp	r3, #15
 800a984:	d80d      	bhi.n	800a9a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	33e0      	adds	r3, #224	; 0xe0
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	33e0      	adds	r3, #224	; 0xe0
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e00f      	b.n	800a9e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	33e0      	adds	r3, #224	; 0xe0
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	e007      	b.n	800a9ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b0f      	cmp	r3, #15
 800a9e6:	d9ec      	bls.n	800a9c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	490e      	ldr	r1, [pc, #56]	; (800aa38 <MX_USB_HOST_Init+0x40>)
 800aa00:	480e      	ldr	r0, [pc, #56]	; (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa02:	f7fe fba7 	bl	8009154 <USBH_Init>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa0c:	f7f6 fa4e 	bl	8000eac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800aa10:	490b      	ldr	r1, [pc, #44]	; (800aa40 <MX_USB_HOST_Init+0x48>)
 800aa12:	480a      	ldr	r0, [pc, #40]	; (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa14:	f7fe fc2c 	bl	8009270 <USBH_RegisterClass>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa1e:	f7f6 fa45 	bl	8000eac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800aa22:	4806      	ldr	r0, [pc, #24]	; (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa24:	f7fe fcb0 	bl	8009388 <USBH_Start>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa2e:	f7f6 fa3d 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa32:	bf00      	nop
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	0800aa59 	.word	0x0800aa59
 800aa3c:	200007e0 	.word	0x200007e0
 800aa40:	20000010 	.word	0x20000010

0800aa44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800aa48:	4802      	ldr	r0, [pc, #8]	; (800aa54 <MX_USB_HOST_Process+0x10>)
 800aa4a:	f7fe fcad 	bl	80093a8 <USBH_Process>
}
 800aa4e:	bf00      	nop
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200007e0 	.word	0x200007e0

0800aa58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d819      	bhi.n	800aaa0 <USBH_UserProcess+0x48>
 800aa6c:	a201      	add	r2, pc, #4	; (adr r2, 800aa74 <USBH_UserProcess+0x1c>)
 800aa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800aaa1 	.word	0x0800aaa1
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aa99 	.word	0x0800aa99
 800aa84:	0800aa89 	.word	0x0800aa89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa88:	4b09      	ldr	r3, [pc, #36]	; (800aab0 <USBH_UserProcess+0x58>)
 800aa8a:	2203      	movs	r2, #3
 800aa8c:	701a      	strb	r2, [r3, #0]
  break;
 800aa8e:	e008      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <USBH_UserProcess+0x58>)
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
  break;
 800aa96:	e004      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <USBH_UserProcess+0x58>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
  break;
 800aa9e:	e000      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  default:
  break;
 800aaa0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aaa2:	bf00      	nop
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000bb8 	.word	0x20000bb8

0800aab4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	; 0x28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	605a      	str	r2, [r3, #4]
 800aac6:	609a      	str	r2, [r3, #8]
 800aac8:	60da      	str	r2, [r3, #12]
 800aaca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a24      	ldr	r2, [pc, #144]	; (800ab64 <HAL_HCD_MspInit+0xb0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d141      	bne.n	800ab5a <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aad6:	2300      	movs	r3, #0
 800aad8:	613b      	str	r3, [r7, #16]
 800aada:	4b23      	ldr	r3, [pc, #140]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	4a22      	ldr	r2, [pc, #136]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800aae0:	f043 0302 	orr.w	r3, r3, #2
 800aae4:	6313      	str	r3, [r2, #48]	; 0x30
 800aae6:	4b20      	ldr	r3, [pc, #128]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800aae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	613b      	str	r3, [r7, #16]
 800aaf0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800aaf2:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800aaf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaf8:	2302      	movs	r3, #2
 800aafa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab00:	2300      	movs	r3, #0
 800ab02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ab04:	230c      	movs	r3, #12
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab08:	f107 0314 	add.w	r3, r7, #20
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	4817      	ldr	r0, [pc, #92]	; (800ab6c <HAL_HCD_MspInit+0xb8>)
 800ab10:	f7f8 fbb4 	bl	800327c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ab14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ab18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	4619      	mov	r1, r3
 800ab28:	4810      	ldr	r0, [pc, #64]	; (800ab6c <HAL_HCD_MspInit+0xb8>)
 800ab2a:	f7f8 fba7 	bl	800327c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	4a0c      	ldr	r2, [pc, #48]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800ab38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab3e:	4b0a      	ldr	r3, [pc, #40]	; (800ab68 <HAL_HCD_MspInit+0xb4>)
 800ab40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	204d      	movs	r0, #77	; 0x4d
 800ab50:	f7f7 fe59 	bl	8002806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ab54:	204d      	movs	r0, #77	; 0x4d
 800ab56:	f7f7 fe72 	bl	800283e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3728      	adds	r7, #40	; 0x28
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	40040000 	.word	0x40040000
 800ab68:	40023800 	.word	0x40023800
 800ab6c:	40020400 	.word	0x40020400

0800ab70 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fe fff1 	bl	8009b66 <USBH_LL_IncTimer>
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff f829 	bl	8009bf2 <USBH_LL_Connect>
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff f832 	bl	8009c20 <USBH_LL_Disconnect>
}
 800abbc:	bf00      	nop
 800abbe:	3708      	adds	r7, #8
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	70fb      	strb	r3, [r7, #3]
 800abd0:	4613      	mov	r3, r2
 800abd2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abd4:	bf00      	nop
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe ffe3 	bl	8009bba <USBH_LL_PortEnabled>
}
 800abf4:	bf00      	nop
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7fe ffe3 	bl	8009bd6 <USBH_LL_PortDisabled>
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d132      	bne.n	800ac90 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800ac2a:	4a1c      	ldr	r2, [pc, #112]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a19      	ldr	r2, [pc, #100]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac36:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ac3a:	4b18      	ldr	r3, [pc, #96]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac3c:	4a18      	ldr	r2, [pc, #96]	; (800aca0 <USBH_LL_Init+0x88>)
 800ac3e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ac40:	4b16      	ldr	r3, [pc, #88]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac42:	220c      	movs	r2, #12
 800ac44:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ac46:	4b15      	ldr	r3, [pc, #84]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac48:	2201      	movs	r2, #1
 800ac4a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ac4c:	4b13      	ldr	r3, [pc, #76]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac4e:	2200      	movs	r2, #0
 800ac50:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ac52:	4b12      	ldr	r3, [pc, #72]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac54:	2202      	movs	r2, #2
 800ac56:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ac58:	4b10      	ldr	r3, [pc, #64]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ac64:	4b0d      	ldr	r3, [pc, #52]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ac6a:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800ac70:	480a      	ldr	r0, [pc, #40]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac72:	f7f8 fcc8 	bl	8003606 <HAL_HCD_Init>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ac7c:	f7f6 f916 	bl	8000eac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ac80:	4806      	ldr	r0, [pc, #24]	; (800ac9c <USBH_LL_Init+0x84>)
 800ac82:	f7f9 f8ac 	bl	8003dde <HAL_HCD_GetCurrentFrame>
 800ac86:	4603      	mov	r3, r0
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7fe ff5c 	bl	8009b48 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20000bbc 	.word	0x20000bbc
 800aca0:	40040000 	.word	0x40040000

0800aca4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acba:	4618      	mov	r0, r3
 800acbc:	f7f9 f819 	bl	8003cf2 <HAL_HCD_Start>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acc4:	7bfb      	ldrb	r3, [r7, #15]
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 f95c 	bl	800af84 <USBH_Get_USB_Status>
 800accc:	4603      	mov	r3, r0
 800acce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b084      	sub	sp, #16
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7f9 f821 	bl	8003d38 <HAL_HCD_Stop>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f941 	bl	800af84 <USBH_Get_USB_Status>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7f9 f869 	bl	8003dfa <HAL_HCD_GetCurrentSpeed>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d00c      	beq.n	800ad48 <USBH_LL_GetSpeed+0x38>
 800ad2e:	2b02      	cmp	r3, #2
 800ad30:	d80d      	bhi.n	800ad4e <USBH_LL_GetSpeed+0x3e>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d002      	beq.n	800ad3c <USBH_LL_GetSpeed+0x2c>
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d003      	beq.n	800ad42 <USBH_LL_GetSpeed+0x32>
 800ad3a:	e008      	b.n	800ad4e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad40:	e008      	b.n	800ad54 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad42:	2301      	movs	r3, #1
 800ad44:	73fb      	strb	r3, [r7, #15]
    break;
 800ad46:	e005      	b.n	800ad54 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4c:	e002      	b.n	800ad54 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	73fb      	strb	r3, [r7, #15]
    break;
 800ad52:	bf00      	nop
  }
  return  speed;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad66:	2300      	movs	r3, #0
 800ad68:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad74:	4618      	mov	r0, r3
 800ad76:	f7f8 fffc 	bl	8003d72 <HAL_HCD_ResetPort>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	4618      	mov	r0, r3
 800ad82:	f000 f8ff 	bl	800af84 <USBH_Get_USB_Status>
 800ad86:	4603      	mov	r3, r0
 800ad88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ada6:	78fa      	ldrb	r2, [r7, #3]
 800ada8:	4611      	mov	r1, r2
 800adaa:	4618      	mov	r0, r3
 800adac:	f7f9 f803 	bl	8003db6 <HAL_HCD_HC_GetXferCount>
 800adb0:	4603      	mov	r3, r0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adba:	b590      	push	{r4, r7, lr}
 800adbc:	b089      	sub	sp, #36	; 0x24
 800adbe:	af04      	add	r7, sp, #16
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	4608      	mov	r0, r1
 800adc4:	4611      	mov	r1, r2
 800adc6:	461a      	mov	r2, r3
 800adc8:	4603      	mov	r3, r0
 800adca:	70fb      	strb	r3, [r7, #3]
 800adcc:	460b      	mov	r3, r1
 800adce:	70bb      	strb	r3, [r7, #2]
 800add0:	4613      	mov	r3, r2
 800add2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ade2:	787c      	ldrb	r4, [r7, #1]
 800ade4:	78ba      	ldrb	r2, [r7, #2]
 800ade6:	78f9      	ldrb	r1, [r7, #3]
 800ade8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800adea:	9302      	str	r3, [sp, #8]
 800adec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	4623      	mov	r3, r4
 800adfa:	f7f8 fc66 	bl	80036ca <HAL_HCD_HC_Init>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f8bd 	bl	800af84 <USBH_Get_USB_Status>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd90      	pop	{r4, r7, pc}

0800ae18 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae32:	78fa      	ldrb	r2, [r7, #3]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f8 fcd6 	bl	80037e8 <HAL_HCD_HC_Halt>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae40:	7bfb      	ldrb	r3, [r7, #15]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f000 f89e 	bl	800af84 <USBH_Get_USB_Status>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae56:	b590      	push	{r4, r7, lr}
 800ae58:	b089      	sub	sp, #36	; 0x24
 800ae5a:	af04      	add	r7, sp, #16
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	4608      	mov	r0, r1
 800ae60:	4611      	mov	r1, r2
 800ae62:	461a      	mov	r2, r3
 800ae64:	4603      	mov	r3, r0
 800ae66:	70fb      	strb	r3, [r7, #3]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70bb      	strb	r3, [r7, #2]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae7e:	787c      	ldrb	r4, [r7, #1]
 800ae80:	78ba      	ldrb	r2, [r7, #2]
 800ae82:	78f9      	ldrb	r1, [r7, #3]
 800ae84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae88:	9303      	str	r3, [sp, #12]
 800ae8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae8c:	9302      	str	r3, [sp, #8]
 800ae8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae90:	9301      	str	r3, [sp, #4]
 800ae92:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	4623      	mov	r3, r4
 800ae9a:	f7f8 fcc9 	bl	8003830 <HAL_HCD_HC_SubmitRequest>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 f86d 	bl	800af84 <USBH_Get_USB_Status>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd90      	pop	{r4, r7, pc}

0800aeb8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeca:	78fa      	ldrb	r2, [r7, #3]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f7f8 ff5d 	bl	8003d8e <HAL_HCD_HC_GetURBState>
 800aed4:	4603      	mov	r3, r0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3708      	adds	r7, #8
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	460b      	mov	r3, r1
 800aee8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d103      	bne.n	800aefc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 f870 	bl	800afdc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aefc:	20c8      	movs	r0, #200	; 0xc8
 800aefe:	f7f7 fb8f 	bl	8002620 <HAL_Delay>
  return USBH_OK;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	460b      	mov	r3, r1
 800af16:	70fb      	strb	r3, [r7, #3]
 800af18:	4613      	mov	r3, r2
 800af1a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800af22:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af24:	78fb      	ldrb	r3, [r7, #3]
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	212c      	movs	r1, #44	; 0x2c
 800af2a:	fb01 f303 	mul.w	r3, r1, r3
 800af2e:	4413      	add	r3, r2
 800af30:	333b      	adds	r3, #59	; 0x3b
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af38:	78fb      	ldrb	r3, [r7, #3]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	212c      	movs	r1, #44	; 0x2c
 800af3e:	fb01 f303 	mul.w	r3, r1, r3
 800af42:	4413      	add	r3, r2
 800af44:	3354      	adds	r3, #84	; 0x54
 800af46:	78ba      	ldrb	r2, [r7, #2]
 800af48:	701a      	strb	r2, [r3, #0]
 800af4a:	e008      	b.n	800af5e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af4c:	78fb      	ldrb	r3, [r7, #3]
 800af4e:	68fa      	ldr	r2, [r7, #12]
 800af50:	212c      	movs	r1, #44	; 0x2c
 800af52:	fb01 f303 	mul.w	r3, r1, r3
 800af56:	4413      	add	r3, r2
 800af58:	3355      	adds	r3, #85	; 0x55
 800af5a:	78ba      	ldrb	r2, [r7, #2]
 800af5c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f7f7 fb53 	bl	8002620 <HAL_Delay>
}
 800af7a:	bf00      	nop
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	4603      	mov	r3, r0
 800af8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af92:	79fb      	ldrb	r3, [r7, #7]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d817      	bhi.n	800afc8 <USBH_Get_USB_Status+0x44>
 800af98:	a201      	add	r2, pc, #4	; (adr r2, 800afa0 <USBH_Get_USB_Status+0x1c>)
 800af9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9e:	bf00      	nop
 800afa0:	0800afb1 	.word	0x0800afb1
 800afa4:	0800afb7 	.word	0x0800afb7
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afc3 	.word	0x0800afc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
    break;
 800afb4:	e00b      	b.n	800afce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afb6:	2302      	movs	r3, #2
 800afb8:	73fb      	strb	r3, [r7, #15]
    break;
 800afba:	e008      	b.n	800afce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afbc:	2301      	movs	r3, #1
 800afbe:	73fb      	strb	r3, [r7, #15]
    break;
 800afc0:	e005      	b.n	800afce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afc2:	2302      	movs	r3, #2
 800afc4:	73fb      	strb	r3, [r7, #15]
    break;
 800afc6:	e002      	b.n	800afce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afc8:	2302      	movs	r3, #2
 800afca:	73fb      	strb	r3, [r7, #15]
    break;
 800afcc:	bf00      	nop
  }
  return usb_status;
 800afce:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3714      	adds	r7, #20
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]
 800aff4:	e001      	b.n	800affa <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	461a      	mov	r2, r3
 800affe:	2110      	movs	r1, #16
 800b000:	4803      	ldr	r0, [pc, #12]	; (800b010 <MX_DriverVbusHS+0x34>)
 800b002:	f7f8 fae7 	bl	80035d4 <HAL_GPIO_WritePin>
}
 800b006:	bf00      	nop
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	40020800 	.word	0x40020800

0800b014 <__errno>:
 800b014:	4b01      	ldr	r3, [pc, #4]	; (800b01c <__errno+0x8>)
 800b016:	6818      	ldr	r0, [r3, #0]
 800b018:	4770      	bx	lr
 800b01a:	bf00      	nop
 800b01c:	20000030 	.word	0x20000030

0800b020 <__libc_init_array>:
 800b020:	b570      	push	{r4, r5, r6, lr}
 800b022:	4d0d      	ldr	r5, [pc, #52]	; (800b058 <__libc_init_array+0x38>)
 800b024:	4c0d      	ldr	r4, [pc, #52]	; (800b05c <__libc_init_array+0x3c>)
 800b026:	1b64      	subs	r4, r4, r5
 800b028:	10a4      	asrs	r4, r4, #2
 800b02a:	2600      	movs	r6, #0
 800b02c:	42a6      	cmp	r6, r4
 800b02e:	d109      	bne.n	800b044 <__libc_init_array+0x24>
 800b030:	4d0b      	ldr	r5, [pc, #44]	; (800b060 <__libc_init_array+0x40>)
 800b032:	4c0c      	ldr	r4, [pc, #48]	; (800b064 <__libc_init_array+0x44>)
 800b034:	f001 f834 	bl	800c0a0 <_init>
 800b038:	1b64      	subs	r4, r4, r5
 800b03a:	10a4      	asrs	r4, r4, #2
 800b03c:	2600      	movs	r6, #0
 800b03e:	42a6      	cmp	r6, r4
 800b040:	d105      	bne.n	800b04e <__libc_init_array+0x2e>
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	f855 3b04 	ldr.w	r3, [r5], #4
 800b048:	4798      	blx	r3
 800b04a:	3601      	adds	r6, #1
 800b04c:	e7ee      	b.n	800b02c <__libc_init_array+0xc>
 800b04e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b052:	4798      	blx	r3
 800b054:	3601      	adds	r6, #1
 800b056:	e7f2      	b.n	800b03e <__libc_init_array+0x1e>
 800b058:	0800cad0 	.word	0x0800cad0
 800b05c:	0800cad0 	.word	0x0800cad0
 800b060:	0800cad0 	.word	0x0800cad0
 800b064:	0800cad4 	.word	0x0800cad4

0800b068 <malloc>:
 800b068:	4b02      	ldr	r3, [pc, #8]	; (800b074 <malloc+0xc>)
 800b06a:	4601      	mov	r1, r0
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	f000 b87f 	b.w	800b170 <_malloc_r>
 800b072:	bf00      	nop
 800b074:	20000030 	.word	0x20000030

0800b078 <free>:
 800b078:	4b02      	ldr	r3, [pc, #8]	; (800b084 <free+0xc>)
 800b07a:	4601      	mov	r1, r0
 800b07c:	6818      	ldr	r0, [r3, #0]
 800b07e:	f000 b80b 	b.w	800b098 <_free_r>
 800b082:	bf00      	nop
 800b084:	20000030 	.word	0x20000030

0800b088 <memset>:
 800b088:	4402      	add	r2, r0
 800b08a:	4603      	mov	r3, r0
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d100      	bne.n	800b092 <memset+0xa>
 800b090:	4770      	bx	lr
 800b092:	f803 1b01 	strb.w	r1, [r3], #1
 800b096:	e7f9      	b.n	800b08c <memset+0x4>

0800b098 <_free_r>:
 800b098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b09a:	2900      	cmp	r1, #0
 800b09c:	d044      	beq.n	800b128 <_free_r+0x90>
 800b09e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a2:	9001      	str	r0, [sp, #4]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b0aa:	bfb8      	it	lt
 800b0ac:	18e4      	addlt	r4, r4, r3
 800b0ae:	f000 fc51 	bl	800b954 <__malloc_lock>
 800b0b2:	4a1e      	ldr	r2, [pc, #120]	; (800b12c <_free_r+0x94>)
 800b0b4:	9801      	ldr	r0, [sp, #4]
 800b0b6:	6813      	ldr	r3, [r2, #0]
 800b0b8:	b933      	cbnz	r3, 800b0c8 <_free_r+0x30>
 800b0ba:	6063      	str	r3, [r4, #4]
 800b0bc:	6014      	str	r4, [r2, #0]
 800b0be:	b003      	add	sp, #12
 800b0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0c4:	f000 bc4c 	b.w	800b960 <__malloc_unlock>
 800b0c8:	42a3      	cmp	r3, r4
 800b0ca:	d908      	bls.n	800b0de <_free_r+0x46>
 800b0cc:	6825      	ldr	r5, [r4, #0]
 800b0ce:	1961      	adds	r1, r4, r5
 800b0d0:	428b      	cmp	r3, r1
 800b0d2:	bf01      	itttt	eq
 800b0d4:	6819      	ldreq	r1, [r3, #0]
 800b0d6:	685b      	ldreq	r3, [r3, #4]
 800b0d8:	1949      	addeq	r1, r1, r5
 800b0da:	6021      	streq	r1, [r4, #0]
 800b0dc:	e7ed      	b.n	800b0ba <_free_r+0x22>
 800b0de:	461a      	mov	r2, r3
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	b10b      	cbz	r3, 800b0e8 <_free_r+0x50>
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	d9fa      	bls.n	800b0de <_free_r+0x46>
 800b0e8:	6811      	ldr	r1, [r2, #0]
 800b0ea:	1855      	adds	r5, r2, r1
 800b0ec:	42a5      	cmp	r5, r4
 800b0ee:	d10b      	bne.n	800b108 <_free_r+0x70>
 800b0f0:	6824      	ldr	r4, [r4, #0]
 800b0f2:	4421      	add	r1, r4
 800b0f4:	1854      	adds	r4, r2, r1
 800b0f6:	42a3      	cmp	r3, r4
 800b0f8:	6011      	str	r1, [r2, #0]
 800b0fa:	d1e0      	bne.n	800b0be <_free_r+0x26>
 800b0fc:	681c      	ldr	r4, [r3, #0]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	6053      	str	r3, [r2, #4]
 800b102:	4421      	add	r1, r4
 800b104:	6011      	str	r1, [r2, #0]
 800b106:	e7da      	b.n	800b0be <_free_r+0x26>
 800b108:	d902      	bls.n	800b110 <_free_r+0x78>
 800b10a:	230c      	movs	r3, #12
 800b10c:	6003      	str	r3, [r0, #0]
 800b10e:	e7d6      	b.n	800b0be <_free_r+0x26>
 800b110:	6825      	ldr	r5, [r4, #0]
 800b112:	1961      	adds	r1, r4, r5
 800b114:	428b      	cmp	r3, r1
 800b116:	bf04      	itt	eq
 800b118:	6819      	ldreq	r1, [r3, #0]
 800b11a:	685b      	ldreq	r3, [r3, #4]
 800b11c:	6063      	str	r3, [r4, #4]
 800b11e:	bf04      	itt	eq
 800b120:	1949      	addeq	r1, r1, r5
 800b122:	6021      	streq	r1, [r4, #0]
 800b124:	6054      	str	r4, [r2, #4]
 800b126:	e7ca      	b.n	800b0be <_free_r+0x26>
 800b128:	b003      	add	sp, #12
 800b12a:	bd30      	pop	{r4, r5, pc}
 800b12c:	20000ec0 	.word	0x20000ec0

0800b130 <sbrk_aligned>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	4e0e      	ldr	r6, [pc, #56]	; (800b16c <sbrk_aligned+0x3c>)
 800b134:	460c      	mov	r4, r1
 800b136:	6831      	ldr	r1, [r6, #0]
 800b138:	4605      	mov	r5, r0
 800b13a:	b911      	cbnz	r1, 800b142 <sbrk_aligned+0x12>
 800b13c:	f000 f91a 	bl	800b374 <_sbrk_r>
 800b140:	6030      	str	r0, [r6, #0]
 800b142:	4621      	mov	r1, r4
 800b144:	4628      	mov	r0, r5
 800b146:	f000 f915 	bl	800b374 <_sbrk_r>
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	d00a      	beq.n	800b164 <sbrk_aligned+0x34>
 800b14e:	1cc4      	adds	r4, r0, #3
 800b150:	f024 0403 	bic.w	r4, r4, #3
 800b154:	42a0      	cmp	r0, r4
 800b156:	d007      	beq.n	800b168 <sbrk_aligned+0x38>
 800b158:	1a21      	subs	r1, r4, r0
 800b15a:	4628      	mov	r0, r5
 800b15c:	f000 f90a 	bl	800b374 <_sbrk_r>
 800b160:	3001      	adds	r0, #1
 800b162:	d101      	bne.n	800b168 <sbrk_aligned+0x38>
 800b164:	f04f 34ff 	mov.w	r4, #4294967295
 800b168:	4620      	mov	r0, r4
 800b16a:	bd70      	pop	{r4, r5, r6, pc}
 800b16c:	20000ec4 	.word	0x20000ec4

0800b170 <_malloc_r>:
 800b170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b174:	1ccd      	adds	r5, r1, #3
 800b176:	f025 0503 	bic.w	r5, r5, #3
 800b17a:	3508      	adds	r5, #8
 800b17c:	2d0c      	cmp	r5, #12
 800b17e:	bf38      	it	cc
 800b180:	250c      	movcc	r5, #12
 800b182:	2d00      	cmp	r5, #0
 800b184:	4607      	mov	r7, r0
 800b186:	db01      	blt.n	800b18c <_malloc_r+0x1c>
 800b188:	42a9      	cmp	r1, r5
 800b18a:	d905      	bls.n	800b198 <_malloc_r+0x28>
 800b18c:	230c      	movs	r3, #12
 800b18e:	603b      	str	r3, [r7, #0]
 800b190:	2600      	movs	r6, #0
 800b192:	4630      	mov	r0, r6
 800b194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b198:	4e2e      	ldr	r6, [pc, #184]	; (800b254 <_malloc_r+0xe4>)
 800b19a:	f000 fbdb 	bl	800b954 <__malloc_lock>
 800b19e:	6833      	ldr	r3, [r6, #0]
 800b1a0:	461c      	mov	r4, r3
 800b1a2:	bb34      	cbnz	r4, 800b1f2 <_malloc_r+0x82>
 800b1a4:	4629      	mov	r1, r5
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7ff ffc2 	bl	800b130 <sbrk_aligned>
 800b1ac:	1c43      	adds	r3, r0, #1
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	d14d      	bne.n	800b24e <_malloc_r+0xde>
 800b1b2:	6834      	ldr	r4, [r6, #0]
 800b1b4:	4626      	mov	r6, r4
 800b1b6:	2e00      	cmp	r6, #0
 800b1b8:	d140      	bne.n	800b23c <_malloc_r+0xcc>
 800b1ba:	6823      	ldr	r3, [r4, #0]
 800b1bc:	4631      	mov	r1, r6
 800b1be:	4638      	mov	r0, r7
 800b1c0:	eb04 0803 	add.w	r8, r4, r3
 800b1c4:	f000 f8d6 	bl	800b374 <_sbrk_r>
 800b1c8:	4580      	cmp	r8, r0
 800b1ca:	d13a      	bne.n	800b242 <_malloc_r+0xd2>
 800b1cc:	6821      	ldr	r1, [r4, #0]
 800b1ce:	3503      	adds	r5, #3
 800b1d0:	1a6d      	subs	r5, r5, r1
 800b1d2:	f025 0503 	bic.w	r5, r5, #3
 800b1d6:	3508      	adds	r5, #8
 800b1d8:	2d0c      	cmp	r5, #12
 800b1da:	bf38      	it	cc
 800b1dc:	250c      	movcc	r5, #12
 800b1de:	4629      	mov	r1, r5
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	f7ff ffa5 	bl	800b130 <sbrk_aligned>
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d02b      	beq.n	800b242 <_malloc_r+0xd2>
 800b1ea:	6823      	ldr	r3, [r4, #0]
 800b1ec:	442b      	add	r3, r5
 800b1ee:	6023      	str	r3, [r4, #0]
 800b1f0:	e00e      	b.n	800b210 <_malloc_r+0xa0>
 800b1f2:	6822      	ldr	r2, [r4, #0]
 800b1f4:	1b52      	subs	r2, r2, r5
 800b1f6:	d41e      	bmi.n	800b236 <_malloc_r+0xc6>
 800b1f8:	2a0b      	cmp	r2, #11
 800b1fa:	d916      	bls.n	800b22a <_malloc_r+0xba>
 800b1fc:	1961      	adds	r1, r4, r5
 800b1fe:	42a3      	cmp	r3, r4
 800b200:	6025      	str	r5, [r4, #0]
 800b202:	bf18      	it	ne
 800b204:	6059      	strne	r1, [r3, #4]
 800b206:	6863      	ldr	r3, [r4, #4]
 800b208:	bf08      	it	eq
 800b20a:	6031      	streq	r1, [r6, #0]
 800b20c:	5162      	str	r2, [r4, r5]
 800b20e:	604b      	str	r3, [r1, #4]
 800b210:	4638      	mov	r0, r7
 800b212:	f104 060b 	add.w	r6, r4, #11
 800b216:	f000 fba3 	bl	800b960 <__malloc_unlock>
 800b21a:	f026 0607 	bic.w	r6, r6, #7
 800b21e:	1d23      	adds	r3, r4, #4
 800b220:	1af2      	subs	r2, r6, r3
 800b222:	d0b6      	beq.n	800b192 <_malloc_r+0x22>
 800b224:	1b9b      	subs	r3, r3, r6
 800b226:	50a3      	str	r3, [r4, r2]
 800b228:	e7b3      	b.n	800b192 <_malloc_r+0x22>
 800b22a:	6862      	ldr	r2, [r4, #4]
 800b22c:	42a3      	cmp	r3, r4
 800b22e:	bf0c      	ite	eq
 800b230:	6032      	streq	r2, [r6, #0]
 800b232:	605a      	strne	r2, [r3, #4]
 800b234:	e7ec      	b.n	800b210 <_malloc_r+0xa0>
 800b236:	4623      	mov	r3, r4
 800b238:	6864      	ldr	r4, [r4, #4]
 800b23a:	e7b2      	b.n	800b1a2 <_malloc_r+0x32>
 800b23c:	4634      	mov	r4, r6
 800b23e:	6876      	ldr	r6, [r6, #4]
 800b240:	e7b9      	b.n	800b1b6 <_malloc_r+0x46>
 800b242:	230c      	movs	r3, #12
 800b244:	603b      	str	r3, [r7, #0]
 800b246:	4638      	mov	r0, r7
 800b248:	f000 fb8a 	bl	800b960 <__malloc_unlock>
 800b24c:	e7a1      	b.n	800b192 <_malloc_r+0x22>
 800b24e:	6025      	str	r5, [r4, #0]
 800b250:	e7de      	b.n	800b210 <_malloc_r+0xa0>
 800b252:	bf00      	nop
 800b254:	20000ec0 	.word	0x20000ec0

0800b258 <iprintf>:
 800b258:	b40f      	push	{r0, r1, r2, r3}
 800b25a:	4b0a      	ldr	r3, [pc, #40]	; (800b284 <iprintf+0x2c>)
 800b25c:	b513      	push	{r0, r1, r4, lr}
 800b25e:	681c      	ldr	r4, [r3, #0]
 800b260:	b124      	cbz	r4, 800b26c <iprintf+0x14>
 800b262:	69a3      	ldr	r3, [r4, #24]
 800b264:	b913      	cbnz	r3, 800b26c <iprintf+0x14>
 800b266:	4620      	mov	r0, r4
 800b268:	f000 fa6e 	bl	800b748 <__sinit>
 800b26c:	ab05      	add	r3, sp, #20
 800b26e:	9a04      	ldr	r2, [sp, #16]
 800b270:	68a1      	ldr	r1, [r4, #8]
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fba3 	bl	800b9c0 <_vfiprintf_r>
 800b27a:	b002      	add	sp, #8
 800b27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b280:	b004      	add	sp, #16
 800b282:	4770      	bx	lr
 800b284:	20000030 	.word	0x20000030

0800b288 <_puts_r>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	460e      	mov	r6, r1
 800b28c:	4605      	mov	r5, r0
 800b28e:	b118      	cbz	r0, 800b298 <_puts_r+0x10>
 800b290:	6983      	ldr	r3, [r0, #24]
 800b292:	b90b      	cbnz	r3, 800b298 <_puts_r+0x10>
 800b294:	f000 fa58 	bl	800b748 <__sinit>
 800b298:	69ab      	ldr	r3, [r5, #24]
 800b29a:	68ac      	ldr	r4, [r5, #8]
 800b29c:	b913      	cbnz	r3, 800b2a4 <_puts_r+0x1c>
 800b29e:	4628      	mov	r0, r5
 800b2a0:	f000 fa52 	bl	800b748 <__sinit>
 800b2a4:	4b2c      	ldr	r3, [pc, #176]	; (800b358 <_puts_r+0xd0>)
 800b2a6:	429c      	cmp	r4, r3
 800b2a8:	d120      	bne.n	800b2ec <_puts_r+0x64>
 800b2aa:	686c      	ldr	r4, [r5, #4]
 800b2ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2ae:	07db      	lsls	r3, r3, #31
 800b2b0:	d405      	bmi.n	800b2be <_puts_r+0x36>
 800b2b2:	89a3      	ldrh	r3, [r4, #12]
 800b2b4:	0598      	lsls	r0, r3, #22
 800b2b6:	d402      	bmi.n	800b2be <_puts_r+0x36>
 800b2b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2ba:	f000 fae3 	bl	800b884 <__retarget_lock_acquire_recursive>
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	0719      	lsls	r1, r3, #28
 800b2c2:	d51d      	bpl.n	800b300 <_puts_r+0x78>
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	b1db      	cbz	r3, 800b300 <_puts_r+0x78>
 800b2c8:	3e01      	subs	r6, #1
 800b2ca:	68a3      	ldr	r3, [r4, #8]
 800b2cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	60a3      	str	r3, [r4, #8]
 800b2d4:	bb39      	cbnz	r1, 800b326 <_puts_r+0x9e>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	da38      	bge.n	800b34c <_puts_r+0xc4>
 800b2da:	4622      	mov	r2, r4
 800b2dc:	210a      	movs	r1, #10
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f000 f858 	bl	800b394 <__swbuf_r>
 800b2e4:	3001      	adds	r0, #1
 800b2e6:	d011      	beq.n	800b30c <_puts_r+0x84>
 800b2e8:	250a      	movs	r5, #10
 800b2ea:	e011      	b.n	800b310 <_puts_r+0x88>
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <_puts_r+0xd4>)
 800b2ee:	429c      	cmp	r4, r3
 800b2f0:	d101      	bne.n	800b2f6 <_puts_r+0x6e>
 800b2f2:	68ac      	ldr	r4, [r5, #8]
 800b2f4:	e7da      	b.n	800b2ac <_puts_r+0x24>
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <_puts_r+0xd8>)
 800b2f8:	429c      	cmp	r4, r3
 800b2fa:	bf08      	it	eq
 800b2fc:	68ec      	ldreq	r4, [r5, #12]
 800b2fe:	e7d5      	b.n	800b2ac <_puts_r+0x24>
 800b300:	4621      	mov	r1, r4
 800b302:	4628      	mov	r0, r5
 800b304:	f000 f898 	bl	800b438 <__swsetup_r>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d0dd      	beq.n	800b2c8 <_puts_r+0x40>
 800b30c:	f04f 35ff 	mov.w	r5, #4294967295
 800b310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b312:	07da      	lsls	r2, r3, #31
 800b314:	d405      	bmi.n	800b322 <_puts_r+0x9a>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	059b      	lsls	r3, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_puts_r+0x9a>
 800b31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b31e:	f000 fab2 	bl	800b886 <__retarget_lock_release_recursive>
 800b322:	4628      	mov	r0, r5
 800b324:	bd70      	pop	{r4, r5, r6, pc}
 800b326:	2b00      	cmp	r3, #0
 800b328:	da04      	bge.n	800b334 <_puts_r+0xac>
 800b32a:	69a2      	ldr	r2, [r4, #24]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	dc06      	bgt.n	800b33e <_puts_r+0xb6>
 800b330:	290a      	cmp	r1, #10
 800b332:	d004      	beq.n	800b33e <_puts_r+0xb6>
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	1c5a      	adds	r2, r3, #1
 800b338:	6022      	str	r2, [r4, #0]
 800b33a:	7019      	strb	r1, [r3, #0]
 800b33c:	e7c5      	b.n	800b2ca <_puts_r+0x42>
 800b33e:	4622      	mov	r2, r4
 800b340:	4628      	mov	r0, r5
 800b342:	f000 f827 	bl	800b394 <__swbuf_r>
 800b346:	3001      	adds	r0, #1
 800b348:	d1bf      	bne.n	800b2ca <_puts_r+0x42>
 800b34a:	e7df      	b.n	800b30c <_puts_r+0x84>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	250a      	movs	r5, #10
 800b350:	1c5a      	adds	r2, r3, #1
 800b352:	6022      	str	r2, [r4, #0]
 800b354:	701d      	strb	r5, [r3, #0]
 800b356:	e7db      	b.n	800b310 <_puts_r+0x88>
 800b358:	0800ca54 	.word	0x0800ca54
 800b35c:	0800ca74 	.word	0x0800ca74
 800b360:	0800ca34 	.word	0x0800ca34

0800b364 <puts>:
 800b364:	4b02      	ldr	r3, [pc, #8]	; (800b370 <puts+0xc>)
 800b366:	4601      	mov	r1, r0
 800b368:	6818      	ldr	r0, [r3, #0]
 800b36a:	f7ff bf8d 	b.w	800b288 <_puts_r>
 800b36e:	bf00      	nop
 800b370:	20000030 	.word	0x20000030

0800b374 <_sbrk_r>:
 800b374:	b538      	push	{r3, r4, r5, lr}
 800b376:	4d06      	ldr	r5, [pc, #24]	; (800b390 <_sbrk_r+0x1c>)
 800b378:	2300      	movs	r3, #0
 800b37a:	4604      	mov	r4, r0
 800b37c:	4608      	mov	r0, r1
 800b37e:	602b      	str	r3, [r5, #0]
 800b380:	f7f7 f89a 	bl	80024b8 <_sbrk>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_sbrk_r+0x1a>
 800b388:	682b      	ldr	r3, [r5, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_sbrk_r+0x1a>
 800b38c:	6023      	str	r3, [r4, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	20000ecc 	.word	0x20000ecc

0800b394 <__swbuf_r>:
 800b394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b396:	460e      	mov	r6, r1
 800b398:	4614      	mov	r4, r2
 800b39a:	4605      	mov	r5, r0
 800b39c:	b118      	cbz	r0, 800b3a6 <__swbuf_r+0x12>
 800b39e:	6983      	ldr	r3, [r0, #24]
 800b3a0:	b90b      	cbnz	r3, 800b3a6 <__swbuf_r+0x12>
 800b3a2:	f000 f9d1 	bl	800b748 <__sinit>
 800b3a6:	4b21      	ldr	r3, [pc, #132]	; (800b42c <__swbuf_r+0x98>)
 800b3a8:	429c      	cmp	r4, r3
 800b3aa:	d12b      	bne.n	800b404 <__swbuf_r+0x70>
 800b3ac:	686c      	ldr	r4, [r5, #4]
 800b3ae:	69a3      	ldr	r3, [r4, #24]
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	071a      	lsls	r2, r3, #28
 800b3b6:	d52f      	bpl.n	800b418 <__swbuf_r+0x84>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	b36b      	cbz	r3, 800b418 <__swbuf_r+0x84>
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	6820      	ldr	r0, [r4, #0]
 800b3c0:	1ac0      	subs	r0, r0, r3
 800b3c2:	6963      	ldr	r3, [r4, #20]
 800b3c4:	b2f6      	uxtb	r6, r6
 800b3c6:	4283      	cmp	r3, r0
 800b3c8:	4637      	mov	r7, r6
 800b3ca:	dc04      	bgt.n	800b3d6 <__swbuf_r+0x42>
 800b3cc:	4621      	mov	r1, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 f926 	bl	800b620 <_fflush_r>
 800b3d4:	bb30      	cbnz	r0, 800b424 <__swbuf_r+0x90>
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	60a3      	str	r3, [r4, #8]
 800b3dc:	6823      	ldr	r3, [r4, #0]
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	6022      	str	r2, [r4, #0]
 800b3e2:	701e      	strb	r6, [r3, #0]
 800b3e4:	6963      	ldr	r3, [r4, #20]
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	4283      	cmp	r3, r0
 800b3ea:	d004      	beq.n	800b3f6 <__swbuf_r+0x62>
 800b3ec:	89a3      	ldrh	r3, [r4, #12]
 800b3ee:	07db      	lsls	r3, r3, #31
 800b3f0:	d506      	bpl.n	800b400 <__swbuf_r+0x6c>
 800b3f2:	2e0a      	cmp	r6, #10
 800b3f4:	d104      	bne.n	800b400 <__swbuf_r+0x6c>
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	f000 f911 	bl	800b620 <_fflush_r>
 800b3fe:	b988      	cbnz	r0, 800b424 <__swbuf_r+0x90>
 800b400:	4638      	mov	r0, r7
 800b402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b404:	4b0a      	ldr	r3, [pc, #40]	; (800b430 <__swbuf_r+0x9c>)
 800b406:	429c      	cmp	r4, r3
 800b408:	d101      	bne.n	800b40e <__swbuf_r+0x7a>
 800b40a:	68ac      	ldr	r4, [r5, #8]
 800b40c:	e7cf      	b.n	800b3ae <__swbuf_r+0x1a>
 800b40e:	4b09      	ldr	r3, [pc, #36]	; (800b434 <__swbuf_r+0xa0>)
 800b410:	429c      	cmp	r4, r3
 800b412:	bf08      	it	eq
 800b414:	68ec      	ldreq	r4, [r5, #12]
 800b416:	e7ca      	b.n	800b3ae <__swbuf_r+0x1a>
 800b418:	4621      	mov	r1, r4
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 f80c 	bl	800b438 <__swsetup_r>
 800b420:	2800      	cmp	r0, #0
 800b422:	d0cb      	beq.n	800b3bc <__swbuf_r+0x28>
 800b424:	f04f 37ff 	mov.w	r7, #4294967295
 800b428:	e7ea      	b.n	800b400 <__swbuf_r+0x6c>
 800b42a:	bf00      	nop
 800b42c:	0800ca54 	.word	0x0800ca54
 800b430:	0800ca74 	.word	0x0800ca74
 800b434:	0800ca34 	.word	0x0800ca34

0800b438 <__swsetup_r>:
 800b438:	4b32      	ldr	r3, [pc, #200]	; (800b504 <__swsetup_r+0xcc>)
 800b43a:	b570      	push	{r4, r5, r6, lr}
 800b43c:	681d      	ldr	r5, [r3, #0]
 800b43e:	4606      	mov	r6, r0
 800b440:	460c      	mov	r4, r1
 800b442:	b125      	cbz	r5, 800b44e <__swsetup_r+0x16>
 800b444:	69ab      	ldr	r3, [r5, #24]
 800b446:	b913      	cbnz	r3, 800b44e <__swsetup_r+0x16>
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 f97d 	bl	800b748 <__sinit>
 800b44e:	4b2e      	ldr	r3, [pc, #184]	; (800b508 <__swsetup_r+0xd0>)
 800b450:	429c      	cmp	r4, r3
 800b452:	d10f      	bne.n	800b474 <__swsetup_r+0x3c>
 800b454:	686c      	ldr	r4, [r5, #4]
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b45c:	0719      	lsls	r1, r3, #28
 800b45e:	d42c      	bmi.n	800b4ba <__swsetup_r+0x82>
 800b460:	06dd      	lsls	r5, r3, #27
 800b462:	d411      	bmi.n	800b488 <__swsetup_r+0x50>
 800b464:	2309      	movs	r3, #9
 800b466:	6033      	str	r3, [r6, #0]
 800b468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b46c:	81a3      	strh	r3, [r4, #12]
 800b46e:	f04f 30ff 	mov.w	r0, #4294967295
 800b472:	e03e      	b.n	800b4f2 <__swsetup_r+0xba>
 800b474:	4b25      	ldr	r3, [pc, #148]	; (800b50c <__swsetup_r+0xd4>)
 800b476:	429c      	cmp	r4, r3
 800b478:	d101      	bne.n	800b47e <__swsetup_r+0x46>
 800b47a:	68ac      	ldr	r4, [r5, #8]
 800b47c:	e7eb      	b.n	800b456 <__swsetup_r+0x1e>
 800b47e:	4b24      	ldr	r3, [pc, #144]	; (800b510 <__swsetup_r+0xd8>)
 800b480:	429c      	cmp	r4, r3
 800b482:	bf08      	it	eq
 800b484:	68ec      	ldreq	r4, [r5, #12]
 800b486:	e7e6      	b.n	800b456 <__swsetup_r+0x1e>
 800b488:	0758      	lsls	r0, r3, #29
 800b48a:	d512      	bpl.n	800b4b2 <__swsetup_r+0x7a>
 800b48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b48e:	b141      	cbz	r1, 800b4a2 <__swsetup_r+0x6a>
 800b490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b494:	4299      	cmp	r1, r3
 800b496:	d002      	beq.n	800b49e <__swsetup_r+0x66>
 800b498:	4630      	mov	r0, r6
 800b49a:	f7ff fdfd 	bl	800b098 <_free_r>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	6363      	str	r3, [r4, #52]	; 0x34
 800b4a2:	89a3      	ldrh	r3, [r4, #12]
 800b4a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	6063      	str	r3, [r4, #4]
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	6023      	str	r3, [r4, #0]
 800b4b2:	89a3      	ldrh	r3, [r4, #12]
 800b4b4:	f043 0308 	orr.w	r3, r3, #8
 800b4b8:	81a3      	strh	r3, [r4, #12]
 800b4ba:	6923      	ldr	r3, [r4, #16]
 800b4bc:	b94b      	cbnz	r3, 800b4d2 <__swsetup_r+0x9a>
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4c8:	d003      	beq.n	800b4d2 <__swsetup_r+0x9a>
 800b4ca:	4621      	mov	r1, r4
 800b4cc:	4630      	mov	r0, r6
 800b4ce:	f000 fa01 	bl	800b8d4 <__smakebuf_r>
 800b4d2:	89a0      	ldrh	r0, [r4, #12]
 800b4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4d8:	f010 0301 	ands.w	r3, r0, #1
 800b4dc:	d00a      	beq.n	800b4f4 <__swsetup_r+0xbc>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60a3      	str	r3, [r4, #8]
 800b4e2:	6963      	ldr	r3, [r4, #20]
 800b4e4:	425b      	negs	r3, r3
 800b4e6:	61a3      	str	r3, [r4, #24]
 800b4e8:	6923      	ldr	r3, [r4, #16]
 800b4ea:	b943      	cbnz	r3, 800b4fe <__swsetup_r+0xc6>
 800b4ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4f0:	d1ba      	bne.n	800b468 <__swsetup_r+0x30>
 800b4f2:	bd70      	pop	{r4, r5, r6, pc}
 800b4f4:	0781      	lsls	r1, r0, #30
 800b4f6:	bf58      	it	pl
 800b4f8:	6963      	ldrpl	r3, [r4, #20]
 800b4fa:	60a3      	str	r3, [r4, #8]
 800b4fc:	e7f4      	b.n	800b4e8 <__swsetup_r+0xb0>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e7f7      	b.n	800b4f2 <__swsetup_r+0xba>
 800b502:	bf00      	nop
 800b504:	20000030 	.word	0x20000030
 800b508:	0800ca54 	.word	0x0800ca54
 800b50c:	0800ca74 	.word	0x0800ca74
 800b510:	0800ca34 	.word	0x0800ca34

0800b514 <__sflush_r>:
 800b514:	898a      	ldrh	r2, [r1, #12]
 800b516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b51a:	4605      	mov	r5, r0
 800b51c:	0710      	lsls	r0, r2, #28
 800b51e:	460c      	mov	r4, r1
 800b520:	d458      	bmi.n	800b5d4 <__sflush_r+0xc0>
 800b522:	684b      	ldr	r3, [r1, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc05      	bgt.n	800b534 <__sflush_r+0x20>
 800b528:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	dc02      	bgt.n	800b534 <__sflush_r+0x20>
 800b52e:	2000      	movs	r0, #0
 800b530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b534:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b536:	2e00      	cmp	r6, #0
 800b538:	d0f9      	beq.n	800b52e <__sflush_r+0x1a>
 800b53a:	2300      	movs	r3, #0
 800b53c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b540:	682f      	ldr	r7, [r5, #0]
 800b542:	602b      	str	r3, [r5, #0]
 800b544:	d032      	beq.n	800b5ac <__sflush_r+0x98>
 800b546:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b548:	89a3      	ldrh	r3, [r4, #12]
 800b54a:	075a      	lsls	r2, r3, #29
 800b54c:	d505      	bpl.n	800b55a <__sflush_r+0x46>
 800b54e:	6863      	ldr	r3, [r4, #4]
 800b550:	1ac0      	subs	r0, r0, r3
 800b552:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b554:	b10b      	cbz	r3, 800b55a <__sflush_r+0x46>
 800b556:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b558:	1ac0      	subs	r0, r0, r3
 800b55a:	2300      	movs	r3, #0
 800b55c:	4602      	mov	r2, r0
 800b55e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b560:	6a21      	ldr	r1, [r4, #32]
 800b562:	4628      	mov	r0, r5
 800b564:	47b0      	blx	r6
 800b566:	1c43      	adds	r3, r0, #1
 800b568:	89a3      	ldrh	r3, [r4, #12]
 800b56a:	d106      	bne.n	800b57a <__sflush_r+0x66>
 800b56c:	6829      	ldr	r1, [r5, #0]
 800b56e:	291d      	cmp	r1, #29
 800b570:	d82c      	bhi.n	800b5cc <__sflush_r+0xb8>
 800b572:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <__sflush_r+0x108>)
 800b574:	40ca      	lsrs	r2, r1
 800b576:	07d6      	lsls	r6, r2, #31
 800b578:	d528      	bpl.n	800b5cc <__sflush_r+0xb8>
 800b57a:	2200      	movs	r2, #0
 800b57c:	6062      	str	r2, [r4, #4]
 800b57e:	04d9      	lsls	r1, r3, #19
 800b580:	6922      	ldr	r2, [r4, #16]
 800b582:	6022      	str	r2, [r4, #0]
 800b584:	d504      	bpl.n	800b590 <__sflush_r+0x7c>
 800b586:	1c42      	adds	r2, r0, #1
 800b588:	d101      	bne.n	800b58e <__sflush_r+0x7a>
 800b58a:	682b      	ldr	r3, [r5, #0]
 800b58c:	b903      	cbnz	r3, 800b590 <__sflush_r+0x7c>
 800b58e:	6560      	str	r0, [r4, #84]	; 0x54
 800b590:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b592:	602f      	str	r7, [r5, #0]
 800b594:	2900      	cmp	r1, #0
 800b596:	d0ca      	beq.n	800b52e <__sflush_r+0x1a>
 800b598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b59c:	4299      	cmp	r1, r3
 800b59e:	d002      	beq.n	800b5a6 <__sflush_r+0x92>
 800b5a0:	4628      	mov	r0, r5
 800b5a2:	f7ff fd79 	bl	800b098 <_free_r>
 800b5a6:	2000      	movs	r0, #0
 800b5a8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5aa:	e7c1      	b.n	800b530 <__sflush_r+0x1c>
 800b5ac:	6a21      	ldr	r1, [r4, #32]
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b0      	blx	r6
 800b5b4:	1c41      	adds	r1, r0, #1
 800b5b6:	d1c7      	bne.n	800b548 <__sflush_r+0x34>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d0c4      	beq.n	800b548 <__sflush_r+0x34>
 800b5be:	2b1d      	cmp	r3, #29
 800b5c0:	d001      	beq.n	800b5c6 <__sflush_r+0xb2>
 800b5c2:	2b16      	cmp	r3, #22
 800b5c4:	d101      	bne.n	800b5ca <__sflush_r+0xb6>
 800b5c6:	602f      	str	r7, [r5, #0]
 800b5c8:	e7b1      	b.n	800b52e <__sflush_r+0x1a>
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	e7ad      	b.n	800b530 <__sflush_r+0x1c>
 800b5d4:	690f      	ldr	r7, [r1, #16]
 800b5d6:	2f00      	cmp	r7, #0
 800b5d8:	d0a9      	beq.n	800b52e <__sflush_r+0x1a>
 800b5da:	0793      	lsls	r3, r2, #30
 800b5dc:	680e      	ldr	r6, [r1, #0]
 800b5de:	bf08      	it	eq
 800b5e0:	694b      	ldreq	r3, [r1, #20]
 800b5e2:	600f      	str	r7, [r1, #0]
 800b5e4:	bf18      	it	ne
 800b5e6:	2300      	movne	r3, #0
 800b5e8:	eba6 0807 	sub.w	r8, r6, r7
 800b5ec:	608b      	str	r3, [r1, #8]
 800b5ee:	f1b8 0f00 	cmp.w	r8, #0
 800b5f2:	dd9c      	ble.n	800b52e <__sflush_r+0x1a>
 800b5f4:	6a21      	ldr	r1, [r4, #32]
 800b5f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5f8:	4643      	mov	r3, r8
 800b5fa:	463a      	mov	r2, r7
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	47b0      	blx	r6
 800b600:	2800      	cmp	r0, #0
 800b602:	dc06      	bgt.n	800b612 <__sflush_r+0xfe>
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b60a:	81a3      	strh	r3, [r4, #12]
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295
 800b610:	e78e      	b.n	800b530 <__sflush_r+0x1c>
 800b612:	4407      	add	r7, r0
 800b614:	eba8 0800 	sub.w	r8, r8, r0
 800b618:	e7e9      	b.n	800b5ee <__sflush_r+0xda>
 800b61a:	bf00      	nop
 800b61c:	20400001 	.word	0x20400001

0800b620 <_fflush_r>:
 800b620:	b538      	push	{r3, r4, r5, lr}
 800b622:	690b      	ldr	r3, [r1, #16]
 800b624:	4605      	mov	r5, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b913      	cbnz	r3, 800b630 <_fflush_r+0x10>
 800b62a:	2500      	movs	r5, #0
 800b62c:	4628      	mov	r0, r5
 800b62e:	bd38      	pop	{r3, r4, r5, pc}
 800b630:	b118      	cbz	r0, 800b63a <_fflush_r+0x1a>
 800b632:	6983      	ldr	r3, [r0, #24]
 800b634:	b90b      	cbnz	r3, 800b63a <_fflush_r+0x1a>
 800b636:	f000 f887 	bl	800b748 <__sinit>
 800b63a:	4b14      	ldr	r3, [pc, #80]	; (800b68c <_fflush_r+0x6c>)
 800b63c:	429c      	cmp	r4, r3
 800b63e:	d11b      	bne.n	800b678 <_fflush_r+0x58>
 800b640:	686c      	ldr	r4, [r5, #4]
 800b642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d0ef      	beq.n	800b62a <_fflush_r+0xa>
 800b64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b64c:	07d0      	lsls	r0, r2, #31
 800b64e:	d404      	bmi.n	800b65a <_fflush_r+0x3a>
 800b650:	0599      	lsls	r1, r3, #22
 800b652:	d402      	bmi.n	800b65a <_fflush_r+0x3a>
 800b654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b656:	f000 f915 	bl	800b884 <__retarget_lock_acquire_recursive>
 800b65a:	4628      	mov	r0, r5
 800b65c:	4621      	mov	r1, r4
 800b65e:	f7ff ff59 	bl	800b514 <__sflush_r>
 800b662:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b664:	07da      	lsls	r2, r3, #31
 800b666:	4605      	mov	r5, r0
 800b668:	d4e0      	bmi.n	800b62c <_fflush_r+0xc>
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	059b      	lsls	r3, r3, #22
 800b66e:	d4dd      	bmi.n	800b62c <_fflush_r+0xc>
 800b670:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b672:	f000 f908 	bl	800b886 <__retarget_lock_release_recursive>
 800b676:	e7d9      	b.n	800b62c <_fflush_r+0xc>
 800b678:	4b05      	ldr	r3, [pc, #20]	; (800b690 <_fflush_r+0x70>)
 800b67a:	429c      	cmp	r4, r3
 800b67c:	d101      	bne.n	800b682 <_fflush_r+0x62>
 800b67e:	68ac      	ldr	r4, [r5, #8]
 800b680:	e7df      	b.n	800b642 <_fflush_r+0x22>
 800b682:	4b04      	ldr	r3, [pc, #16]	; (800b694 <_fflush_r+0x74>)
 800b684:	429c      	cmp	r4, r3
 800b686:	bf08      	it	eq
 800b688:	68ec      	ldreq	r4, [r5, #12]
 800b68a:	e7da      	b.n	800b642 <_fflush_r+0x22>
 800b68c:	0800ca54 	.word	0x0800ca54
 800b690:	0800ca74 	.word	0x0800ca74
 800b694:	0800ca34 	.word	0x0800ca34

0800b698 <std>:
 800b698:	2300      	movs	r3, #0
 800b69a:	b510      	push	{r4, lr}
 800b69c:	4604      	mov	r4, r0
 800b69e:	e9c0 3300 	strd	r3, r3, [r0]
 800b6a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6a6:	6083      	str	r3, [r0, #8]
 800b6a8:	8181      	strh	r1, [r0, #12]
 800b6aa:	6643      	str	r3, [r0, #100]	; 0x64
 800b6ac:	81c2      	strh	r2, [r0, #14]
 800b6ae:	6183      	str	r3, [r0, #24]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	2208      	movs	r2, #8
 800b6b4:	305c      	adds	r0, #92	; 0x5c
 800b6b6:	f7ff fce7 	bl	800b088 <memset>
 800b6ba:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <std+0x38>)
 800b6bc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6be:	4b05      	ldr	r3, [pc, #20]	; (800b6d4 <std+0x3c>)
 800b6c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b6c2:	4b05      	ldr	r3, [pc, #20]	; (800b6d8 <std+0x40>)
 800b6c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b6c6:	4b05      	ldr	r3, [pc, #20]	; (800b6dc <std+0x44>)
 800b6c8:	6224      	str	r4, [r4, #32]
 800b6ca:	6323      	str	r3, [r4, #48]	; 0x30
 800b6cc:	bd10      	pop	{r4, pc}
 800b6ce:	bf00      	nop
 800b6d0:	0800bf49 	.word	0x0800bf49
 800b6d4:	0800bf6b 	.word	0x0800bf6b
 800b6d8:	0800bfa3 	.word	0x0800bfa3
 800b6dc:	0800bfc7 	.word	0x0800bfc7

0800b6e0 <_cleanup_r>:
 800b6e0:	4901      	ldr	r1, [pc, #4]	; (800b6e8 <_cleanup_r+0x8>)
 800b6e2:	f000 b8af 	b.w	800b844 <_fwalk_reent>
 800b6e6:	bf00      	nop
 800b6e8:	0800b621 	.word	0x0800b621

0800b6ec <__sfmoreglue>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	2268      	movs	r2, #104	; 0x68
 800b6f0:	1e4d      	subs	r5, r1, #1
 800b6f2:	4355      	muls	r5, r2
 800b6f4:	460e      	mov	r6, r1
 800b6f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6fa:	f7ff fd39 	bl	800b170 <_malloc_r>
 800b6fe:	4604      	mov	r4, r0
 800b700:	b140      	cbz	r0, 800b714 <__sfmoreglue+0x28>
 800b702:	2100      	movs	r1, #0
 800b704:	e9c0 1600 	strd	r1, r6, [r0]
 800b708:	300c      	adds	r0, #12
 800b70a:	60a0      	str	r0, [r4, #8]
 800b70c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b710:	f7ff fcba 	bl	800b088 <memset>
 800b714:	4620      	mov	r0, r4
 800b716:	bd70      	pop	{r4, r5, r6, pc}

0800b718 <__sfp_lock_acquire>:
 800b718:	4801      	ldr	r0, [pc, #4]	; (800b720 <__sfp_lock_acquire+0x8>)
 800b71a:	f000 b8b3 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800b71e:	bf00      	nop
 800b720:	20000ec9 	.word	0x20000ec9

0800b724 <__sfp_lock_release>:
 800b724:	4801      	ldr	r0, [pc, #4]	; (800b72c <__sfp_lock_release+0x8>)
 800b726:	f000 b8ae 	b.w	800b886 <__retarget_lock_release_recursive>
 800b72a:	bf00      	nop
 800b72c:	20000ec9 	.word	0x20000ec9

0800b730 <__sinit_lock_acquire>:
 800b730:	4801      	ldr	r0, [pc, #4]	; (800b738 <__sinit_lock_acquire+0x8>)
 800b732:	f000 b8a7 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800b736:	bf00      	nop
 800b738:	20000eca 	.word	0x20000eca

0800b73c <__sinit_lock_release>:
 800b73c:	4801      	ldr	r0, [pc, #4]	; (800b744 <__sinit_lock_release+0x8>)
 800b73e:	f000 b8a2 	b.w	800b886 <__retarget_lock_release_recursive>
 800b742:	bf00      	nop
 800b744:	20000eca 	.word	0x20000eca

0800b748 <__sinit>:
 800b748:	b510      	push	{r4, lr}
 800b74a:	4604      	mov	r4, r0
 800b74c:	f7ff fff0 	bl	800b730 <__sinit_lock_acquire>
 800b750:	69a3      	ldr	r3, [r4, #24]
 800b752:	b11b      	cbz	r3, 800b75c <__sinit+0x14>
 800b754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b758:	f7ff bff0 	b.w	800b73c <__sinit_lock_release>
 800b75c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b760:	6523      	str	r3, [r4, #80]	; 0x50
 800b762:	4b13      	ldr	r3, [pc, #76]	; (800b7b0 <__sinit+0x68>)
 800b764:	4a13      	ldr	r2, [pc, #76]	; (800b7b4 <__sinit+0x6c>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	62a2      	str	r2, [r4, #40]	; 0x28
 800b76a:	42a3      	cmp	r3, r4
 800b76c:	bf04      	itt	eq
 800b76e:	2301      	moveq	r3, #1
 800b770:	61a3      	streq	r3, [r4, #24]
 800b772:	4620      	mov	r0, r4
 800b774:	f000 f820 	bl	800b7b8 <__sfp>
 800b778:	6060      	str	r0, [r4, #4]
 800b77a:	4620      	mov	r0, r4
 800b77c:	f000 f81c 	bl	800b7b8 <__sfp>
 800b780:	60a0      	str	r0, [r4, #8]
 800b782:	4620      	mov	r0, r4
 800b784:	f000 f818 	bl	800b7b8 <__sfp>
 800b788:	2200      	movs	r2, #0
 800b78a:	60e0      	str	r0, [r4, #12]
 800b78c:	2104      	movs	r1, #4
 800b78e:	6860      	ldr	r0, [r4, #4]
 800b790:	f7ff ff82 	bl	800b698 <std>
 800b794:	68a0      	ldr	r0, [r4, #8]
 800b796:	2201      	movs	r2, #1
 800b798:	2109      	movs	r1, #9
 800b79a:	f7ff ff7d 	bl	800b698 <std>
 800b79e:	68e0      	ldr	r0, [r4, #12]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	2112      	movs	r1, #18
 800b7a4:	f7ff ff78 	bl	800b698 <std>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	61a3      	str	r3, [r4, #24]
 800b7ac:	e7d2      	b.n	800b754 <__sinit+0xc>
 800b7ae:	bf00      	nop
 800b7b0:	0800ca30 	.word	0x0800ca30
 800b7b4:	0800b6e1 	.word	0x0800b6e1

0800b7b8 <__sfp>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	4607      	mov	r7, r0
 800b7bc:	f7ff ffac 	bl	800b718 <__sfp_lock_acquire>
 800b7c0:	4b1e      	ldr	r3, [pc, #120]	; (800b83c <__sfp+0x84>)
 800b7c2:	681e      	ldr	r6, [r3, #0]
 800b7c4:	69b3      	ldr	r3, [r6, #24]
 800b7c6:	b913      	cbnz	r3, 800b7ce <__sfp+0x16>
 800b7c8:	4630      	mov	r0, r6
 800b7ca:	f7ff ffbd 	bl	800b748 <__sinit>
 800b7ce:	3648      	adds	r6, #72	; 0x48
 800b7d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	d503      	bpl.n	800b7e0 <__sfp+0x28>
 800b7d8:	6833      	ldr	r3, [r6, #0]
 800b7da:	b30b      	cbz	r3, 800b820 <__sfp+0x68>
 800b7dc:	6836      	ldr	r6, [r6, #0]
 800b7de:	e7f7      	b.n	800b7d0 <__sfp+0x18>
 800b7e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7e4:	b9d5      	cbnz	r5, 800b81c <__sfp+0x64>
 800b7e6:	4b16      	ldr	r3, [pc, #88]	; (800b840 <__sfp+0x88>)
 800b7e8:	60e3      	str	r3, [r4, #12]
 800b7ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7ee:	6665      	str	r5, [r4, #100]	; 0x64
 800b7f0:	f000 f847 	bl	800b882 <__retarget_lock_init_recursive>
 800b7f4:	f7ff ff96 	bl	800b724 <__sfp_lock_release>
 800b7f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b800:	6025      	str	r5, [r4, #0]
 800b802:	61a5      	str	r5, [r4, #24]
 800b804:	2208      	movs	r2, #8
 800b806:	4629      	mov	r1, r5
 800b808:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b80c:	f7ff fc3c 	bl	800b088 <memset>
 800b810:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b814:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b818:	4620      	mov	r0, r4
 800b81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b81c:	3468      	adds	r4, #104	; 0x68
 800b81e:	e7d9      	b.n	800b7d4 <__sfp+0x1c>
 800b820:	2104      	movs	r1, #4
 800b822:	4638      	mov	r0, r7
 800b824:	f7ff ff62 	bl	800b6ec <__sfmoreglue>
 800b828:	4604      	mov	r4, r0
 800b82a:	6030      	str	r0, [r6, #0]
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1d5      	bne.n	800b7dc <__sfp+0x24>
 800b830:	f7ff ff78 	bl	800b724 <__sfp_lock_release>
 800b834:	230c      	movs	r3, #12
 800b836:	603b      	str	r3, [r7, #0]
 800b838:	e7ee      	b.n	800b818 <__sfp+0x60>
 800b83a:	bf00      	nop
 800b83c:	0800ca30 	.word	0x0800ca30
 800b840:	ffff0001 	.word	0xffff0001

0800b844 <_fwalk_reent>:
 800b844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b848:	4606      	mov	r6, r0
 800b84a:	4688      	mov	r8, r1
 800b84c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b850:	2700      	movs	r7, #0
 800b852:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b856:	f1b9 0901 	subs.w	r9, r9, #1
 800b85a:	d505      	bpl.n	800b868 <_fwalk_reent+0x24>
 800b85c:	6824      	ldr	r4, [r4, #0]
 800b85e:	2c00      	cmp	r4, #0
 800b860:	d1f7      	bne.n	800b852 <_fwalk_reent+0xe>
 800b862:	4638      	mov	r0, r7
 800b864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b868:	89ab      	ldrh	r3, [r5, #12]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d907      	bls.n	800b87e <_fwalk_reent+0x3a>
 800b86e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b872:	3301      	adds	r3, #1
 800b874:	d003      	beq.n	800b87e <_fwalk_reent+0x3a>
 800b876:	4629      	mov	r1, r5
 800b878:	4630      	mov	r0, r6
 800b87a:	47c0      	blx	r8
 800b87c:	4307      	orrs	r7, r0
 800b87e:	3568      	adds	r5, #104	; 0x68
 800b880:	e7e9      	b.n	800b856 <_fwalk_reent+0x12>

0800b882 <__retarget_lock_init_recursive>:
 800b882:	4770      	bx	lr

0800b884 <__retarget_lock_acquire_recursive>:
 800b884:	4770      	bx	lr

0800b886 <__retarget_lock_release_recursive>:
 800b886:	4770      	bx	lr

0800b888 <__swhatbuf_r>:
 800b888:	b570      	push	{r4, r5, r6, lr}
 800b88a:	460e      	mov	r6, r1
 800b88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b890:	2900      	cmp	r1, #0
 800b892:	b096      	sub	sp, #88	; 0x58
 800b894:	4614      	mov	r4, r2
 800b896:	461d      	mov	r5, r3
 800b898:	da08      	bge.n	800b8ac <__swhatbuf_r+0x24>
 800b89a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	602a      	str	r2, [r5, #0]
 800b8a2:	061a      	lsls	r2, r3, #24
 800b8a4:	d410      	bmi.n	800b8c8 <__swhatbuf_r+0x40>
 800b8a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8aa:	e00e      	b.n	800b8ca <__swhatbuf_r+0x42>
 800b8ac:	466a      	mov	r2, sp
 800b8ae:	f000 fbb1 	bl	800c014 <_fstat_r>
 800b8b2:	2800      	cmp	r0, #0
 800b8b4:	dbf1      	blt.n	800b89a <__swhatbuf_r+0x12>
 800b8b6:	9a01      	ldr	r2, [sp, #4]
 800b8b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8c0:	425a      	negs	r2, r3
 800b8c2:	415a      	adcs	r2, r3
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	e7ee      	b.n	800b8a6 <__swhatbuf_r+0x1e>
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	6023      	str	r3, [r4, #0]
 800b8ce:	b016      	add	sp, #88	; 0x58
 800b8d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8d4 <__smakebuf_r>:
 800b8d4:	898b      	ldrh	r3, [r1, #12]
 800b8d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8d8:	079d      	lsls	r5, r3, #30
 800b8da:	4606      	mov	r6, r0
 800b8dc:	460c      	mov	r4, r1
 800b8de:	d507      	bpl.n	800b8f0 <__smakebuf_r+0x1c>
 800b8e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	6123      	str	r3, [r4, #16]
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6163      	str	r3, [r4, #20]
 800b8ec:	b002      	add	sp, #8
 800b8ee:	bd70      	pop	{r4, r5, r6, pc}
 800b8f0:	ab01      	add	r3, sp, #4
 800b8f2:	466a      	mov	r2, sp
 800b8f4:	f7ff ffc8 	bl	800b888 <__swhatbuf_r>
 800b8f8:	9900      	ldr	r1, [sp, #0]
 800b8fa:	4605      	mov	r5, r0
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fc37 	bl	800b170 <_malloc_r>
 800b902:	b948      	cbnz	r0, 800b918 <__smakebuf_r+0x44>
 800b904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b908:	059a      	lsls	r2, r3, #22
 800b90a:	d4ef      	bmi.n	800b8ec <__smakebuf_r+0x18>
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	f043 0302 	orr.w	r3, r3, #2
 800b914:	81a3      	strh	r3, [r4, #12]
 800b916:	e7e3      	b.n	800b8e0 <__smakebuf_r+0xc>
 800b918:	4b0d      	ldr	r3, [pc, #52]	; (800b950 <__smakebuf_r+0x7c>)
 800b91a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	6020      	str	r0, [r4, #0]
 800b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	9b00      	ldr	r3, [sp, #0]
 800b928:	6163      	str	r3, [r4, #20]
 800b92a:	9b01      	ldr	r3, [sp, #4]
 800b92c:	6120      	str	r0, [r4, #16]
 800b92e:	b15b      	cbz	r3, 800b948 <__smakebuf_r+0x74>
 800b930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b934:	4630      	mov	r0, r6
 800b936:	f000 fb7f 	bl	800c038 <_isatty_r>
 800b93a:	b128      	cbz	r0, 800b948 <__smakebuf_r+0x74>
 800b93c:	89a3      	ldrh	r3, [r4, #12]
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	81a3      	strh	r3, [r4, #12]
 800b948:	89a0      	ldrh	r0, [r4, #12]
 800b94a:	4305      	orrs	r5, r0
 800b94c:	81a5      	strh	r5, [r4, #12]
 800b94e:	e7cd      	b.n	800b8ec <__smakebuf_r+0x18>
 800b950:	0800b6e1 	.word	0x0800b6e1

0800b954 <__malloc_lock>:
 800b954:	4801      	ldr	r0, [pc, #4]	; (800b95c <__malloc_lock+0x8>)
 800b956:	f7ff bf95 	b.w	800b884 <__retarget_lock_acquire_recursive>
 800b95a:	bf00      	nop
 800b95c:	20000ec8 	.word	0x20000ec8

0800b960 <__malloc_unlock>:
 800b960:	4801      	ldr	r0, [pc, #4]	; (800b968 <__malloc_unlock+0x8>)
 800b962:	f7ff bf90 	b.w	800b886 <__retarget_lock_release_recursive>
 800b966:	bf00      	nop
 800b968:	20000ec8 	.word	0x20000ec8

0800b96c <__sfputc_r>:
 800b96c:	6893      	ldr	r3, [r2, #8]
 800b96e:	3b01      	subs	r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	b410      	push	{r4}
 800b974:	6093      	str	r3, [r2, #8]
 800b976:	da08      	bge.n	800b98a <__sfputc_r+0x1e>
 800b978:	6994      	ldr	r4, [r2, #24]
 800b97a:	42a3      	cmp	r3, r4
 800b97c:	db01      	blt.n	800b982 <__sfputc_r+0x16>
 800b97e:	290a      	cmp	r1, #10
 800b980:	d103      	bne.n	800b98a <__sfputc_r+0x1e>
 800b982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b986:	f7ff bd05 	b.w	800b394 <__swbuf_r>
 800b98a:	6813      	ldr	r3, [r2, #0]
 800b98c:	1c58      	adds	r0, r3, #1
 800b98e:	6010      	str	r0, [r2, #0]
 800b990:	7019      	strb	r1, [r3, #0]
 800b992:	4608      	mov	r0, r1
 800b994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b998:	4770      	bx	lr

0800b99a <__sfputs_r>:
 800b99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b99c:	4606      	mov	r6, r0
 800b99e:	460f      	mov	r7, r1
 800b9a0:	4614      	mov	r4, r2
 800b9a2:	18d5      	adds	r5, r2, r3
 800b9a4:	42ac      	cmp	r4, r5
 800b9a6:	d101      	bne.n	800b9ac <__sfputs_r+0x12>
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	e007      	b.n	800b9bc <__sfputs_r+0x22>
 800b9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b0:	463a      	mov	r2, r7
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f7ff ffda 	bl	800b96c <__sfputc_r>
 800b9b8:	1c43      	adds	r3, r0, #1
 800b9ba:	d1f3      	bne.n	800b9a4 <__sfputs_r+0xa>
 800b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9c0 <_vfiprintf_r>:
 800b9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	b09d      	sub	sp, #116	; 0x74
 800b9c8:	4614      	mov	r4, r2
 800b9ca:	4698      	mov	r8, r3
 800b9cc:	4606      	mov	r6, r0
 800b9ce:	b118      	cbz	r0, 800b9d8 <_vfiprintf_r+0x18>
 800b9d0:	6983      	ldr	r3, [r0, #24]
 800b9d2:	b90b      	cbnz	r3, 800b9d8 <_vfiprintf_r+0x18>
 800b9d4:	f7ff feb8 	bl	800b748 <__sinit>
 800b9d8:	4b89      	ldr	r3, [pc, #548]	; (800bc00 <_vfiprintf_r+0x240>)
 800b9da:	429d      	cmp	r5, r3
 800b9dc:	d11b      	bne.n	800ba16 <_vfiprintf_r+0x56>
 800b9de:	6875      	ldr	r5, [r6, #4]
 800b9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9e2:	07d9      	lsls	r1, r3, #31
 800b9e4:	d405      	bmi.n	800b9f2 <_vfiprintf_r+0x32>
 800b9e6:	89ab      	ldrh	r3, [r5, #12]
 800b9e8:	059a      	lsls	r2, r3, #22
 800b9ea:	d402      	bmi.n	800b9f2 <_vfiprintf_r+0x32>
 800b9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9ee:	f7ff ff49 	bl	800b884 <__retarget_lock_acquire_recursive>
 800b9f2:	89ab      	ldrh	r3, [r5, #12]
 800b9f4:	071b      	lsls	r3, r3, #28
 800b9f6:	d501      	bpl.n	800b9fc <_vfiprintf_r+0x3c>
 800b9f8:	692b      	ldr	r3, [r5, #16]
 800b9fa:	b9eb      	cbnz	r3, 800ba38 <_vfiprintf_r+0x78>
 800b9fc:	4629      	mov	r1, r5
 800b9fe:	4630      	mov	r0, r6
 800ba00:	f7ff fd1a 	bl	800b438 <__swsetup_r>
 800ba04:	b1c0      	cbz	r0, 800ba38 <_vfiprintf_r+0x78>
 800ba06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba08:	07dc      	lsls	r4, r3, #31
 800ba0a:	d50e      	bpl.n	800ba2a <_vfiprintf_r+0x6a>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	b01d      	add	sp, #116	; 0x74
 800ba12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba16:	4b7b      	ldr	r3, [pc, #492]	; (800bc04 <_vfiprintf_r+0x244>)
 800ba18:	429d      	cmp	r5, r3
 800ba1a:	d101      	bne.n	800ba20 <_vfiprintf_r+0x60>
 800ba1c:	68b5      	ldr	r5, [r6, #8]
 800ba1e:	e7df      	b.n	800b9e0 <_vfiprintf_r+0x20>
 800ba20:	4b79      	ldr	r3, [pc, #484]	; (800bc08 <_vfiprintf_r+0x248>)
 800ba22:	429d      	cmp	r5, r3
 800ba24:	bf08      	it	eq
 800ba26:	68f5      	ldreq	r5, [r6, #12]
 800ba28:	e7da      	b.n	800b9e0 <_vfiprintf_r+0x20>
 800ba2a:	89ab      	ldrh	r3, [r5, #12]
 800ba2c:	0598      	lsls	r0, r3, #22
 800ba2e:	d4ed      	bmi.n	800ba0c <_vfiprintf_r+0x4c>
 800ba30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba32:	f7ff ff28 	bl	800b886 <__retarget_lock_release_recursive>
 800ba36:	e7e9      	b.n	800ba0c <_vfiprintf_r+0x4c>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3c:	2320      	movs	r3, #32
 800ba3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba46:	2330      	movs	r3, #48	; 0x30
 800ba48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc0c <_vfiprintf_r+0x24c>
 800ba4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba50:	f04f 0901 	mov.w	r9, #1
 800ba54:	4623      	mov	r3, r4
 800ba56:	469a      	mov	sl, r3
 800ba58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5c:	b10a      	cbz	r2, 800ba62 <_vfiprintf_r+0xa2>
 800ba5e:	2a25      	cmp	r2, #37	; 0x25
 800ba60:	d1f9      	bne.n	800ba56 <_vfiprintf_r+0x96>
 800ba62:	ebba 0b04 	subs.w	fp, sl, r4
 800ba66:	d00b      	beq.n	800ba80 <_vfiprintf_r+0xc0>
 800ba68:	465b      	mov	r3, fp
 800ba6a:	4622      	mov	r2, r4
 800ba6c:	4629      	mov	r1, r5
 800ba6e:	4630      	mov	r0, r6
 800ba70:	f7ff ff93 	bl	800b99a <__sfputs_r>
 800ba74:	3001      	adds	r0, #1
 800ba76:	f000 80aa 	beq.w	800bbce <_vfiprintf_r+0x20e>
 800ba7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7c:	445a      	add	r2, fp
 800ba7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ba80:	f89a 3000 	ldrb.w	r3, [sl]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 80a2 	beq.w	800bbce <_vfiprintf_r+0x20e>
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba94:	f10a 0a01 	add.w	sl, sl, #1
 800ba98:	9304      	str	r3, [sp, #16]
 800ba9a:	9307      	str	r3, [sp, #28]
 800ba9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baa0:	931a      	str	r3, [sp, #104]	; 0x68
 800baa2:	4654      	mov	r4, sl
 800baa4:	2205      	movs	r2, #5
 800baa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baaa:	4858      	ldr	r0, [pc, #352]	; (800bc0c <_vfiprintf_r+0x24c>)
 800baac:	f7f4 fba0 	bl	80001f0 <memchr>
 800bab0:	9a04      	ldr	r2, [sp, #16]
 800bab2:	b9d8      	cbnz	r0, 800baec <_vfiprintf_r+0x12c>
 800bab4:	06d1      	lsls	r1, r2, #27
 800bab6:	bf44      	itt	mi
 800bab8:	2320      	movmi	r3, #32
 800baba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800babe:	0713      	lsls	r3, r2, #28
 800bac0:	bf44      	itt	mi
 800bac2:	232b      	movmi	r3, #43	; 0x2b
 800bac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bac8:	f89a 3000 	ldrb.w	r3, [sl]
 800bacc:	2b2a      	cmp	r3, #42	; 0x2a
 800bace:	d015      	beq.n	800bafc <_vfiprintf_r+0x13c>
 800bad0:	9a07      	ldr	r2, [sp, #28]
 800bad2:	4654      	mov	r4, sl
 800bad4:	2000      	movs	r0, #0
 800bad6:	f04f 0c0a 	mov.w	ip, #10
 800bada:	4621      	mov	r1, r4
 800badc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bae0:	3b30      	subs	r3, #48	; 0x30
 800bae2:	2b09      	cmp	r3, #9
 800bae4:	d94e      	bls.n	800bb84 <_vfiprintf_r+0x1c4>
 800bae6:	b1b0      	cbz	r0, 800bb16 <_vfiprintf_r+0x156>
 800bae8:	9207      	str	r2, [sp, #28]
 800baea:	e014      	b.n	800bb16 <_vfiprintf_r+0x156>
 800baec:	eba0 0308 	sub.w	r3, r0, r8
 800baf0:	fa09 f303 	lsl.w	r3, r9, r3
 800baf4:	4313      	orrs	r3, r2
 800baf6:	9304      	str	r3, [sp, #16]
 800baf8:	46a2      	mov	sl, r4
 800bafa:	e7d2      	b.n	800baa2 <_vfiprintf_r+0xe2>
 800bafc:	9b03      	ldr	r3, [sp, #12]
 800bafe:	1d19      	adds	r1, r3, #4
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	9103      	str	r1, [sp, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bfbb      	ittet	lt
 800bb08:	425b      	neglt	r3, r3
 800bb0a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb0e:	9307      	strge	r3, [sp, #28]
 800bb10:	9307      	strlt	r3, [sp, #28]
 800bb12:	bfb8      	it	lt
 800bb14:	9204      	strlt	r2, [sp, #16]
 800bb16:	7823      	ldrb	r3, [r4, #0]
 800bb18:	2b2e      	cmp	r3, #46	; 0x2e
 800bb1a:	d10c      	bne.n	800bb36 <_vfiprintf_r+0x176>
 800bb1c:	7863      	ldrb	r3, [r4, #1]
 800bb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb20:	d135      	bne.n	800bb8e <_vfiprintf_r+0x1ce>
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	1d1a      	adds	r2, r3, #4
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	9203      	str	r2, [sp, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bfb8      	it	lt
 800bb2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb32:	3402      	adds	r4, #2
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc1c <_vfiprintf_r+0x25c>
 800bb3a:	7821      	ldrb	r1, [r4, #0]
 800bb3c:	2203      	movs	r2, #3
 800bb3e:	4650      	mov	r0, sl
 800bb40:	f7f4 fb56 	bl	80001f0 <memchr>
 800bb44:	b140      	cbz	r0, 800bb58 <_vfiprintf_r+0x198>
 800bb46:	2340      	movs	r3, #64	; 0x40
 800bb48:	eba0 000a 	sub.w	r0, r0, sl
 800bb4c:	fa03 f000 	lsl.w	r0, r3, r0
 800bb50:	9b04      	ldr	r3, [sp, #16]
 800bb52:	4303      	orrs	r3, r0
 800bb54:	3401      	adds	r4, #1
 800bb56:	9304      	str	r3, [sp, #16]
 800bb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb5c:	482c      	ldr	r0, [pc, #176]	; (800bc10 <_vfiprintf_r+0x250>)
 800bb5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb62:	2206      	movs	r2, #6
 800bb64:	f7f4 fb44 	bl	80001f0 <memchr>
 800bb68:	2800      	cmp	r0, #0
 800bb6a:	d03f      	beq.n	800bbec <_vfiprintf_r+0x22c>
 800bb6c:	4b29      	ldr	r3, [pc, #164]	; (800bc14 <_vfiprintf_r+0x254>)
 800bb6e:	bb1b      	cbnz	r3, 800bbb8 <_vfiprintf_r+0x1f8>
 800bb70:	9b03      	ldr	r3, [sp, #12]
 800bb72:	3307      	adds	r3, #7
 800bb74:	f023 0307 	bic.w	r3, r3, #7
 800bb78:	3308      	adds	r3, #8
 800bb7a:	9303      	str	r3, [sp, #12]
 800bb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb7e:	443b      	add	r3, r7
 800bb80:	9309      	str	r3, [sp, #36]	; 0x24
 800bb82:	e767      	b.n	800ba54 <_vfiprintf_r+0x94>
 800bb84:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb88:	460c      	mov	r4, r1
 800bb8a:	2001      	movs	r0, #1
 800bb8c:	e7a5      	b.n	800bada <_vfiprintf_r+0x11a>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	3401      	adds	r4, #1
 800bb92:	9305      	str	r3, [sp, #20]
 800bb94:	4619      	mov	r1, r3
 800bb96:	f04f 0c0a 	mov.w	ip, #10
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bba0:	3a30      	subs	r2, #48	; 0x30
 800bba2:	2a09      	cmp	r2, #9
 800bba4:	d903      	bls.n	800bbae <_vfiprintf_r+0x1ee>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0c5      	beq.n	800bb36 <_vfiprintf_r+0x176>
 800bbaa:	9105      	str	r1, [sp, #20]
 800bbac:	e7c3      	b.n	800bb36 <_vfiprintf_r+0x176>
 800bbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbb2:	4604      	mov	r4, r0
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e7f0      	b.n	800bb9a <_vfiprintf_r+0x1da>
 800bbb8:	ab03      	add	r3, sp, #12
 800bbba:	9300      	str	r3, [sp, #0]
 800bbbc:	462a      	mov	r2, r5
 800bbbe:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <_vfiprintf_r+0x258>)
 800bbc0:	a904      	add	r1, sp, #16
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f3af 8000 	nop.w
 800bbc8:	4607      	mov	r7, r0
 800bbca:	1c78      	adds	r0, r7, #1
 800bbcc:	d1d6      	bne.n	800bb7c <_vfiprintf_r+0x1bc>
 800bbce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd0:	07d9      	lsls	r1, r3, #31
 800bbd2:	d405      	bmi.n	800bbe0 <_vfiprintf_r+0x220>
 800bbd4:	89ab      	ldrh	r3, [r5, #12]
 800bbd6:	059a      	lsls	r2, r3, #22
 800bbd8:	d402      	bmi.n	800bbe0 <_vfiprintf_r+0x220>
 800bbda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbdc:	f7ff fe53 	bl	800b886 <__retarget_lock_release_recursive>
 800bbe0:	89ab      	ldrh	r3, [r5, #12]
 800bbe2:	065b      	lsls	r3, r3, #25
 800bbe4:	f53f af12 	bmi.w	800ba0c <_vfiprintf_r+0x4c>
 800bbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbea:	e711      	b.n	800ba10 <_vfiprintf_r+0x50>
 800bbec:	ab03      	add	r3, sp, #12
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <_vfiprintf_r+0x258>)
 800bbf4:	a904      	add	r1, sp, #16
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f000 f880 	bl	800bcfc <_printf_i>
 800bbfc:	e7e4      	b.n	800bbc8 <_vfiprintf_r+0x208>
 800bbfe:	bf00      	nop
 800bc00:	0800ca54 	.word	0x0800ca54
 800bc04:	0800ca74 	.word	0x0800ca74
 800bc08:	0800ca34 	.word	0x0800ca34
 800bc0c:	0800ca94 	.word	0x0800ca94
 800bc10:	0800ca9e 	.word	0x0800ca9e
 800bc14:	00000000 	.word	0x00000000
 800bc18:	0800b99b 	.word	0x0800b99b
 800bc1c:	0800ca9a 	.word	0x0800ca9a

0800bc20 <_printf_common>:
 800bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	4616      	mov	r6, r2
 800bc26:	4699      	mov	r9, r3
 800bc28:	688a      	ldr	r2, [r1, #8]
 800bc2a:	690b      	ldr	r3, [r1, #16]
 800bc2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc30:	4293      	cmp	r3, r2
 800bc32:	bfb8      	it	lt
 800bc34:	4613      	movlt	r3, r2
 800bc36:	6033      	str	r3, [r6, #0]
 800bc38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	460c      	mov	r4, r1
 800bc40:	b10a      	cbz	r2, 800bc46 <_printf_common+0x26>
 800bc42:	3301      	adds	r3, #1
 800bc44:	6033      	str	r3, [r6, #0]
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	0699      	lsls	r1, r3, #26
 800bc4a:	bf42      	ittt	mi
 800bc4c:	6833      	ldrmi	r3, [r6, #0]
 800bc4e:	3302      	addmi	r3, #2
 800bc50:	6033      	strmi	r3, [r6, #0]
 800bc52:	6825      	ldr	r5, [r4, #0]
 800bc54:	f015 0506 	ands.w	r5, r5, #6
 800bc58:	d106      	bne.n	800bc68 <_printf_common+0x48>
 800bc5a:	f104 0a19 	add.w	sl, r4, #25
 800bc5e:	68e3      	ldr	r3, [r4, #12]
 800bc60:	6832      	ldr	r2, [r6, #0]
 800bc62:	1a9b      	subs	r3, r3, r2
 800bc64:	42ab      	cmp	r3, r5
 800bc66:	dc26      	bgt.n	800bcb6 <_printf_common+0x96>
 800bc68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc6c:	1e13      	subs	r3, r2, #0
 800bc6e:	6822      	ldr	r2, [r4, #0]
 800bc70:	bf18      	it	ne
 800bc72:	2301      	movne	r3, #1
 800bc74:	0692      	lsls	r2, r2, #26
 800bc76:	d42b      	bmi.n	800bcd0 <_printf_common+0xb0>
 800bc78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	4638      	mov	r0, r7
 800bc80:	47c0      	blx	r8
 800bc82:	3001      	adds	r0, #1
 800bc84:	d01e      	beq.n	800bcc4 <_printf_common+0xa4>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	68e5      	ldr	r5, [r4, #12]
 800bc8a:	6832      	ldr	r2, [r6, #0]
 800bc8c:	f003 0306 	and.w	r3, r3, #6
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	bf08      	it	eq
 800bc94:	1aad      	subeq	r5, r5, r2
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	6922      	ldr	r2, [r4, #16]
 800bc9a:	bf0c      	ite	eq
 800bc9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bca0:	2500      	movne	r5, #0
 800bca2:	4293      	cmp	r3, r2
 800bca4:	bfc4      	itt	gt
 800bca6:	1a9b      	subgt	r3, r3, r2
 800bca8:	18ed      	addgt	r5, r5, r3
 800bcaa:	2600      	movs	r6, #0
 800bcac:	341a      	adds	r4, #26
 800bcae:	42b5      	cmp	r5, r6
 800bcb0:	d11a      	bne.n	800bce8 <_printf_common+0xc8>
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	e008      	b.n	800bcc8 <_printf_common+0xa8>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4652      	mov	r2, sl
 800bcba:	4649      	mov	r1, r9
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	47c0      	blx	r8
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d103      	bne.n	800bccc <_printf_common+0xac>
 800bcc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bccc:	3501      	adds	r5, #1
 800bcce:	e7c6      	b.n	800bc5e <_printf_common+0x3e>
 800bcd0:	18e1      	adds	r1, r4, r3
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	2030      	movs	r0, #48	; 0x30
 800bcd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcda:	4422      	add	r2, r4
 800bcdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bce0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bce4:	3302      	adds	r3, #2
 800bce6:	e7c7      	b.n	800bc78 <_printf_common+0x58>
 800bce8:	2301      	movs	r3, #1
 800bcea:	4622      	mov	r2, r4
 800bcec:	4649      	mov	r1, r9
 800bcee:	4638      	mov	r0, r7
 800bcf0:	47c0      	blx	r8
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	d0e6      	beq.n	800bcc4 <_printf_common+0xa4>
 800bcf6:	3601      	adds	r6, #1
 800bcf8:	e7d9      	b.n	800bcae <_printf_common+0x8e>
	...

0800bcfc <_printf_i>:
 800bcfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd00:	7e0f      	ldrb	r7, [r1, #24]
 800bd02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd04:	2f78      	cmp	r7, #120	; 0x78
 800bd06:	4691      	mov	r9, r2
 800bd08:	4680      	mov	r8, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	469a      	mov	sl, r3
 800bd0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd12:	d807      	bhi.n	800bd24 <_printf_i+0x28>
 800bd14:	2f62      	cmp	r7, #98	; 0x62
 800bd16:	d80a      	bhi.n	800bd2e <_printf_i+0x32>
 800bd18:	2f00      	cmp	r7, #0
 800bd1a:	f000 80d8 	beq.w	800bece <_printf_i+0x1d2>
 800bd1e:	2f58      	cmp	r7, #88	; 0x58
 800bd20:	f000 80a3 	beq.w	800be6a <_printf_i+0x16e>
 800bd24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd2c:	e03a      	b.n	800bda4 <_printf_i+0xa8>
 800bd2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd32:	2b15      	cmp	r3, #21
 800bd34:	d8f6      	bhi.n	800bd24 <_printf_i+0x28>
 800bd36:	a101      	add	r1, pc, #4	; (adr r1, 800bd3c <_printf_i+0x40>)
 800bd38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd3c:	0800bd95 	.word	0x0800bd95
 800bd40:	0800bda9 	.word	0x0800bda9
 800bd44:	0800bd25 	.word	0x0800bd25
 800bd48:	0800bd25 	.word	0x0800bd25
 800bd4c:	0800bd25 	.word	0x0800bd25
 800bd50:	0800bd25 	.word	0x0800bd25
 800bd54:	0800bda9 	.word	0x0800bda9
 800bd58:	0800bd25 	.word	0x0800bd25
 800bd5c:	0800bd25 	.word	0x0800bd25
 800bd60:	0800bd25 	.word	0x0800bd25
 800bd64:	0800bd25 	.word	0x0800bd25
 800bd68:	0800beb5 	.word	0x0800beb5
 800bd6c:	0800bdd9 	.word	0x0800bdd9
 800bd70:	0800be97 	.word	0x0800be97
 800bd74:	0800bd25 	.word	0x0800bd25
 800bd78:	0800bd25 	.word	0x0800bd25
 800bd7c:	0800bed7 	.word	0x0800bed7
 800bd80:	0800bd25 	.word	0x0800bd25
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bd25 	.word	0x0800bd25
 800bd8c:	0800bd25 	.word	0x0800bd25
 800bd90:	0800be9f 	.word	0x0800be9f
 800bd94:	682b      	ldr	r3, [r5, #0]
 800bd96:	1d1a      	adds	r2, r3, #4
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	602a      	str	r2, [r5, #0]
 800bd9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bda4:	2301      	movs	r3, #1
 800bda6:	e0a3      	b.n	800bef0 <_printf_i+0x1f4>
 800bda8:	6820      	ldr	r0, [r4, #0]
 800bdaa:	6829      	ldr	r1, [r5, #0]
 800bdac:	0606      	lsls	r6, r0, #24
 800bdae:	f101 0304 	add.w	r3, r1, #4
 800bdb2:	d50a      	bpl.n	800bdca <_printf_i+0xce>
 800bdb4:	680e      	ldr	r6, [r1, #0]
 800bdb6:	602b      	str	r3, [r5, #0]
 800bdb8:	2e00      	cmp	r6, #0
 800bdba:	da03      	bge.n	800bdc4 <_printf_i+0xc8>
 800bdbc:	232d      	movs	r3, #45	; 0x2d
 800bdbe:	4276      	negs	r6, r6
 800bdc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc4:	485e      	ldr	r0, [pc, #376]	; (800bf40 <_printf_i+0x244>)
 800bdc6:	230a      	movs	r3, #10
 800bdc8:	e019      	b.n	800bdfe <_printf_i+0x102>
 800bdca:	680e      	ldr	r6, [r1, #0]
 800bdcc:	602b      	str	r3, [r5, #0]
 800bdce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdd2:	bf18      	it	ne
 800bdd4:	b236      	sxthne	r6, r6
 800bdd6:	e7ef      	b.n	800bdb8 <_printf_i+0xbc>
 800bdd8:	682b      	ldr	r3, [r5, #0]
 800bdda:	6820      	ldr	r0, [r4, #0]
 800bddc:	1d19      	adds	r1, r3, #4
 800bdde:	6029      	str	r1, [r5, #0]
 800bde0:	0601      	lsls	r1, r0, #24
 800bde2:	d501      	bpl.n	800bde8 <_printf_i+0xec>
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	e002      	b.n	800bdee <_printf_i+0xf2>
 800bde8:	0646      	lsls	r6, r0, #25
 800bdea:	d5fb      	bpl.n	800bde4 <_printf_i+0xe8>
 800bdec:	881e      	ldrh	r6, [r3, #0]
 800bdee:	4854      	ldr	r0, [pc, #336]	; (800bf40 <_printf_i+0x244>)
 800bdf0:	2f6f      	cmp	r7, #111	; 0x6f
 800bdf2:	bf0c      	ite	eq
 800bdf4:	2308      	moveq	r3, #8
 800bdf6:	230a      	movne	r3, #10
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bdfe:	6865      	ldr	r5, [r4, #4]
 800be00:	60a5      	str	r5, [r4, #8]
 800be02:	2d00      	cmp	r5, #0
 800be04:	bfa2      	ittt	ge
 800be06:	6821      	ldrge	r1, [r4, #0]
 800be08:	f021 0104 	bicge.w	r1, r1, #4
 800be0c:	6021      	strge	r1, [r4, #0]
 800be0e:	b90e      	cbnz	r6, 800be14 <_printf_i+0x118>
 800be10:	2d00      	cmp	r5, #0
 800be12:	d04d      	beq.n	800beb0 <_printf_i+0x1b4>
 800be14:	4615      	mov	r5, r2
 800be16:	fbb6 f1f3 	udiv	r1, r6, r3
 800be1a:	fb03 6711 	mls	r7, r3, r1, r6
 800be1e:	5dc7      	ldrb	r7, [r0, r7]
 800be20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be24:	4637      	mov	r7, r6
 800be26:	42bb      	cmp	r3, r7
 800be28:	460e      	mov	r6, r1
 800be2a:	d9f4      	bls.n	800be16 <_printf_i+0x11a>
 800be2c:	2b08      	cmp	r3, #8
 800be2e:	d10b      	bne.n	800be48 <_printf_i+0x14c>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	07de      	lsls	r6, r3, #31
 800be34:	d508      	bpl.n	800be48 <_printf_i+0x14c>
 800be36:	6923      	ldr	r3, [r4, #16]
 800be38:	6861      	ldr	r1, [r4, #4]
 800be3a:	4299      	cmp	r1, r3
 800be3c:	bfde      	ittt	le
 800be3e:	2330      	movle	r3, #48	; 0x30
 800be40:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be44:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be48:	1b52      	subs	r2, r2, r5
 800be4a:	6122      	str	r2, [r4, #16]
 800be4c:	f8cd a000 	str.w	sl, [sp]
 800be50:	464b      	mov	r3, r9
 800be52:	aa03      	add	r2, sp, #12
 800be54:	4621      	mov	r1, r4
 800be56:	4640      	mov	r0, r8
 800be58:	f7ff fee2 	bl	800bc20 <_printf_common>
 800be5c:	3001      	adds	r0, #1
 800be5e:	d14c      	bne.n	800befa <_printf_i+0x1fe>
 800be60:	f04f 30ff 	mov.w	r0, #4294967295
 800be64:	b004      	add	sp, #16
 800be66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6a:	4835      	ldr	r0, [pc, #212]	; (800bf40 <_printf_i+0x244>)
 800be6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be70:	6829      	ldr	r1, [r5, #0]
 800be72:	6823      	ldr	r3, [r4, #0]
 800be74:	f851 6b04 	ldr.w	r6, [r1], #4
 800be78:	6029      	str	r1, [r5, #0]
 800be7a:	061d      	lsls	r5, r3, #24
 800be7c:	d514      	bpl.n	800bea8 <_printf_i+0x1ac>
 800be7e:	07df      	lsls	r7, r3, #31
 800be80:	bf44      	itt	mi
 800be82:	f043 0320 	orrmi.w	r3, r3, #32
 800be86:	6023      	strmi	r3, [r4, #0]
 800be88:	b91e      	cbnz	r6, 800be92 <_printf_i+0x196>
 800be8a:	6823      	ldr	r3, [r4, #0]
 800be8c:	f023 0320 	bic.w	r3, r3, #32
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	2310      	movs	r3, #16
 800be94:	e7b0      	b.n	800bdf8 <_printf_i+0xfc>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	f043 0320 	orr.w	r3, r3, #32
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	2378      	movs	r3, #120	; 0x78
 800bea0:	4828      	ldr	r0, [pc, #160]	; (800bf44 <_printf_i+0x248>)
 800bea2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bea6:	e7e3      	b.n	800be70 <_printf_i+0x174>
 800bea8:	0659      	lsls	r1, r3, #25
 800beaa:	bf48      	it	mi
 800beac:	b2b6      	uxthmi	r6, r6
 800beae:	e7e6      	b.n	800be7e <_printf_i+0x182>
 800beb0:	4615      	mov	r5, r2
 800beb2:	e7bb      	b.n	800be2c <_printf_i+0x130>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	6826      	ldr	r6, [r4, #0]
 800beb8:	6961      	ldr	r1, [r4, #20]
 800beba:	1d18      	adds	r0, r3, #4
 800bebc:	6028      	str	r0, [r5, #0]
 800bebe:	0635      	lsls	r5, r6, #24
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	d501      	bpl.n	800bec8 <_printf_i+0x1cc>
 800bec4:	6019      	str	r1, [r3, #0]
 800bec6:	e002      	b.n	800bece <_printf_i+0x1d2>
 800bec8:	0670      	lsls	r0, r6, #25
 800beca:	d5fb      	bpl.n	800bec4 <_printf_i+0x1c8>
 800becc:	8019      	strh	r1, [r3, #0]
 800bece:	2300      	movs	r3, #0
 800bed0:	6123      	str	r3, [r4, #16]
 800bed2:	4615      	mov	r5, r2
 800bed4:	e7ba      	b.n	800be4c <_printf_i+0x150>
 800bed6:	682b      	ldr	r3, [r5, #0]
 800bed8:	1d1a      	adds	r2, r3, #4
 800beda:	602a      	str	r2, [r5, #0]
 800bedc:	681d      	ldr	r5, [r3, #0]
 800bede:	6862      	ldr	r2, [r4, #4]
 800bee0:	2100      	movs	r1, #0
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7f4 f984 	bl	80001f0 <memchr>
 800bee8:	b108      	cbz	r0, 800beee <_printf_i+0x1f2>
 800beea:	1b40      	subs	r0, r0, r5
 800beec:	6060      	str	r0, [r4, #4]
 800beee:	6863      	ldr	r3, [r4, #4]
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	2300      	movs	r3, #0
 800bef4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bef8:	e7a8      	b.n	800be4c <_printf_i+0x150>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	462a      	mov	r2, r5
 800befe:	4649      	mov	r1, r9
 800bf00:	4640      	mov	r0, r8
 800bf02:	47d0      	blx	sl
 800bf04:	3001      	adds	r0, #1
 800bf06:	d0ab      	beq.n	800be60 <_printf_i+0x164>
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	079b      	lsls	r3, r3, #30
 800bf0c:	d413      	bmi.n	800bf36 <_printf_i+0x23a>
 800bf0e:	68e0      	ldr	r0, [r4, #12]
 800bf10:	9b03      	ldr	r3, [sp, #12]
 800bf12:	4298      	cmp	r0, r3
 800bf14:	bfb8      	it	lt
 800bf16:	4618      	movlt	r0, r3
 800bf18:	e7a4      	b.n	800be64 <_printf_i+0x168>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4649      	mov	r1, r9
 800bf20:	4640      	mov	r0, r8
 800bf22:	47d0      	blx	sl
 800bf24:	3001      	adds	r0, #1
 800bf26:	d09b      	beq.n	800be60 <_printf_i+0x164>
 800bf28:	3501      	adds	r5, #1
 800bf2a:	68e3      	ldr	r3, [r4, #12]
 800bf2c:	9903      	ldr	r1, [sp, #12]
 800bf2e:	1a5b      	subs	r3, r3, r1
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dcf2      	bgt.n	800bf1a <_printf_i+0x21e>
 800bf34:	e7eb      	b.n	800bf0e <_printf_i+0x212>
 800bf36:	2500      	movs	r5, #0
 800bf38:	f104 0619 	add.w	r6, r4, #25
 800bf3c:	e7f5      	b.n	800bf2a <_printf_i+0x22e>
 800bf3e:	bf00      	nop
 800bf40:	0800caa5 	.word	0x0800caa5
 800bf44:	0800cab6 	.word	0x0800cab6

0800bf48 <__sread>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	460c      	mov	r4, r1
 800bf4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf50:	f000 f894 	bl	800c07c <_read_r>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	bfab      	itete	ge
 800bf58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bf5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf5c:	181b      	addge	r3, r3, r0
 800bf5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bf62:	bfac      	ite	ge
 800bf64:	6563      	strge	r3, [r4, #84]	; 0x54
 800bf66:	81a3      	strhlt	r3, [r4, #12]
 800bf68:	bd10      	pop	{r4, pc}

0800bf6a <__swrite>:
 800bf6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6e:	461f      	mov	r7, r3
 800bf70:	898b      	ldrh	r3, [r1, #12]
 800bf72:	05db      	lsls	r3, r3, #23
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	4616      	mov	r6, r2
 800bf7a:	d505      	bpl.n	800bf88 <__swrite+0x1e>
 800bf7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf80:	2302      	movs	r3, #2
 800bf82:	2200      	movs	r2, #0
 800bf84:	f000 f868 	bl	800c058 <_lseek_r>
 800bf88:	89a3      	ldrh	r3, [r4, #12]
 800bf8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf92:	81a3      	strh	r3, [r4, #12]
 800bf94:	4632      	mov	r2, r6
 800bf96:	463b      	mov	r3, r7
 800bf98:	4628      	mov	r0, r5
 800bf9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9e:	f000 b817 	b.w	800bfd0 <_write_r>

0800bfa2 <__sseek>:
 800bfa2:	b510      	push	{r4, lr}
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfaa:	f000 f855 	bl	800c058 <_lseek_r>
 800bfae:	1c43      	adds	r3, r0, #1
 800bfb0:	89a3      	ldrh	r3, [r4, #12]
 800bfb2:	bf15      	itete	ne
 800bfb4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bfb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bfba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bfbe:	81a3      	strheq	r3, [r4, #12]
 800bfc0:	bf18      	it	ne
 800bfc2:	81a3      	strhne	r3, [r4, #12]
 800bfc4:	bd10      	pop	{r4, pc}

0800bfc6 <__sclose>:
 800bfc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfca:	f000 b813 	b.w	800bff4 <_close_r>
	...

0800bfd0 <_write_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	4d07      	ldr	r5, [pc, #28]	; (800bff0 <_write_r+0x20>)
 800bfd4:	4604      	mov	r4, r0
 800bfd6:	4608      	mov	r0, r1
 800bfd8:	4611      	mov	r1, r2
 800bfda:	2200      	movs	r2, #0
 800bfdc:	602a      	str	r2, [r5, #0]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	f7f6 fa19 	bl	8002416 <_write>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_write_r+0x1e>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_write_r+0x1e>
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	20000ecc 	.word	0x20000ecc

0800bff4 <_close_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	4d06      	ldr	r5, [pc, #24]	; (800c010 <_close_r+0x1c>)
 800bff8:	2300      	movs	r3, #0
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 fa25 	bl	800244e <_close>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_close_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_close_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20000ecc 	.word	0x20000ecc

0800c014 <_fstat_r>:
 800c014:	b538      	push	{r3, r4, r5, lr}
 800c016:	4d07      	ldr	r5, [pc, #28]	; (800c034 <_fstat_r+0x20>)
 800c018:	2300      	movs	r3, #0
 800c01a:	4604      	mov	r4, r0
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	602b      	str	r3, [r5, #0]
 800c022:	f7f6 fa20 	bl	8002466 <_fstat>
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d102      	bne.n	800c030 <_fstat_r+0x1c>
 800c02a:	682b      	ldr	r3, [r5, #0]
 800c02c:	b103      	cbz	r3, 800c030 <_fstat_r+0x1c>
 800c02e:	6023      	str	r3, [r4, #0]
 800c030:	bd38      	pop	{r3, r4, r5, pc}
 800c032:	bf00      	nop
 800c034:	20000ecc 	.word	0x20000ecc

0800c038 <_isatty_r>:
 800c038:	b538      	push	{r3, r4, r5, lr}
 800c03a:	4d06      	ldr	r5, [pc, #24]	; (800c054 <_isatty_r+0x1c>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	4604      	mov	r4, r0
 800c040:	4608      	mov	r0, r1
 800c042:	602b      	str	r3, [r5, #0]
 800c044:	f7f6 fa1f 	bl	8002486 <_isatty>
 800c048:	1c43      	adds	r3, r0, #1
 800c04a:	d102      	bne.n	800c052 <_isatty_r+0x1a>
 800c04c:	682b      	ldr	r3, [r5, #0]
 800c04e:	b103      	cbz	r3, 800c052 <_isatty_r+0x1a>
 800c050:	6023      	str	r3, [r4, #0]
 800c052:	bd38      	pop	{r3, r4, r5, pc}
 800c054:	20000ecc 	.word	0x20000ecc

0800c058 <_lseek_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	4d07      	ldr	r5, [pc, #28]	; (800c078 <_lseek_r+0x20>)
 800c05c:	4604      	mov	r4, r0
 800c05e:	4608      	mov	r0, r1
 800c060:	4611      	mov	r1, r2
 800c062:	2200      	movs	r2, #0
 800c064:	602a      	str	r2, [r5, #0]
 800c066:	461a      	mov	r2, r3
 800c068:	f7f6 fa18 	bl	800249c <_lseek>
 800c06c:	1c43      	adds	r3, r0, #1
 800c06e:	d102      	bne.n	800c076 <_lseek_r+0x1e>
 800c070:	682b      	ldr	r3, [r5, #0]
 800c072:	b103      	cbz	r3, 800c076 <_lseek_r+0x1e>
 800c074:	6023      	str	r3, [r4, #0]
 800c076:	bd38      	pop	{r3, r4, r5, pc}
 800c078:	20000ecc 	.word	0x20000ecc

0800c07c <_read_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d07      	ldr	r5, [pc, #28]	; (800c09c <_read_r+0x20>)
 800c080:	4604      	mov	r4, r0
 800c082:	4608      	mov	r0, r1
 800c084:	4611      	mov	r1, r2
 800c086:	2200      	movs	r2, #0
 800c088:	602a      	str	r2, [r5, #0]
 800c08a:	461a      	mov	r2, r3
 800c08c:	f7f6 f9a6 	bl	80023dc <_read>
 800c090:	1c43      	adds	r3, r0, #1
 800c092:	d102      	bne.n	800c09a <_read_r+0x1e>
 800c094:	682b      	ldr	r3, [r5, #0]
 800c096:	b103      	cbz	r3, 800c09a <_read_r+0x1e>
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	bd38      	pop	{r3, r4, r5, pc}
 800c09c:	20000ecc 	.word	0x20000ecc

0800c0a0 <_init>:
 800c0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0a2:	bf00      	nop
 800c0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0a6:	bc08      	pop	{r3}
 800c0a8:	469e      	mov	lr, r3
 800c0aa:	4770      	bx	lr

0800c0ac <_fini>:
 800c0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ae:	bf00      	nop
 800c0b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0b2:	bc08      	pop	{r3}
 800c0b4:	469e      	mov	lr, r3
 800c0b6:	4770      	bx	lr
