
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3bc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800a568  0800a568  0001a568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a608  0800a608  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a608  0800a608  0001a608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a610  0800a610  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a610  0800a610  0001a610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a614  0800a614  0001a614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a618  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a00  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a90  20000a90  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024220  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a1b  00000000  00000000  000442e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00048d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b60  00000000  00000000  0004aa30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a81a  00000000  00000000  0004c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b1d  00000000  00000000  00076daa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecd58  00000000  00000000  0009c8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018961f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008364  00000000  00000000  00189670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000090 	.word	0x20000090
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a550 	.word	0x0800a550

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000094 	.word	0x20000094
 80001e8:	0800a550 	.word	0x0800a550

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f001 f972 	bl	80017dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f81c 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fab6 	bl	8000a6c <MX_GPIO_Init>
  MX_CRC_Init();
 8000500:	f000 f884 	bl	800060c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000504:	f000 f896 	bl	8000634 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000508:	f000 fa60 	bl	80009cc <MX_FMC_Init>
  MX_I2C3_Init();
 800050c:	f000 f8c4 	bl	8000698 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000510:	f000 f902 	bl	8000718 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000514:	f000 f980 	bl	8000818 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000518:	f000 f9b4 	bl	8000884 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800051c:	f000 fa2c 	bl	8000978 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000520:	f008 ffc8 	bl	80094b4 <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000524:	f000 f9fe 	bl	8000924 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  go_to_application();
 8000528:	f000 fbc2 	bl	8000cb0 <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800052c:	f008 ffe8 	bl	8009500 <MX_USB_HOST_Process>
 8000530:	e7fc      	b.n	800052c <main+0x3c>
	...

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f009 fafe 	bl	8009b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xd0>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a28      	ldr	r2, [pc, #160]	; (8000604 <SystemClock_Config+0xd0>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd4>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a8:	2310      	movs	r3, #16
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ff54 	bl	800446c <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ca:	f000 fb9f 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2302      	movs	r3, #2
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2102      	movs	r1, #2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 f9b5 	bl	800495c <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80005f8:	f000 fb88 	bl	8000d0c <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_CRC_Init+0x20>)
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <MX_CRC_Init+0x24>)
 8000614:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_CRC_Init+0x20>)
 8000618:	f001 fa28 	bl	8001a6c <HAL_CRC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000622:	f000 fb73 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000ac 	.word	0x200000ac
 8000630:	40023000 	.word	0x40023000

08000634 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <MX_DMA2D_Init+0x5c>)
 800063a:	4a16      	ldr	r2, [pc, #88]	; (8000694 <MX_DMA2D_Init+0x60>)
 800063c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_DMA2D_Init+0x5c>)
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_DMA2D_Init+0x5c>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_DMA2D_Init+0x5c>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_DMA2D_Init+0x5c>)
 8000652:	2200      	movs	r2, #0
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_DMA2D_Init+0x5c>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_DMA2D_Init+0x5c>)
 800065e:	2200      	movs	r2, #0
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_DMA2D_Init+0x5c>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000668:	4809      	ldr	r0, [pc, #36]	; (8000690 <MX_DMA2D_Init+0x5c>)
 800066a:	f001 fa1b 	bl	8001aa4 <HAL_DMA2D_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000674:	f000 fb4a 	bl	8000d0c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000678:	2101      	movs	r1, #1
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_DMA2D_Init+0x5c>)
 800067c:	f001 fb6c 	bl	8001d58 <HAL_DMA2D_ConfigLayer>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000686:	f000 fb41 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200000b4 	.word	0x200000b4
 8000694:	4002b000 	.word	0x4002b000

08000698 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800069c:	4b1b      	ldr	r3, [pc, #108]	; (800070c <MX_I2C3_Init+0x74>)
 800069e:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <MX_I2C3_Init+0x78>)
 80006a0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	; (800070c <MX_I2C3_Init+0x74>)
 80006a4:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <MX_I2C3_Init+0x7c>)
 80006a6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006a8:	4b18      	ldr	r3, [pc, #96]	; (800070c <MX_I2C3_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_I2C3_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b4:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_I2C3_Init+0x74>)
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_I2C3_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C3_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_I2C3_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C3_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <MX_I2C3_Init+0x74>)
 80006d6:	f003 f9a1 	bl	8003a1c <HAL_I2C_Init>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006e0:	f000 fb14 	bl	8000d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4809      	ldr	r0, [pc, #36]	; (800070c <MX_I2C3_Init+0x74>)
 80006e8:	f003 fadc 	bl	8003ca4 <HAL_I2CEx_ConfigAnalogFilter>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006f2:	f000 fb0b 	bl	8000d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006f6:	2100      	movs	r1, #0
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C3_Init+0x74>)
 80006fa:	f003 fb0f 	bl	8003d1c <HAL_I2CEx_ConfigDigitalFilter>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000704:	f000 fb02 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000f4 	.word	0x200000f4
 8000710:	40005c00 	.word	0x40005c00
 8000714:	000186a0 	.word	0x000186a0

08000718 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2234      	movs	r2, #52	; 0x34
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f009 fa0d 	bl	8009b44 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800072a:	4b39      	ldr	r3, [pc, #228]	; (8000810 <MX_LTDC_Init+0xf8>)
 800072c:	4a39      	ldr	r2, [pc, #228]	; (8000814 <MX_LTDC_Init+0xfc>)
 800072e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000730:	4b37      	ldr	r3, [pc, #220]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800073c:	4b34      	ldr	r3, [pc, #208]	; (8000810 <MX_LTDC_Init+0xf8>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000742:	4b33      	ldr	r3, [pc, #204]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000748:	4b31      	ldr	r3, [pc, #196]	; (8000810 <MX_LTDC_Init+0xf8>)
 800074a:	2209      	movs	r2, #9
 800074c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000750:	2201      	movs	r2, #1
 8000752:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000754:	4b2e      	ldr	r3, [pc, #184]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000756:	221d      	movs	r2, #29
 8000758:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <MX_LTDC_Init+0xf8>)
 800075c:	2203      	movs	r2, #3
 800075e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000760:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000762:	f240 120d 	movw	r2, #269	; 0x10d
 8000766:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <MX_LTDC_Init+0xf8>)
 800076a:	f240 1243 	movw	r2, #323	; 0x143
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000770:	4b27      	ldr	r3, [pc, #156]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000772:	f240 1217 	movw	r2, #279	; 0x117
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <MX_LTDC_Init+0xf8>)
 800077a:	f240 1247 	movw	r2, #327	; 0x147
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000782:	2200      	movs	r2, #0
 8000784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <MX_LTDC_Init+0xf8>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <MX_LTDC_Init+0xf8>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <MX_LTDC_Init+0xf8>)
 800079a:	f003 faff 	bl	8003d9c <HAL_LTDC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007a4:	f000 fab2 	bl	8000d0c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007ac:	23f0      	movs	r3, #240	; 0xf0
 80007ae:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007b4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007b8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007ba:	2302      	movs	r3, #2
 80007bc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007be:	23ff      	movs	r3, #255	; 0xff
 80007c0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80007c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007ca:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80007cc:	2307      	movs	r3, #7
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80007d0:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80007d6:	23f0      	movs	r3, #240	; 0xf0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80007da:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_LTDC_Init+0xf8>)
 80007fa:	f003 fc61 	bl	80040c0 <HAL_LTDC_ConfigLayer>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000804:	f000 fa82 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	; 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000148 	.word	0x20000148
 8000814:	40016800 	.word	0x40016800

08000818 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI5_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI5_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI5_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI5_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI5_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI5_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI5_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI5_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI5_Init+0x64>)
 800084c:	2218      	movs	r2, #24
 800084e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI5_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI5_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI5_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI5_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI5_Init+0x64>)
 800086a:	f004 fcbd 	bl	80051e8 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 fa4a 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001f0 	.word	0x200001f0
 8000880:	40015000 	.word	0x40015000

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_TIM1_Init+0x98>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_TIM1_Init+0x9c>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_TIM1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_TIM1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <MX_TIM1_Init+0x98>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_TIM1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_TIM1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_TIM1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	; (800091c <MX_TIM1_Init+0x98>)
 80008ce:	f004 fd14 	bl	80052fa <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 fa18 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_TIM1_Init+0x98>)
 80008ea:	f004 fecd 	bl	8005688 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 fa0a 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_TIM1_Init+0x98>)
 8000906:	f005 f8e9 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 f9fc 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000248 	.word	0x20000248
 8000920:	40010000 	.word	0x40010000

08000924 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_UART5_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	; (8000974 <MX_UART5_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_UART5_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_UART5_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_UART5_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_UART5_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_UART5_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_UART5_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_UART5_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_UART5_Init+0x4c>)
 800095c:	f005 f94e 	bl	8005bfc <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f9d1 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000290 	.word	0x20000290
 8000974:	40005000 	.word	0x40005000

08000978 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800097e:	4a12      	ldr	r2, [pc, #72]	; (80009c8 <MX_USART1_UART_Init+0x50>)
 8000980:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000984:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000988:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 800099e:	220c      	movs	r2, #12
 80009a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART1_UART_Init+0x4c>)
 80009b0:	f005 f924 	bl	8005bfc <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009ba:	f000 f9a7 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200002d4 	.word	0x200002d4
 80009c8:	40011000 	.word	0x40011000

080009cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_FMC_Init+0x98>)
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <MX_FMC_Init+0x9c>)
 80009e8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_FMC_Init+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009f0:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_FMC_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_FMC_Init+0x98>)
 80009f8:	2204      	movs	r2, #4
 80009fa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <MX_FMC_Init+0x98>)
 80009fe:	2210      	movs	r2, #16
 8000a00:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a04:	2240      	movs	r2, #64	; 0x40
 8000a06:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a0a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a0e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a1c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a30:	2307      	movs	r3, #7
 8000a32:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a34:	2304      	movs	r3, #4
 8000a36:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_FMC_Init+0x98>)
 8000a4e:	f004 fb97 	bl	8005180 <HAL_SDRAM_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a58:	f000 f958 	bl	8000d0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3720      	adds	r7, #32
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000318 	.word	0x20000318
 8000a68:	a0000140 	.word	0xa0000140

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	4b7b      	ldr	r3, [pc, #492]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a7a      	ldr	r2, [pc, #488]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b78      	ldr	r3, [pc, #480]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	623b      	str	r3, [r7, #32]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	4b74      	ldr	r3, [pc, #464]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	4a73      	ldr	r2, [pc, #460]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6313      	str	r3, [r2, #48]	; 0x30
 8000aae:	4b71      	ldr	r3, [pc, #452]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	f003 0320 	and.w	r3, r3, #32
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	4b6d      	ldr	r3, [pc, #436]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a6c      	ldr	r2, [pc, #432]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b6a      	ldr	r3, [pc, #424]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	4b66      	ldr	r3, [pc, #408]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a65      	ldr	r2, [pc, #404]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b63      	ldr	r3, [pc, #396]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b5f      	ldr	r3, [pc, #380]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a5e      	ldr	r2, [pc, #376]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b5c      	ldr	r3, [pc, #368]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a57      	ldr	r2, [pc, #348]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a50      	ldr	r2, [pc, #320]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b4a      	ldr	r3, [pc, #296]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a49      	ldr	r2, [pc, #292]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <MX_GPIO_Init+0x208>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2116      	movs	r1, #22
 8000b66:	4844      	ldr	r0, [pc, #272]	; (8000c78 <MX_GPIO_Init+0x20c>)
 8000b68:	f001 fb34 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	4842      	ldr	r0, [pc, #264]	; (8000c7c <MX_GPIO_Init+0x210>)
 8000b72:	f001 fb2f 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000b7c:	4840      	ldr	r0, [pc, #256]	; (8000c80 <MX_GPIO_Init+0x214>)
 8000b7e:	f001 fb29 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000b88:	483e      	ldr	r0, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x218>)
 8000b8a:	f001 fb23 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b8e:	2316      	movs	r3, #22
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4834      	ldr	r0, [pc, #208]	; (8000c78 <MX_GPIO_Init+0x20c>)
 8000ba6:	f001 f969 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000baa:	f248 0307 	movw	r3, #32775	; 0x8007
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	482e      	ldr	r0, [pc, #184]	; (8000c7c <MX_GPIO_Init+0x210>)
 8000bc2:	f001 f95b 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000bc6:	2380      	movs	r3, #128	; 0x80
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4827      	ldr	r0, [pc, #156]	; (8000c7c <MX_GPIO_Init+0x210>)
 8000bde:	f001 f94d 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000be6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4820      	ldr	r0, [pc, #128]	; (8000c78 <MX_GPIO_Init+0x20c>)
 8000bf8:	f001 f940 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	481e      	ldr	r0, [pc, #120]	; (8000c88 <MX_GPIO_Init+0x21c>)
 8000c10:	f001 f934 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4619      	mov	r1, r3
 8000c28:	4815      	ldr	r0, [pc, #84]	; (8000c80 <MX_GPIO_Init+0x214>)
 8000c2a:	f001 f927 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c2e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c44:	4619      	mov	r1, r3
 8000c46:	480e      	ldr	r0, [pc, #56]	; (8000c80 <MX_GPIO_Init+0x214>)
 8000c48:	f001 f918 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c4c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000c50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	4807      	ldr	r0, [pc, #28]	; (8000c84 <MX_GPIO_Init+0x218>)
 8000c66:	f001 f909 	bl	8001e7c <HAL_GPIO_Init>

}
 8000c6a:	bf00      	nop
 8000c6c:	3738      	adds	r7, #56	; 0x38
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40020400 	.word	0x40020400

08000c8c <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c94:	1d39      	adds	r1, r7, #4
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <__io_putchar+0x20>)
 8000c9e:	f004 fffa 	bl	8005c96 <HAL_UART_Transmit>
	return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200002d4 	.word	0x200002d4

08000cb0 <go_to_application>:

static void go_to_application (void){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <go_to_application+0x2c>)
 8000cb8:	f009 f89a 	bl	8009df0 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08040000 + 4));
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <go_to_application+0x30>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (0x08040000)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <go_to_application+0x34>)
 8000cca:	f001 fa83 	bl	80021d4 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4798      	blx	r3
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	0800a568 	.word	0x0800a568
 8000ce0:	08040004 	.word	0x08040004
 8000ce4:	40021800 	.word	0x40021800

08000ce8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d101      	bne.n	8000cfe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cfa:	f000 fd91 	bl	8001820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40001000 	.word	0x40001000

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_CRC_MspInit+0x3c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d10d      	bne.n	8000d96 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <HAL_CRC_MspInit+0x40>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	40023000 	.word	0x40023000
 8000da8:	40023800 	.word	0x40023800

08000dac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_DMA2D_MspInit+0x48>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d115      	bne.n	8000dea <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	; (8000df8 <HAL_DMA2D_MspInit+0x4c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <HAL_DMA2D_MspInit+0x4c>)
 8000dc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_DMA2D_MspInit+0x4c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	205a      	movs	r0, #90	; 0x5a
 8000de0:	f000 fe1a 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000de4:	205a      	movs	r0, #90	; 0x5a
 8000de6:	f000 fe33 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	4002b000 	.word	0x4002b000
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <HAL_I2C_MspInit+0xc4>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d14b      	bne.n	8000eb6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	2312      	movs	r3, #18
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <HAL_I2C_MspInit+0xcc>)
 8000e74:	f001 f802 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e7e:	2312      	movs	r3, #18
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <HAL_I2C_MspInit+0xd0>)
 8000e96:	f000 fff1 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a08      	ldr	r2, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000ea4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_I2C_MspInit+0xc8>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40005c00 	.word	0x40005c00
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09a      	sub	sp, #104	; 0x68
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eec:	2230      	movs	r2, #48	; 0x30
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f008 fe27 	bl	8009b44 <memset>
  if(hltdc->Instance==LTDC)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a85      	ldr	r2, [pc, #532]	; (8001110 <HAL_LTDC_MspInit+0x240>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	f040 8102 	bne.w	8001106 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f02:	2308      	movs	r3, #8
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8000f06:	2331      	movs	r3, #49	; 0x31
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 ff72 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000f22:	f7ff fef3 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
 8000f2a:	4b7a      	ldr	r3, [pc, #488]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b77      	ldr	r3, [pc, #476]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f3e:	623b      	str	r3, [r7, #32]
 8000f40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
 8000f46:	4b73      	ldr	r3, [pc, #460]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a72      	ldr	r2, [pc, #456]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b70      	ldr	r3, [pc, #448]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61bb      	str	r3, [r7, #24]
 8000f62:	4b6c      	ldr	r3, [pc, #432]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a6b      	ldr	r2, [pc, #428]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b69      	ldr	r3, [pc, #420]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	4b65      	ldr	r3, [pc, #404]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a64      	ldr	r2, [pc, #400]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b62      	ldr	r3, [pc, #392]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	4b5e      	ldr	r3, [pc, #376]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a5d      	ldr	r2, [pc, #372]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b5b      	ldr	r3, [pc, #364]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b57      	ldr	r3, [pc, #348]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a56      	ldr	r2, [pc, #344]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b54      	ldr	r3, [pc, #336]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	4b50      	ldr	r3, [pc, #320]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b4d      	ldr	r3, [pc, #308]	; (8001114 <HAL_LTDC_MspInit+0x244>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ffc:	230e      	movs	r3, #14
 8000ffe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001004:	4619      	mov	r1, r3
 8001006:	4844      	ldr	r0, [pc, #272]	; (8001118 <HAL_LTDC_MspInit+0x248>)
 8001008:	f000 ff38 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800100c:	f641 0358 	movw	r3, #6232	; 0x1858
 8001010:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800101e:	230e      	movs	r3, #14
 8001020:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001026:	4619      	mov	r1, r3
 8001028:	483c      	ldr	r0, [pc, #240]	; (800111c <HAL_LTDC_MspInit+0x24c>)
 800102a:	f000 ff27 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800102e:	2303      	movs	r3, #3
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800103e:	2309      	movs	r3, #9
 8001040:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001046:	4619      	mov	r1, r3
 8001048:	4835      	ldr	r0, [pc, #212]	; (8001120 <HAL_LTDC_MspInit+0x250>)
 800104a:	f000 ff17 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800104e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001052:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001060:	230e      	movs	r3, #14
 8001062:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001068:	4619      	mov	r1, r3
 800106a:	482d      	ldr	r0, [pc, #180]	; (8001120 <HAL_LTDC_MspInit+0x250>)
 800106c:	f000 ff06 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001070:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001074:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001082:	230e      	movs	r3, #14
 8001084:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108a:	4619      	mov	r1, r3
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <HAL_LTDC_MspInit+0x254>)
 800108e:	f000 fef5 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001092:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001096:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a4:	230e      	movs	r3, #14
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ac:	4619      	mov	r1, r3
 80010ae:	481e      	ldr	r0, [pc, #120]	; (8001128 <HAL_LTDC_MspInit+0x258>)
 80010b0:	f000 fee4 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80010b4:	2348      	movs	r3, #72	; 0x48
 80010b6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b8:	2302      	movs	r3, #2
 80010ba:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c4:	230e      	movs	r3, #14
 80010c6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010cc:	4619      	mov	r1, r3
 80010ce:	4817      	ldr	r0, [pc, #92]	; (800112c <HAL_LTDC_MspInit+0x25c>)
 80010d0:	f000 fed4 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80010d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010e6:	2309      	movs	r3, #9
 80010e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <HAL_LTDC_MspInit+0x254>)
 80010f2:	f000 fec3 	bl	8001e7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2105      	movs	r1, #5
 80010fa:	2058      	movs	r0, #88	; 0x58
 80010fc:	f000 fc8c 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001100:	2058      	movs	r0, #88	; 0x58
 8001102:	f000 fca5 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3768      	adds	r7, #104	; 0x68
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40016800 	.word	0x40016800
 8001114:	40023800 	.word	0x40023800
 8001118:	40021400 	.word	0x40021400
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40021800 	.word	0x40021800
 8001128:	40020800 	.word	0x40020800
 800112c:	40020c00 	.word	0x40020c00

08001130 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_SPI_MspInit+0x84>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12c      	bne.n	80011ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 800115c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800118a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800118e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800119c:	2305      	movs	r3, #5
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_SPI_MspInit+0x8c>)
 80011a8:	f000 fe68 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40015000 	.word	0x40015000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40021400 	.word	0x40021400

080011c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_TIM_Base_MspInit+0x3c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10d      	bne.n	80011ee <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_TIM_Base_MspInit+0x40>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a09      	ldr	r2, [pc, #36]	; (8001200 <HAL_TIM_Base_MspInit+0x40>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <HAL_TIM_Base_MspInit+0x40>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011ee:	bf00      	nop
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40010000 	.word	0x40010000
 8001200:	40023800 	.word	0x40023800

08001204 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	; 0x30
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a42      	ldr	r2, [pc, #264]	; (800132c <HAL_UART_MspInit+0x128>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d14b      	bne.n	80012be <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_UART_MspInit+0x12c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a40      	ldr	r2, [pc, #256]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b3e      	ldr	r3, [pc, #248]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123e:	61bb      	str	r3, [r7, #24]
 8001240:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a39      	ldr	r2, [pc, #228]	; (8001330 <HAL_UART_MspInit+0x12c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b37      	ldr	r3, [pc, #220]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001268:	f043 0308 	orr.w	r3, r3, #8
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_UART_MspInit+0x12c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0308 	and.w	r3, r3, #8
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800128c:	2308      	movs	r3, #8
 800128e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4827      	ldr	r0, [pc, #156]	; (8001334 <HAL_UART_MspInit+0x130>)
 8001298:	f000 fdf0 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800129c:	2304      	movs	r3, #4
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80012ac:	2308      	movs	r3, #8
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4820      	ldr	r0, [pc, #128]	; (8001338 <HAL_UART_MspInit+0x134>)
 80012b8:	f000 fde0 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012bc:	e031      	b.n	8001322 <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_UART_MspInit+0x138>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d12c      	bne.n	8001322 <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d0:	4a17      	ldr	r2, [pc, #92]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6453      	str	r3, [r2, #68]	; 0x44
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012dc:	f003 0310 	and.w	r3, r3, #16
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspInit+0x12c>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001300:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001312:	2307      	movs	r3, #7
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001316:	f107 031c 	add.w	r3, r7, #28
 800131a:	4619      	mov	r1, r3
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <HAL_UART_MspInit+0x13c>)
 800131e:	f000 fdad 	bl	8001e7c <HAL_GPIO_Init>
}
 8001322:	bf00      	nop
 8001324:	3730      	adds	r7, #48	; 0x30
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40005000 	.word	0x40005000
 8001330:	40023800 	.word	0x40023800
 8001334:	40020800 	.word	0x40020800
 8001338:	40020c00 	.word	0x40020c00
 800133c:	40011000 	.word	0x40011000
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001358:	4b3b      	ldr	r3, [pc, #236]	; (8001448 <HAL_FMC_MspInit+0x104>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d16f      	bne.n	8001440 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <HAL_FMC_MspInit+0x104>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <HAL_FMC_MspInit+0x108>)
 800136c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136e:	4a37      	ldr	r2, [pc, #220]	; (800144c <HAL_FMC_MspInit+0x108>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6393      	str	r3, [r2, #56]	; 0x38
 8001376:	4b35      	ldr	r3, [pc, #212]	; (800144c <HAL_FMC_MspInit+0x108>)
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001382:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001386:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001394:	230c      	movs	r3, #12
 8001396:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	482c      	ldr	r0, [pc, #176]	; (8001450 <HAL_FMC_MspInit+0x10c>)
 800139e:	f000 fd6d 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80013a2:	2301      	movs	r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013b2:	230c      	movs	r3, #12
 80013b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <HAL_FMC_MspInit+0x110>)
 80013bc:	f000 fd5e 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80013c0:	f248 1333 	movw	r3, #33075	; 0x8133
 80013c4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ce:	2303      	movs	r3, #3
 80013d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d2:	230c      	movs	r3, #12
 80013d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	4619      	mov	r1, r3
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <HAL_FMC_MspInit+0x114>)
 80013dc:	f000 fd4e 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80013e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80013e4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f2:	230c      	movs	r3, #12
 80013f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	4619      	mov	r1, r3
 80013fa:	4818      	ldr	r0, [pc, #96]	; (800145c <HAL_FMC_MspInit+0x118>)
 80013fc:	f000 fd3e 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001400:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001404:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001412:	230c      	movs	r3, #12
 8001414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	4811      	ldr	r0, [pc, #68]	; (8001460 <HAL_FMC_MspInit+0x11c>)
 800141c:	f000 fd2e 	bl	8001e7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001420:	2360      	movs	r3, #96	; 0x60
 8001422:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001430:	230c      	movs	r3, #12
 8001432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	4619      	mov	r1, r3
 8001438:	480a      	ldr	r0, [pc, #40]	; (8001464 <HAL_FMC_MspInit+0x120>)
 800143a:	f000 fd1f 	bl	8001e7c <HAL_GPIO_Init>
 800143e:	e000      	b.n	8001442 <HAL_FMC_MspInit+0xfe>
    return;
 8001440:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000034c 	.word	0x2000034c
 800144c:	40023800 	.word	0x40023800
 8001450:	40021400 	.word	0x40021400
 8001454:	40020800 	.word	0x40020800
 8001458:	40021800 	.word	0x40021800
 800145c:	40021000 	.word	0x40021000
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40020400 	.word	0x40020400

08001468 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001470:	f7ff ff68 	bl	8001344 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800148c:	2300      	movs	r3, #0
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	4b33      	ldr	r3, [pc, #204]	; (8001560 <HAL_InitTick+0xe4>)
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	4a32      	ldr	r2, [pc, #200]	; (8001560 <HAL_InitTick+0xe4>)
 8001496:	f043 0310 	orr.w	r3, r3, #16
 800149a:	6413      	str	r3, [r2, #64]	; 0x40
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_InitTick+0xe4>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 0310 	and.w	r3, r3, #16
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a8:	f107 0210 	add.w	r2, r7, #16
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4611      	mov	r1, r2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fc72 	bl	8004d9c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014c2:	f003 fc43 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80014c6:	6378      	str	r0, [r7, #52]	; 0x34
 80014c8:	e004      	b.n	80014d4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ca:	f003 fc3f 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 80014ce:	4603      	mov	r3, r0
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014d6:	4a23      	ldr	r2, [pc, #140]	; (8001564 <HAL_InitTick+0xe8>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	3b01      	subs	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_InitTick+0xec>)
 80014e4:	4a21      	ldr	r2, [pc, #132]	; (800156c <HAL_InitTick+0xf0>)
 80014e6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <HAL_InitTick+0xec>)
 80014ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014ee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_InitTick+0xec>)
 80014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <HAL_InitTick+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <HAL_InitTick+0xec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_InitTick+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001508:	4817      	ldr	r0, [pc, #92]	; (8001568 <HAL_InitTick+0xec>)
 800150a:	f003 fef6 	bl	80052fa <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001514:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001518:	2b00      	cmp	r3, #0
 800151a:	d11b      	bne.n	8001554 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <HAL_InitTick+0xec>)
 800151e:	f003 ff3b 	bl	8005398 <HAL_TIM_Base_Start_IT>
 8001522:	4603      	mov	r3, r0
 8001524:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001528:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800152c:	2b00      	cmp	r3, #0
 800152e:	d111      	bne.n	8001554 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001530:	2036      	movs	r0, #54	; 0x36
 8001532:	f000 fa8d 	bl	8001a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d808      	bhi.n	800154e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	2036      	movs	r0, #54	; 0x36
 8001542:	f000 fa69 	bl	8001a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0xf4>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e002      	b.n	8001554 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001554:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001558:	4618      	mov	r0, r3
 800155a:	3738      	adds	r7, #56	; 0x38
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	431bde83 	.word	0x431bde83
 8001568:	20000350 	.word	0x20000350
 800156c:	40001000 	.word	0x40001000
 8001570:	20000004 	.word	0x20000004

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f003 ff51 	bl	8005478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000350 	.word	0x20000350

080015e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80015e4:	4802      	ldr	r0, [pc, #8]	; (80015f0 <OTG_HS_IRQHandler+0x10>)
 80015e6:	f001 f879 	bl	80026dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000077c 	.word	0x2000077c

080015f4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <LTDC_IRQHandler+0x10>)
 80015fa:	f002 fc9f 	bl	8003f3c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	20000148 	.word	0x20000148

08001608 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <DMA2D_IRQHandler+0x10>)
 800160e:	f000 fa92 	bl	8001b36 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200000b4 	.word	0x200000b4

0800161c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e00a      	b.n	8001644 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800162e:	f3af 8000 	nop.w
 8001632:	4601      	mov	r1, r0
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf0      	blt.n	800162e <_read+0x12>
  }

  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b086      	sub	sp, #24
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e009      	b.n	800167c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb0b 	bl	8000c8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	3301      	adds	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	dbf1      	blt.n	8001668 <_write+0x12>
  }
  return len;
 8001684:	687b      	ldr	r3, [r7, #4]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_close>:

int _close(int file)
{
 800168e:	b480      	push	{r7}
 8001690:	b083      	sub	sp, #12
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b6:	605a      	str	r2, [r3, #4]
  return 0;
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_isatty>:

int _isatty(int file)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001700:	4a14      	ldr	r2, [pc, #80]	; (8001754 <_sbrk+0x5c>)
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_sbrk+0x60>)
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <_sbrk+0x64>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <_sbrk+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	429a      	cmp	r2, r3
 8001726:	d207      	bcs.n	8001738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001728:	f008 f9d2 	bl	8009ad0 <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	220c      	movs	r2, #12
 8001730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
 8001736:	e009      	b.n	800174c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <_sbrk+0x64>)
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4413      	add	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <_sbrk+0x64>)
 8001748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20030000 	.word	0x20030000
 8001758:	00000400 	.word	0x00000400
 800175c:	20000398 	.word	0x20000398
 8001760:	20000a90 	.word	0x20000a90

08001764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <SystemInit+0x20>)
 800176a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176e:	4a05      	ldr	r2, [pc, #20]	; (8001784 <SystemInit+0x20>)
 8001770:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001788:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480d      	ldr	r0, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800178e:	490e      	ldr	r1, [pc, #56]	; (80017c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017a4:	4c0b      	ldr	r4, [pc, #44]	; (80017d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017b2:	f7ff ffd7 	bl	8001764 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f008 f991 	bl	8009adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ba:	f7fe fe99 	bl	80004f0 <main>
  bx  lr    
 80017be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80017cc:	0800a618 	.word	0x0800a618
  ldr r2, =_sbss
 80017d0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80017d4:	20000a90 	.word	0x20000a90

080017d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d8:	e7fe      	b.n	80017d8 <ADC_IRQHandler>
	...

080017dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <HAL_Init+0x40>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0d      	ldr	r2, [pc, #52]	; (800181c <HAL_Init+0x40>)
 80017e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <HAL_Init+0x40>)
 80017f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <HAL_Init+0x40>)
 80017fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f8fc 	bl	8001a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	200f      	movs	r0, #15
 800180c:	f7ff fe36 	bl	800147c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fa82 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023c00 	.word	0x40023c00

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	2000039c 	.word	0x2000039c

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	2000039c 	.word	0x2000039c

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff ffee 	bl	8001848 <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffde 	bl	8001848 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ff4c 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
 8001a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a2a:	f7ff ff61 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	68b9      	ldr	r1, [r7, #8]
 8001a34:	6978      	ldr	r0, [r7, #20]
 8001a36:	f7ff ffb1 	bl	800199c <NVIC_EncodePriority>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a40:	4611      	mov	r1, r2
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff80 	bl	8001948 <__NVIC_SetPriority>
}
 8001a48:	bf00      	nop
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff54 	bl	800190c <__NVIC_EnableIRQ>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00e      	b.n	8001a9c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	795b      	ldrb	r3, [r3, #5]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f96a 	bl	8000d68 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e03b      	b.n	8001b2e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff f96e 	bl	8000dac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	f023 0107 	bic.w	r1, r3, #7
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68d1      	ldr	r1, [r2, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	430b      	orrs	r3, r1
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d026      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d021      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b70:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2201      	movs	r2, #1
 8001b84:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2204      	movs	r2, #4
 8001b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d026      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d021      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bc8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2220      	movs	r2, #32
 8001bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2204      	movs	r2, #4
 8001be2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d026      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d021      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2208      	movs	r2, #8
 8001c28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2e:	f043 0204 	orr.w	r2, r3, #4
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00e      	beq.n	8001c88 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f853 	bl	8001d2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d024      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01f      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001caa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d003      	beq.n	8001cdc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d01f      	beq.n	8001d26 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01a      	beq.n	8001d26 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cfe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f80e 	bl	8001d42 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	b083      	sub	sp, #12
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_DMA2D_ConfigLayer+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e079      	b.n	8001e6c <HAL_DMA2D_ConfigLayer+0x114>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2202      	movs	r2, #2
 8001d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	3318      	adds	r3, #24
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001da2:	4b35      	ldr	r3, [pc, #212]	; (8001e78 <HAL_DMA2D_ConfigLayer+0x120>)
 8001da4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d003      	beq.n	8001db6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	d107      	bne.n	8001dc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e005      	b.n	8001dd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	061b      	lsls	r3, r3, #24
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d120      	bne.n	8001e1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	ea02 0103 	and.w	r1, r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b0a      	cmp	r3, #10
 8001e00:	d003      	beq.n	8001e0a <HAL_DMA2D_ConfigLayer+0xb2>
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b09      	cmp	r3, #9
 8001e08:	d127      	bne.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
 8001e18:	e01f      	b.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69da      	ldr	r2, [r3, #28]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	ea02 0103 	and.w	r1, r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b0a      	cmp	r3, #10
 8001e42:	d003      	beq.n	8001e4c <HAL_DMA2D_ConfigLayer+0xf4>
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	d106      	bne.n	8001e5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001e58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	371c      	adds	r7, #28
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	ff03000f 	.word	0xff03000f

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e177      	b.n	8002188 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8166 	bne.w	8002182 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80c0 	beq.w	8002182 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b66      	ldr	r3, [pc, #408]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a65      	ldr	r2, [pc, #404]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b63      	ldr	r3, [pc, #396]	; (80021a0 <HAL_GPIO_Init+0x324>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a61      	ldr	r2, [pc, #388]	; (80021a4 <HAL_GPIO_Init+0x328>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_GPIO_Init+0x32c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d037      	beq.n	80020ba <HAL_GPIO_Init+0x23e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_GPIO_Init+0x330>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d031      	beq.n	80020b6 <HAL_GPIO_Init+0x23a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a56      	ldr	r2, [pc, #344]	; (80021b0 <HAL_GPIO_Init+0x334>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d02b      	beq.n	80020b2 <HAL_GPIO_Init+0x236>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_GPIO_Init+0x338>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d025      	beq.n	80020ae <HAL_GPIO_Init+0x232>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a54      	ldr	r2, [pc, #336]	; (80021b8 <HAL_GPIO_Init+0x33c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d01f      	beq.n	80020aa <HAL_GPIO_Init+0x22e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a53      	ldr	r2, [pc, #332]	; (80021bc <HAL_GPIO_Init+0x340>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x22a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a52      	ldr	r2, [pc, #328]	; (80021c0 <HAL_GPIO_Init+0x344>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a51      	ldr	r2, [pc, #324]	; (80021c4 <HAL_GPIO_Init+0x348>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x222>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a50      	ldr	r2, [pc, #320]	; (80021c8 <HAL_GPIO_Init+0x34c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x21e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	; (80021cc <HAL_GPIO_Init+0x350>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x21a>
 8002092:	2309      	movs	r3, #9
 8002094:	e012      	b.n	80020bc <HAL_GPIO_Init+0x240>
 8002096:	230a      	movs	r3, #10
 8002098:	e010      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209a:	2308      	movs	r3, #8
 800209c:	e00e      	b.n	80020bc <HAL_GPIO_Init+0x240>
 800209e:	2307      	movs	r3, #7
 80020a0:	e00c      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a2:	2306      	movs	r3, #6
 80020a4:	e00a      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020a6:	2305      	movs	r3, #5
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020aa:	2304      	movs	r3, #4
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x240>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	; (80021a4 <HAL_GPIO_Init+0x328>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x354>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a29      	ldr	r2, [pc, #164]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_GPIO_Init+0x354>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_GPIO_Init+0x354>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f ae84 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40021400 	.word	0x40021400
 80021c0:	40021800 	.word	0x40021800
 80021c4:	40021c00 	.word	0x40021c00
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40022400 	.word	0x40022400
 80021d0:	40013c00 	.word	0x40013c00

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002206:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002208:	b08f      	sub	sp, #60	; 0x3c
 800220a:	af0a      	add	r7, sp, #40	; 0x28
 800220c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e054      	b.n	80022c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d106      	bne.n	8002238 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f007 f99c 	bl	8009570 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 f9ca 	bl	80065f0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	603b      	str	r3, [r7, #0]
 8002262:	687e      	ldr	r6, [r7, #4]
 8002264:	466d      	mov	r5, sp
 8002266:	f106 0410 	add.w	r4, r6, #16
 800226a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002276:	e885 0003 	stmia.w	r5, {r0, r1}
 800227a:	1d33      	adds	r3, r6, #4
 800227c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800227e:	6838      	ldr	r0, [r7, #0]
 8002280:	f004 f944 	bl	800650c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	4618      	mov	r0, r3
 800228c:	f004 f9c1 	bl	8006612 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	687e      	ldr	r6, [r7, #4]
 8002298:	466d      	mov	r5, sp
 800229a:	f106 0410 	add.w	r4, r6, #16
 800229e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ae:	1d33      	adds	r3, r6, #4
 80022b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	f004 fb4a 	bl	800694c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80022ca:	b590      	push	{r4, r7, lr}
 80022cc:	b089      	sub	sp, #36	; 0x24
 80022ce:	af04      	add	r7, sp, #16
 80022d0:	6078      	str	r0, [r7, #4]
 80022d2:	4608      	mov	r0, r1
 80022d4:	4611      	mov	r1, r2
 80022d6:	461a      	mov	r2, r3
 80022d8:	4603      	mov	r3, r0
 80022da:	70fb      	strb	r3, [r7, #3]
 80022dc:	460b      	mov	r3, r1
 80022de:	70bb      	strb	r3, [r7, #2]
 80022e0:	4613      	mov	r3, r2
 80022e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_HCD_HC_Init+0x28>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e076      	b.n	80023e0 <HAL_HCD_HC_Init+0x116>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80022fa:	78fb      	ldrb	r3, [r7, #3]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	333d      	adds	r3, #61	; 0x3d
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3338      	adds	r3, #56	; 0x38
 800231a:	787a      	ldrb	r2, [r7, #1]
 800231c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800231e:	78fb      	ldrb	r3, [r7, #3]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	3340      	adds	r3, #64	; 0x40
 800232c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800232e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	212c      	movs	r1, #44	; 0x2c
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3339      	adds	r3, #57	; 0x39
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002342:	78fb      	ldrb	r3, [r7, #3]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	212c      	movs	r1, #44	; 0x2c
 8002348:	fb01 f303 	mul.w	r3, r1, r3
 800234c:	4413      	add	r3, r2
 800234e:	333f      	adds	r3, #63	; 0x3f
 8002350:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002354:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	78ba      	ldrb	r2, [r7, #2]
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	b2d0      	uxtb	r0, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	333a      	adds	r3, #58	; 0x3a
 800236c:	4602      	mov	r2, r0
 800236e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002370:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002374:	2b00      	cmp	r3, #0
 8002376:	da09      	bge.n	800238c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002378:	78fb      	ldrb	r3, [r7, #3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	212c      	movs	r1, #44	; 0x2c
 800237e:	fb01 f303 	mul.w	r3, r1, r3
 8002382:	4413      	add	r3, r2
 8002384:	333b      	adds	r3, #59	; 0x3b
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
 800238a:	e008      	b.n	800239e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	333b      	adds	r3, #59	; 0x3b
 800239a:	2200      	movs	r2, #0
 800239c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	333c      	adds	r3, #60	; 0x3c
 80023ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80023b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	787c      	ldrb	r4, [r7, #1]
 80023b8:	78ba      	ldrb	r2, [r7, #2]
 80023ba:	78f9      	ldrb	r1, [r7, #3]
 80023bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023be:	9302      	str	r3, [sp, #8]
 80023c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80023c4:	9301      	str	r3, [sp, #4]
 80023c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4623      	mov	r3, r4
 80023ce:	f004 fc43 	bl	8006c58 <USB_HC_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80023de:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}

080023e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_HCD_HC_Halt+0x1e>
 8002402:	2302      	movs	r3, #2
 8002404:	e00f      	b.n	8002426 <HAL_HCD_HC_Halt+0x3e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f004 fe93 	bl	8007142 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	4608      	mov	r0, r1
 800243a:	4611      	mov	r1, r2
 800243c:	461a      	mov	r2, r3
 800243e:	4603      	mov	r3, r0
 8002440:	70fb      	strb	r3, [r7, #3]
 8002442:	460b      	mov	r3, r1
 8002444:	70bb      	strb	r3, [r7, #2]
 8002446:	4613      	mov	r3, r2
 8002448:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800244a:	78fb      	ldrb	r3, [r7, #3]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333b      	adds	r3, #59	; 0x3b
 8002458:	78ba      	ldrb	r2, [r7, #2]
 800245a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	333f      	adds	r3, #63	; 0x3f
 800246a:	787a      	ldrb	r2, [r7, #1]
 800246c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800246e:	7c3b      	ldrb	r3, [r7, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d112      	bne.n	800249a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002474:	78fb      	ldrb	r3, [r7, #3]
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3342      	adds	r3, #66	; 0x42
 8002482:	2203      	movs	r2, #3
 8002484:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	333d      	adds	r3, #61	; 0x3d
 8002494:	7f3a      	ldrb	r2, [r7, #28]
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e008      	b.n	80024ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3342      	adds	r3, #66	; 0x42
 80024a8:	2202      	movs	r2, #2
 80024aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	f200 80c6 	bhi.w	8002640 <HAL_HCD_HC_SubmitRequest+0x210>
 80024b4:	a201      	add	r2, pc, #4	; (adr r2, 80024bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024cd 	.word	0x080024cd
 80024c0:	0800262d 	.word	0x0800262d
 80024c4:	08002531 	.word	0x08002531
 80024c8:	080025af 	.word	0x080025af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80024cc:	7c3b      	ldrb	r3, [r7, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	f040 80b8 	bne.w	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
 80024d4:	78bb      	ldrb	r3, [r7, #2]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80b4 	bne.w	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80024dc:	8b3b      	ldrh	r3, [r7, #24]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d108      	bne.n	80024f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80024e2:	78fb      	ldrb	r3, [r7, #3]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3355      	adds	r3, #85	; 0x55
 80024f0:	2201      	movs	r2, #1
 80024f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	212c      	movs	r1, #44	; 0x2c
 80024fa:	fb01 f303 	mul.w	r3, r1, r3
 80024fe:	4413      	add	r3, r2
 8002500:	3355      	adds	r3, #85	; 0x55
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	212c      	movs	r1, #44	; 0x2c
 800250e:	fb01 f303 	mul.w	r3, r1, r3
 8002512:	4413      	add	r3, r2
 8002514:	3342      	adds	r3, #66	; 0x42
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800251a:	e093      	b.n	8002644 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	212c      	movs	r1, #44	; 0x2c
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	3342      	adds	r3, #66	; 0x42
 800252a:	2202      	movs	r2, #2
 800252c:	701a      	strb	r2, [r3, #0]
      break;
 800252e:	e089      	b.n	8002644 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002530:	78bb      	ldrb	r3, [r7, #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11d      	bne.n	8002572 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3355      	adds	r3, #85	; 0x55
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d109      	bne.n	800255e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800254a:	78fb      	ldrb	r3, [r7, #3]
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3342      	adds	r3, #66	; 0x42
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800255c:	e073      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800255e:	78fb      	ldrb	r3, [r7, #3]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3342      	adds	r3, #66	; 0x42
 800256c:	2202      	movs	r2, #2
 800256e:	701a      	strb	r2, [r3, #0]
      break;
 8002570:	e069      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	212c      	movs	r1, #44	; 0x2c
 8002578:	fb01 f303 	mul.w	r3, r1, r3
 800257c:	4413      	add	r3, r2
 800257e:	3354      	adds	r3, #84	; 0x54
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002586:	78fb      	ldrb	r3, [r7, #3]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	212c      	movs	r1, #44	; 0x2c
 800258c:	fb01 f303 	mul.w	r3, r1, r3
 8002590:	4413      	add	r3, r2
 8002592:	3342      	adds	r3, #66	; 0x42
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
      break;
 8002598:	e055      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	212c      	movs	r1, #44	; 0x2c
 80025a0:	fb01 f303 	mul.w	r3, r1, r3
 80025a4:	4413      	add	r3, r2
 80025a6:	3342      	adds	r3, #66	; 0x42
 80025a8:	2202      	movs	r2, #2
 80025aa:	701a      	strb	r2, [r3, #0]
      break;
 80025ac:	e04b      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80025ae:	78bb      	ldrb	r3, [r7, #2]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d11d      	bne.n	80025f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	212c      	movs	r1, #44	; 0x2c
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	4413      	add	r3, r2
 80025c0:	3355      	adds	r3, #85	; 0x55
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	212c      	movs	r1, #44	; 0x2c
 80025ce:	fb01 f303 	mul.w	r3, r1, r3
 80025d2:	4413      	add	r3, r2
 80025d4:	3342      	adds	r3, #66	; 0x42
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025da:	e034      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	212c      	movs	r1, #44	; 0x2c
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	3342      	adds	r3, #66	; 0x42
 80025ea:	2202      	movs	r2, #2
 80025ec:	701a      	strb	r2, [r3, #0]
      break;
 80025ee:	e02a      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025f0:	78fb      	ldrb	r3, [r7, #3]
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	212c      	movs	r1, #44	; 0x2c
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	4413      	add	r3, r2
 80025fc:	3354      	adds	r3, #84	; 0x54
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	212c      	movs	r1, #44	; 0x2c
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	4413      	add	r3, r2
 8002610:	3342      	adds	r3, #66	; 0x42
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
      break;
 8002616:	e016      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	212c      	movs	r1, #44	; 0x2c
 800261e:	fb01 f303 	mul.w	r3, r1, r3
 8002622:	4413      	add	r3, r2
 8002624:	3342      	adds	r3, #66	; 0x42
 8002626:	2202      	movs	r2, #2
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e00c      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	212c      	movs	r1, #44	; 0x2c
 8002632:	fb01 f303 	mul.w	r3, r1, r3
 8002636:	4413      	add	r3, r2
 8002638:	3342      	adds	r3, #66	; 0x42
 800263a:	2200      	movs	r2, #0
 800263c:	701a      	strb	r2, [r3, #0]
      break;
 800263e:	e002      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002644:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3344      	adds	r3, #68	; 0x44
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	8b3a      	ldrh	r2, [r7, #24]
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	202c      	movs	r0, #44	; 0x2c
 8002660:	fb00 f303 	mul.w	r3, r0, r3
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	; 0x4c
 8002668:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	212c      	movs	r1, #44	; 0x2c
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4413      	add	r3, r2
 8002676:	3360      	adds	r3, #96	; 0x60
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3350      	adds	r3, #80	; 0x50
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3339      	adds	r3, #57	; 0x39
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3361      	adds	r3, #97	; 0x61
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	78fb      	ldrb	r3, [r7, #3]
 80026b8:	222c      	movs	r2, #44	; 0x2c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	3338      	adds	r3, #56	; 0x38
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	18d1      	adds	r1, r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
 80026cc:	f004 fbe6 	bl	8006e9c <USB_HC_StartXfer>
 80026d0:	4603      	mov	r3, r0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f8e7 	bl	80068c6 <USB_GetMode>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	f040 80f6 	bne.w	80028ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f004 f8cb 	bl	80068a0 <USB_ReadInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80ec 	beq.w	80028ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f004 f8c2 	bl	80068a0 <USB_ReadInterrupts>
 800271c:	4603      	mov	r3, r0
 800271e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002726:	d104      	bne.n	8002732 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002730:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 f8b2 	bl	80068a0 <USB_ReadInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002746:	d104      	bne.n	8002752 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002750:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f8a2 	bl	80068a0 <USB_ReadInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002766:	d104      	bne.n	8002772 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002770:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f004 f892 	bl	80068a0 <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b02      	cmp	r3, #2
 8002784:	d103      	bne.n	800278e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f004 f884 	bl	80068a0 <USB_ReadInterrupts>
 8002798:	4603      	mov	r3, r0
 800279a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a2:	d11c      	bne.n	80027de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80027ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10f      	bne.n	80027de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80027be:	2110      	movs	r1, #16
 80027c0:	6938      	ldr	r0, [r7, #16]
 80027c2:	f003 ff73 	bl	80066ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80027c6:	6938      	ldr	r0, [r7, #16]
 80027c8:	f003 ffa4 	bl	8006714 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 f97a 	bl	8006acc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f006 ff43 	bl	8009664 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f85c 	bl	80068a0 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f2:	d102      	bne.n	80027fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 f89e 	bl	8003936 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 f84e 	bl	80068a0 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b08      	cmp	r3, #8
 800280c:	d106      	bne.n	800281c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f006 ff0c 	bl	800962c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2208      	movs	r2, #8
 800281a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f004 f83d 	bl	80068a0 <USB_ReadInterrupts>
 8002826:	4603      	mov	r3, r0
 8002828:	f003 0310 	and.w	r3, r3, #16
 800282c:	2b10      	cmp	r3, #16
 800282e:	d101      	bne.n	8002834 <HAL_HCD_IRQHandler+0x158>
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_HCD_IRQHandler+0x15a>
 8002834:	2300      	movs	r3, #0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d012      	beq.n	8002860 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699a      	ldr	r2, [r3, #24]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0210 	bic.w	r2, r2, #16
 8002848:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 ffa1 	bl	8003792 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699a      	ldr	r2, [r3, #24]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0210 	orr.w	r2, r2, #16
 800285e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f004 f81b 	bl	80068a0 <USB_ReadInterrupts>
 800286a:	4603      	mov	r3, r0
 800286c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002874:	d13a      	bne.n	80028ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fc50 	bl	8007120 <USB_HC_ReadInterrupt>
 8002880:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e025      	b.n	80028d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d018      	beq.n	80028ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	015a      	lsls	r2, r3, #5
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b2:	d106      	bne.n	80028c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	4619      	mov	r1, r3
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8ab 	bl	8002a16 <HCD_HC_IN_IRQHandler>
 80028c0:	e005      	b.n	80028ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 fbf9 	bl	80030c0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d3d4      	bcc.n	8002888 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e6:	615a      	str	r2, [r3, #20]
 80028e8:	e000      	b.n	80028ec <HAL_HCD_IRQHandler+0x210>
      return;
 80028ea:	bf00      	nop
    }
  }
}
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_HCD_Start+0x16>
 8002904:	2302      	movs	r3, #2
 8002906:	e013      	b.n	8002930 <HAL_HCD_Start+0x3e>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2101      	movs	r1, #1
 8002916:	4618      	mov	r0, r3
 8002918:	f004 f93c 	bl	8006b94 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fe54 	bl	80065ce <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002946:	2b01      	cmp	r3, #1
 8002948:	d101      	bne.n	800294e <HAL_HCD_Stop+0x16>
 800294a:	2302      	movs	r3, #2
 800294c:	e00d      	b.n	800296a <HAL_HCD_Stop+0x32>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 fd2a 	bl	80073b4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 f8de 	bl	8006b40 <USB_ResetPort>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3360      	adds	r3, #96	; 0x60
 80029a8:	781b      	ldrb	r3, [r3, #0]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	212c      	movs	r1, #44	; 0x2c
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3350      	adds	r3, #80	; 0x50
 80029d0:	681b      	ldr	r3, [r3, #0]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f004 f922 	bl	8006c34 <USB_GetCurrentFrame>
 80029f0:	4603      	mov	r3, r0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f004 f8fd 	bl	8006c06 <USB_GetHostSpeed>
 8002a0c:	4603      	mov	r3, r0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b086      	sub	sp, #24
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	460b      	mov	r3, r1
 8002a20:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d11a      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	015a      	lsls	r2, r3, #5
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a52:	461a      	mov	r2, r3
 8002a54:	2304      	movs	r3, #4
 8002a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	212c      	movs	r1, #44	; 0x2c
 8002a5e:	fb01 f303 	mul.w	r3, r1, r3
 8002a62:	4413      	add	r3, r2
 8002a64:	3361      	adds	r3, #97	; 0x61
 8002a66:	2206      	movs	r2, #6
 8002a68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	4611      	mov	r1, r2
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fb64 	bl	8007142 <USB_HC_Halt>
 8002a7a:	e0af      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a92:	d11b      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3361      	adds	r3, #97	; 0x61
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fb3c 	bl	8007142 <USB_HC_Halt>
 8002aca:	e087      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d109      	bne.n	8002af6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]
 8002af4:	e072      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d11a      	bne.n	8002b42 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2308      	movs	r3, #8
 8002b1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	3361      	adds	r3, #97	; 0x61
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fb01 	bl	8007142 <USB_HC_Halt>
 8002b40:	e04c      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	015a      	lsls	r2, r3, #5
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4413      	add	r3, r2
 8002b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b58:	d11b      	bne.n	8002b92 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b6c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	212c      	movs	r1, #44	; 0x2c
 8002b74:	fb01 f303 	mul.w	r3, r1, r3
 8002b78:	4413      	add	r3, r2
 8002b7a:	3361      	adds	r3, #97	; 0x61
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 fad9 	bl	8007142 <USB_HC_Halt>
 8002b90:	e024      	b.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	015a      	lsls	r2, r3, #5
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d119      	bne.n	8002bdc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	015a      	lsls	r2, r3, #5
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3361      	adds	r3, #97	; 0x61
 8002bc8:	2206      	movs	r2, #6
 8002bca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 fab3 	bl	8007142 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf2:	d112      	bne.n	8002c1a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f004 fa9f 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c10:	461a      	mov	r2, r3
 8002c12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c16:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002c18:	e24e      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80df 	bne.w	8002df0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3348      	adds	r3, #72	; 0x48
 8002c48:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0159      	lsls	r1, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	440b      	add	r3, r1
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f303 	mul.w	r3, r0, r3
 8002c68:	440b      	add	r3, r1
 8002c6a:	3350      	adds	r3, #80	; 0x50
 8002c6c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	212c      	movs	r1, #44	; 0x2c
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	4413      	add	r3, r2
 8002c7a:	3361      	adds	r3, #97	; 0x61
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	335c      	adds	r3, #92	; 0x5c
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	015a      	lsls	r2, r3, #5
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4413      	add	r3, r2
 8002c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	212c      	movs	r1, #44	; 0x2c
 8002caa:	fb01 f303 	mul.w	r3, r1, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	333f      	adds	r3, #63	; 0x3f
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	212c      	movs	r1, #44	; 0x2c
 8002cbe:	fb01 f303 	mul.w	r3, r1, r3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	333f      	adds	r3, #63	; 0x3f
 8002cc6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d111      	bne.n	8002cf0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fa33 	bl	8007142 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	461a      	mov	r2, r3
 8002cea:	2310      	movs	r3, #16
 8002cec:	6093      	str	r3, [r2, #8]
 8002cee:	e03a      	b.n	8002d66 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	333f      	adds	r3, #63	; 0x3f
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d009      	beq.n	8002d18 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	333f      	adds	r3, #63	; 0x3f
 8002d12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d126      	bne.n	8002d66 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d36:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	b2d9      	uxtb	r1, r3
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	202c      	movs	r0, #44	; 0x2c
 8002d54:	fb00 f303 	mul.w	r3, r0, r3
 8002d58:	4413      	add	r3, r2
 8002d5a:	3360      	adds	r3, #96	; 0x60
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f006 fc8d 	bl	8009680 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d12b      	bne.n	8002dc6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3348      	adds	r3, #72	; 0x48
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	202c      	movs	r0, #44	; 0x2c
 8002d84:	fb00 f202 	mul.w	r2, r0, r2
 8002d88:	440a      	add	r2, r1
 8002d8a:	3240      	adds	r2, #64	; 0x40
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 818e 	beq.w	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3354      	adds	r3, #84	; 0x54
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	f083 0301 	eor.w	r3, r3, #1
 8002db0:	b2d8      	uxtb	r0, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	212c      	movs	r1, #44	; 0x2c
 8002db8:	fb01 f303 	mul.w	r3, r1, r3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3354      	adds	r3, #84	; 0x54
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	701a      	strb	r2, [r3, #0]
}
 8002dc4:	e178      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	212c      	movs	r1, #44	; 0x2c
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	3354      	adds	r3, #84	; 0x54
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f083 0301 	eor.w	r3, r3, #1
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3354      	adds	r3, #84	; 0x54
 8002dea:	4602      	mov	r2, r0
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	e163      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	f040 80f6 	bne.w	8002ff4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	212c      	movs	r1, #44	; 0x2c
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	3361      	adds	r3, #97	; 0x61
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d109      	bne.n	8002e30 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	212c      	movs	r1, #44	; 0x2c
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	4413      	add	r3, r2
 8002e28:	3360      	adds	r3, #96	; 0x60
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	e0c9      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3361      	adds	r3, #97	; 0x61
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b05      	cmp	r3, #5
 8002e42:	d109      	bne.n	8002e58 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	3360      	adds	r3, #96	; 0x60
 8002e52:	2205      	movs	r2, #5
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	e0b5      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3361      	adds	r3, #97	; 0x61
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b06      	cmp	r3, #6
 8002e6a:	d009      	beq.n	8002e80 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3361      	adds	r3, #97	; 0x61
 8002e7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d150      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	212c      	movs	r1, #44	; 0x2c
 8002e86:	fb01 f303 	mul.w	r3, r1, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	335c      	adds	r3, #92	; 0x5c
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	202c      	movs	r0, #44	; 0x2c
 8002e98:	fb00 f303 	mul.w	r3, r0, r3
 8002e9c:	440b      	add	r3, r1
 8002e9e:	335c      	adds	r3, #92	; 0x5c
 8002ea0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	335c      	adds	r3, #92	; 0x5c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d912      	bls.n	8002edc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	212c      	movs	r1, #44	; 0x2c
 8002ebc:	fb01 f303 	mul.w	r3, r1, r3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	335c      	adds	r3, #92	; 0x5c
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	212c      	movs	r1, #44	; 0x2c
 8002ece:	fb01 f303 	mul.w	r3, r1, r3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3360      	adds	r3, #96	; 0x60
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eda:	e073      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3360      	adds	r3, #96	; 0x60
 8002eea:	2202      	movs	r2, #2
 8002eec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	015a      	lsls	r2, r3, #5
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f04:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f0c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	015a      	lsls	r2, r3, #5
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f20:	e050      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3361      	adds	r3, #97	; 0x61
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d122      	bne.n	8002f7c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	2202      	movs	r2, #2
 8002f46:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f5e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f66:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e023      	b.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	212c      	movs	r1, #44	; 0x2c
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	3361      	adds	r3, #97	; 0x61
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b07      	cmp	r3, #7
 8002f8e:	d119      	bne.n	8002fc4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	335c      	adds	r3, #92	; 0x5c
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	202c      	movs	r0, #44	; 0x2c
 8002fa8:	fb00 f303 	mul.w	r3, r0, r3
 8002fac:	440b      	add	r3, r1
 8002fae:	335c      	adds	r3, #92	; 0x5c
 8002fb0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	212c      	movs	r1, #44	; 0x2c
 8002fb8:	fb01 f303 	mul.w	r3, r1, r3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	3360      	adds	r3, #96	; 0x60
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	202c      	movs	r0, #44	; 0x2c
 8002fe0:	fb00 f303 	mul.w	r3, r0, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3360      	adds	r3, #96	; 0x60
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 fb47 	bl	8009680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ff2:	e061      	b.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 0310 	and.w	r3, r3, #16
 8003006:	2b10      	cmp	r3, #16
 8003008:	d156      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	212c      	movs	r1, #44	; 0x2c
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	333f      	adds	r3, #63	; 0x3f
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b03      	cmp	r3, #3
 800301c:	d111      	bne.n	8003042 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	212c      	movs	r1, #44	; 0x2c
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	; 0x5c
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f004 f881 	bl	8007142 <USB_HC_Halt>
 8003040:	e031      	b.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333f      	adds	r3, #63	; 0x3f
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	333f      	adds	r3, #63	; 0x3f
 8003064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003066:	2b02      	cmp	r3, #2
 8003068:	d11d      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	212c      	movs	r1, #44	; 0x2c
 8003070:	fb01 f303 	mul.w	r3, r1, r3
 8003074:	4413      	add	r3, r2
 8003076:	335c      	adds	r3, #92	; 0x5c
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d110      	bne.n	80030a6 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	212c      	movs	r1, #44	; 0x2c
 800308a:	fb01 f303 	mul.w	r3, r1, r3
 800308e:	4413      	add	r3, r2
 8003090:	3361      	adds	r3, #97	; 0x61
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f004 f84e 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	2310      	movs	r3, #16
 80030b6:	6093      	str	r3, [r2, #8]
}
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80030d6:	78fb      	ldrb	r3, [r7, #3]
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d11a      	bne.n	8003126 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2304      	movs	r3, #4
 8003100:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	212c      	movs	r1, #44	; 0x2c
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	4413      	add	r3, r2
 800310e:	3361      	adds	r3, #97	; 0x61
 8003110:	2206      	movs	r2, #6
 8003112:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	f004 f80f 	bl	8007142 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003124:	e331      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	4413      	add	r3, r2
 800312e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d12e      	bne.n	800319a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2320      	movs	r3, #32
 800314c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333d      	adds	r3, #61	; 0x3d
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	f040 8313 	bne.w	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	212c      	movs	r1, #44	; 0x2c
 800316a:	fb01 f303 	mul.w	r3, r1, r3
 800316e:	4413      	add	r3, r2
 8003170:	333d      	adds	r3, #61	; 0x3d
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	212c      	movs	r1, #44	; 0x2c
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	3360      	adds	r3, #96	; 0x60
 8003184:	2202      	movs	r2, #2
 8003186:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f003 ffd5 	bl	8007142 <USB_HC_Halt>
}
 8003198:	e2f7      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	015a      	lsls	r2, r3, #5
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b0:	d112      	bne.n	80031d8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031be:	461a      	mov	r2, r3
 80031c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031c4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f003 ffb6 	bl	8007142 <USB_HC_Halt>
}
 80031d6:	e2d8      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d140      	bne.n	8003270 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	335c      	adds	r3, #92	; 0x5c
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4413      	add	r3, r2
 8003208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d111      	bne.n	800323a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	333d      	adds	r3, #61	; 0x3d
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2340      	movs	r3, #64	; 0x40
 8003238:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003246:	461a      	mov	r2, r3
 8003248:	2301      	movs	r3, #1
 800324a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	4611      	mov	r1, r2
 8003268:	4618      	mov	r0, r3
 800326a:	f003 ff6a 	bl	8007142 <USB_HC_Halt>
}
 800326e:	e28c      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d12c      	bne.n	80032e0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3361      	adds	r3, #97	; 0x61
 8003294:	2204      	movs	r2, #4
 8003296:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	333d      	adds	r3, #61	; 0x3d
 80032a6:	2201      	movs	r2, #1
 80032a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	212c      	movs	r1, #44	; 0x2c
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	335c      	adds	r3, #92	; 0x5c
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 ff3b 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2340      	movs	r3, #64	; 0x40
 80032dc:	6093      	str	r3, [r2, #8]
}
 80032de:	e254      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d11a      	bne.n	800332c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003302:	461a      	mov	r2, r3
 8003304:	2308      	movs	r3, #8
 8003306:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	212c      	movs	r1, #44	; 0x2c
 800330e:	fb01 f303 	mul.w	r3, r1, r3
 8003312:	4413      	add	r3, r2
 8003314:	3361      	adds	r3, #97	; 0x61
 8003316:	2205      	movs	r2, #5
 8003318:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f003 ff0c 	bl	8007142 <USB_HC_Halt>
}
 800332a:	e22e      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b10      	cmp	r3, #16
 8003340:	d140      	bne.n	80033c4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	335c      	adds	r3, #92	; 0x5c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3361      	adds	r3, #97	; 0x61
 8003362:	2203      	movs	r2, #3
 8003364:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d112      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	212c      	movs	r1, #44	; 0x2c
 8003380:	fb01 f303 	mul.w	r3, r1, r3
 8003384:	4413      	add	r3, r2
 8003386:	333c      	adds	r3, #60	; 0x3c
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d108      	bne.n	80033a0 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	212c      	movs	r1, #44	; 0x2c
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	4413      	add	r3, r2
 800339a:	333d      	adds	r3, #61	; 0x3d
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fec9 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2310      	movs	r3, #16
 80033c0:	6093      	str	r3, [r2, #8]
}
 80033c2:	e1e2      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b80      	cmp	r3, #128	; 0x80
 80033d8:	d164      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d111      	bne.n	8003406 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	3361      	adds	r3, #97	; 0x61
 80033f0:	2206      	movs	r2, #6
 80033f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fe9f 	bl	8007142 <USB_HC_Halt>
 8003404:	e044      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	212c      	movs	r1, #44	; 0x2c
 800340c:	fb01 f303 	mul.w	r3, r1, r3
 8003410:	4413      	add	r3, r2
 8003412:	335c      	adds	r3, #92	; 0x5c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	202c      	movs	r0, #44	; 0x2c
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	440b      	add	r3, r1
 8003424:	335c      	adds	r3, #92	; 0x5c
 8003426:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	212c      	movs	r1, #44	; 0x2c
 800342e:	fb01 f303 	mul.w	r3, r1, r3
 8003432:	4413      	add	r3, r2
 8003434:	335c      	adds	r3, #92	; 0x5c
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d920      	bls.n	800347e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	212c      	movs	r1, #44	; 0x2c
 8003442:	fb01 f303 	mul.w	r3, r1, r3
 8003446:	4413      	add	r3, r2
 8003448:	335c      	adds	r3, #92	; 0x5c
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3360      	adds	r3, #96	; 0x60
 800345c:	2204      	movs	r2, #4
 800345e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	b2d9      	uxtb	r1, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	202c      	movs	r0, #44	; 0x2c
 800346a:	fb00 f303 	mul.w	r3, r0, r3
 800346e:	4413      	add	r3, r2
 8003470:	3360      	adds	r3, #96	; 0x60
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	461a      	mov	r2, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f006 f902 	bl	8009680 <HAL_HCD_HC_NotifyURBChange_Callback>
 800347c:	e008      	b.n	8003490 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3360      	adds	r3, #96	; 0x60
 800348c:	2202      	movs	r2, #2
 800348e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	461a      	mov	r2, r3
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	6093      	str	r3, [r2, #8]
}
 80034a2:	e172      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ba:	d11b      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	212c      	movs	r1, #44	; 0x2c
 80034c2:	fb01 f303 	mul.w	r3, r1, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	3361      	adds	r3, #97	; 0x61
 80034ca:	2208      	movs	r2, #8
 80034cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fe32 	bl	8007142 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ea:	461a      	mov	r2, r3
 80034ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034f0:	6093      	str	r3, [r2, #8]
}
 80034f2:	e14a      	b.n	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b02      	cmp	r3, #2
 8003508:	f040 813f 	bne.w	800378a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	212c      	movs	r1, #44	; 0x2c
 8003512:	fb01 f303 	mul.w	r3, r1, r3
 8003516:	4413      	add	r3, r2
 8003518:	3361      	adds	r3, #97	; 0x61
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d17d      	bne.n	800361c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	212c      	movs	r1, #44	; 0x2c
 8003526:	fb01 f303 	mul.w	r3, r1, r3
 800352a:	4413      	add	r3, r2
 800352c:	3360      	adds	r3, #96	; 0x60
 800352e:	2201      	movs	r2, #1
 8003530:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	212c      	movs	r1, #44	; 0x2c
 8003538:	fb01 f303 	mul.w	r3, r1, r3
 800353c:	4413      	add	r3, r2
 800353e:	333f      	adds	r3, #63	; 0x3f
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d00a      	beq.n	800355c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333f      	adds	r3, #63	; 0x3f
 8003554:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003556:	2b03      	cmp	r3, #3
 8003558:	f040 8100 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d113      	bne.n	800358c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	212c      	movs	r1, #44	; 0x2c
 800356a:	fb01 f303 	mul.w	r3, r1, r3
 800356e:	4413      	add	r3, r2
 8003570:	3355      	adds	r3, #85	; 0x55
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2d8      	uxtb	r0, r3
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	212c      	movs	r1, #44	; 0x2c
 8003580:	fb01 f303 	mul.w	r3, r1, r3
 8003584:	4413      	add	r3, r2
 8003586:	3355      	adds	r3, #85	; 0x55
 8003588:	4602      	mov	r2, r0
 800358a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2b01      	cmp	r3, #1
 8003592:	f040 80e3 	bne.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	334c      	adds	r3, #76	; 0x4c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 80d8 	beq.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	334c      	adds	r3, #76	; 0x4c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	202c      	movs	r0, #44	; 0x2c
 80035c2:	fb00 f202 	mul.w	r2, r0, r2
 80035c6:	440a      	add	r2, r1
 80035c8:	3240      	adds	r2, #64	; 0x40
 80035ca:	8812      	ldrh	r2, [r2, #0]
 80035cc:	4413      	add	r3, r2
 80035ce:	3b01      	subs	r3, #1
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	202c      	movs	r0, #44	; 0x2c
 80035d6:	fb00 f202 	mul.w	r2, r0, r2
 80035da:	440a      	add	r2, r1
 80035dc:	3240      	adds	r2, #64	; 0x40
 80035de:	8812      	ldrh	r2, [r2, #0]
 80035e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80b5 	beq.w	800375c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	212c      	movs	r1, #44	; 0x2c
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	4413      	add	r3, r2
 80035fe:	3355      	adds	r3, #85	; 0x55
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	f083 0301 	eor.w	r3, r3, #1
 8003606:	b2d8      	uxtb	r0, r3
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3355      	adds	r3, #85	; 0x55
 8003616:	4602      	mov	r2, r0
 8003618:	701a      	strb	r2, [r3, #0]
 800361a:	e09f      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	212c      	movs	r1, #44	; 0x2c
 8003622:	fb01 f303 	mul.w	r3, r1, r3
 8003626:	4413      	add	r3, r2
 8003628:	3361      	adds	r3, #97	; 0x61
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d109      	bne.n	8003644 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3360      	adds	r3, #96	; 0x60
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
 8003642:	e08b      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	212c      	movs	r1, #44	; 0x2c
 800364a:	fb01 f303 	mul.w	r3, r1, r3
 800364e:	4413      	add	r3, r2
 8003650:	3361      	adds	r3, #97	; 0x61
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d109      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	3360      	adds	r3, #96	; 0x60
 8003666:	2202      	movs	r2, #2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	e077      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3361      	adds	r3, #97	; 0x61
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d109      	bne.n	8003694 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	3360      	adds	r3, #96	; 0x60
 800368e:	2205      	movs	r2, #5
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	e063      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	212c      	movs	r1, #44	; 0x2c
 800369a:	fb01 f303 	mul.w	r3, r1, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3361      	adds	r3, #97	; 0x61
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b06      	cmp	r3, #6
 80036a6:	d009      	beq.n	80036bc <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d14f      	bne.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	202c      	movs	r0, #44	; 0x2c
 80036d4:	fb00 f303 	mul.w	r3, r0, r3
 80036d8:	440b      	add	r3, r1
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	335c      	adds	r3, #92	; 0x5c
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d912      	bls.n	8003718 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	212c      	movs	r1, #44	; 0x2c
 80036f8:	fb01 f303 	mul.w	r3, r1, r3
 80036fc:	4413      	add	r3, r2
 80036fe:	335c      	adds	r3, #92	; 0x5c
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	212c      	movs	r1, #44	; 0x2c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3360      	adds	r3, #96	; 0x60
 8003712:	2204      	movs	r2, #4
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e021      	b.n	800375c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	212c      	movs	r1, #44	; 0x2c
 800371e:	fb01 f303 	mul.w	r3, r1, r3
 8003722:	4413      	add	r3, r2
 8003724:	3360      	adds	r3, #96	; 0x60
 8003726:	2202      	movs	r2, #2
 8003728:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003740:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003748:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	4413      	add	r3, r2
 8003752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003756:	461a      	mov	r2, r3
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	4413      	add	r3, r2
 8003764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003768:	461a      	mov	r2, r3
 800376a:	2302      	movs	r3, #2
 800376c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	b2d9      	uxtb	r1, r3
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	202c      	movs	r0, #44	; 0x2c
 8003778:	fb00 f303 	mul.w	r3, r0, r3
 800377c:	4413      	add	r3, r2
 800377e:	3360      	adds	r3, #96	; 0x60
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f005 ff7b 	bl	8009680 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b08a      	sub	sp, #40	; 0x28
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	0c5b      	lsrs	r3, r3, #17
 80037b8:	f003 030f 	and.w	r3, r3, #15
 80037bc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d004      	beq.n	80037d8 <HCD_RXQLVL_IRQHandler+0x46>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b05      	cmp	r3, #5
 80037d2:	f000 80a9 	beq.w	8003928 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80037d6:	e0aa      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 80a6 	beq.w	800392c <HCD_RXQLVL_IRQHandler+0x19a>
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	212c      	movs	r1, #44	; 0x2c
 80037e6:	fb01 f303 	mul.w	r3, r1, r3
 80037ea:	4413      	add	r3, r2
 80037ec:	3344      	adds	r3, #68	; 0x44
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 809b 	beq.w	800392c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3350      	adds	r3, #80	; 0x50
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	441a      	add	r2, r3
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	334c      	adds	r3, #76	; 0x4c
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d87a      	bhi.n	8003914 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	212c      	movs	r1, #44	; 0x2c
 8003828:	fb01 f303 	mul.w	r3, r1, r3
 800382c:	4413      	add	r3, r2
 800382e:	3344      	adds	r3, #68	; 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	b292      	uxth	r2, r2
 8003836:	4619      	mov	r1, r3
 8003838:	f002 ffda 	bl	80067f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3344      	adds	r3, #68	; 0x44
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	441a      	add	r2, r3
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	202c      	movs	r0, #44	; 0x2c
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	440b      	add	r3, r1
 800385c:	3344      	adds	r3, #68	; 0x44
 800385e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3350      	adds	r3, #80	; 0x50
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	441a      	add	r2, r3
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	440b      	add	r3, r1
 8003880:	3350      	adds	r3, #80	; 0x50
 8003882:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	4413      	add	r3, r2
 800388c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	0cdb      	lsrs	r3, r3, #19
 8003894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003898:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	212c      	movs	r1, #44	; 0x2c
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	4413      	add	r3, r2
 80038a6:	3340      	adds	r3, #64	; 0x40
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d13c      	bne.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d039      	beq.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ce:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80038d6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	212c      	movs	r1, #44	; 0x2c
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	4413      	add	r3, r2
 80038f6:	3354      	adds	r3, #84	; 0x54
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	f083 0301 	eor.w	r3, r3, #1
 80038fe:	b2d8      	uxtb	r0, r3
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	212c      	movs	r1, #44	; 0x2c
 8003906:	fb01 f303 	mul.w	r3, r1, r3
 800390a:	4413      	add	r3, r2
 800390c:	3354      	adds	r3, #84	; 0x54
 800390e:	4602      	mov	r2, r0
 8003910:	701a      	strb	r2, [r3, #0]
      break;
 8003912:	e00b      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3360      	adds	r3, #96	; 0x60
 8003922:	2204      	movs	r2, #4
 8003924:	701a      	strb	r2, [r3, #0]
      break;
 8003926:	e001      	b.n	800392c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 800392c:	bf00      	nop
  }
}
 800392e:	bf00      	nop
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003962:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d10b      	bne.n	8003986 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b01      	cmp	r3, #1
 8003976:	d102      	bne.n	800397e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f005 fe65 	bl	8009648 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f003 0308 	and.w	r3, r3, #8
 800398c:	2b08      	cmp	r3, #8
 800398e:	d132      	bne.n	80039f6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f043 0308 	orr.w	r3, r3, #8
 8003996:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d126      	bne.n	80039f0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d113      	bne.n	80039d2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80039b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b4:	d106      	bne.n	80039c4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2102      	movs	r1, #2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 f885 	bl	8006acc <USB_InitFSLSPClkSel>
 80039c2:	e011      	b.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	4618      	mov	r0, r3
 80039cc:	f003 f87e 	bl	8006acc <USB_InitFSLSPClkSel>
 80039d0:	e00a      	b.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d106      	bne.n	80039e8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039e0:	461a      	mov	r2, r3
 80039e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80039e6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f005 fe57 	bl	800969c <HAL_HCD_PortEnabled_Callback>
 80039ee:	e002      	b.n	80039f6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f005 fe61 	bl	80096b8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f003 0320 	and.w	r3, r3, #32
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d103      	bne.n	8003a08 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	6013      	str	r3, [r2, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e12b      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d106      	bne.n	8003a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7fd f9da 	bl	8000dfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2224      	movs	r2, #36	; 0x24
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0201 	bic.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a80:	f001 f964 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a81      	ldr	r2, [pc, #516]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d807      	bhi.n	8003aa0 <HAL_I2C_Init+0x84>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4a80      	ldr	r2, [pc, #512]	; (8003c94 <HAL_I2C_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	bf94      	ite	ls
 8003a98:	2301      	movls	r3, #1
 8003a9a:	2300      	movhi	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e006      	b.n	8003aae <HAL_I2C_Init+0x92>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4a7d      	ldr	r2, [pc, #500]	; (8003c98 <HAL_I2C_Init+0x27c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e0e7      	b.n	8003c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a78      	ldr	r2, [pc, #480]	; (8003c9c <HAL_I2C_Init+0x280>)
 8003aba:	fba2 2303 	umull	r2, r3, r2, r3
 8003abe:	0c9b      	lsrs	r3, r3, #18
 8003ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a6a      	ldr	r2, [pc, #424]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d802      	bhi.n	8003af0 <HAL_I2C_Init+0xd4>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	3301      	adds	r3, #1
 8003aee:	e009      	b.n	8003b04 <HAL_I2C_Init+0xe8>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a69      	ldr	r2, [pc, #420]	; (8003ca0 <HAL_I2C_Init+0x284>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	3301      	adds	r3, #1
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6812      	ldr	r2, [r2, #0]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	495c      	ldr	r1, [pc, #368]	; (8003c90 <HAL_I2C_Init+0x274>)
 8003b20:	428b      	cmp	r3, r1
 8003b22:	d819      	bhi.n	8003b58 <HAL_I2C_Init+0x13c>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	1e59      	subs	r1, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b32:	1c59      	adds	r1, r3, #1
 8003b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b38:	400b      	ands	r3, r1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_I2C_Init+0x138>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1e59      	subs	r1, r3, #1
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b52:	e051      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b54:	2304      	movs	r3, #4
 8003b56:	e04f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d111      	bne.n	8003b84 <HAL_I2C_Init+0x168>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	440b      	add	r3, r1
 8003b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b72:	3301      	adds	r3, #1
 8003b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	e012      	b.n	8003baa <HAL_I2C_Init+0x18e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1e58      	subs	r0, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6859      	ldr	r1, [r3, #4]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	0099      	lsls	r1, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <HAL_I2C_Init+0x196>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e022      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10e      	bne.n	8003bd8 <HAL_I2C_Init+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1e58      	subs	r0, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	440b      	add	r3, r1
 8003bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bd6:	e00f      	b.n	8003bf8 <HAL_I2C_Init+0x1dc>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1e58      	subs	r0, r3, #1
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	0099      	lsls	r1, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	6809      	ldr	r1, [r1, #0]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69da      	ldr	r2, [r3, #28]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6911      	ldr	r1, [r2, #16]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	68d2      	ldr	r2, [r2, #12]
 8003c32:	4311      	orrs	r1, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6812      	ldr	r2, [r2, #0]
 8003c38:	430b      	orrs	r3, r1
 8003c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	695a      	ldr	r2, [r3, #20]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	000186a0 	.word	0x000186a0
 8003c94:	001e847f 	.word	0x001e847f
 8003c98:	003d08ff 	.word	0x003d08ff
 8003c9c:	431bde83 	.word	0x431bde83
 8003ca0:	10624dd3 	.word	0x10624dd3

08003ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d129      	bne.n	8003d0e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2224      	movs	r2, #36	; 0x24
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0210 	bic.w	r2, r2, #16
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f042 0201 	orr.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e000      	b.n	8003d10 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d0e:	2302      	movs	r3, #2
  }
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d12a      	bne.n	8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2224      	movs	r2, #36	; 0x24
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0201 	bic.w	r2, r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d56:	89fb      	ldrh	r3, [r7, #14]
 8003d58:	f023 030f 	bic.w	r3, r3, #15
 8003d5c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	89fa      	ldrh	r2, [r7, #14]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	e000      	b.n	8003d8e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d8c:	2302      	movs	r3, #2
  }
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3714      	adds	r7, #20
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e0bf      	b.n	8003f2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd f884 	bl	8000ed0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003dde:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003df4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6899      	ldr	r1, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e10:	400b      	ands	r3, r1
 8003e12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	041b      	lsls	r3, r3, #16
 8003e1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68d9      	ldr	r1, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b3e      	ldr	r3, [pc, #248]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e3e:	400b      	ands	r3, r1
 8003e40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68d9      	ldr	r1, [r3, #12]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1a      	ldr	r2, [r3, #32]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6919      	ldr	r1, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b33      	ldr	r3, [pc, #204]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	041b      	lsls	r3, r3, #16
 8003e76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	6919      	ldr	r1, [r3, #16]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6959      	ldr	r1, [r3, #20]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_LTDC_Init+0x19c>)
 8003e9a:	400b      	ands	r3, r1
 8003e9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6959      	ldr	r1, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003ecc:	041b      	lsls	r3, r3, #16
 8003ece:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0206 	orr.w	r2, r2, #6
 8003f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	f000f800 	.word	0xf000f800

08003f3c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f52:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d023      	beq.n	8003fa6 <HAL_LTDC_IRQHandler+0x6a>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01e      	beq.n	8003fa6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2204      	movs	r2, #4
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2204      	movs	r2, #4
 8003f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 f86f 	bl	8004084 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d023      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0xbc>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d01e      	beq.n	8003ff8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0202 	bic.w	r2, r2, #2
 8003fc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fd8:	f043 0202 	orr.w	r2, r3, #2
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2204      	movs	r2, #4
 8003fe6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f846 	bl	8004084 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01b      	beq.n	800403a <HAL_LTDC_IRQHandler+0xfe>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d016      	beq.n	800403a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0201 	bic.w	r2, r2, #1
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f82f 	bl	8004098 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_LTDC_IRQHandler+0x140>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d016      	beq.n	800407c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0208 	bic.w	r2, r2, #8
 800405c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2208      	movs	r2, #8
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f818 	bl	80040ac <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80040c0:	b5b0      	push	{r4, r5, r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_LTDC_ConfigLayer+0x1a>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e02c      	b.n	8004134 <HAL_LTDC_ConfigLayer+0x74>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2202      	movs	r2, #2
 80040e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2134      	movs	r1, #52	; 0x34
 80040f0:	fb01 f303 	mul.w	r3, r1, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4614      	mov	r4, r2
 80040fe:	461d      	mov	r5, r3
 8004100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800410c:	682b      	ldr	r3, [r5, #0]
 800410e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f811 	bl	800413c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2201      	movs	r2, #1
 8004120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bdb0      	pop	{r4, r5, r7, pc}

0800413c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	4413      	add	r3, r2
 800415a:	041b      	lsls	r3, r3, #16
 800415c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4413      	add	r3, r2
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	4611      	mov	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	01d2      	lsls	r2, r2, #7
 8004178:	440a      	add	r2, r1
 800417a:	3284      	adds	r2, #132	; 0x84
 800417c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004180:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0c1b      	lsrs	r3, r3, #16
 800418e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004192:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004194:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	01db      	lsls	r3, r3, #7
 80041a0:	440b      	add	r3, r1
 80041a2:	3384      	adds	r3, #132	; 0x84
 80041a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80041aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	68da      	ldr	r2, [r3, #12]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041ba:	4413      	add	r3, r2
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	01db      	lsls	r3, r3, #7
 80041ca:	4413      	add	r3, r2
 80041cc:	3384      	adds	r3, #132	; 0x84
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	4611      	mov	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	01d2      	lsls	r2, r2, #7
 80041da:	440a      	add	r2, r1
 80041dc:	3284      	adds	r2, #132	; 0x84
 80041de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80041e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041f2:	4413      	add	r3, r2
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	01db      	lsls	r3, r3, #7
 8004200:	440b      	add	r3, r1
 8004202:	3384      	adds	r3, #132	; 0x84
 8004204:	4619      	mov	r1, r3
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	461a      	mov	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	01db      	lsls	r3, r3, #7
 8004216:	4413      	add	r3, r2
 8004218:	3384      	adds	r3, #132	; 0x84
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	4611      	mov	r1, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	01d2      	lsls	r2, r2, #7
 8004226:	440a      	add	r2, r1
 8004228:	3284      	adds	r2, #132	; 0x84
 800422a:	f023 0307 	bic.w	r3, r3, #7
 800422e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	01db      	lsls	r3, r3, #7
 800423a:	4413      	add	r3, r2
 800423c:	3384      	adds	r3, #132	; 0x84
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004256:	041b      	lsls	r3, r3, #16
 8004258:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	061b      	lsls	r3, r3, #24
 8004260:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	4413      	add	r3, r2
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4413      	add	r3, r2
 800427e:	3384      	adds	r3, #132	; 0x84
 8004280:	461a      	mov	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800428c:	461a      	mov	r2, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	431a      	orrs	r2, r3
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4619      	mov	r1, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	01db      	lsls	r3, r3, #7
 80042a0:	440b      	add	r3, r1
 80042a2:	3384      	adds	r3, #132	; 0x84
 80042a4:	4619      	mov	r1, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	461a      	mov	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	01db      	lsls	r3, r3, #7
 80042b6:	4413      	add	r3, r2
 80042b8:	3384      	adds	r3, #132	; 0x84
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4611      	mov	r1, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	01d2      	lsls	r2, r2, #7
 80042c6:	440a      	add	r2, r1
 80042c8:	3284      	adds	r2, #132	; 0x84
 80042ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	01db      	lsls	r3, r3, #7
 80042da:	4413      	add	r3, r2
 80042dc:	3384      	adds	r3, #132	; 0x84
 80042de:	461a      	mov	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	01db      	lsls	r3, r3, #7
 80042f0:	4413      	add	r3, r2
 80042f2:	3384      	adds	r3, #132	; 0x84
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	6812      	ldr	r2, [r2, #0]
 80042fa:	4611      	mov	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	01d2      	lsls	r2, r2, #7
 8004300:	440a      	add	r2, r1
 8004302:	3284      	adds	r2, #132	; 0x84
 8004304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004308:	f023 0307 	bic.w	r3, r3, #7
 800430c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	69da      	ldr	r2, [r3, #28]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	68f9      	ldr	r1, [r7, #12]
 8004318:	6809      	ldr	r1, [r1, #0]
 800431a:	4608      	mov	r0, r1
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	01c9      	lsls	r1, r1, #7
 8004320:	4401      	add	r1, r0
 8004322:	3184      	adds	r1, #132	; 0x84
 8004324:	4313      	orrs	r3, r2
 8004326:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	4413      	add	r3, r2
 8004334:	3384      	adds	r3, #132	; 0x84
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	01db      	lsls	r3, r3, #7
 8004342:	4413      	add	r3, r2
 8004344:	3384      	adds	r3, #132	; 0x84
 8004346:	461a      	mov	r2, r3
 8004348:	2300      	movs	r3, #0
 800434a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	01db      	lsls	r3, r3, #7
 8004356:	4413      	add	r3, r2
 8004358:	3384      	adds	r3, #132	; 0x84
 800435a:	461a      	mov	r2, r3
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800436a:	2304      	movs	r3, #4
 800436c:	61fb      	str	r3, [r7, #28]
 800436e:	e01b      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d102      	bne.n	800437e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004378:	2303      	movs	r3, #3
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e014      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b04      	cmp	r3, #4
 8004384:	d00b      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800438a:	2b02      	cmp	r3, #2
 800438c:	d007      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004392:	2b03      	cmp	r3, #3
 8004394:	d003      	beq.n	800439e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800439a:	2b07      	cmp	r3, #7
 800439c:	d102      	bne.n	80043a4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800439e:	2302      	movs	r3, #2
 80043a0:	61fb      	str	r3, [r7, #28]
 80043a2:	e001      	b.n	80043a8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	01db      	lsls	r3, r3, #7
 80043b2:	4413      	add	r3, r2
 80043b4:	3384      	adds	r3, #132	; 0x84
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	4611      	mov	r1, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	01d2      	lsls	r2, r2, #7
 80043c2:	440a      	add	r2, r1
 80043c4:	3284      	adds	r2, #132	; 0x84
 80043c6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80043ca:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	fb02 f303 	mul.w	r3, r2, r3
 80043d6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	1acb      	subs	r3, r1, r3
 80043e2:	69f9      	ldr	r1, [r7, #28]
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	6809      	ldr	r1, [r1, #0]
 80043ee:	4608      	mov	r0, r1
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	01c9      	lsls	r1, r1, #7
 80043f4:	4401      	add	r1, r0
 80043f6:	3184      	adds	r1, #132	; 0x84
 80043f8:	4313      	orrs	r3, r2
 80043fa:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	01db      	lsls	r3, r3, #7
 8004406:	4413      	add	r3, r2
 8004408:	3384      	adds	r3, #132	; 0x84
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	4611      	mov	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	01d2      	lsls	r2, r2, #7
 8004416:	440a      	add	r2, r1
 8004418:	3284      	adds	r2, #132	; 0x84
 800441a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800441e:	f023 0307 	bic.w	r3, r3, #7
 8004422:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	01db      	lsls	r3, r3, #7
 800442e:	4413      	add	r3, r2
 8004430:	3384      	adds	r3, #132	; 0x84
 8004432:	461a      	mov	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	01db      	lsls	r3, r3, #7
 8004444:	4413      	add	r3, r2
 8004446:	3384      	adds	r3, #132	; 0x84
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	4611      	mov	r1, r2
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	01d2      	lsls	r2, r2, #7
 8004454:	440a      	add	r2, r1
 8004456:	3284      	adds	r2, #132	; 0x84
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6013      	str	r3, [r2, #0]
}
 800445e:	bf00      	nop
 8004460:	3724      	adds	r7, #36	; 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e267      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d075      	beq.n	8004576 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800448a:	4b88      	ldr	r3, [pc, #544]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 030c 	and.w	r3, r3, #12
 8004492:	2b04      	cmp	r3, #4
 8004494:	d00c      	beq.n	80044b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004496:	4b85      	ldr	r3, [pc, #532]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d112      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044a2:	4b82      	ldr	r3, [pc, #520]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b0:	4b7e      	ldr	r3, [pc, #504]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d05b      	beq.n	8004574 <HAL_RCC_OscConfig+0x108>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d157      	bne.n	8004574 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e242      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCC_OscConfig+0x74>
 80044d2:	4b76      	ldr	r3, [pc, #472]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a75      	ldr	r2, [pc, #468]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e01d      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b70      	ldr	r3, [pc, #448]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a6f      	ldr	r2, [pc, #444]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b6d      	ldr	r3, [pc, #436]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a6c      	ldr	r2, [pc, #432]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e00b      	b.n	800451c <HAL_RCC_OscConfig+0xb0>
 8004504:	4b69      	ldr	r3, [pc, #420]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a68      	ldr	r2, [pc, #416]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b66      	ldr	r3, [pc, #408]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a65      	ldr	r2, [pc, #404]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004524:	f7fd f990 	bl	8001848 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fd f98c 	bl	8001848 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e207      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0xc0>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454c:	f7fd f97c 	bl	8001848 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004554:	f7fd f978 	bl	8001848 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1f3      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0xe8>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d063      	beq.n	800464a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004582:	4b4a      	ldr	r3, [pc, #296]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d11c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800459a:	4b44      	ldr	r3, [pc, #272]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d116      	bne.n	80045d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a6:	4b41      	ldr	r3, [pc, #260]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d001      	beq.n	80045be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1c7      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4937      	ldr	r1, [pc, #220]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045d2:	e03a      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045dc:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e2:	f7fd f931 	bl	8001848 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ea:	f7fd f92d 	bl	8001848 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e1a8      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004608:	4b28      	ldr	r3, [pc, #160]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	4925      	ldr	r1, [pc, #148]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004618:	4313      	orrs	r3, r2
 800461a:	600b      	str	r3, [r1, #0]
 800461c:	e015      	b.n	800464a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800461e:	4b24      	ldr	r3, [pc, #144]	; (80046b0 <HAL_RCC_OscConfig+0x244>)
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fd f910 	bl	8001848 <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462c:	f7fd f90c 	bl	8001848 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e187      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1f0      	bne.n	800462c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d036      	beq.n	80046c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d016      	beq.n	800468c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 8004660:	2201      	movs	r2, #1
 8004662:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004664:	f7fd f8f0 	bl	8001848 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800466c:	f7fd f8ec 	bl	8001848 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e167      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_OscConfig+0x240>)
 8004680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x200>
 800468a:	e01b      	b.n	80046c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RCC_OscConfig+0x248>)
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004692:	f7fd f8d9 	bl	8001848 <HAL_GetTick>
 8004696:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	e00e      	b.n	80046b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800469a:	f7fd f8d5 	bl	8001848 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d907      	bls.n	80046b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e150      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80046ac:	40023800 	.word	0x40023800
 80046b0:	42470000 	.word	0x42470000
 80046b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046b8:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ea      	bne.n	800469a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 8097 	beq.w	8004800 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d6:	4b81      	ldr	r3, [pc, #516]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a7c      	ldr	r2, [pc, #496]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b7a      	ldr	r3, [pc, #488]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046fe:	2301      	movs	r3, #1
 8004700:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004702:	4b77      	ldr	r3, [pc, #476]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	2b00      	cmp	r3, #0
 800470c:	d118      	bne.n	8004740 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800470e:	4b74      	ldr	r3, [pc, #464]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a73      	ldr	r2, [pc, #460]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471a:	f7fd f895 	bl	8001848 <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004722:	f7fd f891 	bl	8001848 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e10c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	4b6a      	ldr	r3, [pc, #424]	; (80048e0 <HAL_RCC_OscConfig+0x474>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0f0      	beq.n	8004722 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <HAL_RCC_OscConfig+0x2ea>
 8004748:	4b64      	ldr	r3, [pc, #400]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a63      	ldr	r2, [pc, #396]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800474e:	f043 0301 	orr.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
 8004754:	e01c      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b05      	cmp	r3, #5
 800475c:	d10c      	bne.n	8004778 <HAL_RCC_OscConfig+0x30c>
 800475e:	4b5f      	ldr	r3, [pc, #380]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004762:	4a5e      	ldr	r2, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6713      	str	r3, [r2, #112]	; 0x70
 800476a:	4b5c      	ldr	r3, [pc, #368]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	4a5b      	ldr	r2, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004770:	f043 0301 	orr.w	r3, r3, #1
 8004774:	6713      	str	r3, [r2, #112]	; 0x70
 8004776:	e00b      	b.n	8004790 <HAL_RCC_OscConfig+0x324>
 8004778:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	4a57      	ldr	r2, [pc, #348]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800477e:	f023 0301 	bic.w	r3, r3, #1
 8004782:	6713      	str	r3, [r2, #112]	; 0x70
 8004784:	4b55      	ldr	r3, [pc, #340]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004788:	4a54      	ldr	r2, [pc, #336]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800478a:	f023 0304 	bic.w	r3, r3, #4
 800478e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d015      	beq.n	80047c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fd f856 	bl	8001848 <HAL_GetTick>
 800479c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479e:	e00a      	b.n	80047b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a0:	f7fd f852 	bl	8001848 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0cb      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	f003 0302 	and.w	r3, r3, #2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ee      	beq.n	80047a0 <HAL_RCC_OscConfig+0x334>
 80047c2:	e014      	b.n	80047ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c4:	f7fd f840 	bl	8001848 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047cc:	f7fd f83c 	bl	8001848 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e0b5      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e2:	4b3e      	ldr	r3, [pc, #248]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1ee      	bne.n	80047cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ee:	7dfb      	ldrb	r3, [r7, #23]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d105      	bne.n	8004800 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047f4:	4b39      	ldr	r3, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f8:	4a38      	ldr	r2, [pc, #224]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80047fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80a1 	beq.w	800494c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800480a:	4b34      	ldr	r3, [pc, #208]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d05c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d141      	bne.n	80048a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481e:	4b31      	ldr	r3, [pc, #196]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004824:	f7fd f810 	bl	8001848 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800482c:	f7fd f80c 	bl	8001848 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e087      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f0      	bne.n	800482c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69da      	ldr	r2, [r3, #28]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	019b      	lsls	r3, r3, #6
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	061b      	lsls	r3, r3, #24
 800486e:	491b      	ldr	r1, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004870:	4313      	orrs	r3, r2
 8004872:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 8004876:	2201      	movs	r2, #1
 8004878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487a:	f7fc ffe5 	bl	8001848 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004880:	e008      	b.n	8004894 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004882:	f7fc ffe1 	bl	8001848 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e05c      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d0f0      	beq.n	8004882 <HAL_RCC_OscConfig+0x416>
 80048a0:	e054      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b10      	ldr	r3, [pc, #64]	; (80048e4 <HAL_RCC_OscConfig+0x478>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fc ffce 	bl	8001848 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fc ffca 	bl	8001848 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e045      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x470>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
 80048ce:	e03d      	b.n	800494c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e038      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
 80048e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCC_OscConfig+0x4ec>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d028      	beq.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004900:	429a      	cmp	r2, r3
 8004902:	d121      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11a      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800491e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004920:	4293      	cmp	r3, r2
 8004922:	d111      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	3b01      	subs	r3, #1
 8004932:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d107      	bne.n	8004948 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004942:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3718      	adds	r7, #24
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800

0800495c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cc      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b68      	ldr	r3, [pc, #416]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d90c      	bls.n	8004998 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b63      	ldr	r3, [pc, #396]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e0b8      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d020      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b0:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	4a58      	ldr	r2, [pc, #352]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d005      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049c8:	4b53      	ldr	r3, [pc, #332]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a52      	ldr	r2, [pc, #328]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	4b50      	ldr	r3, [pc, #320]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	494d      	ldr	r1, [pc, #308]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d044      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b47      	ldr	r3, [pc, #284]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d119      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e07f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b3f      	ldr	r3, [pc, #252]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e06f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e067      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b37      	ldr	r3, [pc, #220]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4934      	ldr	r1, [pc, #208]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a4c:	f7fc fefc 	bl	8001848 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fc fef8 	bl	8001848 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e04f      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d20c      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e032      	b.n	8004b0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d008      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4916      	ldr	r1, [pc, #88]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ace:	4b12      	ldr	r3, [pc, #72]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	490e      	ldr	r1, [pc, #56]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ae2:	f000 f821 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	490a      	ldr	r1, [pc, #40]	; (8004b1c <HAL_RCC_ClockConfig+0x1c0>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7fc fcba 	bl	800147c <HAL_InitTick>

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023c00 	.word	0x40023c00
 8004b18:	40023800 	.word	0x40023800
 8004b1c:	0800a58c 	.word	0x0800a58c
 8004b20:	20000000 	.word	0x20000000
 8004b24:	20000004 	.word	0x20000004

08004b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b2c:	b094      	sub	sp, #80	; 0x50
 8004b2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	647b      	str	r3, [r7, #68]	; 0x44
 8004b34:	2300      	movs	r3, #0
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b38:	2300      	movs	r3, #0
 8004b3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b40:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d00d      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	f200 80e1 	bhi.w	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b5a:	e0db      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b73      	ldr	r3, [pc, #460]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004b60:	e0db      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b66:	e0d8      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b68:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b70:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b72:	4b6d      	ldr	r3, [pc, #436]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b7e:	4b6a      	ldr	r3, [pc, #424]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	099b      	lsrs	r3, r3, #6
 8004b84:	2200      	movs	r2, #0
 8004b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b88:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
 8004b92:	2300      	movs	r3, #0
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
 8004b96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	f04f 0000 	mov.w	r0, #0
 8004ba2:	f04f 0100 	mov.w	r1, #0
 8004ba6:	0159      	lsls	r1, r3, #5
 8004ba8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bac:	0150      	lsls	r0, r2, #5
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4621      	mov	r1, r4
 8004bb4:	1a51      	subs	r1, r2, r1
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	4629      	mov	r1, r5
 8004bba:	eb63 0301 	sbc.w	r3, r3, r1
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bcc:	4659      	mov	r1, fp
 8004bce:	018b      	lsls	r3, r1, #6
 8004bd0:	4651      	mov	r1, sl
 8004bd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bd6:	4651      	mov	r1, sl
 8004bd8:	018a      	lsls	r2, r1, #6
 8004bda:	4651      	mov	r1, sl
 8004bdc:	ebb2 0801 	subs.w	r8, r2, r1
 8004be0:	4659      	mov	r1, fp
 8004be2:	eb63 0901 	sbc.w	r9, r3, r1
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bfa:	4690      	mov	r8, r2
 8004bfc:	4699      	mov	r9, r3
 8004bfe:	4623      	mov	r3, r4
 8004c00:	eb18 0303 	adds.w	r3, r8, r3
 8004c04:	60bb      	str	r3, [r7, #8]
 8004c06:	462b      	mov	r3, r5
 8004c08:	eb49 0303 	adc.w	r3, r9, r3
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	f04f 0200 	mov.w	r2, #0
 8004c12:	f04f 0300 	mov.w	r3, #0
 8004c16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	024b      	lsls	r3, r1, #9
 8004c1e:	4621      	mov	r1, r4
 8004c20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c24:	4621      	mov	r1, r4
 8004c26:	024a      	lsls	r2, r1, #9
 8004c28:	4610      	mov	r0, r2
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	2200      	movs	r2, #0
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c38:	f7fb fad8 	bl	80001ec <__aeabi_uldivmod>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	4613      	mov	r3, r2
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c44:	e058      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c46:	4b38      	ldr	r3, [pc, #224]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4618      	mov	r0, r3
 8004c50:	4611      	mov	r1, r2
 8004c52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c60:	4642      	mov	r2, r8
 8004c62:	464b      	mov	r3, r9
 8004c64:	f04f 0000 	mov.w	r0, #0
 8004c68:	f04f 0100 	mov.w	r1, #0
 8004c6c:	0159      	lsls	r1, r3, #5
 8004c6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c72:	0150      	lsls	r0, r2, #5
 8004c74:	4602      	mov	r2, r0
 8004c76:	460b      	mov	r3, r1
 8004c78:	4641      	mov	r1, r8
 8004c7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c7e:	4649      	mov	r1, r9
 8004c80:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c98:	ebb2 040a 	subs.w	r4, r2, sl
 8004c9c:	eb63 050b 	sbc.w	r5, r3, fp
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	00eb      	lsls	r3, r5, #3
 8004caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cae:	00e2      	lsls	r2, r4, #3
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	461d      	mov	r5, r3
 8004cb4:	4643      	mov	r3, r8
 8004cb6:	18e3      	adds	r3, r4, r3
 8004cb8:	603b      	str	r3, [r7, #0]
 8004cba:	464b      	mov	r3, r9
 8004cbc:	eb45 0303 	adc.w	r3, r5, r3
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cce:	4629      	mov	r1, r5
 8004cd0:	028b      	lsls	r3, r1, #10
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cd8:	4621      	mov	r1, r4
 8004cda:	028a      	lsls	r2, r1, #10
 8004cdc:	4610      	mov	r0, r2
 8004cde:	4619      	mov	r1, r3
 8004ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	61fa      	str	r2, [r7, #28]
 8004ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cec:	f7fb fa7e 	bl	80001ec <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	0c1b      	lsrs	r3, r3, #16
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	3301      	adds	r3, #1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d12:	e002      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x204>)
 8004d16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3750      	adds	r7, #80	; 0x50
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	00f42400 	.word	0x00f42400
 8004d30:	007a1200 	.word	0x007a1200

08004d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d38:	4b03      	ldr	r3, [pc, #12]	; (8004d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	20000000 	.word	0x20000000

08004d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d50:	f7ff fff0 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4903      	ldr	r1, [pc, #12]	; (8004d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	0800a59c 	.word	0x0800a59c

08004d74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d78:	f7ff ffdc 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	0b5b      	lsrs	r3, r3, #13
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	4903      	ldr	r1, [pc, #12]	; (8004d98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d8a:	5ccb      	ldrb	r3, [r1, r3]
 8004d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40023800 	.word	0x40023800
 8004d98:	0800a59c 	.word	0x0800a59c

08004d9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	220f      	movs	r2, #15
 8004daa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004dac:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <HAL_RCC_GetClockConfig+0x5c>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0203 	and.w	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <HAL_RCC_GetClockConfig+0x5c>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <HAL_RCC_GetClockConfig+0x5c>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RCC_GetClockConfig+0x5c>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	08db      	lsrs	r3, r3, #3
 8004dd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_RCC_GetClockConfig+0x60>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	601a      	str	r2, [r3, #0]
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800
 8004dfc:	40023c00 	.word	0x40023c00

08004e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10b      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d105      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d075      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e34:	4b91      	ldr	r3, [pc, #580]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3a:	f7fc fd05 	bl	8001848 <HAL_GetTick>
 8004e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e40:	e008      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e42:	f7fc fd01 	bl	8001848 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e189      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e54:	4b8a      	ldr	r3, [pc, #552]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1f0      	bne.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	019a      	lsls	r2, r3, #6
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	071b      	lsls	r3, r3, #28
 8004e78:	4981      	ldr	r1, [pc, #516]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01f      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004e8c:	4b7c      	ldr	r3, [pc, #496]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e92:	0f1b      	lsrs	r3, r3, #28
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	019a      	lsls	r2, r3, #6
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	071b      	lsls	r3, r3, #28
 8004eac:	4974      	ldr	r1, [pc, #464]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004eb4:	4b72      	ldr	r3, [pc, #456]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eba:	f023 021f 	bic.w	r2, r3, #31
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	496e      	ldr	r1, [pc, #440]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	019a      	lsls	r2, r3, #6
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	071b      	lsls	r3, r3, #28
 8004eec:	4964      	ldr	r1, [pc, #400]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ef4:	4b61      	ldr	r3, [pc, #388]	; (800507c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004efa:	f7fc fca5 	bl	8001848 <HAL_GetTick>
 8004efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f00:	e008      	b.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f02:	f7fc fca1 	bl	8001848 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e129      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f14:	4b5a      	ldr	r3, [pc, #360]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d079      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f38:	4b52      	ldr	r3, [pc, #328]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f3e:	f7fc fc83 	bl	8001848 <HAL_GetTick>
 8004f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f46:	f7fc fc7f 	bl	8001848 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e107      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f58:	4b49      	ldr	r3, [pc, #292]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f64:	d0ef      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0304 	and.w	r3, r3, #4
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d020      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004f72:	4b43      	ldr	r3, [pc, #268]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f78:	0f1b      	lsrs	r3, r3, #28
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	019a      	lsls	r2, r3, #6
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	071b      	lsls	r3, r3, #28
 8004f92:	493b      	ldr	r1, [pc, #236]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004f9a:	4b39      	ldr	r3, [pc, #228]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	4934      	ldr	r1, [pc, #208]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01e      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004fc0:	4b2f      	ldr	r3, [pc, #188]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fc6:	0e1b      	lsrs	r3, r3, #24
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	019a      	lsls	r2, r3, #6
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	061b      	lsls	r3, r3, #24
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	071b      	lsls	r3, r3, #28
 8004fe0:	4927      	ldr	r1, [pc, #156]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004fe8:	4b25      	ldr	r3, [pc, #148]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	4922      	ldr	r1, [pc, #136]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ffe:	4b21      	ldr	r3, [pc, #132]	; (8005084 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005004:	f7fc fc20 	bl	8001848 <HAL_GetTick>
 8005008:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800500a:	e008      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800500c:	f7fc fc1c 	bl	8001848 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d901      	bls.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0a4      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800501e:	4b18      	ldr	r3, [pc, #96]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502a:	d1ef      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808b 	beq.w	8005150 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	4a0f      	ldr	r2, [pc, #60]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005048:	6413      	str	r3, [r2, #64]	; 0x40
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005056:	4b0c      	ldr	r3, [pc, #48]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a0b      	ldr	r2, [pc, #44]	; (8005088 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800505c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005062:	f7fc fbf1 	bl	8001848 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005068:	e010      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fc fbed 	bl	8001848 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d909      	bls.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e075      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800507c:	42470068 	.word	0x42470068
 8005080:	40023800 	.word	0x40023800
 8005084:	42470070 	.word	0x42470070
 8005088:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800508c:	4b38      	ldr	r3, [pc, #224]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0e8      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800509c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d02f      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d028      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050b6:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050c2:	2201      	movs	r2, #1
 80050c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050c6:	4b2c      	ldr	r3, [pc, #176]	; (8005178 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050cc:	4a29      	ldr	r2, [pc, #164]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050d2:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d114      	bne.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050de:	f7fc fbb3 	bl	8001848 <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050e4:	e00a      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e6:	f7fc fbaf 	bl	8001848 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e035      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d0ee      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d10d      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005116:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800512a:	4912      	ldr	r1, [pc, #72]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]
 8005130:	e005      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	4a0f      	ldr	r2, [pc, #60]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005138:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800513c:	6093      	str	r3, [r2, #8]
 800513e:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800514c:	4313      	orrs	r3, r2
 800514e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005164:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3718      	adds	r7, #24
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40007000 	.word	0x40007000
 8005174:	40023800 	.word	0x40023800
 8005178:	42470e40 	.word	0x42470e40
 800517c:	424711e0 	.word	0x424711e0

08005180 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e025      	b.n	80051e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7fc f95d 	bl	8001468 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3304      	adds	r3, #4
 80051be:	4619      	mov	r1, r3
 80051c0:	4610      	mov	r0, r2
 80051c2:	f001 f8dd 	bl	8006380 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6839      	ldr	r1, [r7, #0]
 80051d2:	f001 f932 	bl	800643a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e07b      	b.n	80052f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520a:	d009      	beq.n	8005220 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	61da      	str	r2, [r3, #28]
 8005212:	e005      	b.n	8005220 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb ff78 	bl	8001130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005256:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005268:	431a      	orrs	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800529a:	431a      	orrs	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	ea42 0103 	orr.w	r1, r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	0c1b      	lsrs	r3, r3, #16
 80052be:	f003 0104 	and.w	r1, r3, #4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0210 	and.w	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b082      	sub	sp, #8
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e041      	b.n	8005390 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7fb ff4d 	bl	80011c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2202      	movs	r2, #2
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3304      	adds	r3, #4
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f000 fa95 	bl	8005868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	3708      	adds	r7, #8
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d001      	beq.n	80053b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e04e      	b.n	800544e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0201 	orr.w	r2, r2, #1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a23      	ldr	r2, [pc, #140]	; (800545c <HAL_TIM_Base_Start_IT+0xc4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d022      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053da:	d01d      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <HAL_TIM_Base_Start_IT+0xc8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d018      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a1e      	ldr	r2, [pc, #120]	; (8005464 <HAL_TIM_Base_Start_IT+0xcc>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d013      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_TIM_Base_Start_IT+0xd0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1b      	ldr	r2, [pc, #108]	; (800546c <HAL_TIM_Base_Start_IT+0xd4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <HAL_TIM_Base_Start_IT+0xd8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x80>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_TIM_Base_Start_IT+0xdc>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d111      	bne.n	800543c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 0307 	and.w	r3, r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d010      	beq.n	800544c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	e007      	b.n	800544c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40001800 	.word	0x40001800

08005478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b02      	cmp	r3, #2
 800548c:	d122      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0202 	mvn.w	r2, #2
 80054a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f9b5 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 80054c0:	e005      	b.n	80054ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f9a7 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f9b8 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d122      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f06f 0204 	mvn.w	r2, #4
 80054f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f98b 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005514:	e005      	b.n	8005522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f97d 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f98e 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b08      	cmp	r3, #8
 8005534:	d122      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f003 0308 	and.w	r3, r3, #8
 8005540:	2b08      	cmp	r3, #8
 8005542:	d11b      	bne.n	800557c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f06f 0208 	mvn.w	r2, #8
 800554c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2204      	movs	r2, #4
 8005552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	f003 0303 	and.w	r3, r3, #3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 f961 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 8005568:	e005      	b.n	8005576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f953 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f964 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	2b10      	cmp	r3, #16
 8005588:	d122      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2208      	movs	r2, #8
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f937 	bl	800582a <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f929 	bl	8005816 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f93a 	bl	800583e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d10e      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d107      	bne.n	80055fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f06f 0201 	mvn.w	r2, #1
 80055f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7fb fb76 	bl	8000ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	691b      	ldr	r3, [r3, #16]
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b80      	cmp	r3, #128	; 0x80
 8005608:	d10e      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005614:	2b80      	cmp	r3, #128	; 0x80
 8005616:	d107      	bne.n	8005628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fae0 	bl	8005be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d10e      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005640:	2b40      	cmp	r3, #64	; 0x40
 8005642:	d107      	bne.n	8005654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800564c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f8ff 	bl	8005852 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b20      	cmp	r3, #32
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0320 	and.w	r3, r3, #32
 800566c:	2b20      	cmp	r3, #32
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0220 	mvn.w	r2, #32
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 faaa 	bl	8005bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_TIM_ConfigClockSource+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e0b4      	b.n	800580e <HAL_TIM_ConfigClockSource+0x186>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d03e      	beq.n	800575c <HAL_TIM_ConfigClockSource+0xd4>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	f200 8087 	bhi.w	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	f000 8086 	beq.w	80057fa <HAL_TIM_ConfigClockSource+0x172>
 80056ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f2:	d87f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056f4:	2b70      	cmp	r3, #112	; 0x70
 80056f6:	d01a      	beq.n	800572e <HAL_TIM_ConfigClockSource+0xa6>
 80056f8:	2b70      	cmp	r3, #112	; 0x70
 80056fa:	d87b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 80056fc:	2b60      	cmp	r3, #96	; 0x60
 80056fe:	d050      	beq.n	80057a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005700:	2b60      	cmp	r3, #96	; 0x60
 8005702:	d877      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005704:	2b50      	cmp	r3, #80	; 0x50
 8005706:	d03c      	beq.n	8005782 <HAL_TIM_ConfigClockSource+0xfa>
 8005708:	2b50      	cmp	r3, #80	; 0x50
 800570a:	d873      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d058      	beq.n	80057c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005710:	2b40      	cmp	r3, #64	; 0x40
 8005712:	d86f      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005714:	2b30      	cmp	r3, #48	; 0x30
 8005716:	d064      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005718:	2b30      	cmp	r3, #48	; 0x30
 800571a:	d86b      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b20      	cmp	r3, #32
 800571e:	d060      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005720:	2b20      	cmp	r3, #32
 8005722:	d867      	bhi.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b00      	cmp	r3, #0
 8005726:	d05c      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005728:	2b10      	cmp	r3, #16
 800572a:	d05a      	beq.n	80057e2 <HAL_TIM_ConfigClockSource+0x15a>
 800572c:	e062      	b.n	80057f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6818      	ldr	r0, [r3, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	6899      	ldr	r1, [r3, #8]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	f000 f9ad 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005750:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	609a      	str	r2, [r3, #8]
      break;
 800575a:	e04f      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	6899      	ldr	r1, [r3, #8]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f000 f996 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800577e:	609a      	str	r2, [r3, #8]
      break;
 8005780:	e03c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	461a      	mov	r2, r3
 8005790:	f000 f90a 	bl	80059a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2150      	movs	r1, #80	; 0x50
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f963 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80057a0:	e02c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6818      	ldr	r0, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f000 f929 	bl	8005a06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	2160      	movs	r1, #96	; 0x60
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 f953 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80057c0:	e01c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6818      	ldr	r0, [r3, #0]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6859      	ldr	r1, [r3, #4]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 f8ea 	bl	80059a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2140      	movs	r1, #64	; 0x40
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 f943 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80057e0:	e00c      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4619      	mov	r1, r3
 80057ec:	4610      	mov	r0, r2
 80057ee:	f000 f93a 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80057f2:	e003      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
      break;
 80057f8:	e000      	b.n	80057fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800580c:	7bfb      	ldrb	r3, [r7, #15]
}
 800580e:	4618      	mov	r0, r3
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a40      	ldr	r2, [pc, #256]	; (800597c <TIM_Base_SetConfig+0x114>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d013      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005886:	d00f      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a3d      	ldr	r2, [pc, #244]	; (8005980 <TIM_Base_SetConfig+0x118>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00b      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3c      	ldr	r2, [pc, #240]	; (8005984 <TIM_Base_SetConfig+0x11c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d007      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3b      	ldr	r2, [pc, #236]	; (8005988 <TIM_Base_SetConfig+0x120>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d003      	beq.n	80058a8 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3a      	ldr	r2, [pc, #232]	; (800598c <TIM_Base_SetConfig+0x124>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d108      	bne.n	80058ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2f      	ldr	r2, [pc, #188]	; (800597c <TIM_Base_SetConfig+0x114>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c8:	d027      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <TIM_Base_SetConfig+0x118>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d023      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <TIM_Base_SetConfig+0x11c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d01f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2a      	ldr	r2, [pc, #168]	; (8005988 <TIM_Base_SetConfig+0x120>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a29      	ldr	r2, [pc, #164]	; (800598c <TIM_Base_SetConfig+0x124>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d017      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a28      	ldr	r2, [pc, #160]	; (8005990 <TIM_Base_SetConfig+0x128>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a27      	ldr	r2, [pc, #156]	; (8005994 <TIM_Base_SetConfig+0x12c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a26      	ldr	r2, [pc, #152]	; (8005998 <TIM_Base_SetConfig+0x130>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a25      	ldr	r2, [pc, #148]	; (800599c <TIM_Base_SetConfig+0x134>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a24      	ldr	r2, [pc, #144]	; (80059a0 <TIM_Base_SetConfig+0x138>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a23      	ldr	r2, [pc, #140]	; (80059a4 <TIM_Base_SetConfig+0x13c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d108      	bne.n	800592c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a0a      	ldr	r2, [pc, #40]	; (800597c <TIM_Base_SetConfig+0x114>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0xf8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0c      	ldr	r2, [pc, #48]	; (800598c <TIM_Base_SetConfig+0x124>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d103      	bne.n	8005968 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	691a      	ldr	r2, [r3, #16]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	615a      	str	r2, [r3, #20]
}
 800596e:	bf00      	nop
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40010400 	.word	0x40010400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	40001800 	.word	0x40001800
 80059a0:	40001c00 	.word	0x40001c00
 80059a4:	40002000 	.word	0x40002000

080059a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4313      	orrs	r3, r2
 80059dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 030a 	bic.w	r3, r3, #10
 80059e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b087      	sub	sp, #28
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	f023 0210 	bic.w	r2, r3, #16
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a1b      	ldr	r3, [r3, #32]
 8005a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 0307 	orr.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e05a      	b.n	8005baa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d022      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b40:	d01d      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d018      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d013      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a1a      	ldr	r2, [pc, #104]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00e      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a15      	ldr	r2, [pc, #84]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d10c      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40010000 	.word	0x40010000
 8005bbc:	40000400 	.word	0x40000400
 8005bc0:	40000800 	.word	0x40000800
 8005bc4:	40000c00 	.word	0x40000c00
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40014000 	.word	0x40014000
 8005bd0:	40001800 	.word	0x40001800

08005bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e03f      	b.n	8005c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb faee 	bl	8001204 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2224      	movs	r2, #36	; 0x24
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f929 	bl	8005e98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	691a      	ldr	r2, [r3, #16]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	695a      	ldr	r2, [r3, #20]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68da      	ldr	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b08a      	sub	sp, #40	; 0x28
 8005c9a:	af02      	add	r7, sp, #8
 8005c9c:	60f8      	str	r0, [r7, #12]
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	603b      	str	r3, [r7, #0]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b20      	cmp	r3, #32
 8005cb4:	d17c      	bne.n	8005db0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <HAL_UART_Transmit+0x2c>
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d101      	bne.n	8005cc6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e075      	b.n	8005db2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_UART_Transmit+0x3e>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e06e      	b.n	8005db2 <HAL_UART_Transmit+0x11c>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2221      	movs	r2, #33	; 0x21
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cea:	f7fb fdad 	bl	8001848 <HAL_GetTick>
 8005cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	88fa      	ldrh	r2, [r7, #6]
 8005cf4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	88fa      	ldrh	r2, [r7, #6]
 8005cfa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d04:	d108      	bne.n	8005d18 <HAL_UART_Transmit+0x82>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d104      	bne.n	8005d18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e003      	b.n	8005d20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d28:	e02a      	b.n	8005d80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2200      	movs	r2, #0
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f840 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e036      	b.n	8005db2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10b      	bne.n	8005d62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3302      	adds	r3, #2
 8005d5e:	61bb      	str	r3, [r7, #24]
 8005d60:	e007      	b.n	8005d72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	781a      	ldrb	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1cf      	bne.n	8005d2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	9300      	str	r3, [sp, #0]
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2200      	movs	r2, #0
 8005d92:	2140      	movs	r1, #64	; 0x40
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f810 	bl	8005dba <UART_WaitOnFlagUntilTimeout>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005da0:	2303      	movs	r3, #3
 8005da2:	e006      	b.n	8005db2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2220      	movs	r2, #32
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	e000      	b.n	8005db2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3720      	adds	r7, #32
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}

08005dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b090      	sub	sp, #64	; 0x40
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	60f8      	str	r0, [r7, #12]
 8005dc2:	60b9      	str	r1, [r7, #8]
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dca:	e050      	b.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d04c      	beq.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <UART_WaitOnFlagUntilTimeout+0x30>
 8005dda:	f7fb fd35 	bl	8001848 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d241      	bcs.n	8005e6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	330c      	adds	r3, #12
 8005df0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	e853 3f00 	ldrex	r3, [r3]
 8005df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e0a:	637a      	str	r2, [r7, #52]	; 0x34
 8005e0c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e12:	e841 2300 	strex	r3, r2, [r1]
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1e5      	bne.n	8005dea <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3314      	adds	r3, #20
 8005e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	e853 3f00 	ldrex	r3, [r3]
 8005e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3314      	adds	r3, #20
 8005e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e3e:	623a      	str	r2, [r7, #32]
 8005e40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e42:	69f9      	ldr	r1, [r7, #28]
 8005e44:	6a3a      	ldr	r2, [r7, #32]
 8005e46:	e841 2300 	strex	r3, r2, [r1]
 8005e4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1e5      	bne.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e00f      	b.n	8005e8e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d09f      	beq.n	8005dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3740      	adds	r7, #64	; 0x40
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e9c:	b0c0      	sub	sp, #256	; 0x100
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	68d9      	ldr	r1, [r3, #12]
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	ea40 0301 	orr.w	r3, r0, r1
 8005ec0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec6:	689a      	ldr	r2, [r3, #8]
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	431a      	orrs	r2, r3
 8005ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ef0:	f021 010c 	bic.w	r1, r1, #12
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005efe:	430b      	orrs	r3, r1
 8005f00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f12:	6999      	ldr	r1, [r3, #24]
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	ea40 0301 	orr.w	r3, r0, r1
 8005f1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <UART_SetConfig+0x2cc>)
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d005      	beq.n	8005f38 <UART_SetConfig+0xa0>
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4b8d      	ldr	r3, [pc, #564]	; (8006168 <UART_SetConfig+0x2d0>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d104      	bne.n	8005f42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f38:	f7fe ff1c 	bl	8004d74 <HAL_RCC_GetPCLK2Freq>
 8005f3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f40:	e003      	b.n	8005f4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f42:	f7fe ff03 	bl	8004d4c <HAL_RCC_GetPCLK1Freq>
 8005f46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f54:	f040 810c 	bne.w	8006170 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f6a:	4622      	mov	r2, r4
 8005f6c:	462b      	mov	r3, r5
 8005f6e:	1891      	adds	r1, r2, r2
 8005f70:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f72:	415b      	adcs	r3, r3
 8005f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	eb12 0801 	adds.w	r8, r2, r1
 8005f80:	4629      	mov	r1, r5
 8005f82:	eb43 0901 	adc.w	r9, r3, r1
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f9a:	4690      	mov	r8, r2
 8005f9c:	4699      	mov	r9, r3
 8005f9e:	4623      	mov	r3, r4
 8005fa0:	eb18 0303 	adds.w	r3, r8, r3
 8005fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa8:	462b      	mov	r3, r5
 8005faa:	eb49 0303 	adc.w	r3, r9, r3
 8005fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	18db      	adds	r3, r3, r3
 8005fca:	653b      	str	r3, [r7, #80]	; 0x50
 8005fcc:	4613      	mov	r3, r2
 8005fce:	eb42 0303 	adc.w	r3, r2, r3
 8005fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fdc:	f7fa f906 	bl	80001ec <__aeabi_uldivmod>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4b61      	ldr	r3, [pc, #388]	; (800616c <UART_SetConfig+0x2d4>)
 8005fe6:	fba3 2302 	umull	r2, r3, r3, r2
 8005fea:	095b      	lsrs	r3, r3, #5
 8005fec:	011c      	lsls	r4, r3, #4
 8005fee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ff8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005ffc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006000:	4642      	mov	r2, r8
 8006002:	464b      	mov	r3, r9
 8006004:	1891      	adds	r1, r2, r2
 8006006:	64b9      	str	r1, [r7, #72]	; 0x48
 8006008:	415b      	adcs	r3, r3
 800600a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800600c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006010:	4641      	mov	r1, r8
 8006012:	eb12 0a01 	adds.w	sl, r2, r1
 8006016:	4649      	mov	r1, r9
 8006018:	eb43 0b01 	adc.w	fp, r3, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006028:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800602c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006030:	4692      	mov	sl, r2
 8006032:	469b      	mov	fp, r3
 8006034:	4643      	mov	r3, r8
 8006036:	eb1a 0303 	adds.w	r3, sl, r3
 800603a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800603e:	464b      	mov	r3, r9
 8006040:	eb4b 0303 	adc.w	r3, fp, r3
 8006044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006054:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006058:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800605c:	460b      	mov	r3, r1
 800605e:	18db      	adds	r3, r3, r3
 8006060:	643b      	str	r3, [r7, #64]	; 0x40
 8006062:	4613      	mov	r3, r2
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
 800606a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800606e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006072:	f7fa f8bb 	bl	80001ec <__aeabi_uldivmod>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	4611      	mov	r1, r2
 800607c:	4b3b      	ldr	r3, [pc, #236]	; (800616c <UART_SetConfig+0x2d4>)
 800607e:	fba3 2301 	umull	r2, r3, r3, r1
 8006082:	095b      	lsrs	r3, r3, #5
 8006084:	2264      	movs	r2, #100	; 0x64
 8006086:	fb02 f303 	mul.w	r3, r2, r3
 800608a:	1acb      	subs	r3, r1, r3
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006092:	4b36      	ldr	r3, [pc, #216]	; (800616c <UART_SetConfig+0x2d4>)
 8006094:	fba3 2302 	umull	r2, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	005b      	lsls	r3, r3, #1
 800609c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060a0:	441c      	add	r4, r3
 80060a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060b4:	4642      	mov	r2, r8
 80060b6:	464b      	mov	r3, r9
 80060b8:	1891      	adds	r1, r2, r2
 80060ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80060bc:	415b      	adcs	r3, r3
 80060be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060c4:	4641      	mov	r1, r8
 80060c6:	1851      	adds	r1, r2, r1
 80060c8:	6339      	str	r1, [r7, #48]	; 0x30
 80060ca:	4649      	mov	r1, r9
 80060cc:	414b      	adcs	r3, r1
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060dc:	4659      	mov	r1, fp
 80060de:	00cb      	lsls	r3, r1, #3
 80060e0:	4651      	mov	r1, sl
 80060e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060e6:	4651      	mov	r1, sl
 80060e8:	00ca      	lsls	r2, r1, #3
 80060ea:	4610      	mov	r0, r2
 80060ec:	4619      	mov	r1, r3
 80060ee:	4603      	mov	r3, r0
 80060f0:	4642      	mov	r2, r8
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060f8:	464b      	mov	r3, r9
 80060fa:	460a      	mov	r2, r1
 80060fc:	eb42 0303 	adc.w	r3, r2, r3
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006110:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006118:	460b      	mov	r3, r1
 800611a:	18db      	adds	r3, r3, r3
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	4613      	mov	r3, r2
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006126:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800612a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800612e:	f7fa f85d 	bl	80001ec <__aeabi_uldivmod>
 8006132:	4602      	mov	r2, r0
 8006134:	460b      	mov	r3, r1
 8006136:	4b0d      	ldr	r3, [pc, #52]	; (800616c <UART_SetConfig+0x2d4>)
 8006138:	fba3 1302 	umull	r1, r3, r3, r2
 800613c:	095b      	lsrs	r3, r3, #5
 800613e:	2164      	movs	r1, #100	; 0x64
 8006140:	fb01 f303 	mul.w	r3, r1, r3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	3332      	adds	r3, #50	; 0x32
 800614a:	4a08      	ldr	r2, [pc, #32]	; (800616c <UART_SetConfig+0x2d4>)
 800614c:	fba2 2303 	umull	r2, r3, r2, r3
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f003 0207 	and.w	r2, r3, #7
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4422      	add	r2, r4
 800615e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006160:	e105      	b.n	800636e <UART_SetConfig+0x4d6>
 8006162:	bf00      	nop
 8006164:	40011000 	.word	0x40011000
 8006168:	40011400 	.word	0x40011400
 800616c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006174:	2200      	movs	r2, #0
 8006176:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800617a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800617e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006182:	4642      	mov	r2, r8
 8006184:	464b      	mov	r3, r9
 8006186:	1891      	adds	r1, r2, r2
 8006188:	6239      	str	r1, [r7, #32]
 800618a:	415b      	adcs	r3, r3
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
 800618e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006192:	4641      	mov	r1, r8
 8006194:	1854      	adds	r4, r2, r1
 8006196:	4649      	mov	r1, r9
 8006198:	eb43 0501 	adc.w	r5, r3, r1
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	00eb      	lsls	r3, r5, #3
 80061a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061aa:	00e2      	lsls	r2, r4, #3
 80061ac:	4614      	mov	r4, r2
 80061ae:	461d      	mov	r5, r3
 80061b0:	4643      	mov	r3, r8
 80061b2:	18e3      	adds	r3, r4, r3
 80061b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061b8:	464b      	mov	r3, r9
 80061ba:	eb45 0303 	adc.w	r3, r5, r3
 80061be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061de:	4629      	mov	r1, r5
 80061e0:	008b      	lsls	r3, r1, #2
 80061e2:	4621      	mov	r1, r4
 80061e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e8:	4621      	mov	r1, r4
 80061ea:	008a      	lsls	r2, r1, #2
 80061ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061f0:	f7f9 fffc 	bl	80001ec <__aeabi_uldivmod>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4b60      	ldr	r3, [pc, #384]	; (800637c <UART_SetConfig+0x4e4>)
 80061fa:	fba3 2302 	umull	r2, r3, r3, r2
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	011c      	lsls	r4, r3, #4
 8006202:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800620c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006210:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006214:	4642      	mov	r2, r8
 8006216:	464b      	mov	r3, r9
 8006218:	1891      	adds	r1, r2, r2
 800621a:	61b9      	str	r1, [r7, #24]
 800621c:	415b      	adcs	r3, r3
 800621e:	61fb      	str	r3, [r7, #28]
 8006220:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006224:	4641      	mov	r1, r8
 8006226:	1851      	adds	r1, r2, r1
 8006228:	6139      	str	r1, [r7, #16]
 800622a:	4649      	mov	r1, r9
 800622c:	414b      	adcs	r3, r1
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	f04f 0200 	mov.w	r2, #0
 8006234:	f04f 0300 	mov.w	r3, #0
 8006238:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800623c:	4659      	mov	r1, fp
 800623e:	00cb      	lsls	r3, r1, #3
 8006240:	4651      	mov	r1, sl
 8006242:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006246:	4651      	mov	r1, sl
 8006248:	00ca      	lsls	r2, r1, #3
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	4603      	mov	r3, r0
 8006250:	4642      	mov	r2, r8
 8006252:	189b      	adds	r3, r3, r2
 8006254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006258:	464b      	mov	r3, r9
 800625a:	460a      	mov	r2, r1
 800625c:	eb42 0303 	adc.w	r3, r2, r3
 8006260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	67bb      	str	r3, [r7, #120]	; 0x78
 800626e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800627c:	4649      	mov	r1, r9
 800627e:	008b      	lsls	r3, r1, #2
 8006280:	4641      	mov	r1, r8
 8006282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006286:	4641      	mov	r1, r8
 8006288:	008a      	lsls	r2, r1, #2
 800628a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800628e:	f7f9 ffad 	bl	80001ec <__aeabi_uldivmod>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <UART_SetConfig+0x4e4>)
 8006298:	fba3 1302 	umull	r1, r3, r3, r2
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	2164      	movs	r1, #100	; 0x64
 80062a0:	fb01 f303 	mul.w	r3, r1, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	011b      	lsls	r3, r3, #4
 80062a8:	3332      	adds	r3, #50	; 0x32
 80062aa:	4a34      	ldr	r2, [pc, #208]	; (800637c <UART_SetConfig+0x4e4>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	095b      	lsrs	r3, r3, #5
 80062b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b6:	441c      	add	r4, r3
 80062b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062bc:	2200      	movs	r2, #0
 80062be:	673b      	str	r3, [r7, #112]	; 0x70
 80062c0:	677a      	str	r2, [r7, #116]	; 0x74
 80062c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062c6:	4642      	mov	r2, r8
 80062c8:	464b      	mov	r3, r9
 80062ca:	1891      	adds	r1, r2, r2
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	415b      	adcs	r3, r3
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d6:	4641      	mov	r1, r8
 80062d8:	1851      	adds	r1, r2, r1
 80062da:	6039      	str	r1, [r7, #0]
 80062dc:	4649      	mov	r1, r9
 80062de:	414b      	adcs	r3, r1
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062ee:	4659      	mov	r1, fp
 80062f0:	00cb      	lsls	r3, r1, #3
 80062f2:	4651      	mov	r1, sl
 80062f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062f8:	4651      	mov	r1, sl
 80062fa:	00ca      	lsls	r2, r1, #3
 80062fc:	4610      	mov	r0, r2
 80062fe:	4619      	mov	r1, r3
 8006300:	4603      	mov	r3, r0
 8006302:	4642      	mov	r2, r8
 8006304:	189b      	adds	r3, r3, r2
 8006306:	66bb      	str	r3, [r7, #104]	; 0x68
 8006308:	464b      	mov	r3, r9
 800630a:	460a      	mov	r2, r1
 800630c:	eb42 0303 	adc.w	r3, r2, r3
 8006310:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	663b      	str	r3, [r7, #96]	; 0x60
 800631c:	667a      	str	r2, [r7, #100]	; 0x64
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800632a:	4649      	mov	r1, r9
 800632c:	008b      	lsls	r3, r1, #2
 800632e:	4641      	mov	r1, r8
 8006330:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006334:	4641      	mov	r1, r8
 8006336:	008a      	lsls	r2, r1, #2
 8006338:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800633c:	f7f9 ff56 	bl	80001ec <__aeabi_uldivmod>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <UART_SetConfig+0x4e4>)
 8006346:	fba3 1302 	umull	r1, r3, r3, r2
 800634a:	095b      	lsrs	r3, r3, #5
 800634c:	2164      	movs	r1, #100	; 0x64
 800634e:	fb01 f303 	mul.w	r3, r1, r3
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	3332      	adds	r3, #50	; 0x32
 8006358:	4a08      	ldr	r2, [pc, #32]	; (800637c <UART_SetConfig+0x4e4>)
 800635a:	fba2 2303 	umull	r2, r3, r2, r3
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4422      	add	r2, r4
 800636c:	609a      	str	r2, [r3, #8]
}
 800636e:	bf00      	nop
 8006370:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006374:	46bd      	mov	sp, r7
 8006376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800637a:	bf00      	nop
 800637c:	51eb851f 	.word	0x51eb851f

08006380 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d123      	bne.n	80063da <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800639a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	6851      	ldr	r1, [r2, #4]
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	6892      	ldr	r2, [r2, #8]
 80063a6:	4311      	orrs	r1, r2
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	68d2      	ldr	r2, [r2, #12]
 80063ac:	4311      	orrs	r1, r2
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	6912      	ldr	r2, [r2, #16]
 80063b2:	4311      	orrs	r1, r2
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	6952      	ldr	r2, [r2, #20]
 80063b8:	4311      	orrs	r1, r2
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	6992      	ldr	r2, [r2, #24]
 80063be:	4311      	orrs	r1, r2
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	69d2      	ldr	r2, [r2, #28]
 80063c4:	4311      	orrs	r1, r2
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	6a12      	ldr	r2, [r2, #32]
 80063ca:	4311      	orrs	r1, r2
 80063cc:	683a      	ldr	r2, [r7, #0]
 80063ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063d0:	430a      	orrs	r2, r1
 80063d2:	431a      	orrs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	601a      	str	r2, [r3, #0]
 80063d8:	e028      	b.n	800642c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	69d9      	ldr	r1, [r3, #28]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	4319      	orrs	r1, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	430b      	orrs	r3, r1
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006400:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	6851      	ldr	r1, [r2, #4]
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	6892      	ldr	r2, [r2, #8]
 800640c:	4311      	orrs	r1, r2
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	68d2      	ldr	r2, [r2, #12]
 8006412:	4311      	orrs	r1, r2
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	6912      	ldr	r2, [r2, #16]
 8006418:	4311      	orrs	r1, r2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	6952      	ldr	r2, [r2, #20]
 800641e:	4311      	orrs	r1, r2
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	6992      	ldr	r2, [r2, #24]
 8006424:	430a      	orrs	r2, r1
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d128      	bne.n	800649e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	1e59      	subs	r1, r3, #1
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	3b01      	subs	r3, #1
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	4319      	orrs	r1, r3
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	3b01      	subs	r3, #1
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	4319      	orrs	r1, r3
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	3b01      	subs	r3, #1
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	4319      	orrs	r1, r3
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	3b01      	subs	r3, #1
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4319      	orrs	r1, r3
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	3b01      	subs	r3, #1
 8006488:	051b      	lsls	r3, r3, #20
 800648a:	4319      	orrs	r1, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	3b01      	subs	r3, #1
 8006492:	061b      	lsls	r3, r3, #24
 8006494:	430b      	orrs	r3, r1
 8006496:	431a      	orrs	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	609a      	str	r2, [r3, #8]
 800649c:	e02f      	b.n	80064fe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	68d2      	ldr	r2, [r2, #12]
 80064ae:	3a01      	subs	r2, #1
 80064b0:	0311      	lsls	r1, r2, #12
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	6952      	ldr	r2, [r2, #20]
 80064b6:	3a01      	subs	r2, #1
 80064b8:	0512      	lsls	r2, r2, #20
 80064ba:	430a      	orrs	r2, r1
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	1e59      	subs	r1, r3, #1
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	4319      	orrs	r1, r3
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	3b01      	subs	r3, #1
 80064e0:	021b      	lsls	r3, r3, #8
 80064e2:	4319      	orrs	r1, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	041b      	lsls	r3, r3, #16
 80064ec:	4319      	orrs	r1, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	061b      	lsls	r3, r3, #24
 80064f6:	430b      	orrs	r3, r1
 80064f8:	431a      	orrs	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800650c:	b084      	sub	sp, #16
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	f107 001c 	add.w	r0, r7, #28
 800651a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	2b01      	cmp	r3, #1
 8006522:	d122      	bne.n	800656a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800654c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9c0 	bl	80068e4 <USB_CoreReset>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
 8006568:	e01a      	b.n	80065a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9b4 	bl	80068e4 <USB_CoreReset>
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	639a      	str	r2, [r3, #56]	; 0x38
 8006592:	e005      	b.n	80065a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10b      	bne.n	80065be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f043 0206 	orr.w	r2, r3, #6
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065ca:	b004      	add	sp, #16
 80065cc:	4770      	bx	lr

080065ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f043 0201 	orr.w	r2, r3, #1
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f023 0201 	bic.w	r2, r3, #1
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	460b      	mov	r3, r1
 800661c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d115      	bne.n	8006660 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006640:	2001      	movs	r0, #1
 8006642:	f7fb f90d 	bl	8001860 <HAL_Delay>
      ms++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 f93a 	bl	80068c6 <USB_GetMode>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d01e      	beq.n	8006696 <USB_SetCurrentMode+0x84>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b31      	cmp	r3, #49	; 0x31
 800665c:	d9f0      	bls.n	8006640 <USB_SetCurrentMode+0x2e>
 800665e:	e01a      	b.n	8006696 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006660:	78fb      	ldrb	r3, [r7, #3]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d115      	bne.n	8006692 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006672:	2001      	movs	r0, #1
 8006674:	f7fb f8f4 	bl	8001860 <HAL_Delay>
      ms++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f921 	bl	80068c6 <USB_GetMode>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <USB_SetCurrentMode+0x84>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2b31      	cmp	r3, #49	; 0x31
 800668e:	d9f0      	bls.n	8006672 <USB_SetCurrentMode+0x60>
 8006690:	e001      	b.n	8006696 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e005      	b.n	80066a2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2b32      	cmp	r3, #50	; 0x32
 800669a:	d101      	bne.n	80066a0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	4a13      	ldr	r2, [pc, #76]	; (8006710 <USB_FlushTxFifo+0x64>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e01b      	b.n	8006704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	daf2      	bge.n	80066ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066d4:	2300      	movs	r3, #0
 80066d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	019b      	lsls	r3, r3, #6
 80066dc:	f043 0220 	orr.w	r2, r3, #32
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3301      	adds	r3, #1
 80066e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4a08      	ldr	r2, [pc, #32]	; (8006710 <USB_FlushTxFifo+0x64>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d901      	bls.n	80066f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e006      	b.n	8006704 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b20      	cmp	r3, #32
 8006700:	d0f0      	beq.n	80066e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	00030d40 	.word	0x00030d40

08006714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3301      	adds	r3, #1
 8006724:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4a11      	ldr	r2, [pc, #68]	; (8006770 <USB_FlushRxFifo+0x5c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d901      	bls.n	8006732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e018      	b.n	8006764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	daf2      	bge.n	8006720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2210      	movs	r2, #16
 8006742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a08      	ldr	r2, [pc, #32]	; (8006770 <USB_FlushRxFifo+0x5c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d901      	bls.n	8006756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e006      	b.n	8006764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f003 0310 	and.w	r3, r3, #16
 800675e:	2b10      	cmp	r3, #16
 8006760:	d0f0      	beq.n	8006744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	00030d40 	.word	0x00030d40

08006774 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006774:	b480      	push	{r7}
 8006776:	b089      	sub	sp, #36	; 0x24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4611      	mov	r1, r2
 8006780:	461a      	mov	r2, r3
 8006782:	460b      	mov	r3, r1
 8006784:	71fb      	strb	r3, [r7, #7]
 8006786:	4613      	mov	r3, r2
 8006788:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006792:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006796:	2b00      	cmp	r3, #0
 8006798:	d123      	bne.n	80067e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800679a:	88bb      	ldrh	r3, [r7, #4]
 800679c:	3303      	adds	r3, #3
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	61bb      	str	r3, [r7, #24]
 80067a6:	e018      	b.n	80067da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067a8:	79fb      	ldrb	r3, [r7, #7]
 80067aa:	031a      	lsls	r2, r3, #12
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b4:	461a      	mov	r2, r3
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	3301      	adds	r3, #1
 80067c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	3301      	adds	r3, #1
 80067c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	3301      	adds	r3, #1
 80067cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3301      	adds	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	3301      	adds	r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d3e2      	bcc.n	80067a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3724      	adds	r7, #36	; 0x24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b08b      	sub	sp, #44	; 0x2c
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	4613      	mov	r3, r2
 80067fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006806:	88fb      	ldrh	r3, [r7, #6]
 8006808:	089b      	lsrs	r3, r3, #2
 800680a:	b29b      	uxth	r3, r3
 800680c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800680e:	88fb      	ldrh	r3, [r7, #6]
 8006810:	f003 0303 	and.w	r3, r3, #3
 8006814:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006816:	2300      	movs	r3, #0
 8006818:	623b      	str	r3, [r7, #32]
 800681a:	e014      	b.n	8006846 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	601a      	str	r2, [r3, #0]
    pDest++;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	3301      	adds	r3, #1
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006836:	3301      	adds	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	3301      	adds	r3, #1
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006840:	6a3b      	ldr	r3, [r7, #32]
 8006842:	3301      	adds	r3, #1
 8006844:	623b      	str	r3, [r7, #32]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d3e6      	bcc.n	800681c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800684e:	8bfb      	ldrh	r3, [r7, #30]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01e      	beq.n	8006892 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685e:	461a      	mov	r2, r3
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	b2db      	uxtb	r3, r3
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	b2da      	uxtb	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	701a      	strb	r2, [r3, #0]
      i++;
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	3301      	adds	r3, #1
 800687e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	3301      	adds	r3, #1
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006886:	8bfb      	ldrh	r3, [r7, #30]
 8006888:	3b01      	subs	r3, #1
 800688a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800688c:	8bfb      	ldrh	r3, [r7, #30]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ea      	bne.n	8006868 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006894:	4618      	mov	r0, r3
 8006896:	372c      	adds	r7, #44	; 0x2c
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4013      	ands	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	f003 0301 	and.w	r3, r3, #1
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
	...

080068e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3301      	adds	r3, #1
 80068f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4a13      	ldr	r2, [pc, #76]	; (8006948 <USB_CoreReset+0x64>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d901      	bls.n	8006902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01b      	b.n	800693a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	daf2      	bge.n	80068f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f043 0201 	orr.w	r2, r3, #1
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a09      	ldr	r2, [pc, #36]	; (8006948 <USB_CoreReset+0x64>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d901      	bls.n	800692c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e006      	b.n	800693a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b01      	cmp	r3, #1
 8006936:	d0f0      	beq.n	800691a <USB_CoreReset+0x36>

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	00030d40 	.word	0x00030d40

0800694c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800694c:	b084      	sub	sp, #16
 800694e:	b580      	push	{r7, lr}
 8006950:	b086      	sub	sp, #24
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800695a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800696c:	461a      	mov	r2, r3
 800696e:	2300      	movs	r3, #0
 8006970:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800699a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d10a      	bne.n	80069be <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069b6:	f043 0304 	orr.w	r3, r3, #4
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e014      	b.n	80069e8 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	e009      	b.n	80069e8 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80069e2:	f023 0304 	bic.w	r3, r3, #4
 80069e6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069e8:	2110      	movs	r1, #16
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7ff fe5e 	bl	80066ac <USB_FlushTxFifo>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff fe8a 	bl	8006714 <USB_FlushRxFifo>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d001      	beq.n	8006a0a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	613b      	str	r3, [r7, #16]
 8006a0e:	e015      	b.n	8006a3c <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a22:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a30:	461a      	mov	r2, r3
 8006a32:	2300      	movs	r3, #0
 8006a34:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d3e5      	bcc.n	8006a10 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00b      	beq.n	8006a76 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a13      	ldr	r2, [pc, #76]	; (8006ab8 <USB_HostInit+0x16c>)
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a13      	ldr	r2, [pc, #76]	; (8006abc <USB_HostInit+0x170>)
 8006a70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006a74:	e009      	b.n	8006a8a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2280      	movs	r2, #128	; 0x80
 8006a7a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <USB_HostInit+0x174>)
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a0f      	ldr	r2, [pc, #60]	; (8006ac4 <USB_HostInit+0x178>)
 8006a86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d105      	bne.n	8006a9c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f043 0210 	orr.w	r2, r3, #16
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699a      	ldr	r2, [r3, #24]
 8006aa0:	4b09      	ldr	r3, [pc, #36]	; (8006ac8 <USB_HostInit+0x17c>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab4:	b004      	add	sp, #16
 8006ab6:	4770      	bx	lr
 8006ab8:	01000200 	.word	0x01000200
 8006abc:	00e00300 	.word	0x00e00300
 8006ac0:	00600080 	.word	0x00600080
 8006ac4:	004000e0 	.word	0x004000e0
 8006ac8:	a3200008 	.word	0xa3200008

08006acc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aea:	f023 0303 	bic.w	r3, r3, #3
 8006aee:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	78fb      	ldrb	r3, [r7, #3]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b04:	4313      	orrs	r3, r2
 8006b06:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d107      	bne.n	8006b1e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b14:	461a      	mov	r2, r3
 8006b16:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b1a:	6053      	str	r3, [r2, #4]
 8006b1c:	e009      	b.n	8006b32 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d106      	bne.n	8006b32 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b30:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b70:	2064      	movs	r0, #100	; 0x64
 8006b72:	f7fa fe75 	bl	8001860 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b82:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006b84:	200a      	movs	r0, #10
 8006b86:	f7fa fe6b 	bl	8001860 <HAL_Delay>

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3710      	adds	r7, #16
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bb8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d109      	bne.n	8006bd8 <USB_DriveVbus+0x44>
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d106      	bne.n	8006bd8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bd6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d109      	bne.n	8006bf8 <USB_DriveVbus+0x64>
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	0c5b      	lsrs	r3, r3, #17
 8006c24:	f003 0303 	and.w	r3, r3, #3
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	b29b      	uxth	r3, r3
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3714      	adds	r7, #20
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
	...

08006c58 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b088      	sub	sp, #32
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4603      	mov	r3, r0
 8006c68:	70fb      	strb	r3, [r7, #3]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70bb      	strb	r3, [r7, #2]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	015a      	lsls	r2, r3, #5
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c86:	461a      	mov	r2, r3
 8006c88:	f04f 33ff 	mov.w	r3, #4294967295
 8006c8c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006c8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	d87e      	bhi.n	8006d94 <USB_HC_Init+0x13c>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USB_HC_Init+0x44>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cad 	.word	0x08006cad
 8006ca0:	08006d57 	.word	0x08006d57
 8006ca4:	08006cad 	.word	0x08006cad
 8006ca8:	08006d19 	.word	0x08006d19
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006cc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	da10      	bge.n	8006cea <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce6:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006ce8:	e057      	b.n	8006d9a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d051      	beq.n	8006d9a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	78fa      	ldrb	r2, [r7, #3]
 8006d06:	0151      	lsls	r1, r2, #5
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	440a      	add	r2, r1
 8006d0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d10:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006d14:	60d3      	str	r3, [r2, #12]
      break;
 8006d16:	e040      	b.n	8006d9a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d24:	461a      	mov	r2, r3
 8006d26:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	da34      	bge.n	8006d9e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d34:	78fb      	ldrb	r3, [r7, #3]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	78fa      	ldrb	r2, [r7, #3]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d52:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d54:	e023      	b.n	8006d9e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d56:	78fb      	ldrb	r3, [r7, #3]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	461a      	mov	r2, r3
 8006d64:	f240 2325 	movw	r3, #549	; 0x225
 8006d68:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	da17      	bge.n	8006da2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d72:	78fb      	ldrb	r3, [r7, #3]
 8006d74:	015a      	lsls	r2, r3, #5
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	4413      	add	r3, r2
 8006d7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	78fa      	ldrb	r2, [r7, #3]
 8006d82:	0151      	lsls	r1, r2, #5
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	440a      	add	r2, r1
 8006d88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d8c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d90:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d92:	e006      	b.n	8006da2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	77fb      	strb	r3, [r7, #31]
      break;
 8006d98:	e004      	b.n	8006da4 <USB_HC_Init+0x14c>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <USB_HC_Init+0x14c>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <USB_HC_Init+0x14c>
      break;
 8006da2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dbe:	f043 0302 	orr.w	r3, r3, #2
 8006dc2:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	78fb      	ldrb	r3, [r7, #3]
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	2101      	movs	r1, #1
 8006dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dd8:	6939      	ldr	r1, [r7, #16]
 8006dda:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dde:	4313      	orrs	r3, r2
 8006de0:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006dee:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da03      	bge.n	8006dfe <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	e001      	b.n	8006e02 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff feff 	bl	8006c06 <USB_GetHostSpeed>
 8006e08:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	d106      	bne.n	8006e20 <USB_HC_Init+0x1c8>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d003      	beq.n	8006e20 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	e001      	b.n	8006e24 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e24:	787b      	ldrb	r3, [r7, #1]
 8006e26:	059b      	lsls	r3, r3, #22
 8006e28:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e2c:	78bb      	ldrb	r3, [r7, #2]
 8006e2e:	02db      	lsls	r3, r3, #11
 8006e30:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e34:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e3a:	049b      	lsls	r3, r3, #18
 8006e3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e40:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e44:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e48:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	0159      	lsls	r1, r3, #5
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	440b      	add	r3, r1
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5a:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e60:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d003      	beq.n	8006e72 <USB_HC_Init+0x21a>
 8006e6a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d10f      	bne.n	8006e92 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	78fa      	ldrb	r2, [r7, #3]
 8006e82:	0151      	lsls	r1, r2, #5
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	440a      	add	r2, r1
 8006e88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e90:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08c      	sub	sp, #48	; 0x30
 8006ea0:	af02      	add	r7, sp, #8
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	785b      	ldrb	r3, [r3, #1]
 8006eb2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006eb8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d02d      	beq.n	8006f22 <USB_HC_StartXfer+0x86>
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	791b      	ldrb	r3, [r3, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d129      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d117      	bne.n	8006f04 <USB_HC_StartXfer+0x68>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	79db      	ldrb	r3, [r3, #7]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <USB_HC_StartXfer+0x48>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	79db      	ldrb	r3, [r3, #7]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d10f      	bne.n	8006f04 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f02:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	795b      	ldrb	r3, [r3, #5]
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d107      	bne.n	8006f22 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	785b      	ldrb	r3, [r3, #1]
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fa0f 	bl	800733c <USB_DoPing>
      return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	e0f8      	b.n	8007114 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d018      	beq.n	8006f5c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	8912      	ldrh	r2, [r2, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	3b01      	subs	r3, #1
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	8912      	ldrh	r2, [r2, #8]
 8006f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f3e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006f40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006f42:	8b7b      	ldrh	r3, [r7, #26]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d90b      	bls.n	8006f60 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006f48:	8b7b      	ldrh	r3, [r7, #26]
 8006f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	8912      	ldrh	r2, [r2, #8]
 8006f52:	fb03 f202 	mul.w	r2, r3, r2
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	611a      	str	r2, [r3, #16]
 8006f5a:	e001      	b.n	8006f60 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	8912      	ldrh	r2, [r2, #8]
 8006f6e:	fb03 f202 	mul.w	r2, r3, r2
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	611a      	str	r2, [r3, #16]
 8006f76:	e003      	b.n	8006f80 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f88:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f8a:	04d9      	lsls	r1, r3, #19
 8006f8c:	4b63      	ldr	r3, [pc, #396]	; (800711c <USB_HC_StartXfer+0x280>)
 8006f8e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f90:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	7a9b      	ldrb	r3, [r3, #10]
 8006f96:	075b      	lsls	r3, r3, #29
 8006f98:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f9c:	69f9      	ldr	r1, [r7, #28]
 8006f9e:	0148      	lsls	r0, r1, #5
 8006fa0:	6a39      	ldr	r1, [r7, #32]
 8006fa2:	4401      	add	r1, r0
 8006fa4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fa8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006faa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d009      	beq.n	8006fc6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	68d9      	ldr	r1, [r3, #12]
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf0c      	ite	eq
 8006fd6:	2301      	moveq	r3, #1
 8006fd8:	2300      	movne	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	6a3b      	ldr	r3, [r7, #32]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	0151      	lsls	r1, r2, #5
 8006ff0:	6a3a      	ldr	r2, [r7, #32]
 8006ff2:	440a      	add	r2, r1
 8006ff4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ff8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ffc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	7e7b      	ldrb	r3, [r7, #25]
 800700e:	075b      	lsls	r3, r3, #29
 8007010:	69f9      	ldr	r1, [r7, #28]
 8007012:	0148      	lsls	r0, r1, #5
 8007014:	6a39      	ldr	r1, [r7, #32]
 8007016:	4401      	add	r1, r0
 8007018:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800701c:	4313      	orrs	r3, r2
 800701e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	4413      	add	r3, r2
 8007028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007036:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	78db      	ldrb	r3, [r3, #3]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007046:	613b      	str	r3, [r7, #16]
 8007048:	e003      	b.n	8007052 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007050:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007058:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	015a      	lsls	r2, r3, #5
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	4413      	add	r3, r2
 8007062:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007066:	461a      	mov	r2, r3
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	e04e      	b.n	8007114 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	78db      	ldrb	r3, [r3, #3]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d149      	bne.n	8007112 <USB_HC_StartXfer+0x276>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d045      	beq.n	8007112 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	79db      	ldrb	r3, [r3, #7]
 800708a:	2b03      	cmp	r3, #3
 800708c:	d830      	bhi.n	80070f0 <USB_HC_StartXfer+0x254>
 800708e:	a201      	add	r2, pc, #4	; (adr r2, 8007094 <USB_HC_StartXfer+0x1f8>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070c9 	.word	0x080070c9
 800709c:	080070a5 	.word	0x080070a5
 80070a0:	080070c9 	.word	0x080070c9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	695b      	ldr	r3, [r3, #20]
 80070a8:	3303      	adds	r3, #3
 80070aa:	089b      	lsrs	r3, r3, #2
 80070ac:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80070ae:	8afa      	ldrh	r2, [r7, #22]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d91c      	bls.n	80070f4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	f043 0220 	orr.w	r2, r3, #32
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	619a      	str	r2, [r3, #24]
        }
        break;
 80070c6:	e015      	b.n	80070f4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	3303      	adds	r3, #3
 80070ce:	089b      	lsrs	r3, r3, #2
 80070d0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80070d2:	8afa      	ldrh	r2, [r7, #22]
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	429a      	cmp	r2, r3
 80070e0:	d90a      	bls.n	80070f8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80070ee:	e003      	b.n	80070f8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <USB_HC_StartXfer+0x25e>
        break;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <USB_HC_StartXfer+0x25e>
        break;
 80070f8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	68d9      	ldr	r1, [r3, #12]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	785a      	ldrb	r2, [r3, #1]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	b29b      	uxth	r3, r3
 8007108:	2000      	movs	r0, #0
 800710a:	9000      	str	r0, [sp, #0]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fb31 	bl	8006774 <USB_WritePacket>
  }

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3728      	adds	r7, #40	; 0x28
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	1ff80000 	.word	0x1ff80000

08007120 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	b29b      	uxth	r3, r3
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007142:	b480      	push	{r7}
 8007144:	b089      	sub	sp, #36	; 0x24
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	0c9b      	lsrs	r3, r3, #18
 800716a:	f003 0303 	and.w	r3, r3, #3
 800716e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	4413      	add	r3, r2
 8007178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0fdb      	lsrs	r3, r3, #31
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b20      	cmp	r3, #32
 8007190:	d104      	bne.n	800719c <USB_HC_Halt+0x5a>
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e0c8      	b.n	800732e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USB_HC_Halt+0x66>
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d163      	bne.n	8007270 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 0320 	and.w	r3, r3, #32
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f040 80ab 	bne.w	800732c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d133      	bne.n	800724a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	0151      	lsls	r1, r2, #5
 80071f4:	69fa      	ldr	r2, [r7, #28]
 80071f6:	440a      	add	r2, r1
 80071f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007200:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	015a      	lsls	r2, r3, #5
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	4413      	add	r3, r2
 800720a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	0151      	lsls	r1, r2, #5
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	440a      	add	r2, r1
 8007218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007220:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	3301      	adds	r3, #1
 8007226:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800722e:	d81d      	bhi.n	800726c <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007246:	d0ec      	beq.n	8007222 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007248:	e070      	b.n	800732c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	440a      	add	r2, r1
 8007260:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007268:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800726a:	e05f      	b.n	800732c <USB_HC_Halt+0x1ea>
            break;
 800726c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800726e:	e05d      	b.n	800732c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	015a      	lsls	r2, r3, #5
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	4413      	add	r3, r2
 8007278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	0151      	lsls	r1, r2, #5
 8007282:	69fa      	ldr	r2, [r7, #28]
 8007284:	440a      	add	r2, r1
 8007286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800728e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d133      	bne.n	8007308 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	0151      	lsls	r1, r2, #5
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	440a      	add	r2, r1
 80072d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072ec:	d81d      	bhi.n	800732a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007304:	d0ec      	beq.n	80072e0 <USB_HC_Halt+0x19e>
 8007306:	e011      	b.n	800732c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	0151      	lsls	r1, r2, #5
 800731a:	69fa      	ldr	r2, [r7, #28]
 800731c:	440a      	add	r2, r1
 800731e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007322:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e000      	b.n	800732c <USB_HC_Halt+0x1ea>
          break;
 800732a:	bf00      	nop
    }
  }

  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3724      	adds	r7, #36	; 0x24
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800733c:	b480      	push	{r7}
 800733e:	b087      	sub	sp, #28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007350:	2301      	movs	r3, #1
 8007352:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	04da      	lsls	r2, r3, #19
 8007358:	4b15      	ldr	r3, [pc, #84]	; (80073b0 <USB_DoPing+0x74>)
 800735a:	4013      	ands	r3, r2
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	440a      	add	r2, r1
 8007364:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800736c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007384:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800738c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	4413      	add	r3, r2
 8007396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739a:	461a      	mov	r2, r3
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	1ff80000 	.word	0x1ff80000

080073b4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073bc:	2300      	movs	r3, #0
 80073be:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f7ff f911 	bl	80065f0 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073ce:	2110      	movs	r1, #16
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7ff f96b 	bl	80066ac <USB_FlushTxFifo>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d001      	beq.n	80073e0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f7ff f997 	bl	8006714 <USB_FlushRxFifo>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80073f0:	2300      	movs	r3, #0
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e01f      	b.n	8007436 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	015a      	lsls	r2, r3, #5
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	4413      	add	r3, r2
 80073fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800740c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007414:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800741c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	4413      	add	r3, r2
 8007426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800742a:	461a      	mov	r2, r3
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	3301      	adds	r3, #1
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	2b0f      	cmp	r3, #15
 800743a:	d9dc      	bls.n	80073f6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	61bb      	str	r3, [r7, #24]
 8007440:	e034      	b.n	80074ac <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	4413      	add	r3, r2
 800744a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007458:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007460:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007468:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007476:	461a      	mov	r2, r3
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	3301      	adds	r3, #1
 8007480:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007488:	d80c      	bhi.n	80074a4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800749c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074a0:	d0ec      	beq.n	800747c <USB_StopHost+0xc8>
 80074a2:	e000      	b.n	80074a6 <USB_StopHost+0xf2>
        break;
 80074a4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d9c7      	bls.n	8007442 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074b8:	461a      	mov	r2, r3
 80074ba:	f04f 33ff 	mov.w	r3, #4294967295
 80074be:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f04f 32ff 	mov.w	r2, #4294967295
 80074c6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff f880 	bl	80065ce <USB_EnableGlobalInt>

  return ret;
 80074ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3720      	adds	r7, #32
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074d8:	b590      	push	{r4, r7, lr}
 80074da:	b089      	sub	sp, #36	; 0x24
 80074dc:	af04      	add	r7, sp, #16
 80074de:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074e0:	2301      	movs	r3, #1
 80074e2:	2202      	movs	r2, #2
 80074e4:	2102      	movs	r1, #2
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fc66 	bl	8007db8 <USBH_FindInterface>
 80074ec:	4603      	mov	r3, r0
 80074ee:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	2bff      	cmp	r3, #255	; 0xff
 80074f4:	d002      	beq.n	80074fc <USBH_CDC_InterfaceInit+0x24>
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d901      	bls.n	8007500 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80074fc:	2302      	movs	r3, #2
 80074fe:	e13d      	b.n	800777c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	4619      	mov	r1, r3
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fc3b 	bl	8007d80 <USBH_SelectInterface>
 800750a:	4603      	mov	r3, r0
 800750c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007514:	2302      	movs	r3, #2
 8007516:	e131      	b.n	800777c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800751e:	2050      	movs	r0, #80	; 0x50
 8007520:	f002 fb00 	bl	8009b24 <malloc>
 8007524:	4603      	mov	r3, r0
 8007526:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800752e:	69db      	ldr	r3, [r3, #28]
 8007530:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d101      	bne.n	800753c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007538:	2302      	movs	r3, #2
 800753a:	e11f      	b.n	800777c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800753c:	2250      	movs	r2, #80	; 0x50
 800753e:	2100      	movs	r1, #0
 8007540:	68b8      	ldr	r0, [r7, #8]
 8007542:	f002 faff 	bl	8009b44 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	211a      	movs	r1, #26
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	4413      	add	r3, r2
 8007552:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	b25b      	sxtb	r3, r3
 800755a:	2b00      	cmp	r3, #0
 800755c:	da15      	bge.n	800758a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	211a      	movs	r1, #26
 8007564:	fb01 f303 	mul.w	r3, r1, r3
 8007568:	4413      	add	r3, r2
 800756a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800756e:	781a      	ldrb	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	211a      	movs	r1, #26
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007584:	881a      	ldrh	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	785b      	ldrb	r3, [r3, #1]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 ff2c 	bl	80093ee <USBH_AllocPipe>
 8007596:	4603      	mov	r3, r0
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	7819      	ldrb	r1, [r3, #0]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	7858      	ldrb	r0, [r3, #1]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	8952      	ldrh	r2, [r2, #10]
 80075b6:	9202      	str	r2, [sp, #8]
 80075b8:	2203      	movs	r2, #3
 80075ba:	9201      	str	r2, [sp, #4]
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4623      	mov	r3, r4
 80075c0:	4602      	mov	r2, r0
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 fee4 	bl	8009390 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	2200      	movs	r2, #0
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f002 f9f9 	bl	80099c8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075d6:	2300      	movs	r3, #0
 80075d8:	2200      	movs	r2, #0
 80075da:	210a      	movs	r1, #10
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fbeb 	bl	8007db8 <USBH_FindInterface>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2bff      	cmp	r3, #255	; 0xff
 80075ea:	d002      	beq.n	80075f2 <USBH_CDC_InterfaceInit+0x11a>
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d901      	bls.n	80075f6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075f2:	2302      	movs	r3, #2
 80075f4:	e0c2      	b.n	800777c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80075f6:	7bfb      	ldrb	r3, [r7, #15]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	211a      	movs	r1, #26
 80075fc:	fb01 f303 	mul.w	r3, r1, r3
 8007600:	4413      	add	r3, r2
 8007602:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	b25b      	sxtb	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	da16      	bge.n	800763c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	211a      	movs	r1, #26
 8007614:	fb01 f303 	mul.w	r3, r1, r3
 8007618:	4413      	add	r3, r2
 800761a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800761e:	781a      	ldrb	r2, [r3, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	211a      	movs	r1, #26
 800762a:	fb01 f303 	mul.w	r3, r1, r3
 800762e:	4413      	add	r3, r2
 8007630:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007634:	881a      	ldrh	r2, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	835a      	strh	r2, [r3, #26]
 800763a:	e015      	b.n	8007668 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	211a      	movs	r1, #26
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	4413      	add	r3, r2
 8007648:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800764c:	781a      	ldrb	r2, [r3, #0]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007652:	7bfb      	ldrb	r3, [r7, #15]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	211a      	movs	r1, #26
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	4413      	add	r3, r2
 800765e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007662:	881a      	ldrh	r2, [r3, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	211a      	movs	r1, #26
 800766e:	fb01 f303 	mul.w	r3, r1, r3
 8007672:	4413      	add	r3, r2
 8007674:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	b25b      	sxtb	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	da16      	bge.n	80076ae <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	211a      	movs	r1, #26
 8007686:	fb01 f303 	mul.w	r3, r1, r3
 800768a:	4413      	add	r3, r2
 800768c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007696:	7bfb      	ldrb	r3, [r7, #15]
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	211a      	movs	r1, #26
 800769c:	fb01 f303 	mul.w	r3, r1, r3
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076a6:	881a      	ldrh	r2, [r3, #0]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	835a      	strh	r2, [r3, #26]
 80076ac:	e015      	b.n	80076da <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	211a      	movs	r1, #26
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	4413      	add	r3, r2
 80076ba:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	211a      	movs	r1, #26
 80076ca:	fb01 f303 	mul.w	r3, r1, r3
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076d4:	881a      	ldrh	r2, [r3, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	7b9b      	ldrb	r3, [r3, #14]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fe84 	bl	80093ee <USBH_AllocPipe>
 80076e6:	4603      	mov	r3, r0
 80076e8:	461a      	mov	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	7bdb      	ldrb	r3, [r3, #15]
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f001 fe7a 	bl	80093ee <USBH_AllocPipe>
 80076fa:	4603      	mov	r3, r0
 80076fc:	461a      	mov	r2, r3
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	7b59      	ldrb	r1, [r3, #13]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	7b98      	ldrb	r0, [r3, #14]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	8b12      	ldrh	r2, [r2, #24]
 800771a:	9202      	str	r2, [sp, #8]
 800771c:	2202      	movs	r2, #2
 800771e:	9201      	str	r2, [sp, #4]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	4623      	mov	r3, r4
 8007724:	4602      	mov	r2, r0
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f001 fe32 	bl	8009390 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	7b19      	ldrb	r1, [r3, #12]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	7bd8      	ldrb	r0, [r3, #15]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	8b52      	ldrh	r2, [r2, #26]
 8007744:	9202      	str	r2, [sp, #8]
 8007746:	2202      	movs	r2, #2
 8007748:	9201      	str	r2, [sp, #4]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	4623      	mov	r3, r4
 800774e:	4602      	mov	r2, r0
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fe1d 	bl	8009390 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	7b5b      	ldrb	r3, [r3, #13]
 8007762:	2200      	movs	r2, #0
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f002 f92e 	bl	80099c8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	7b1b      	ldrb	r3, [r3, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f002 f927 	bl	80099c8 <USBH_LL_SetToggle>

  return USBH_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	bd90      	pop	{r4, r7, pc}

08007784 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00e      	beq.n	80077bc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f001 fe12 	bl	80093ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fe3d 	bl	8009430 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	7b1b      	ldrb	r3, [r3, #12]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00e      	beq.n	80077e2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	7b1b      	ldrb	r3, [r3, #12]
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f001 fdff 	bl	80093ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	7b1b      	ldrb	r3, [r3, #12]
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f001 fe2a 	bl	8009430 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	7b5b      	ldrb	r3, [r3, #13]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00e      	beq.n	8007808 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	7b5b      	ldrb	r3, [r3, #13]
 80077ee:	4619      	mov	r1, r3
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 fdec 	bl	80093ce <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	7b5b      	ldrb	r3, [r3, #13]
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fe17 	bl	8009430 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2200      	movs	r2, #0
 8007806:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800780e:	69db      	ldr	r3, [r3, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00b      	beq.n	800782c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	4618      	mov	r0, r3
 800781e:	f002 f989 	bl	8009b34 <free>
    phost->pActiveClass->pData = 0U;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007828:	2200      	movs	r2, #0
 800782a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3340      	adds	r3, #64	; 0x40
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f8b1 	bl	80079b6 <GetLineCoding>
 8007854:	4603      	mov	r3, r0
 8007856:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d105      	bne.n	800786a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007864:	2102      	movs	r1, #2
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800786a:	7afb      	ldrb	r3, [r7, #11]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800787c:	2301      	movs	r3, #1
 800787e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007880:	2300      	movs	r3, #0
 8007882:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007894:	2b04      	cmp	r3, #4
 8007896:	d877      	bhi.n	8007988 <USBH_CDC_Process+0x114>
 8007898:	a201      	add	r2, pc, #4	; (adr r2, 80078a0 <USBH_CDC_Process+0x2c>)
 800789a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789e:	bf00      	nop
 80078a0:	080078b5 	.word	0x080078b5
 80078a4:	080078bb 	.word	0x080078bb
 80078a8:	080078eb 	.word	0x080078eb
 80078ac:	0800795f 	.word	0x0800795f
 80078b0:	0800796d 	.word	0x0800796d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078b4:	2300      	movs	r3, #0
 80078b6:	73fb      	strb	r3, [r7, #15]
      break;
 80078b8:	e06d      	b.n	8007996 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f897 	bl	80079f4 <SetLineCoding>
 80078c6:	4603      	mov	r3, r0
 80078c8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d104      	bne.n	80078da <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078d8:	e058      	b.n	800798c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d055      	beq.n	800798c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2204      	movs	r2, #4
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078e8:	e050      	b.n	800798c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	3340      	adds	r3, #64	; 0x40
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f860 	bl	80079b6 <GetLineCoding>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d126      	bne.n	800794e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007912:	791b      	ldrb	r3, [r3, #4]
 8007914:	429a      	cmp	r2, r3
 8007916:	d13b      	bne.n	8007990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007924:	429a      	cmp	r2, r3
 8007926:	d133      	bne.n	8007990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007934:	429a      	cmp	r2, r3
 8007936:	d12b      	bne.n	8007990 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007940:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007942:	429a      	cmp	r2, r3
 8007944:	d124      	bne.n	8007990 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f958 	bl	8007bfc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800794c:	e020      	b.n	8007990 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d01d      	beq.n	8007990 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2204      	movs	r2, #4
 8007958:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800795c:	e018      	b.n	8007990 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f867 	bl	8007a32 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f8da 	bl	8007b1e <CDC_ProcessReception>
      break;
 800796a:	e014      	b.n	8007996 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800796c:	2100      	movs	r1, #0
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 ffef 	bl	8008952 <USBH_ClrFeature>
 8007974:	4603      	mov	r3, r0
 8007976:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10a      	bne.n	8007994 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007986:	e005      	b.n	8007994 <USBH_CDC_Process+0x120>

    default:
      break;
 8007988:	bf00      	nop
 800798a:	e004      	b.n	8007996 <USBH_CDC_Process+0x122>
      break;
 800798c:	bf00      	nop
 800798e:	e002      	b.n	8007996 <USBH_CDC_Process+0x122>
      break;
 8007990:	bf00      	nop
 8007992:	e000      	b.n	8007996 <USBH_CDC_Process+0x122>
      break;
 8007994:	bf00      	nop

  }

  return status;
 8007996:	7bfb      	ldrb	r3, [r7, #15]
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	22a1      	movs	r2, #161	; 0xa1
 80079c4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2221      	movs	r2, #33	; 0x21
 80079ca:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2207      	movs	r2, #7
 80079dc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2207      	movs	r2, #7
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fa81 	bl	8008eec <USBH_CtlReq>
 80079ea:	4603      	mov	r3, r0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2221      	movs	r2, #33	; 0x21
 8007a02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2220      	movs	r2, #32
 8007a08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2207      	movs	r2, #7
 8007a1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2207      	movs	r2, #7
 8007a20:	4619      	mov	r1, r3
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f001 fa62 	bl	8008eec <USBH_CtlReq>
 8007a28:	4603      	mov	r3, r0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b086      	sub	sp, #24
 8007a36:	af02      	add	r7, sp, #8
 8007a38:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a44:	2300      	movs	r3, #0
 8007a46:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d002      	beq.n	8007a58 <CDC_ProcessTransmission+0x26>
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d023      	beq.n	8007a9e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a56:	e05e      	b.n	8007b16 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	8b12      	ldrh	r2, [r2, #24]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d90b      	bls.n	8007a7c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	69d9      	ldr	r1, [r3, #28]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	8b1a      	ldrh	r2, [r3, #24]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	7b5b      	ldrb	r3, [r3, #13]
 8007a70:	2001      	movs	r0, #1
 8007a72:	9000      	str	r0, [sp, #0]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f001 fc48 	bl	800930a <USBH_BulkSendData>
 8007a7a:	e00b      	b.n	8007a94 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	7b5b      	ldrb	r3, [r3, #13]
 8007a8a:	2001      	movs	r0, #1
 8007a8c:	9000      	str	r0, [sp, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f001 fc3b 	bl	800930a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007a9c:	e03b      	b.n	8007b16 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	7b5b      	ldrb	r3, [r3, #13]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f001 ff65 	bl	8009974 <USBH_LL_GetURBState>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007aae:	7afb      	ldrb	r3, [r7, #11]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d128      	bne.n	8007b06 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	8b12      	ldrh	r2, [r2, #24]
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d90e      	bls.n	8007ade <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	8b12      	ldrh	r2, [r2, #24]
 8007ac8:	1a9a      	subs	r2, r3, r2
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	8b12      	ldrh	r2, [r2, #24]
 8007ad6:	441a      	add	r2, r3
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	61da      	str	r2, [r3, #28]
 8007adc:	e002      	b.n	8007ae4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007af4:	e00e      	b.n	8007b14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f868 	bl	8007bd4 <USBH_CDC_TransmitCallback>
      break;
 8007b04:	e006      	b.n	8007b14 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b06:	7afb      	ldrb	r3, [r7, #11]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d103      	bne.n	8007b14 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b14:	bf00      	nop
  }
}
 8007b16:	bf00      	nop
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b086      	sub	sp, #24
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d002      	beq.n	8007b44 <CDC_ProcessReception+0x26>
 8007b3e:	2b04      	cmp	r3, #4
 8007b40:	d00e      	beq.n	8007b60 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b42:	e043      	b.n	8007bcc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	6a19      	ldr	r1, [r3, #32]
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	8b5a      	ldrh	r2, [r3, #26]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	7b1b      	ldrb	r3, [r3, #12]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 fbff 	bl	8009354 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b5e:	e035      	b.n	8007bcc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	7b1b      	ldrb	r3, [r3, #12]
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f001 ff04 	bl	8009974 <USBH_LL_GetURBState>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b70:	7cfb      	ldrb	r3, [r7, #19]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d129      	bne.n	8007bca <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	7b1b      	ldrb	r3, [r3, #12]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f001 fe67 	bl	8009850 <USBH_LL_GetLastXferSize>
 8007b82:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d016      	beq.n	8007bbc <CDC_ProcessReception+0x9e>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	8b5b      	ldrh	r3, [r3, #26]
 8007b92:	461a      	mov	r2, r3
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d910      	bls.n	8007bbc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	1ad2      	subs	r2, r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	441a      	add	r2, r3
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	2203      	movs	r2, #3
 8007bb6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007bba:	e006      	b.n	8007bca <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f80f 	bl	8007be8 <USBH_CDC_ReceiveCallback>
      break;
 8007bca:	bf00      	nop
  }
}
 8007bcc:	bf00      	nop
 8007bce:	3718      	adds	r7, #24
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bf0:	bf00      	nop
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr

08007bfc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c04:	bf00      	nop
 8007c06:	370c      	adds	r7, #12
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d101      	bne.n	8007c28 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c24:	2302      	movs	r3, #2
 8007c26:	e029      	b.n	8007c7c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	79fa      	ldrb	r2, [r7, #7]
 8007c2c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f81f 	bl	8007c84 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f001 fd2d 	bl	80096d4 <USBH_LL_Init>

  return USBH_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007c90:	2300      	movs	r3, #0
 8007c92:	60fb      	str	r3, [r7, #12]
 8007c94:	e009      	b.n	8007caa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	33e0      	adds	r3, #224	; 0xe0
 8007c9c:	009b      	lsls	r3, r3, #2
 8007c9e:	4413      	add	r3, r2
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2b0f      	cmp	r3, #15
 8007cae:	d9f2      	bls.n	8007c96 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	e009      	b.n	8007cca <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cd0:	d3f1      	bcc.n	8007cb6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2240      	movs	r2, #64	; 0x40
 8007cf6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d016      	beq.n	8007d6e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10e      	bne.n	8007d68 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d50:	1c59      	adds	r1, r3, #1
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	33de      	adds	r3, #222	; 0xde
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	73fb      	strb	r3, [r7, #15]
 8007d66:	e004      	b.n	8007d72 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	73fb      	strb	r3, [r7, #15]
 8007d6c:	e001      	b.n	8007d72 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b085      	sub	sp, #20
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007d96:	78fa      	ldrb	r2, [r7, #3]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d204      	bcs.n	8007da6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007da4:	e001      	b.n	8007daa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007da6:	2302      	movs	r3, #2
 8007da8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	4608      	mov	r0, r1
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	70fb      	strb	r3, [r7, #3]
 8007dca:	460b      	mov	r3, r1
 8007dcc:	70bb      	strb	r3, [r7, #2]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007de0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007de2:	e025      	b.n	8007e30 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	221a      	movs	r2, #26
 8007de8:	fb02 f303 	mul.w	r3, r2, r3
 8007dec:	3308      	adds	r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4413      	add	r3, r2
 8007df2:	3302      	adds	r3, #2
 8007df4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	795b      	ldrb	r3, [r3, #5]
 8007dfa:	78fa      	ldrb	r2, [r7, #3]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d002      	beq.n	8007e06 <USBH_FindInterface+0x4e>
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	2bff      	cmp	r3, #255	; 0xff
 8007e04:	d111      	bne.n	8007e2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e0a:	78ba      	ldrb	r2, [r7, #2]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e10:	78bb      	ldrb	r3, [r7, #2]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d109      	bne.n	8007e2a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e1a:	787a      	ldrb	r2, [r7, #1]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d002      	beq.n	8007e26 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e20:	787b      	ldrb	r3, [r7, #1]
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d101      	bne.n	8007e2a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e26:	7dfb      	ldrb	r3, [r7, #23]
 8007e28:	e006      	b.n	8007e38 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d9d6      	bls.n	8007de4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e36:	23ff      	movs	r3, #255	; 0xff
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f001 fc87 	bl	8009760 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007e52:	2101      	movs	r1, #1
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 fda0 	bl	800999a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2203      	movs	r2, #3
 8007e84:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b0b      	cmp	r3, #11
 8007e8e:	f200 81be 	bhi.w	800820e <USBH_Process+0x3aa>
 8007e92:	a201      	add	r2, pc, #4	; (adr r2, 8007e98 <USBH_Process+0x34>)
 8007e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e98:	08007ec9 	.word	0x08007ec9
 8007e9c:	08007efb 	.word	0x08007efb
 8007ea0:	08007f63 	.word	0x08007f63
 8007ea4:	080081a9 	.word	0x080081a9
 8007ea8:	0800820f 	.word	0x0800820f
 8007eac:	08008007 	.word	0x08008007
 8007eb0:	0800814f 	.word	0x0800814f
 8007eb4:	0800803d 	.word	0x0800803d
 8007eb8:	0800805d 	.word	0x0800805d
 8007ebc:	0800807d 	.word	0x0800807d
 8007ec0:	080080c1 	.word	0x080080c1
 8007ec4:	08008191 	.word	0x08008191
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 819e 	beq.w	8008212 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007edc:	20c8      	movs	r0, #200	; 0xc8
 8007ede:	f001 fda3 	bl	8009a28 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fc99 	bl	800981a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ef8:	e18b      	b.n	8008212 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d107      	bne.n	8007f14 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f12:	e18d      	b.n	8008230 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007f1e:	d914      	bls.n	8007f4a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f26:	3301      	adds	r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d903      	bls.n	8007f42 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	220d      	movs	r2, #13
 8007f3e:	701a      	strb	r2, [r3, #0]
      break;
 8007f40:	e176      	b.n	8008230 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
      break;
 8007f48:	e172      	b.n	8008230 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007f50:	f103 020a 	add.w	r2, r3, #10
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8007f5a:	200a      	movs	r0, #10
 8007f5c:	f001 fd64 	bl	8009a28 <USBH_Delay>
      break;
 8007f60:	e166      	b.n	8008230 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007f72:	2104      	movs	r1, #4
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007f78:	2064      	movs	r0, #100	; 0x64
 8007f7a:	f001 fd55 	bl	8009a28 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f001 fc24 	bl	80097cc <USBH_LL_GetSpeed>
 8007f84:	4603      	mov	r3, r0
 8007f86:	461a      	mov	r2, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2205      	movs	r2, #5
 8007f92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f001 fa29 	bl	80093ee <USBH_AllocPipe>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f001 fa21 	bl	80093ee <USBH_AllocPipe>
 8007fac:	4603      	mov	r3, r0
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	7919      	ldrb	r1, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	9202      	str	r2, [sp, #8]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	9201      	str	r2, [sp, #4]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2280      	movs	r2, #128	; 0x80
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f001 f9da 	bl	8009390 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	7959      	ldrb	r1, [r3, #5]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007ff0:	b292      	uxth	r2, r2
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f9c6 	bl	8009390 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008004:	e114      	b.n	8008230 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f918 	bl	800823c <USBH_HandleEnum>
 800800c:	4603      	mov	r3, r0
 800800e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	f040 80fe 	bne.w	8008216 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008028:	2b01      	cmp	r3, #1
 800802a:	d103      	bne.n	8008034 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2208      	movs	r2, #8
 8008030:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008032:	e0f0      	b.n	8008216 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2207      	movs	r2, #7
 8008038:	701a      	strb	r2, [r3, #0]
      break;
 800803a:	e0ec      	b.n	8008216 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 80e9 	beq.w	800821a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800804e:	2101      	movs	r1, #1
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2208      	movs	r2, #8
 8008058:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800805a:	e0de      	b.n	800821a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8008062:	b29b      	uxth	r3, r3
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fc2c 	bl	80088c4 <USBH_SetCfg>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	f040 80d5 	bne.w	800821e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2209      	movs	r2, #9
 8008078:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800807a:	e0d0      	b.n	800821e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d016      	beq.n	80080b8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800808a:	2101      	movs	r1, #1
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fc3c 	bl	800890a <USBH_SetFeature>
 8008092:	4603      	mov	r3, r0
 8008094:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d103      	bne.n	80080a6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	220a      	movs	r2, #10
 80080a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080a4:	e0bd      	b.n	8008222 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	2b03      	cmp	r3, #3
 80080ac:	f040 80b9 	bne.w	8008222 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	220a      	movs	r2, #10
 80080b4:	701a      	strb	r2, [r3, #0]
      break;
 80080b6:	e0b4      	b.n	8008222 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220a      	movs	r2, #10
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e0b0      	b.n	8008222 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80ad 	beq.w	8008226 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
 80080d8:	e016      	b.n	8008108 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80080da:	7bfa      	ldrb	r2, [r7, #15]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	32de      	adds	r2, #222	; 0xde
 80080e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e4:	791a      	ldrb	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d108      	bne.n	8008102 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80080f0:	7bfa      	ldrb	r2, [r7, #15]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	32de      	adds	r2, #222	; 0xde
 80080f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008100:	e005      	b.n	800810e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	3301      	adds	r3, #1
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	7bfb      	ldrb	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d0e5      	beq.n	80080da <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008114:	2b00      	cmp	r3, #0
 8008116:	d016      	beq.n	8008146 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2206      	movs	r2, #6
 800812e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008136:	2103      	movs	r1, #3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800813c:	e073      	b.n	8008226 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	220d      	movs	r2, #13
 8008142:	701a      	strb	r2, [r3, #0]
      break;
 8008144:	e06f      	b.n	8008226 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	220d      	movs	r2, #13
 800814a:	701a      	strb	r2, [r3, #0]
      break;
 800814c:	e06b      	b.n	8008226 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008154:	2b00      	cmp	r3, #0
 8008156:	d017      	beq.n	8008188 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	4798      	blx	r3
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008168:	7bbb      	ldrb	r3, [r7, #14]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d103      	bne.n	8008178 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220b      	movs	r2, #11
 8008174:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008176:	e058      	b.n	800822a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008178:	7bbb      	ldrb	r3, [r7, #14]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b02      	cmp	r3, #2
 800817e:	d154      	bne.n	800822a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	220d      	movs	r2, #13
 8008184:	701a      	strb	r2, [r3, #0]
      break;
 8008186:	e050      	b.n	800822a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	220d      	movs	r2, #13
 800818c:	701a      	strb	r2, [r3, #0]
      break;
 800818e:	e04c      	b.n	800822a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d049      	beq.n	800822e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
      }
      break;
 80081a6:	e042      	b.n	800822e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff fd67 	bl	8007c84 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d009      	beq.n	80081d4 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081e4:	2105      	movs	r1, #5
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d107      	bne.n	8008206 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7ff fe20 	bl	8007e44 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008204:	e014      	b.n	8008230 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 faaa 	bl	8009760 <USBH_LL_Start>
      break;
 800820c:	e010      	b.n	8008230 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800820e:	bf00      	nop
 8008210:	e00e      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 8008212:	bf00      	nop
 8008214:	e00c      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 8008216:	bf00      	nop
 8008218:	e00a      	b.n	8008230 <USBH_Process+0x3cc>
    break;
 800821a:	bf00      	nop
 800821c:	e008      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 800821e:	bf00      	nop
 8008220:	e006      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 8008222:	bf00      	nop
 8008224:	e004      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 8008226:	bf00      	nop
 8008228:	e002      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 800822a:	bf00      	nop
 800822c:	e000      	b.n	8008230 <USBH_Process+0x3cc>
      break;
 800822e:	bf00      	nop
  }
  return USBH_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop

0800823c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b088      	sub	sp, #32
 8008240:	af04      	add	r7, sp, #16
 8008242:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008244:	2301      	movs	r3, #1
 8008246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008248:	2301      	movs	r3, #1
 800824a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	2b07      	cmp	r3, #7
 8008252:	f200 81c1 	bhi.w	80085d8 <USBH_HandleEnum+0x39c>
 8008256:	a201      	add	r2, pc, #4	; (adr r2, 800825c <USBH_HandleEnum+0x20>)
 8008258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825c:	0800827d 	.word	0x0800827d
 8008260:	0800833b 	.word	0x0800833b
 8008264:	080083a5 	.word	0x080083a5
 8008268:	08008433 	.word	0x08008433
 800826c:	0800849d 	.word	0x0800849d
 8008270:	0800850d 	.word	0x0800850d
 8008274:	08008553 	.word	0x08008553
 8008278:	08008599 	.word	0x08008599
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800827c:	2108      	movs	r1, #8
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fa50 	bl	8008724 <USBH_Get_DevDesc>
 8008284:	4603      	mov	r3, r0
 8008286:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d130      	bne.n	80082f0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7919      	ldrb	r1, [r3, #4]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80082b2:	b292      	uxth	r2, r2
 80082b4:	9202      	str	r2, [sp, #8]
 80082b6:	2200      	movs	r2, #0
 80082b8:	9201      	str	r2, [sp, #4]
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4603      	mov	r3, r0
 80082be:	2280      	movs	r2, #128	; 0x80
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 f865 	bl	8009390 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	7959      	ldrb	r1, [r3, #5]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80082da:	b292      	uxth	r2, r2
 80082dc:	9202      	str	r2, [sp, #8]
 80082de:	2200      	movs	r2, #0
 80082e0:	9201      	str	r2, [sp, #4]
 80082e2:	9300      	str	r3, [sp, #0]
 80082e4:	4603      	mov	r3, r0
 80082e6:	2200      	movs	r2, #0
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f851 	bl	8009390 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80082ee:	e175      	b.n	80085dc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082f0:	7bbb      	ldrb	r3, [r7, #14]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	f040 8172 	bne.w	80085dc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80082fe:	3301      	adds	r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800830e:	2b03      	cmp	r3, #3
 8008310:	d903      	bls.n	800831a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	220d      	movs	r2, #13
 8008316:	701a      	strb	r2, [r3, #0]
      break;
 8008318:	e160      	b.n	80085dc <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	795b      	ldrb	r3, [r3, #5]
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 f885 	bl	8009430 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	791b      	ldrb	r3, [r3, #4]
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 f87f 	bl	8009430 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
      break;
 8008338:	e150      	b.n	80085dc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800833a:	2112      	movs	r1, #18
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 f9f1 	bl	8008724 <USBH_Get_DevDesc>
 8008342:	4603      	mov	r3, r0
 8008344:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008352:	e145      	b.n	80085e0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b03      	cmp	r3, #3
 8008358:	f040 8142 	bne.w	80085e0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008362:	3301      	adds	r3, #1
 8008364:	b2da      	uxtb	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008372:	2b03      	cmp	r3, #3
 8008374:	d903      	bls.n	800837e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	220d      	movs	r2, #13
 800837a:	701a      	strb	r2, [r3, #0]
      break;
 800837c:	e130      	b.n	80085e0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	795b      	ldrb	r3, [r3, #5]
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f001 f853 	bl	8009430 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	791b      	ldrb	r3, [r3, #4]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f84d 	bl	8009430 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
      break;
 80083a2:	e11d      	b.n	80085e0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80083a4:	2101      	movs	r1, #1
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa68 	bl	800887c <USBH_SetAddress>
 80083ac:	4603      	mov	r3, r0
 80083ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083b0:	7bbb      	ldrb	r3, [r7, #14]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d132      	bne.n	800841c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80083b6:	2002      	movs	r0, #2
 80083b8:	f001 fb36 	bl	8009a28 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2203      	movs	r2, #3
 80083c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	7919      	ldrb	r1, [r3, #4]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80083de:	b292      	uxth	r2, r2
 80083e0:	9202      	str	r2, [sp, #8]
 80083e2:	2200      	movs	r2, #0
 80083e4:	9201      	str	r2, [sp, #4]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	4603      	mov	r3, r0
 80083ea:	2280      	movs	r2, #128	; 0x80
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 ffcf 	bl	8009390 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7959      	ldrb	r1, [r3, #5]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008406:	b292      	uxth	r2, r2
 8008408:	9202      	str	r2, [sp, #8]
 800840a:	2200      	movs	r2, #0
 800840c:	9201      	str	r2, [sp, #4]
 800840e:	9300      	str	r3, [sp, #0]
 8008410:	4603      	mov	r3, r0
 8008412:	2200      	movs	r2, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 ffbb 	bl	8009390 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800841a:	e0e3      	b.n	80085e4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b03      	cmp	r3, #3
 8008420:	f040 80e0 	bne.w	80085e4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	220d      	movs	r2, #13
 8008428:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	705a      	strb	r2, [r3, #1]
      break;
 8008430:	e0d8      	b.n	80085e4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008432:	2109      	movs	r1, #9
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f99d 	bl	8008774 <USBH_Get_CfgDesc>
 800843a:	4603      	mov	r3, r0
 800843c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d103      	bne.n	800844c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2204      	movs	r2, #4
 8008448:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800844a:	e0cd      	b.n	80085e8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b03      	cmp	r3, #3
 8008450:	f040 80ca 	bne.w	80085e8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800845a:	3301      	adds	r3, #1
 800845c:	b2da      	uxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800846a:	2b03      	cmp	r3, #3
 800846c:	d903      	bls.n	8008476 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	220d      	movs	r2, #13
 8008472:	701a      	strb	r2, [r3, #0]
      break;
 8008474:	e0b8      	b.n	80085e8 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	795b      	ldrb	r3, [r3, #5]
 800847a:	4619      	mov	r1, r3
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 ffd7 	bl	8009430 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	791b      	ldrb	r3, [r3, #4]
 8008486:	4619      	mov	r1, r3
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 ffd1 	bl	8009430 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2200      	movs	r2, #0
 8008492:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
      break;
 800849a:	e0a5      	b.n	80085e8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f965 	bl	8008774 <USBH_Get_CfgDesc>
 80084aa:	4603      	mov	r3, r0
 80084ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084ae:	7bbb      	ldrb	r3, [r7, #14]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d103      	bne.n	80084bc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2205      	movs	r2, #5
 80084b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084ba:	e097      	b.n	80085ec <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084bc:	7bbb      	ldrb	r3, [r7, #14]
 80084be:	2b03      	cmp	r3, #3
 80084c0:	f040 8094 	bne.w	80085ec <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084ca:	3301      	adds	r3, #1
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084da:	2b03      	cmp	r3, #3
 80084dc:	d903      	bls.n	80084e6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	220d      	movs	r2, #13
 80084e2:	701a      	strb	r2, [r3, #0]
      break;
 80084e4:	e082      	b.n	80085ec <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	795b      	ldrb	r3, [r3, #5]
 80084ea:	4619      	mov	r1, r3
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 ff9f 	bl	8009430 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	791b      	ldrb	r3, [r3, #4]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 ff99 	bl	8009430 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	701a      	strb	r2, [r3, #0]
      break;
 800850a:	e06f      	b.n	80085ec <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008512:	2b00      	cmp	r3, #0
 8008514:	d019      	beq.n	800854a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008522:	23ff      	movs	r3, #255	; 0xff
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f949 	bl	80087bc <USBH_Get_StringDesc>
 800852a:	4603      	mov	r3, r0
 800852c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d103      	bne.n	800853c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2206      	movs	r2, #6
 8008538:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800853a:	e059      	b.n	80085f0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b03      	cmp	r3, #3
 8008540:	d156      	bne.n	80085f0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2206      	movs	r2, #6
 8008546:	705a      	strb	r2, [r3, #1]
      break;
 8008548:	e052      	b.n	80085f0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2206      	movs	r2, #6
 800854e:	705a      	strb	r2, [r3, #1]
      break;
 8008550:	e04e      	b.n	80085f0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008558:	2b00      	cmp	r3, #0
 800855a:	d019      	beq.n	8008590 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008568:	23ff      	movs	r3, #255	; 0xff
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f926 	bl	80087bc <USBH_Get_StringDesc>
 8008570:	4603      	mov	r3, r0
 8008572:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008574:	7bbb      	ldrb	r3, [r7, #14]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d103      	bne.n	8008582 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2207      	movs	r2, #7
 800857e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008580:	e038      	b.n	80085f4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008582:	7bbb      	ldrb	r3, [r7, #14]
 8008584:	2b03      	cmp	r3, #3
 8008586:	d135      	bne.n	80085f4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2207      	movs	r2, #7
 800858c:	705a      	strb	r2, [r3, #1]
      break;
 800858e:	e031      	b.n	80085f4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2207      	movs	r2, #7
 8008594:	705a      	strb	r2, [r3, #1]
      break;
 8008596:	e02d      	b.n	80085f4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d017      	beq.n	80085d2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80085ae:	23ff      	movs	r3, #255	; 0xff
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f903 	bl	80087bc <USBH_Get_StringDesc>
 80085b6:	4603      	mov	r3, r0
 80085b8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085ba:	7bbb      	ldrb	r3, [r7, #14]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80085c4:	e018      	b.n	80085f8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085c6:	7bbb      	ldrb	r3, [r7, #14]
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d115      	bne.n	80085f8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80085cc:	2300      	movs	r3, #0
 80085ce:	73fb      	strb	r3, [r7, #15]
      break;
 80085d0:	e012      	b.n	80085f8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	73fb      	strb	r3, [r7, #15]
      break;
 80085d6:	e00f      	b.n	80085f8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80085d8:	bf00      	nop
 80085da:	e00e      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085dc:	bf00      	nop
 80085de:	e00c      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085e0:	bf00      	nop
 80085e2:	e00a      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085e4:	bf00      	nop
 80085e6:	e008      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085e8:	bf00      	nop
 80085ea:	e006      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085ec:	bf00      	nop
 80085ee:	e004      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085f0:	bf00      	nop
 80085f2:	e002      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085f4:	bf00      	nop
 80085f6:	e000      	b.n	80085fa <USBH_HandleEnum+0x3be>
      break;
 80085f8:	bf00      	nop
  }
  return Status;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f804 	bl	8008646 <USBH_HandleSof>
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b082      	sub	sp, #8
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b0b      	cmp	r3, #11
 8008656:	d10a      	bne.n	800866e <USBH_HandleSof+0x28>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008668:	699b      	ldr	r3, [r3, #24]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	4798      	blx	r3
  }
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008686:	bf00      	nop
}
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80086a2:	bf00      	nop
}
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f84a 	bl	8009796 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	791b      	ldrb	r3, [r3, #4]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fe91 	bl	8009430 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	795b      	ldrb	r3, [r3, #5]
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fe8b 	bl	8009430 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800871a:	2300      	movs	r3, #0
}
 800871c:	4618      	mov	r0, r3
 800871e:	3708      	adds	r7, #8
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af02      	add	r7, sp, #8
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	460b      	mov	r3, r1
 800872e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008736:	78fb      	ldrb	r3, [r7, #3]
 8008738:	b29b      	uxth	r3, r3
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	4613      	mov	r3, r2
 800873e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008742:	2100      	movs	r1, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f864 	bl	8008812 <USBH_GetDescriptor>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f203 3026 	addw	r0, r3, #806	; 0x326
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	b292      	uxth	r2, r2
 8008764:	4619      	mov	r1, r3
 8008766:	f000 f918 	bl	800899a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3710      	adds	r7, #16
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008774:	b580      	push	{r7, lr}
 8008776:	b086      	sub	sp, #24
 8008778:	af02      	add	r7, sp, #8
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	460b      	mov	r3, r1
 800877e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	331c      	adds	r3, #28
 8008784:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008786:	887b      	ldrh	r3, [r7, #2]
 8008788:	9300      	str	r3, [sp, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008790:	2100      	movs	r1, #0
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 f83d 	bl	8008812 <USBH_GetDescriptor>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80087a2:	887b      	ldrh	r3, [r7, #2]
 80087a4:	461a      	mov	r2, r3
 80087a6:	68b9      	ldr	r1, [r7, #8]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f987 	bl	8008abc <USBH_ParseCfgDesc>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af02      	add	r7, sp, #8
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	607a      	str	r2, [r7, #4]
 80087c6:	461a      	mov	r2, r3
 80087c8:	460b      	mov	r3, r1
 80087ca:	72fb      	strb	r3, [r7, #11]
 80087cc:	4613      	mov	r3, r2
 80087ce:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 80087d0:	7afb      	ldrb	r3, [r7, #11]
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80087d8:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80087e0:	893b      	ldrh	r3, [r7, #8]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	460b      	mov	r3, r1
 80087e6:	2100      	movs	r1, #0
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f812 	bl	8008812 <USBH_GetDescriptor>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d107      	bne.n	8008808 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80087fe:	893a      	ldrh	r2, [r7, #8]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fb24 	bl	8008e50 <USBH_ParseStringDesc>
  }

  return status;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3718      	adds	r7, #24
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	60f8      	str	r0, [r7, #12]
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	72fb      	strb	r3, [r7, #11]
 8008820:	4613      	mov	r3, r2
 8008822:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	789b      	ldrb	r3, [r3, #2]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d11c      	bne.n	8008866 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800882c:	7afb      	ldrb	r3, [r7, #11]
 800882e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2206      	movs	r2, #6
 800883c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	893a      	ldrh	r2, [r7, #8]
 8008842:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008844:	893b      	ldrh	r3, [r7, #8]
 8008846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800884a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800884e:	d104      	bne.n	800885a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f240 4209 	movw	r2, #1033	; 0x409
 8008856:	829a      	strh	r2, [r3, #20]
 8008858:	e002      	b.n	8008860 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2200      	movs	r2, #0
 800885e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8b3a      	ldrh	r2, [r7, #24]
 8008864:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008866:	8b3b      	ldrh	r3, [r7, #24]
 8008868:	461a      	mov	r2, r3
 800886a:	6879      	ldr	r1, [r7, #4]
 800886c:	68f8      	ldr	r0, [r7, #12]
 800886e:	f000 fb3d 	bl	8008eec <USBH_CtlReq>
 8008872:	4603      	mov	r3, r0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	789b      	ldrb	r3, [r3, #2]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10f      	bne.n	80088b0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2205      	movs	r2, #5
 800889a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	b29a      	uxth	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088b0:	2200      	movs	r2, #0
 80088b2:	2100      	movs	r1, #0
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fb19 	bl	8008eec <USBH_CtlReq>
 80088ba:	4603      	mov	r3, r0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	460b      	mov	r3, r1
 80088ce:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	789b      	ldrb	r3, [r3, #2]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d10e      	bne.n	80088f6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2209      	movs	r2, #9
 80088e2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	887a      	ldrh	r2, [r7, #2]
 80088e8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088f6:	2200      	movs	r2, #0
 80088f8:	2100      	movs	r1, #0
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 faf6 	bl	8008eec <USBH_CtlReq>
 8008900:	4603      	mov	r3, r0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b082      	sub	sp, #8
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	789b      	ldrb	r3, [r3, #2]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d10f      	bne.n	800893e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2203      	movs	r2, #3
 8008928:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800892a:	78fb      	ldrb	r3, [r7, #3]
 800892c:	b29a      	uxth	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fad2 	bl	8008eec <USBH_CtlReq>
 8008948:	4603      	mov	r3, r0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b082      	sub	sp, #8
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	789b      	ldrb	r3, [r3, #2]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10f      	bne.n	8008986 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2202      	movs	r2, #2
 800896a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2200      	movs	r2, #0
 8008976:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	b29a      	uxth	r2, r3
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008986:	2200      	movs	r2, #0
 8008988:	2100      	movs	r1, #0
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 faae 	bl	8008eec <USBH_CtlReq>
 8008990:	4603      	mov	r3, r0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800899a:	b480      	push	{r7}
 800899c:	b085      	sub	sp, #20
 800899e:	af00      	add	r7, sp, #0
 80089a0:	60f8      	str	r0, [r7, #12]
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	4613      	mov	r3, r2
 80089a6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	781a      	ldrb	r2, [r3, #0]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	785a      	ldrb	r2, [r3, #1]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3302      	adds	r3, #2
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	b29a      	uxth	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	3303      	adds	r3, #3
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	b29b      	uxth	r3, r3
 80089c8:	021b      	lsls	r3, r3, #8
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	791a      	ldrb	r2, [r3, #4]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	795a      	ldrb	r2, [r3, #5]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	799a      	ldrb	r2, [r3, #6]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	79da      	ldrb	r2, [r3, #7]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	79db      	ldrb	r3, [r3, #7]
 80089f8:	2b20      	cmp	r3, #32
 80089fa:	dc11      	bgt.n	8008a20 <USBH_ParseDevDesc+0x86>
 80089fc:	2b08      	cmp	r3, #8
 80089fe:	db16      	blt.n	8008a2e <USBH_ParseDevDesc+0x94>
 8008a00:	3b08      	subs	r3, #8
 8008a02:	2201      	movs	r2, #1
 8008a04:	fa02 f303 	lsl.w	r3, r2, r3
 8008a08:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bf14      	ite	ne
 8008a14:	2301      	movne	r3, #1
 8008a16:	2300      	moveq	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d102      	bne.n	8008a24 <USBH_ParseDevDesc+0x8a>
 8008a1e:	e006      	b.n	8008a2e <USBH_ParseDevDesc+0x94>
 8008a20:	2b40      	cmp	r3, #64	; 0x40
 8008a22:	d104      	bne.n	8008a2e <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	79da      	ldrb	r2, [r3, #7]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	71da      	strb	r2, [r3, #7]
      break;
 8008a2c:	e003      	b.n	8008a36 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2240      	movs	r2, #64	; 0x40
 8008a32:	71da      	strb	r2, [r3, #7]
      break;
 8008a34:	bf00      	nop
  }

  if (length > 8U)
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	2b08      	cmp	r3, #8
 8008a3a:	d939      	bls.n	8008ab0 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	3309      	adds	r3, #9
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	021b      	lsls	r3, r3, #8
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	4313      	orrs	r3, r2
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	330a      	adds	r3, #10
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b29a      	uxth	r2, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	330b      	adds	r3, #11
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	b29a      	uxth	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	330c      	adds	r3, #12
 8008a78:	781b      	ldrb	r3, [r3, #0]
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	330d      	adds	r3, #13
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	7b9a      	ldrb	r2, [r3, #14]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	7bda      	ldrb	r2, [r3, #15]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	7c1a      	ldrb	r2, [r3, #16]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	7c5a      	ldrb	r2, [r3, #17]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	745a      	strb	r2, [r3, #17]
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	3714      	adds	r7, #20
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b08c      	sub	sp, #48	; 0x30
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008ad0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	785a      	ldrb	r2, [r3, #1]
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3302      	adds	r3, #2
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	3303      	adds	r3, #3
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4313      	orrs	r3, r2
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	bf28      	it	cs
 8008b1a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	791a      	ldrb	r2, [r3, #4]
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	795a      	ldrb	r2, [r3, #5]
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	799a      	ldrb	r2, [r3, #6]
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	79da      	ldrb	r2, [r3, #7]
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	7a1a      	ldrb	r2, [r3, #8]
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b09      	cmp	r3, #9
 8008b52:	d002      	beq.n	8008b5a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	2209      	movs	r2, #9
 8008b58:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b5a:	88fb      	ldrh	r3, [r7, #6]
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	f240 809d 	bls.w	8008c9c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b62:	2309      	movs	r3, #9
 8008b64:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b6a:	e081      	b.n	8008c70 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b6c:	f107 0316 	add.w	r3, r7, #22
 8008b70:	4619      	mov	r1, r3
 8008b72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b74:	f000 f99f 	bl	8008eb6 <USBH_GetNextDesc>
 8008b78:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	785b      	ldrb	r3, [r3, #1]
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	d176      	bne.n	8008c70 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b09      	cmp	r3, #9
 8008b88:	d002      	beq.n	8008b90 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8c:	2209      	movs	r2, #9
 8008b8e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b94:	221a      	movs	r2, #26
 8008b96:	fb02 f303 	mul.w	r3, r2, r3
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	6a3a      	ldr	r2, [r7, #32]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008ba4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ba6:	69f8      	ldr	r0, [r7, #28]
 8008ba8:	f000 f87e 	bl	8008ca8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008bb6:	e043      	b.n	8008c40 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008bb8:	f107 0316 	add.w	r3, r7, #22
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc0:	f000 f979 	bl	8008eb6 <USBH_GetNextDesc>
 8008bc4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	785b      	ldrb	r3, [r3, #1]
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d138      	bne.n	8008c40 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	795b      	ldrb	r3, [r3, #5]
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d10f      	bne.n	8008bf6 <USBH_ParseCfgDesc+0x13a>
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	799b      	ldrb	r3, [r3, #6]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	d10b      	bne.n	8008bf6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	79db      	ldrb	r3, [r3, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10f      	bne.n	8008c06 <USBH_ParseCfgDesc+0x14a>
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	2b09      	cmp	r3, #9
 8008bec:	d00b      	beq.n	8008c06 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	2209      	movs	r2, #9
 8008bf2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bf4:	e007      	b.n	8008c06 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b07      	cmp	r3, #7
 8008bfc:	d004      	beq.n	8008c08 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	2207      	movs	r2, #7
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e000      	b.n	8008c08 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008c06:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008c08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c10:	3201      	adds	r2, #1
 8008c12:	00d2      	lsls	r2, r2, #3
 8008c14:	211a      	movs	r1, #26
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	3308      	adds	r3, #8
 8008c1e:	6a3a      	ldr	r2, [r7, #32]
 8008c20:	4413      	add	r3, r2
 8008c22:	3304      	adds	r3, #4
 8008c24:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c28:	69b9      	ldr	r1, [r7, #24]
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 f86b 	bl	8008d06 <USBH_ParseEPDesc>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008c36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	791b      	ldrb	r3, [r3, #4]
 8008c44:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d204      	bcs.n	8008c56 <USBH_ParseCfgDesc+0x19a>
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	885a      	ldrh	r2, [r3, #2]
 8008c50:	8afb      	ldrh	r3, [r7, #22]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d8b0      	bhi.n	8008bb8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	791b      	ldrb	r3, [r3, #4]
 8008c5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d201      	bcs.n	8008c66 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e01c      	b.n	8008ca0 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d805      	bhi.n	8008c84 <USBH_ParseCfgDesc+0x1c8>
 8008c78:	6a3b      	ldr	r3, [r7, #32]
 8008c7a:	885a      	ldrh	r2, [r3, #2]
 8008c7c:	8afb      	ldrh	r3, [r7, #22]
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	f63f af74 	bhi.w	8008b6c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	791b      	ldrb	r3, [r3, #4]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	bf28      	it	cs
 8008c8c:	2302      	movcs	r3, #2
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d201      	bcs.n	8008c9c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e001      	b.n	8008ca0 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008c9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3730      	adds	r7, #48	; 0x30
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781a      	ldrb	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	785a      	ldrb	r2, [r3, #1]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	789a      	ldrb	r2, [r3, #2]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	78da      	ldrb	r2, [r3, #3]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	791a      	ldrb	r2, [r3, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	795a      	ldrb	r2, [r3, #5]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	799a      	ldrb	r2, [r3, #6]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	79da      	ldrb	r2, [r3, #7]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	7a1a      	ldrb	r2, [r3, #8]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	721a      	strb	r2, [r3, #8]
}
 8008cfa:	bf00      	nop
 8008cfc:	370c      	adds	r7, #12
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b087      	sub	sp, #28
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	60f8      	str	r0, [r7, #12]
 8008d0e:	60b9      	str	r1, [r7, #8]
 8008d10:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	781a      	ldrb	r2, [r3, #0]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	785a      	ldrb	r2, [r3, #1]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	789a      	ldrb	r2, [r3, #2]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	78da      	ldrb	r2, [r3, #3]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	3305      	adds	r3, #5
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	021b      	lsls	r3, r3, #8
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	799a      	ldrb	r2, [r3, #6]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	889b      	ldrh	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d102      	bne.n	8008d68 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008d62:	2303      	movs	r3, #3
 8008d64:	75fb      	strb	r3, [r7, #23]
 8008d66:	e033      	b.n	8008dd0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	889b      	ldrh	r3, [r3, #4]
 8008d6c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	889b      	ldrh	r3, [r3, #4]
 8008d7e:	b21a      	sxth	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	3304      	adds	r3, #4
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	b299      	uxth	r1, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3305      	adds	r3, #5
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	021b      	lsls	r3, r3, #8
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	430b      	orrs	r3, r1
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d110      	bne.n	8008dc2 <USBH_ParseEPDesc+0xbc>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3304      	adds	r3, #4
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b299      	uxth	r1, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3305      	adds	r3, #5
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	021b      	lsls	r3, r3, #8
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	430b      	orrs	r3, r1
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	b21b      	sxth	r3, r3
 8008dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	e001      	b.n	8008dc6 <USBH_ParseEPDesc+0xc0>
 8008dc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	b21b      	sxth	r3, r3
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d116      	bne.n	8008e08 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	78db      	ldrb	r3, [r3, #3]
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d005      	beq.n	8008df2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	78db      	ldrb	r3, [r3, #3]
 8008dea:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d127      	bne.n	8008e42 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	799b      	ldrb	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <USBH_ParseEPDesc+0xfc>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	799b      	ldrb	r3, [r3, #6]
 8008dfe:	2b10      	cmp	r3, #16
 8008e00:	d91f      	bls.n	8008e42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e02:	2303      	movs	r3, #3
 8008e04:	75fb      	strb	r3, [r7, #23]
 8008e06:	e01c      	b.n	8008e42 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	78db      	ldrb	r3, [r3, #3]
 8008e0c:	f003 0303 	and.w	r3, r3, #3
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d10a      	bne.n	8008e2a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	799b      	ldrb	r3, [r3, #6]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <USBH_ParseEPDesc+0x11e>
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	799b      	ldrb	r3, [r3, #6]
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d90e      	bls.n	8008e42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e24:	2303      	movs	r3, #3
 8008e26:	75fb      	strb	r3, [r7, #23]
 8008e28:	e00b      	b.n	8008e42 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	78db      	ldrb	r3, [r3, #3]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d105      	bne.n	8008e42 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	799b      	ldrb	r3, [r3, #6]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	371c      	adds	r7, #28
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3301      	adds	r3, #1
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d120      	bne.n	8008eaa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	1e9a      	subs	r2, r3, #2
 8008e6e:	88fb      	ldrh	r3, [r7, #6]
 8008e70:	4293      	cmp	r3, r2
 8008e72:	bf28      	it	cs
 8008e74:	4613      	movcs	r3, r2
 8008e76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	3302      	adds	r3, #2
 8008e7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e7e:	2300      	movs	r3, #0
 8008e80:	82fb      	strh	r3, [r7, #22]
 8008e82:	e00b      	b.n	8008e9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e84:	8afb      	ldrh	r3, [r7, #22]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	4413      	add	r3, r2
 8008e8a:	781a      	ldrb	r2, [r3, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	3301      	adds	r3, #1
 8008e94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e96:	8afb      	ldrh	r3, [r7, #22]
 8008e98:	3302      	adds	r3, #2
 8008e9a:	82fb      	strh	r3, [r7, #22]
 8008e9c:	8afa      	ldrh	r2, [r7, #22]
 8008e9e:	8abb      	ldrh	r3, [r7, #20]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d3ef      	bcc.n	8008e84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	701a      	strb	r2, [r3, #0]
  }
}
 8008eaa:	bf00      	nop
 8008eac:	371c      	adds	r7, #28
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
 8008ebe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	881a      	ldrh	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	4413      	add	r3, r2
 8008edc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ede:	68fb      	ldr	r3, [r7, #12]
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008efa:	2301      	movs	r3, #1
 8008efc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	789b      	ldrb	r3, [r3, #2]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d002      	beq.n	8008f0c <USBH_CtlReq+0x20>
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	d00f      	beq.n	8008f2a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008f0a:	e027      	b.n	8008f5c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	88fa      	ldrh	r2, [r7, #6]
 8008f16:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2202      	movs	r2, #2
 8008f22:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008f24:	2301      	movs	r3, #1
 8008f26:	75fb      	strb	r3, [r7, #23]
      break;
 8008f28:	e018      	b.n	8008f5c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f81c 	bl	8008f68 <USBH_HandleControl>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d002      	beq.n	8008f40 <USBH_CtlReq+0x54>
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d106      	bne.n	8008f4e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	761a      	strb	r2, [r3, #24]
      break;
 8008f4c:	e005      	b.n	8008f5a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d102      	bne.n	8008f5a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	709a      	strb	r2, [r3, #2]
      break;
 8008f5a:	bf00      	nop
  }
  return status;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f70:	2301      	movs	r3, #1
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	7e1b      	ldrb	r3, [r3, #24]
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	2b0a      	cmp	r3, #10
 8008f80:	f200 8156 	bhi.w	8009230 <USBH_HandleControl+0x2c8>
 8008f84:	a201      	add	r2, pc, #4	; (adr r2, 8008f8c <USBH_HandleControl+0x24>)
 8008f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8a:	bf00      	nop
 8008f8c:	08008fb9 	.word	0x08008fb9
 8008f90:	08008fd3 	.word	0x08008fd3
 8008f94:	0800903d 	.word	0x0800903d
 8008f98:	08009063 	.word	0x08009063
 8008f9c:	0800909b 	.word	0x0800909b
 8008fa0:	080090c5 	.word	0x080090c5
 8008fa4:	08009117 	.word	0x08009117
 8008fa8:	08009139 	.word	0x08009139
 8008fac:	08009175 	.word	0x08009175
 8008fb0:	0800919b 	.word	0x0800919b
 8008fb4:	080091d9 	.word	0x080091d9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f103 0110 	add.w	r1, r3, #16
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	795b      	ldrb	r3, [r3, #5]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f943 	bl	8009250 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	761a      	strb	r2, [r3, #24]
      break;
 8008fd0:	e139      	b.n	8009246 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	795b      	ldrb	r3, [r3, #5]
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fccb 	bl	8009974 <USBH_LL_GetURBState>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d11e      	bne.n	8009026 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7c1b      	ldrb	r3, [r3, #16]
 8008fec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008ff0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	8adb      	ldrh	r3, [r3, #22]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d00a      	beq.n	8009010 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008ffa:	7b7b      	ldrb	r3, [r7, #13]
 8008ffc:	2b80      	cmp	r3, #128	; 0x80
 8008ffe:	d103      	bne.n	8009008 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2203      	movs	r2, #3
 8009004:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009006:	e115      	b.n	8009234 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2205      	movs	r2, #5
 800900c:	761a      	strb	r2, [r3, #24]
      break;
 800900e:	e111      	b.n	8009234 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009010:	7b7b      	ldrb	r3, [r7, #13]
 8009012:	2b80      	cmp	r3, #128	; 0x80
 8009014:	d103      	bne.n	800901e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2209      	movs	r2, #9
 800901a:	761a      	strb	r2, [r3, #24]
      break;
 800901c:	e10a      	b.n	8009234 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2207      	movs	r2, #7
 8009022:	761a      	strb	r2, [r3, #24]
      break;
 8009024:	e106      	b.n	8009234 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d003      	beq.n	8009034 <USBH_HandleControl+0xcc>
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b02      	cmp	r3, #2
 8009030:	f040 8100 	bne.w	8009234 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	220b      	movs	r2, #11
 8009038:	761a      	strb	r2, [r3, #24]
      break;
 800903a:	e0fb      	b.n	8009234 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009042:	b29a      	uxth	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6899      	ldr	r1, [r3, #8]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	899a      	ldrh	r2, [r3, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	791b      	ldrb	r3, [r3, #4]
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f93a 	bl	80092ce <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2204      	movs	r2, #4
 800905e:	761a      	strb	r2, [r3, #24]
      break;
 8009060:	e0f1      	b.n	8009246 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	791b      	ldrb	r3, [r3, #4]
 8009066:	4619      	mov	r1, r3
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fc83 	bl	8009974 <USBH_LL_GetURBState>
 800906e:	4603      	mov	r3, r0
 8009070:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d102      	bne.n	800907e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2209      	movs	r2, #9
 800907c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b05      	cmp	r3, #5
 8009082:	d102      	bne.n	800908a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009084:	2303      	movs	r3, #3
 8009086:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009088:	e0d6      	b.n	8009238 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b04      	cmp	r3, #4
 800908e:	f040 80d3 	bne.w	8009238 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	220b      	movs	r2, #11
 8009096:	761a      	strb	r2, [r3, #24]
      break;
 8009098:	e0ce      	b.n	8009238 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6899      	ldr	r1, [r3, #8]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	899a      	ldrh	r2, [r3, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	795b      	ldrb	r3, [r3, #5]
 80090a6:	2001      	movs	r0, #1
 80090a8:	9000      	str	r0, [sp, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f8ea 	bl	8009284 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2206      	movs	r2, #6
 80090c0:	761a      	strb	r2, [r3, #24]
      break;
 80090c2:	e0c0      	b.n	8009246 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	795b      	ldrb	r3, [r3, #5]
 80090c8:	4619      	mov	r1, r3
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fc52 	bl	8009974 <USBH_LL_GetURBState>
 80090d0:	4603      	mov	r3, r0
 80090d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d103      	bne.n	80090e2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2207      	movs	r2, #7
 80090de:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e0:	e0ac      	b.n	800923c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b05      	cmp	r3, #5
 80090e6:	d105      	bne.n	80090f4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	220c      	movs	r2, #12
 80090ec:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80090ee:	2303      	movs	r3, #3
 80090f0:	73fb      	strb	r3, [r7, #15]
      break;
 80090f2:	e0a3      	b.n	800923c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d103      	bne.n	8009102 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2205      	movs	r2, #5
 80090fe:	761a      	strb	r2, [r3, #24]
      break;
 8009100:	e09c      	b.n	800923c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b04      	cmp	r3, #4
 8009106:	f040 8099 	bne.w	800923c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	220b      	movs	r2, #11
 800910e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	73fb      	strb	r3, [r7, #15]
      break;
 8009114:	e092      	b.n	800923c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f8d5 	bl	80092ce <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800912a:	b29a      	uxth	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2208      	movs	r2, #8
 8009134:	761a      	strb	r2, [r3, #24]

      break;
 8009136:	e086      	b.n	8009246 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	791b      	ldrb	r3, [r3, #4]
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fc18 	bl	8009974 <USBH_LL_GetURBState>
 8009144:	4603      	mov	r3, r0
 8009146:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009148:	7bbb      	ldrb	r3, [r7, #14]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d105      	bne.n	800915a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	220d      	movs	r2, #13
 8009152:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009158:	e072      	b.n	8009240 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800915a:	7bbb      	ldrb	r3, [r7, #14]
 800915c:	2b04      	cmp	r3, #4
 800915e:	d103      	bne.n	8009168 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	220b      	movs	r2, #11
 8009164:	761a      	strb	r2, [r3, #24]
      break;
 8009166:	e06b      	b.n	8009240 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	2b05      	cmp	r3, #5
 800916c:	d168      	bne.n	8009240 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800916e:	2303      	movs	r3, #3
 8009170:	73fb      	strb	r3, [r7, #15]
      break;
 8009172:	e065      	b.n	8009240 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	795b      	ldrb	r3, [r3, #5]
 8009178:	2201      	movs	r2, #1
 800917a:	9200      	str	r2, [sp, #0]
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f87f 	bl	8009284 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	220a      	movs	r2, #10
 8009196:	761a      	strb	r2, [r3, #24]
      break;
 8009198:	e055      	b.n	8009246 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	795b      	ldrb	r3, [r3, #5]
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 fbe7 	bl	8009974 <USBH_LL_GetURBState>
 80091a6:	4603      	mov	r3, r0
 80091a8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80091aa:	7bbb      	ldrb	r3, [r7, #14]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d105      	bne.n	80091bc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	220d      	movs	r2, #13
 80091b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ba:	e043      	b.n	8009244 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d103      	bne.n	80091ca <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2209      	movs	r2, #9
 80091c6:	761a      	strb	r2, [r3, #24]
      break;
 80091c8:	e03c      	b.n	8009244 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80091ca:	7bbb      	ldrb	r3, [r7, #14]
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d139      	bne.n	8009244 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	220b      	movs	r2, #11
 80091d4:	761a      	strb	r2, [r3, #24]
      break;
 80091d6:	e035      	b.n	8009244 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	7e5b      	ldrb	r3, [r3, #25]
 80091dc:	3301      	adds	r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	765a      	strb	r2, [r3, #25]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	7e5b      	ldrb	r3, [r3, #25]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d806      	bhi.n	80091fa <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091f8:	e025      	b.n	8009246 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009200:	2106      	movs	r1, #6
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	795b      	ldrb	r3, [r3, #5]
 8009210:	4619      	mov	r1, r3
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f90c 	bl	8009430 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	791b      	ldrb	r3, [r3, #4]
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f906 	bl	8009430 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800922a:	2302      	movs	r3, #2
 800922c:	73fb      	strb	r3, [r7, #15]
      break;
 800922e:	e00a      	b.n	8009246 <USBH_HandleControl+0x2de>

    default:
      break;
 8009230:	bf00      	nop
 8009232:	e008      	b.n	8009246 <USBH_HandleControl+0x2de>
      break;
 8009234:	bf00      	nop
 8009236:	e006      	b.n	8009246 <USBH_HandleControl+0x2de>
      break;
 8009238:	bf00      	nop
 800923a:	e004      	b.n	8009246 <USBH_HandleControl+0x2de>
      break;
 800923c:	bf00      	nop
 800923e:	e002      	b.n	8009246 <USBH_HandleControl+0x2de>
      break;
 8009240:	bf00      	nop
 8009242:	e000      	b.n	8009246 <USBH_HandleControl+0x2de>
      break;
 8009244:	bf00      	nop
  }

  return status;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af04      	add	r7, sp, #16
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	4613      	mov	r3, r2
 800925c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800925e:	79f9      	ldrb	r1, [r7, #7]
 8009260:	2300      	movs	r3, #0
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	2308      	movs	r3, #8
 8009266:	9302      	str	r3, [sp, #8]
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	2300      	movs	r3, #0
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	2300      	movs	r3, #0
 8009272:	2200      	movs	r2, #0
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 fb4c 	bl	8009912 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af04      	add	r7, sp, #16
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4611      	mov	r1, r2
 8009290:	461a      	mov	r2, r3
 8009292:	460b      	mov	r3, r1
 8009294:	80fb      	strh	r3, [r7, #6]
 8009296:	4613      	mov	r3, r2
 8009298:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d001      	beq.n	80092a8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092a8:	7979      	ldrb	r1, [r7, #5]
 80092aa:	7e3b      	ldrb	r3, [r7, #24]
 80092ac:	9303      	str	r3, [sp, #12]
 80092ae:	88fb      	ldrh	r3, [r7, #6]
 80092b0:	9302      	str	r3, [sp, #8]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	2301      	movs	r3, #1
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	2300      	movs	r3, #0
 80092bc:	2200      	movs	r2, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fb27 	bl	8009912 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b088      	sub	sp, #32
 80092d2:	af04      	add	r7, sp, #16
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	4611      	mov	r1, r2
 80092da:	461a      	mov	r2, r3
 80092dc:	460b      	mov	r3, r1
 80092de:	80fb      	strh	r3, [r7, #6]
 80092e0:	4613      	mov	r3, r2
 80092e2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092e4:	7979      	ldrb	r1, [r7, #5]
 80092e6:	2300      	movs	r3, #0
 80092e8:	9303      	str	r3, [sp, #12]
 80092ea:	88fb      	ldrh	r3, [r7, #6]
 80092ec:	9302      	str	r3, [sp, #8]
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	2301      	movs	r3, #1
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2300      	movs	r3, #0
 80092f8:	2201      	movs	r2, #1
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 fb09 	bl	8009912 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009300:	2300      	movs	r3, #0

}
 8009302:	4618      	mov	r0, r3
 8009304:	3710      	adds	r7, #16
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}

0800930a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800930a:	b580      	push	{r7, lr}
 800930c:	b088      	sub	sp, #32
 800930e:	af04      	add	r7, sp, #16
 8009310:	60f8      	str	r0, [r7, #12]
 8009312:	60b9      	str	r1, [r7, #8]
 8009314:	4611      	mov	r1, r2
 8009316:	461a      	mov	r2, r3
 8009318:	460b      	mov	r3, r1
 800931a:	80fb      	strh	r3, [r7, #6]
 800931c:	4613      	mov	r3, r2
 800931e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800932e:	7979      	ldrb	r1, [r7, #5]
 8009330:	7e3b      	ldrb	r3, [r7, #24]
 8009332:	9303      	str	r3, [sp, #12]
 8009334:	88fb      	ldrh	r3, [r7, #6]
 8009336:	9302      	str	r3, [sp, #8]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	2301      	movs	r3, #1
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	2302      	movs	r3, #2
 8009342:	2200      	movs	r2, #0
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f000 fae4 	bl	8009912 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b088      	sub	sp, #32
 8009358:	af04      	add	r7, sp, #16
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4611      	mov	r1, r2
 8009360:	461a      	mov	r2, r3
 8009362:	460b      	mov	r3, r1
 8009364:	80fb      	strh	r3, [r7, #6]
 8009366:	4613      	mov	r3, r2
 8009368:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800936a:	7979      	ldrb	r1, [r7, #5]
 800936c:	2300      	movs	r3, #0
 800936e:	9303      	str	r3, [sp, #12]
 8009370:	88fb      	ldrh	r3, [r7, #6]
 8009372:	9302      	str	r3, [sp, #8]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	2301      	movs	r3, #1
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2302      	movs	r3, #2
 800937e:	2201      	movs	r2, #1
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fac6 	bl	8009912 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3710      	adds	r7, #16
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af04      	add	r7, sp, #16
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	4608      	mov	r0, r1
 800939a:	4611      	mov	r1, r2
 800939c:	461a      	mov	r2, r3
 800939e:	4603      	mov	r3, r0
 80093a0:	70fb      	strb	r3, [r7, #3]
 80093a2:	460b      	mov	r3, r1
 80093a4:	70bb      	strb	r3, [r7, #2]
 80093a6:	4613      	mov	r3, r2
 80093a8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80093aa:	7878      	ldrb	r0, [r7, #1]
 80093ac:	78ba      	ldrb	r2, [r7, #2]
 80093ae:	78f9      	ldrb	r1, [r7, #3]
 80093b0:	8b3b      	ldrh	r3, [r7, #24]
 80093b2:	9302      	str	r3, [sp, #8]
 80093b4:	7d3b      	ldrb	r3, [r7, #20]
 80093b6:	9301      	str	r3, [sp, #4]
 80093b8:	7c3b      	ldrb	r3, [r7, #16]
 80093ba:	9300      	str	r3, [sp, #0]
 80093bc:	4603      	mov	r3, r0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa59 	bl	8009876 <USBH_LL_OpenPipe>

  return USBH_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3708      	adds	r7, #8
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	460b      	mov	r3, r1
 80093d8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa78 	bl	80098d4 <USBH_LL_ClosePipe>

  return USBH_OK;
 80093e4:	2300      	movs	r3, #0
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	460b      	mov	r3, r1
 80093f8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f836 	bl	800946c <USBH_GetFreePipe>
 8009400:	4603      	mov	r3, r0
 8009402:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009404:	89fb      	ldrh	r3, [r7, #14]
 8009406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800940a:	4293      	cmp	r3, r2
 800940c:	d00a      	beq.n	8009424 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800940e:	78fa      	ldrb	r2, [r7, #3]
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	33e0      	adds	r3, #224	; 0xe0
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009424:	89fb      	ldrh	r3, [r7, #14]
 8009426:	b2db      	uxtb	r3, r3
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	460b      	mov	r3, r1
 800943a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800943c:	78fb      	ldrb	r3, [r7, #3]
 800943e:	2b0f      	cmp	r3, #15
 8009440:	d80d      	bhi.n	800945e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009442:	78fb      	ldrb	r3, [r7, #3]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	33e0      	adds	r3, #224	; 0xe0
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4413      	add	r3, r2
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	33e0      	adds	r3, #224	; 0xe0
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
 800947c:	e00f      	b.n	800949e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	33e0      	adds	r3, #224	; 0xe0
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d102      	bne.n	8009498 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	b29b      	uxth	r3, r3
 8009496:	e007      	b.n	80094a8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	3301      	adds	r3, #1
 800949c:	73fb      	strb	r3, [r7, #15]
 800949e:	7bfb      	ldrb	r3, [r7, #15]
 80094a0:	2b0f      	cmp	r3, #15
 80094a2:	d9ec      	bls.n	800947e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80094a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3714      	adds	r7, #20
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 80094b8:	2200      	movs	r2, #0
 80094ba:	490e      	ldr	r1, [pc, #56]	; (80094f4 <MX_USB_HOST_Init+0x40>)
 80094bc:	480e      	ldr	r0, [pc, #56]	; (80094f8 <MX_USB_HOST_Init+0x44>)
 80094be:	f7fe fba7 	bl	8007c10 <USBH_Init>
 80094c2:	4603      	mov	r3, r0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80094c8:	f7f7 fc20 	bl	8000d0c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 80094cc:	490b      	ldr	r1, [pc, #44]	; (80094fc <MX_USB_HOST_Init+0x48>)
 80094ce:	480a      	ldr	r0, [pc, #40]	; (80094f8 <MX_USB_HOST_Init+0x44>)
 80094d0:	f7fe fc2c 	bl	8007d2c <USBH_RegisterClass>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d001      	beq.n	80094de <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80094da:	f7f7 fc17 	bl	8000d0c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80094de:	4806      	ldr	r0, [pc, #24]	; (80094f8 <MX_USB_HOST_Init+0x44>)
 80094e0:	f7fe fcb0 	bl	8007e44 <USBH_Start>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80094ea:	f7f7 fc0f 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	08009515 	.word	0x08009515
 80094f8:	200003a0 	.word	0x200003a0
 80094fc:	2000000c 	.word	0x2000000c

08009500 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009504:	4802      	ldr	r0, [pc, #8]	; (8009510 <MX_USB_HOST_Process+0x10>)
 8009506:	f7fe fcad 	bl	8007e64 <USBH_Process>
}
 800950a:	bf00      	nop
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	200003a0 	.word	0x200003a0

08009514 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	3b01      	subs	r3, #1
 8009524:	2b04      	cmp	r3, #4
 8009526:	d819      	bhi.n	800955c <USBH_UserProcess+0x48>
 8009528:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <USBH_UserProcess+0x1c>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	0800955d 	.word	0x0800955d
 8009534:	0800954d 	.word	0x0800954d
 8009538:	0800955d 	.word	0x0800955d
 800953c:	08009555 	.word	0x08009555
 8009540:	08009545 	.word	0x08009545
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009544:	4b09      	ldr	r3, [pc, #36]	; (800956c <USBH_UserProcess+0x58>)
 8009546:	2203      	movs	r2, #3
 8009548:	701a      	strb	r2, [r3, #0]
  break;
 800954a:	e008      	b.n	800955e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <USBH_UserProcess+0x58>)
 800954e:	2202      	movs	r2, #2
 8009550:	701a      	strb	r2, [r3, #0]
  break;
 8009552:	e004      	b.n	800955e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <USBH_UserProcess+0x58>)
 8009556:	2201      	movs	r2, #1
 8009558:	701a      	strb	r2, [r3, #0]
  break;
 800955a:	e000      	b.n	800955e <USBH_UserProcess+0x4a>

  default:
  break;
 800955c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	20000778 	.word	0x20000778

08009570 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009578:	f107 0314 	add.w	r3, r7, #20
 800957c:	2200      	movs	r2, #0
 800957e:	601a      	str	r2, [r3, #0]
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	609a      	str	r2, [r3, #8]
 8009584:	60da      	str	r2, [r3, #12]
 8009586:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a24      	ldr	r2, [pc, #144]	; (8009620 <HAL_HCD_MspInit+0xb0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d141      	bne.n	8009616 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009592:	2300      	movs	r3, #0
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	4b23      	ldr	r3, [pc, #140]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800959a:	4a22      	ldr	r2, [pc, #136]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 800959c:	f043 0302 	orr.w	r3, r3, #2
 80095a0:	6313      	str	r3, [r2, #48]	; 0x30
 80095a2:	4b20      	ldr	r3, [pc, #128]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	613b      	str	r3, [r7, #16]
 80095ac:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80095ae:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80095b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095b4:	2302      	movs	r3, #2
 80095b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095bc:	2300      	movs	r3, #0
 80095be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80095c0:	230c      	movs	r3, #12
 80095c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095c4:	f107 0314 	add.w	r3, r7, #20
 80095c8:	4619      	mov	r1, r3
 80095ca:	4817      	ldr	r0, [pc, #92]	; (8009628 <HAL_HCD_MspInit+0xb8>)
 80095cc:	f7f8 fc56 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80095d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095d6:	2300      	movs	r3, #0
 80095d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80095de:	f107 0314 	add.w	r3, r7, #20
 80095e2:	4619      	mov	r1, r3
 80095e4:	4810      	ldr	r0, [pc, #64]	; (8009628 <HAL_HCD_MspInit+0xb8>)
 80095e6:	f7f8 fc49 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	4b0d      	ldr	r3, [pc, #52]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	4a0c      	ldr	r2, [pc, #48]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 80095f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095f8:	6313      	str	r3, [r2, #48]	; 0x30
 80095fa:	4b0a      	ldr	r3, [pc, #40]	; (8009624 <HAL_HCD_MspInit+0xb4>)
 80095fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009606:	2200      	movs	r2, #0
 8009608:	2100      	movs	r1, #0
 800960a:	204d      	movs	r0, #77	; 0x4d
 800960c:	f7f8 fa04 	bl	8001a18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009610:	204d      	movs	r0, #77	; 0x4d
 8009612:	f7f8 fa1d 	bl	8001a50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009616:	bf00      	nop
 8009618:	3728      	adds	r7, #40	; 0x28
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	40040000 	.word	0x40040000
 8009624:	40023800 	.word	0x40023800
 8009628:	40020400 	.word	0x40020400

0800962c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fff1 	bl	8008622 <USBH_LL_IncTimer>
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff f829 	bl	80086ae <USBH_LL_Connect>
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff f832 	bl	80086dc <USBH_LL_Disconnect>
}
 8009678:	bf00      	nop
 800967a:	3708      	adds	r7, #8
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
 800968c:	4613      	mov	r3, r2
 800968e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fe ffe3 	bl	8008676 <USBH_LL_PortEnabled>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe ffe3 	bl	8008692 <USBH_LL_PortDisabled>
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d132      	bne.n	800974c <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80096e6:	4a1c      	ldr	r2, [pc, #112]	; (8009758 <USBH_LL_Init+0x84>)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a19      	ldr	r2, [pc, #100]	; (8009758 <USBH_LL_Init+0x84>)
 80096f2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80096f6:	4b18      	ldr	r3, [pc, #96]	; (8009758 <USBH_LL_Init+0x84>)
 80096f8:	4a18      	ldr	r2, [pc, #96]	; (800975c <USBH_LL_Init+0x88>)
 80096fa:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80096fc:	4b16      	ldr	r3, [pc, #88]	; (8009758 <USBH_LL_Init+0x84>)
 80096fe:	220c      	movs	r2, #12
 8009700:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8009702:	4b15      	ldr	r3, [pc, #84]	; (8009758 <USBH_LL_Init+0x84>)
 8009704:	2201      	movs	r2, #1
 8009706:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009708:	4b13      	ldr	r3, [pc, #76]	; (8009758 <USBH_LL_Init+0x84>)
 800970a:	2200      	movs	r2, #0
 800970c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800970e:	4b12      	ldr	r3, [pc, #72]	; (8009758 <USBH_LL_Init+0x84>)
 8009710:	2202      	movs	r2, #2
 8009712:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009714:	4b10      	ldr	r3, [pc, #64]	; (8009758 <USBH_LL_Init+0x84>)
 8009716:	2200      	movs	r2, #0
 8009718:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <USBH_LL_Init+0x84>)
 800971c:	2200      	movs	r2, #0
 800971e:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009720:	4b0d      	ldr	r3, [pc, #52]	; (8009758 <USBH_LL_Init+0x84>)
 8009722:	2200      	movs	r2, #0
 8009724:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009726:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <USBH_LL_Init+0x84>)
 8009728:	2200      	movs	r2, #0
 800972a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800972c:	480a      	ldr	r0, [pc, #40]	; (8009758 <USBH_LL_Init+0x84>)
 800972e:	f7f8 fd6a 	bl	8002206 <HAL_HCD_Init>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009738:	f7f7 fae8 	bl	8000d0c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800973c:	4806      	ldr	r0, [pc, #24]	; (8009758 <USBH_LL_Init+0x84>)
 800973e:	f7f9 f94e 	bl	80029de <HAL_HCD_GetCurrentFrame>
 8009742:	4603      	mov	r3, r0
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f7fe ff5c 	bl	8008604 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3708      	adds	r7, #8
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	2000077c 	.word	0x2000077c
 800975c:	40040000 	.word	0x40040000

08009760 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b084      	sub	sp, #16
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009776:	4618      	mov	r0, r3
 8009778:	f7f9 f8bb 	bl	80028f2 <HAL_HCD_Start>
 800977c:	4603      	mov	r3, r0
 800977e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f95c 	bl	8009a40 <USBH_Get_USB_Status>
 8009788:	4603      	mov	r3, r0
 800978a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978c:	7bbb      	ldrb	r3, [r7, #14]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7f9 f8c3 	bl	8002938 <HAL_HCD_Stop>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f941 	bl	8009a40 <USBH_Get_USB_Status>
 80097be:	4603      	mov	r3, r0
 80097c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80097d4:	2301      	movs	r3, #1
 80097d6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097de:	4618      	mov	r0, r3
 80097e0:	f7f9 f90b 	bl	80029fa <HAL_HCD_GetCurrentSpeed>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d00c      	beq.n	8009804 <USBH_LL_GetSpeed+0x38>
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d80d      	bhi.n	800980a <USBH_LL_GetSpeed+0x3e>
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <USBH_LL_GetSpeed+0x2c>
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d003      	beq.n	80097fe <USBH_LL_GetSpeed+0x32>
 80097f6:	e008      	b.n	800980a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80097f8:	2300      	movs	r3, #0
 80097fa:	73fb      	strb	r3, [r7, #15]
    break;
 80097fc:	e008      	b.n	8009810 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80097fe:	2301      	movs	r3, #1
 8009800:	73fb      	strb	r3, [r7, #15]
    break;
 8009802:	e005      	b.n	8009810 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009804:	2302      	movs	r3, #2
 8009806:	73fb      	strb	r3, [r7, #15]
    break;
 8009808:	e002      	b.n	8009810 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800980a:	2301      	movs	r3, #1
 800980c:	73fb      	strb	r3, [r7, #15]
    break;
 800980e:	bf00      	nop
  }
  return  speed;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b084      	sub	sp, #16
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009826:	2300      	movs	r3, #0
 8009828:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009830:	4618      	mov	r0, r3
 8009832:	f7f9 f89e 	bl	8002972 <HAL_HCD_ResetPort>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	4618      	mov	r0, r3
 800983e:	f000 f8ff 	bl	8009a40 <USBH_Get_USB_Status>
 8009842:	4603      	mov	r3, r0
 8009844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009846:	7bbb      	ldrb	r3, [r7, #14]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3710      	adds	r7, #16
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f7f9 f8a5 	bl	80029b6 <HAL_HCD_HC_GetXferCount>
 800986c:	4603      	mov	r3, r0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009876:	b590      	push	{r4, r7, lr}
 8009878:	b089      	sub	sp, #36	; 0x24
 800987a:	af04      	add	r7, sp, #16
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	4608      	mov	r0, r1
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	4603      	mov	r3, r0
 8009886:	70fb      	strb	r3, [r7, #3]
 8009888:	460b      	mov	r3, r1
 800988a:	70bb      	strb	r3, [r7, #2]
 800988c:	4613      	mov	r3, r2
 800988e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800989e:	787c      	ldrb	r4, [r7, #1]
 80098a0:	78ba      	ldrb	r2, [r7, #2]
 80098a2:	78f9      	ldrb	r1, [r7, #3]
 80098a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4623      	mov	r3, r4
 80098b6:	f7f8 fd08 	bl	80022ca <HAL_HCD_HC_Init>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f8bd 	bl	8009a40 <USBH_Get_USB_Status>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd90      	pop	{r4, r7, pc}

080098d4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f8 fd78 	bl	80023e8 <HAL_HCD_HC_Halt>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f89e 	bl	8009a40 <USBH_Get_USB_Status>
 8009904:	4603      	mov	r3, r0
 8009906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009908:	7bbb      	ldrb	r3, [r7, #14]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009912:	b590      	push	{r4, r7, lr}
 8009914:	b089      	sub	sp, #36	; 0x24
 8009916:	af04      	add	r7, sp, #16
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	461a      	mov	r2, r3
 8009920:	4603      	mov	r3, r0
 8009922:	70fb      	strb	r3, [r7, #3]
 8009924:	460b      	mov	r3, r1
 8009926:	70bb      	strb	r3, [r7, #2]
 8009928:	4613      	mov	r3, r2
 800992a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800992c:	2300      	movs	r3, #0
 800992e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800993a:	787c      	ldrb	r4, [r7, #1]
 800993c:	78ba      	ldrb	r2, [r7, #2]
 800993e:	78f9      	ldrb	r1, [r7, #3]
 8009940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009944:	9303      	str	r3, [sp, #12]
 8009946:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009952:	9300      	str	r3, [sp, #0]
 8009954:	4623      	mov	r3, r4
 8009956:	f7f8 fd6b 	bl	8002430 <HAL_HCD_HC_SubmitRequest>
 800995a:	4603      	mov	r3, r0
 800995c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 f86d 	bl	8009a40 <USBH_Get_USB_Status>
 8009966:	4603      	mov	r3, r0
 8009968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800996a:	7bbb      	ldrb	r3, [r7, #14]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	bd90      	pop	{r4, r7, pc}

08009974 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f7f8 ffff 	bl	800298e <HAL_HCD_HC_GetURBState>
 8009990:	4603      	mov	r3, r0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}

0800999a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800999a:	b580      	push	{r7, lr}
 800999c:	b082      	sub	sp, #8
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
 80099a2:	460b      	mov	r3, r1
 80099a4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d103      	bne.n	80099b8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f870 	bl	8009a98 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80099b8:	20c8      	movs	r0, #200	; 0xc8
 80099ba:	f7f7 ff51 	bl	8001860 <HAL_Delay>
  return USBH_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70fb      	strb	r3, [r7, #3]
 80099d4:	4613      	mov	r3, r2
 80099d6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099de:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	68fa      	ldr	r2, [r7, #12]
 80099e4:	212c      	movs	r1, #44	; 0x2c
 80099e6:	fb01 f303 	mul.w	r3, r1, r3
 80099ea:	4413      	add	r3, r2
 80099ec:	333b      	adds	r3, #59	; 0x3b
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d009      	beq.n	8009a08 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	68fa      	ldr	r2, [r7, #12]
 80099f8:	212c      	movs	r1, #44	; 0x2c
 80099fa:	fb01 f303 	mul.w	r3, r1, r3
 80099fe:	4413      	add	r3, r2
 8009a00:	3354      	adds	r3, #84	; 0x54
 8009a02:	78ba      	ldrb	r2, [r7, #2]
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	e008      	b.n	8009a1a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	212c      	movs	r1, #44	; 0x2c
 8009a0e:	fb01 f303 	mul.w	r3, r1, r3
 8009a12:	4413      	add	r3, r2
 8009a14:	3355      	adds	r3, #85	; 0x55
 8009a16:	78ba      	ldrb	r2, [r7, #2]
 8009a18:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7f7 ff15 	bl	8001860 <HAL_Delay>
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
	...

08009a40 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	2b03      	cmp	r3, #3
 8009a52:	d817      	bhi.n	8009a84 <USBH_Get_USB_Status+0x44>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <USBH_Get_USB_Status+0x1c>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a6d 	.word	0x08009a6d
 8009a60:	08009a73 	.word	0x08009a73
 8009a64:	08009a79 	.word	0x08009a79
 8009a68:	08009a7f 	.word	0x08009a7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a70:	e00b      	b.n	8009a8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a72:	2302      	movs	r3, #2
 8009a74:	73fb      	strb	r3, [r7, #15]
    break;
 8009a76:	e008      	b.n	8009a8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7c:	e005      	b.n	8009a8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	73fb      	strb	r3, [r7, #15]
    break;
 8009a82:	e002      	b.n	8009a8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a84:	2302      	movs	r3, #2
 8009a86:	73fb      	strb	r3, [r7, #15]
    break;
 8009a88:	bf00      	nop
  }
  return usb_status;
 8009a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d102      	bne.n	8009ab2 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
 8009ab0:	e001      	b.n	8009ab6 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	2110      	movs	r1, #16
 8009abc:	4803      	ldr	r0, [pc, #12]	; (8009acc <MX_DriverVbusHS+0x34>)
 8009abe:	f7f8 fb89 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	40020800 	.word	0x40020800

08009ad0 <__errno>:
 8009ad0:	4b01      	ldr	r3, [pc, #4]	; (8009ad8 <__errno+0x8>)
 8009ad2:	6818      	ldr	r0, [r3, #0]
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	2000002c 	.word	0x2000002c

08009adc <__libc_init_array>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	4d0d      	ldr	r5, [pc, #52]	; (8009b14 <__libc_init_array+0x38>)
 8009ae0:	4c0d      	ldr	r4, [pc, #52]	; (8009b18 <__libc_init_array+0x3c>)
 8009ae2:	1b64      	subs	r4, r4, r5
 8009ae4:	10a4      	asrs	r4, r4, #2
 8009ae6:	2600      	movs	r6, #0
 8009ae8:	42a6      	cmp	r6, r4
 8009aea:	d109      	bne.n	8009b00 <__libc_init_array+0x24>
 8009aec:	4d0b      	ldr	r5, [pc, #44]	; (8009b1c <__libc_init_array+0x40>)
 8009aee:	4c0c      	ldr	r4, [pc, #48]	; (8009b20 <__libc_init_array+0x44>)
 8009af0:	f000 fd2e 	bl	800a550 <_init>
 8009af4:	1b64      	subs	r4, r4, r5
 8009af6:	10a4      	asrs	r4, r4, #2
 8009af8:	2600      	movs	r6, #0
 8009afa:	42a6      	cmp	r6, r4
 8009afc:	d105      	bne.n	8009b0a <__libc_init_array+0x2e>
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b04:	4798      	blx	r3
 8009b06:	3601      	adds	r6, #1
 8009b08:	e7ee      	b.n	8009ae8 <__libc_init_array+0xc>
 8009b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b0e:	4798      	blx	r3
 8009b10:	3601      	adds	r6, #1
 8009b12:	e7f2      	b.n	8009afa <__libc_init_array+0x1e>
 8009b14:	0800a610 	.word	0x0800a610
 8009b18:	0800a610 	.word	0x0800a610
 8009b1c:	0800a610 	.word	0x0800a610
 8009b20:	0800a614 	.word	0x0800a614

08009b24 <malloc>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <malloc+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f000 b87f 	b.w	8009c2c <_malloc_r>
 8009b2e:	bf00      	nop
 8009b30:	2000002c 	.word	0x2000002c

08009b34 <free>:
 8009b34:	4b02      	ldr	r3, [pc, #8]	; (8009b40 <free+0xc>)
 8009b36:	4601      	mov	r1, r0
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f000 b80b 	b.w	8009b54 <_free_r>
 8009b3e:	bf00      	nop
 8009b40:	2000002c 	.word	0x2000002c

08009b44 <memset>:
 8009b44:	4402      	add	r2, r0
 8009b46:	4603      	mov	r3, r0
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d100      	bne.n	8009b4e <memset+0xa>
 8009b4c:	4770      	bx	lr
 8009b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b52:	e7f9      	b.n	8009b48 <memset+0x4>

08009b54 <_free_r>:
 8009b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b56:	2900      	cmp	r1, #0
 8009b58:	d044      	beq.n	8009be4 <_free_r+0x90>
 8009b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b5e:	9001      	str	r0, [sp, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f1a1 0404 	sub.w	r4, r1, #4
 8009b66:	bfb8      	it	lt
 8009b68:	18e4      	addlt	r4, r4, r3
 8009b6a:	f000 fc39 	bl	800a3e0 <__malloc_lock>
 8009b6e:	4a1e      	ldr	r2, [pc, #120]	; (8009be8 <_free_r+0x94>)
 8009b70:	9801      	ldr	r0, [sp, #4]
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	b933      	cbnz	r3, 8009b84 <_free_r+0x30>
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6014      	str	r4, [r2, #0]
 8009b7a:	b003      	add	sp, #12
 8009b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b80:	f000 bc34 	b.w	800a3ec <__malloc_unlock>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d908      	bls.n	8009b9a <_free_r+0x46>
 8009b88:	6825      	ldr	r5, [r4, #0]
 8009b8a:	1961      	adds	r1, r4, r5
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf01      	itttt	eq
 8009b90:	6819      	ldreq	r1, [r3, #0]
 8009b92:	685b      	ldreq	r3, [r3, #4]
 8009b94:	1949      	addeq	r1, r1, r5
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	e7ed      	b.n	8009b76 <_free_r+0x22>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_free_r+0x50>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d9fa      	bls.n	8009b9a <_free_r+0x46>
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	1855      	adds	r5, r2, r1
 8009ba8:	42a5      	cmp	r5, r4
 8009baa:	d10b      	bne.n	8009bc4 <_free_r+0x70>
 8009bac:	6824      	ldr	r4, [r4, #0]
 8009bae:	4421      	add	r1, r4
 8009bb0:	1854      	adds	r4, r2, r1
 8009bb2:	42a3      	cmp	r3, r4
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	d1e0      	bne.n	8009b7a <_free_r+0x26>
 8009bb8:	681c      	ldr	r4, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	6053      	str	r3, [r2, #4]
 8009bbe:	4421      	add	r1, r4
 8009bc0:	6011      	str	r1, [r2, #0]
 8009bc2:	e7da      	b.n	8009b7a <_free_r+0x26>
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x78>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	6003      	str	r3, [r0, #0]
 8009bca:	e7d6      	b.n	8009b7a <_free_r+0x26>
 8009bcc:	6825      	ldr	r5, [r4, #0]
 8009bce:	1961      	adds	r1, r4, r5
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf04      	itt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	bf04      	itt	eq
 8009bdc:	1949      	addeq	r1, r1, r5
 8009bde:	6021      	streq	r1, [r4, #0]
 8009be0:	6054      	str	r4, [r2, #4]
 8009be2:	e7ca      	b.n	8009b7a <_free_r+0x26>
 8009be4:	b003      	add	sp, #12
 8009be6:	bd30      	pop	{r4, r5, pc}
 8009be8:	20000a80 	.word	0x20000a80

08009bec <sbrk_aligned>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	4e0e      	ldr	r6, [pc, #56]	; (8009c28 <sbrk_aligned+0x3c>)
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6831      	ldr	r1, [r6, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b911      	cbnz	r1, 8009bfe <sbrk_aligned+0x12>
 8009bf8:	f000 f902 	bl	8009e00 <_sbrk_r>
 8009bfc:	6030      	str	r0, [r6, #0]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 f8fd 	bl	8009e00 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d00a      	beq.n	8009c20 <sbrk_aligned+0x34>
 8009c0a:	1cc4      	adds	r4, r0, #3
 8009c0c:	f024 0403 	bic.w	r4, r4, #3
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d007      	beq.n	8009c24 <sbrk_aligned+0x38>
 8009c14:	1a21      	subs	r1, r4, r0
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 f8f2 	bl	8009e00 <_sbrk_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d101      	bne.n	8009c24 <sbrk_aligned+0x38>
 8009c20:	f04f 34ff 	mov.w	r4, #4294967295
 8009c24:	4620      	mov	r0, r4
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	20000a84 	.word	0x20000a84

08009c2c <_malloc_r>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	1ccd      	adds	r5, r1, #3
 8009c32:	f025 0503 	bic.w	r5, r5, #3
 8009c36:	3508      	adds	r5, #8
 8009c38:	2d0c      	cmp	r5, #12
 8009c3a:	bf38      	it	cc
 8009c3c:	250c      	movcc	r5, #12
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	4607      	mov	r7, r0
 8009c42:	db01      	blt.n	8009c48 <_malloc_r+0x1c>
 8009c44:	42a9      	cmp	r1, r5
 8009c46:	d905      	bls.n	8009c54 <_malloc_r+0x28>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	4630      	mov	r0, r6
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	4e2e      	ldr	r6, [pc, #184]	; (8009d10 <_malloc_r+0xe4>)
 8009c56:	f000 fbc3 	bl	800a3e0 <__malloc_lock>
 8009c5a:	6833      	ldr	r3, [r6, #0]
 8009c5c:	461c      	mov	r4, r3
 8009c5e:	bb34      	cbnz	r4, 8009cae <_malloc_r+0x82>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7ff ffc2 	bl	8009bec <sbrk_aligned>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	d14d      	bne.n	8009d0a <_malloc_r+0xde>
 8009c6e:	6834      	ldr	r4, [r6, #0]
 8009c70:	4626      	mov	r6, r4
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d140      	bne.n	8009cf8 <_malloc_r+0xcc>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	eb04 0803 	add.w	r8, r4, r3
 8009c80:	f000 f8be 	bl	8009e00 <_sbrk_r>
 8009c84:	4580      	cmp	r8, r0
 8009c86:	d13a      	bne.n	8009cfe <_malloc_r+0xd2>
 8009c88:	6821      	ldr	r1, [r4, #0]
 8009c8a:	3503      	adds	r5, #3
 8009c8c:	1a6d      	subs	r5, r5, r1
 8009c8e:	f025 0503 	bic.w	r5, r5, #3
 8009c92:	3508      	adds	r5, #8
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	bf38      	it	cc
 8009c98:	250c      	movcc	r5, #12
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa5 	bl	8009bec <sbrk_aligned>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d02b      	beq.n	8009cfe <_malloc_r+0xd2>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	442b      	add	r3, r5
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	e00e      	b.n	8009ccc <_malloc_r+0xa0>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	1b52      	subs	r2, r2, r5
 8009cb2:	d41e      	bmi.n	8009cf2 <_malloc_r+0xc6>
 8009cb4:	2a0b      	cmp	r2, #11
 8009cb6:	d916      	bls.n	8009ce6 <_malloc_r+0xba>
 8009cb8:	1961      	adds	r1, r4, r5
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	6025      	str	r5, [r4, #0]
 8009cbe:	bf18      	it	ne
 8009cc0:	6059      	strne	r1, [r3, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	bf08      	it	eq
 8009cc6:	6031      	streq	r1, [r6, #0]
 8009cc8:	5162      	str	r2, [r4, r5]
 8009cca:	604b      	str	r3, [r1, #4]
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f104 060b 	add.w	r6, r4, #11
 8009cd2:	f000 fb8b 	bl	800a3ec <__malloc_unlock>
 8009cd6:	f026 0607 	bic.w	r6, r6, #7
 8009cda:	1d23      	adds	r3, r4, #4
 8009cdc:	1af2      	subs	r2, r6, r3
 8009cde:	d0b6      	beq.n	8009c4e <_malloc_r+0x22>
 8009ce0:	1b9b      	subs	r3, r3, r6
 8009ce2:	50a3      	str	r3, [r4, r2]
 8009ce4:	e7b3      	b.n	8009c4e <_malloc_r+0x22>
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	bf0c      	ite	eq
 8009cec:	6032      	streq	r2, [r6, #0]
 8009cee:	605a      	strne	r2, [r3, #4]
 8009cf0:	e7ec      	b.n	8009ccc <_malloc_r+0xa0>
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	6864      	ldr	r4, [r4, #4]
 8009cf6:	e7b2      	b.n	8009c5e <_malloc_r+0x32>
 8009cf8:	4634      	mov	r4, r6
 8009cfa:	6876      	ldr	r6, [r6, #4]
 8009cfc:	e7b9      	b.n	8009c72 <_malloc_r+0x46>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4638      	mov	r0, r7
 8009d04:	f000 fb72 	bl	800a3ec <__malloc_unlock>
 8009d08:	e7a1      	b.n	8009c4e <_malloc_r+0x22>
 8009d0a:	6025      	str	r5, [r4, #0]
 8009d0c:	e7de      	b.n	8009ccc <_malloc_r+0xa0>
 8009d0e:	bf00      	nop
 8009d10:	20000a80 	.word	0x20000a80

08009d14 <_puts_r>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	460e      	mov	r6, r1
 8009d18:	4605      	mov	r5, r0
 8009d1a:	b118      	cbz	r0, 8009d24 <_puts_r+0x10>
 8009d1c:	6983      	ldr	r3, [r0, #24]
 8009d1e:	b90b      	cbnz	r3, 8009d24 <_puts_r+0x10>
 8009d20:	f000 fa58 	bl	800a1d4 <__sinit>
 8009d24:	69ab      	ldr	r3, [r5, #24]
 8009d26:	68ac      	ldr	r4, [r5, #8]
 8009d28:	b913      	cbnz	r3, 8009d30 <_puts_r+0x1c>
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	f000 fa52 	bl	800a1d4 <__sinit>
 8009d30:	4b2c      	ldr	r3, [pc, #176]	; (8009de4 <_puts_r+0xd0>)
 8009d32:	429c      	cmp	r4, r3
 8009d34:	d120      	bne.n	8009d78 <_puts_r+0x64>
 8009d36:	686c      	ldr	r4, [r5, #4]
 8009d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d3a:	07db      	lsls	r3, r3, #31
 8009d3c:	d405      	bmi.n	8009d4a <_puts_r+0x36>
 8009d3e:	89a3      	ldrh	r3, [r4, #12]
 8009d40:	0598      	lsls	r0, r3, #22
 8009d42:	d402      	bmi.n	8009d4a <_puts_r+0x36>
 8009d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d46:	f000 fae3 	bl	800a310 <__retarget_lock_acquire_recursive>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	0719      	lsls	r1, r3, #28
 8009d4e:	d51d      	bpl.n	8009d8c <_puts_r+0x78>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	b1db      	cbz	r3, 8009d8c <_puts_r+0x78>
 8009d54:	3e01      	subs	r6, #1
 8009d56:	68a3      	ldr	r3, [r4, #8]
 8009d58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	60a3      	str	r3, [r4, #8]
 8009d60:	bb39      	cbnz	r1, 8009db2 <_puts_r+0x9e>
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da38      	bge.n	8009dd8 <_puts_r+0xc4>
 8009d66:	4622      	mov	r2, r4
 8009d68:	210a      	movs	r1, #10
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	f000 f858 	bl	8009e20 <__swbuf_r>
 8009d70:	3001      	adds	r0, #1
 8009d72:	d011      	beq.n	8009d98 <_puts_r+0x84>
 8009d74:	250a      	movs	r5, #10
 8009d76:	e011      	b.n	8009d9c <_puts_r+0x88>
 8009d78:	4b1b      	ldr	r3, [pc, #108]	; (8009de8 <_puts_r+0xd4>)
 8009d7a:	429c      	cmp	r4, r3
 8009d7c:	d101      	bne.n	8009d82 <_puts_r+0x6e>
 8009d7e:	68ac      	ldr	r4, [r5, #8]
 8009d80:	e7da      	b.n	8009d38 <_puts_r+0x24>
 8009d82:	4b1a      	ldr	r3, [pc, #104]	; (8009dec <_puts_r+0xd8>)
 8009d84:	429c      	cmp	r4, r3
 8009d86:	bf08      	it	eq
 8009d88:	68ec      	ldreq	r4, [r5, #12]
 8009d8a:	e7d5      	b.n	8009d38 <_puts_r+0x24>
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f000 f898 	bl	8009ec4 <__swsetup_r>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d0dd      	beq.n	8009d54 <_puts_r+0x40>
 8009d98:	f04f 35ff 	mov.w	r5, #4294967295
 8009d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d9e:	07da      	lsls	r2, r3, #31
 8009da0:	d405      	bmi.n	8009dae <_puts_r+0x9a>
 8009da2:	89a3      	ldrh	r3, [r4, #12]
 8009da4:	059b      	lsls	r3, r3, #22
 8009da6:	d402      	bmi.n	8009dae <_puts_r+0x9a>
 8009da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009daa:	f000 fab2 	bl	800a312 <__retarget_lock_release_recursive>
 8009dae:	4628      	mov	r0, r5
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	da04      	bge.n	8009dc0 <_puts_r+0xac>
 8009db6:	69a2      	ldr	r2, [r4, #24]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	dc06      	bgt.n	8009dca <_puts_r+0xb6>
 8009dbc:	290a      	cmp	r1, #10
 8009dbe:	d004      	beq.n	8009dca <_puts_r+0xb6>
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	6022      	str	r2, [r4, #0]
 8009dc6:	7019      	strb	r1, [r3, #0]
 8009dc8:	e7c5      	b.n	8009d56 <_puts_r+0x42>
 8009dca:	4622      	mov	r2, r4
 8009dcc:	4628      	mov	r0, r5
 8009dce:	f000 f827 	bl	8009e20 <__swbuf_r>
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d1bf      	bne.n	8009d56 <_puts_r+0x42>
 8009dd6:	e7df      	b.n	8009d98 <_puts_r+0x84>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	250a      	movs	r5, #10
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	6022      	str	r2, [r4, #0]
 8009de0:	701d      	strb	r5, [r3, #0]
 8009de2:	e7db      	b.n	8009d9c <_puts_r+0x88>
 8009de4:	0800a5c8 	.word	0x0800a5c8
 8009de8:	0800a5e8 	.word	0x0800a5e8
 8009dec:	0800a5a8 	.word	0x0800a5a8

08009df0 <puts>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	; (8009dfc <puts+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f7ff bf8d 	b.w	8009d14 <_puts_r>
 8009dfa:	bf00      	nop
 8009dfc:	2000002c 	.word	0x2000002c

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	; (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 fc74 	bl	80016f8 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	20000a8c 	.word	0x20000a8c

08009e20 <__swbuf_r>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	460e      	mov	r6, r1
 8009e24:	4614      	mov	r4, r2
 8009e26:	4605      	mov	r5, r0
 8009e28:	b118      	cbz	r0, 8009e32 <__swbuf_r+0x12>
 8009e2a:	6983      	ldr	r3, [r0, #24]
 8009e2c:	b90b      	cbnz	r3, 8009e32 <__swbuf_r+0x12>
 8009e2e:	f000 f9d1 	bl	800a1d4 <__sinit>
 8009e32:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <__swbuf_r+0x98>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	d12b      	bne.n	8009e90 <__swbuf_r+0x70>
 8009e38:	686c      	ldr	r4, [r5, #4]
 8009e3a:	69a3      	ldr	r3, [r4, #24]
 8009e3c:	60a3      	str	r3, [r4, #8]
 8009e3e:	89a3      	ldrh	r3, [r4, #12]
 8009e40:	071a      	lsls	r2, r3, #28
 8009e42:	d52f      	bpl.n	8009ea4 <__swbuf_r+0x84>
 8009e44:	6923      	ldr	r3, [r4, #16]
 8009e46:	b36b      	cbz	r3, 8009ea4 <__swbuf_r+0x84>
 8009e48:	6923      	ldr	r3, [r4, #16]
 8009e4a:	6820      	ldr	r0, [r4, #0]
 8009e4c:	1ac0      	subs	r0, r0, r3
 8009e4e:	6963      	ldr	r3, [r4, #20]
 8009e50:	b2f6      	uxtb	r6, r6
 8009e52:	4283      	cmp	r3, r0
 8009e54:	4637      	mov	r7, r6
 8009e56:	dc04      	bgt.n	8009e62 <__swbuf_r+0x42>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f000 f926 	bl	800a0ac <_fflush_r>
 8009e60:	bb30      	cbnz	r0, 8009eb0 <__swbuf_r+0x90>
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	3b01      	subs	r3, #1
 8009e66:	60a3      	str	r3, [r4, #8]
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	1c5a      	adds	r2, r3, #1
 8009e6c:	6022      	str	r2, [r4, #0]
 8009e6e:	701e      	strb	r6, [r3, #0]
 8009e70:	6963      	ldr	r3, [r4, #20]
 8009e72:	3001      	adds	r0, #1
 8009e74:	4283      	cmp	r3, r0
 8009e76:	d004      	beq.n	8009e82 <__swbuf_r+0x62>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	07db      	lsls	r3, r3, #31
 8009e7c:	d506      	bpl.n	8009e8c <__swbuf_r+0x6c>
 8009e7e:	2e0a      	cmp	r6, #10
 8009e80:	d104      	bne.n	8009e8c <__swbuf_r+0x6c>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4628      	mov	r0, r5
 8009e86:	f000 f911 	bl	800a0ac <_fflush_r>
 8009e8a:	b988      	cbnz	r0, 8009eb0 <__swbuf_r+0x90>
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e90:	4b0a      	ldr	r3, [pc, #40]	; (8009ebc <__swbuf_r+0x9c>)
 8009e92:	429c      	cmp	r4, r3
 8009e94:	d101      	bne.n	8009e9a <__swbuf_r+0x7a>
 8009e96:	68ac      	ldr	r4, [r5, #8]
 8009e98:	e7cf      	b.n	8009e3a <__swbuf_r+0x1a>
 8009e9a:	4b09      	ldr	r3, [pc, #36]	; (8009ec0 <__swbuf_r+0xa0>)
 8009e9c:	429c      	cmp	r4, r3
 8009e9e:	bf08      	it	eq
 8009ea0:	68ec      	ldreq	r4, [r5, #12]
 8009ea2:	e7ca      	b.n	8009e3a <__swbuf_r+0x1a>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	f000 f80c 	bl	8009ec4 <__swsetup_r>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	d0cb      	beq.n	8009e48 <__swbuf_r+0x28>
 8009eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8009eb4:	e7ea      	b.n	8009e8c <__swbuf_r+0x6c>
 8009eb6:	bf00      	nop
 8009eb8:	0800a5c8 	.word	0x0800a5c8
 8009ebc:	0800a5e8 	.word	0x0800a5e8
 8009ec0:	0800a5a8 	.word	0x0800a5a8

08009ec4 <__swsetup_r>:
 8009ec4:	4b32      	ldr	r3, [pc, #200]	; (8009f90 <__swsetup_r+0xcc>)
 8009ec6:	b570      	push	{r4, r5, r6, lr}
 8009ec8:	681d      	ldr	r5, [r3, #0]
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460c      	mov	r4, r1
 8009ece:	b125      	cbz	r5, 8009eda <__swsetup_r+0x16>
 8009ed0:	69ab      	ldr	r3, [r5, #24]
 8009ed2:	b913      	cbnz	r3, 8009eda <__swsetup_r+0x16>
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	f000 f97d 	bl	800a1d4 <__sinit>
 8009eda:	4b2e      	ldr	r3, [pc, #184]	; (8009f94 <__swsetup_r+0xd0>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	d10f      	bne.n	8009f00 <__swsetup_r+0x3c>
 8009ee0:	686c      	ldr	r4, [r5, #4]
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ee8:	0719      	lsls	r1, r3, #28
 8009eea:	d42c      	bmi.n	8009f46 <__swsetup_r+0x82>
 8009eec:	06dd      	lsls	r5, r3, #27
 8009eee:	d411      	bmi.n	8009f14 <__swsetup_r+0x50>
 8009ef0:	2309      	movs	r3, #9
 8009ef2:	6033      	str	r3, [r6, #0]
 8009ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ef8:	81a3      	strh	r3, [r4, #12]
 8009efa:	f04f 30ff 	mov.w	r0, #4294967295
 8009efe:	e03e      	b.n	8009f7e <__swsetup_r+0xba>
 8009f00:	4b25      	ldr	r3, [pc, #148]	; (8009f98 <__swsetup_r+0xd4>)
 8009f02:	429c      	cmp	r4, r3
 8009f04:	d101      	bne.n	8009f0a <__swsetup_r+0x46>
 8009f06:	68ac      	ldr	r4, [r5, #8]
 8009f08:	e7eb      	b.n	8009ee2 <__swsetup_r+0x1e>
 8009f0a:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <__swsetup_r+0xd8>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	bf08      	it	eq
 8009f10:	68ec      	ldreq	r4, [r5, #12]
 8009f12:	e7e6      	b.n	8009ee2 <__swsetup_r+0x1e>
 8009f14:	0758      	lsls	r0, r3, #29
 8009f16:	d512      	bpl.n	8009f3e <__swsetup_r+0x7a>
 8009f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f1a:	b141      	cbz	r1, 8009f2e <__swsetup_r+0x6a>
 8009f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f20:	4299      	cmp	r1, r3
 8009f22:	d002      	beq.n	8009f2a <__swsetup_r+0x66>
 8009f24:	4630      	mov	r0, r6
 8009f26:	f7ff fe15 	bl	8009b54 <_free_r>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f34:	81a3      	strh	r3, [r4, #12]
 8009f36:	2300      	movs	r3, #0
 8009f38:	6063      	str	r3, [r4, #4]
 8009f3a:	6923      	ldr	r3, [r4, #16]
 8009f3c:	6023      	str	r3, [r4, #0]
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	f043 0308 	orr.w	r3, r3, #8
 8009f44:	81a3      	strh	r3, [r4, #12]
 8009f46:	6923      	ldr	r3, [r4, #16]
 8009f48:	b94b      	cbnz	r3, 8009f5e <__swsetup_r+0x9a>
 8009f4a:	89a3      	ldrh	r3, [r4, #12]
 8009f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f54:	d003      	beq.n	8009f5e <__swsetup_r+0x9a>
 8009f56:	4621      	mov	r1, r4
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 fa01 	bl	800a360 <__smakebuf_r>
 8009f5e:	89a0      	ldrh	r0, [r4, #12]
 8009f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f64:	f010 0301 	ands.w	r3, r0, #1
 8009f68:	d00a      	beq.n	8009f80 <__swsetup_r+0xbc>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60a3      	str	r3, [r4, #8]
 8009f6e:	6963      	ldr	r3, [r4, #20]
 8009f70:	425b      	negs	r3, r3
 8009f72:	61a3      	str	r3, [r4, #24]
 8009f74:	6923      	ldr	r3, [r4, #16]
 8009f76:	b943      	cbnz	r3, 8009f8a <__swsetup_r+0xc6>
 8009f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f7c:	d1ba      	bne.n	8009ef4 <__swsetup_r+0x30>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	0781      	lsls	r1, r0, #30
 8009f82:	bf58      	it	pl
 8009f84:	6963      	ldrpl	r3, [r4, #20]
 8009f86:	60a3      	str	r3, [r4, #8]
 8009f88:	e7f4      	b.n	8009f74 <__swsetup_r+0xb0>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e7f7      	b.n	8009f7e <__swsetup_r+0xba>
 8009f8e:	bf00      	nop
 8009f90:	2000002c 	.word	0x2000002c
 8009f94:	0800a5c8 	.word	0x0800a5c8
 8009f98:	0800a5e8 	.word	0x0800a5e8
 8009f9c:	0800a5a8 	.word	0x0800a5a8

08009fa0 <__sflush_r>:
 8009fa0:	898a      	ldrh	r2, [r1, #12]
 8009fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	0710      	lsls	r0, r2, #28
 8009faa:	460c      	mov	r4, r1
 8009fac:	d458      	bmi.n	800a060 <__sflush_r+0xc0>
 8009fae:	684b      	ldr	r3, [r1, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	dc05      	bgt.n	8009fc0 <__sflush_r+0x20>
 8009fb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	dc02      	bgt.n	8009fc0 <__sflush_r+0x20>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fc2:	2e00      	cmp	r6, #0
 8009fc4:	d0f9      	beq.n	8009fba <__sflush_r+0x1a>
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fcc:	682f      	ldr	r7, [r5, #0]
 8009fce:	602b      	str	r3, [r5, #0]
 8009fd0:	d032      	beq.n	800a038 <__sflush_r+0x98>
 8009fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	075a      	lsls	r2, r3, #29
 8009fd8:	d505      	bpl.n	8009fe6 <__sflush_r+0x46>
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	1ac0      	subs	r0, r0, r3
 8009fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fe0:	b10b      	cbz	r3, 8009fe6 <__sflush_r+0x46>
 8009fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fe4:	1ac0      	subs	r0, r0, r3
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fec:	6a21      	ldr	r1, [r4, #32]
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b0      	blx	r6
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	d106      	bne.n	800a006 <__sflush_r+0x66>
 8009ff8:	6829      	ldr	r1, [r5, #0]
 8009ffa:	291d      	cmp	r1, #29
 8009ffc:	d82c      	bhi.n	800a058 <__sflush_r+0xb8>
 8009ffe:	4a2a      	ldr	r2, [pc, #168]	; (800a0a8 <__sflush_r+0x108>)
 800a000:	40ca      	lsrs	r2, r1
 800a002:	07d6      	lsls	r6, r2, #31
 800a004:	d528      	bpl.n	800a058 <__sflush_r+0xb8>
 800a006:	2200      	movs	r2, #0
 800a008:	6062      	str	r2, [r4, #4]
 800a00a:	04d9      	lsls	r1, r3, #19
 800a00c:	6922      	ldr	r2, [r4, #16]
 800a00e:	6022      	str	r2, [r4, #0]
 800a010:	d504      	bpl.n	800a01c <__sflush_r+0x7c>
 800a012:	1c42      	adds	r2, r0, #1
 800a014:	d101      	bne.n	800a01a <__sflush_r+0x7a>
 800a016:	682b      	ldr	r3, [r5, #0]
 800a018:	b903      	cbnz	r3, 800a01c <__sflush_r+0x7c>
 800a01a:	6560      	str	r0, [r4, #84]	; 0x54
 800a01c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01e:	602f      	str	r7, [r5, #0]
 800a020:	2900      	cmp	r1, #0
 800a022:	d0ca      	beq.n	8009fba <__sflush_r+0x1a>
 800a024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a028:	4299      	cmp	r1, r3
 800a02a:	d002      	beq.n	800a032 <__sflush_r+0x92>
 800a02c:	4628      	mov	r0, r5
 800a02e:	f7ff fd91 	bl	8009b54 <_free_r>
 800a032:	2000      	movs	r0, #0
 800a034:	6360      	str	r0, [r4, #52]	; 0x34
 800a036:	e7c1      	b.n	8009fbc <__sflush_r+0x1c>
 800a038:	6a21      	ldr	r1, [r4, #32]
 800a03a:	2301      	movs	r3, #1
 800a03c:	4628      	mov	r0, r5
 800a03e:	47b0      	blx	r6
 800a040:	1c41      	adds	r1, r0, #1
 800a042:	d1c7      	bne.n	8009fd4 <__sflush_r+0x34>
 800a044:	682b      	ldr	r3, [r5, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d0c4      	beq.n	8009fd4 <__sflush_r+0x34>
 800a04a:	2b1d      	cmp	r3, #29
 800a04c:	d001      	beq.n	800a052 <__sflush_r+0xb2>
 800a04e:	2b16      	cmp	r3, #22
 800a050:	d101      	bne.n	800a056 <__sflush_r+0xb6>
 800a052:	602f      	str	r7, [r5, #0]
 800a054:	e7b1      	b.n	8009fba <__sflush_r+0x1a>
 800a056:	89a3      	ldrh	r3, [r4, #12]
 800a058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a05c:	81a3      	strh	r3, [r4, #12]
 800a05e:	e7ad      	b.n	8009fbc <__sflush_r+0x1c>
 800a060:	690f      	ldr	r7, [r1, #16]
 800a062:	2f00      	cmp	r7, #0
 800a064:	d0a9      	beq.n	8009fba <__sflush_r+0x1a>
 800a066:	0793      	lsls	r3, r2, #30
 800a068:	680e      	ldr	r6, [r1, #0]
 800a06a:	bf08      	it	eq
 800a06c:	694b      	ldreq	r3, [r1, #20]
 800a06e:	600f      	str	r7, [r1, #0]
 800a070:	bf18      	it	ne
 800a072:	2300      	movne	r3, #0
 800a074:	eba6 0807 	sub.w	r8, r6, r7
 800a078:	608b      	str	r3, [r1, #8]
 800a07a:	f1b8 0f00 	cmp.w	r8, #0
 800a07e:	dd9c      	ble.n	8009fba <__sflush_r+0x1a>
 800a080:	6a21      	ldr	r1, [r4, #32]
 800a082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a084:	4643      	mov	r3, r8
 800a086:	463a      	mov	r2, r7
 800a088:	4628      	mov	r0, r5
 800a08a:	47b0      	blx	r6
 800a08c:	2800      	cmp	r0, #0
 800a08e:	dc06      	bgt.n	800a09e <__sflush_r+0xfe>
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	f04f 30ff 	mov.w	r0, #4294967295
 800a09c:	e78e      	b.n	8009fbc <__sflush_r+0x1c>
 800a09e:	4407      	add	r7, r0
 800a0a0:	eba8 0800 	sub.w	r8, r8, r0
 800a0a4:	e7e9      	b.n	800a07a <__sflush_r+0xda>
 800a0a6:	bf00      	nop
 800a0a8:	20400001 	.word	0x20400001

0800a0ac <_fflush_r>:
 800a0ac:	b538      	push	{r3, r4, r5, lr}
 800a0ae:	690b      	ldr	r3, [r1, #16]
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	b913      	cbnz	r3, 800a0bc <_fflush_r+0x10>
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	4628      	mov	r0, r5
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	b118      	cbz	r0, 800a0c6 <_fflush_r+0x1a>
 800a0be:	6983      	ldr	r3, [r0, #24]
 800a0c0:	b90b      	cbnz	r3, 800a0c6 <_fflush_r+0x1a>
 800a0c2:	f000 f887 	bl	800a1d4 <__sinit>
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <_fflush_r+0x6c>)
 800a0c8:	429c      	cmp	r4, r3
 800a0ca:	d11b      	bne.n	800a104 <_fflush_r+0x58>
 800a0cc:	686c      	ldr	r4, [r5, #4]
 800a0ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0ef      	beq.n	800a0b6 <_fflush_r+0xa>
 800a0d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0d8:	07d0      	lsls	r0, r2, #31
 800a0da:	d404      	bmi.n	800a0e6 <_fflush_r+0x3a>
 800a0dc:	0599      	lsls	r1, r3, #22
 800a0de:	d402      	bmi.n	800a0e6 <_fflush_r+0x3a>
 800a0e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0e2:	f000 f915 	bl	800a310 <__retarget_lock_acquire_recursive>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7ff ff59 	bl	8009fa0 <__sflush_r>
 800a0ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0f0:	07da      	lsls	r2, r3, #31
 800a0f2:	4605      	mov	r5, r0
 800a0f4:	d4e0      	bmi.n	800a0b8 <_fflush_r+0xc>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	059b      	lsls	r3, r3, #22
 800a0fa:	d4dd      	bmi.n	800a0b8 <_fflush_r+0xc>
 800a0fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fe:	f000 f908 	bl	800a312 <__retarget_lock_release_recursive>
 800a102:	e7d9      	b.n	800a0b8 <_fflush_r+0xc>
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <_fflush_r+0x70>)
 800a106:	429c      	cmp	r4, r3
 800a108:	d101      	bne.n	800a10e <_fflush_r+0x62>
 800a10a:	68ac      	ldr	r4, [r5, #8]
 800a10c:	e7df      	b.n	800a0ce <_fflush_r+0x22>
 800a10e:	4b04      	ldr	r3, [pc, #16]	; (800a120 <_fflush_r+0x74>)
 800a110:	429c      	cmp	r4, r3
 800a112:	bf08      	it	eq
 800a114:	68ec      	ldreq	r4, [r5, #12]
 800a116:	e7da      	b.n	800a0ce <_fflush_r+0x22>
 800a118:	0800a5c8 	.word	0x0800a5c8
 800a11c:	0800a5e8 	.word	0x0800a5e8
 800a120:	0800a5a8 	.word	0x0800a5a8

0800a124 <std>:
 800a124:	2300      	movs	r3, #0
 800a126:	b510      	push	{r4, lr}
 800a128:	4604      	mov	r4, r0
 800a12a:	e9c0 3300 	strd	r3, r3, [r0]
 800a12e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a132:	6083      	str	r3, [r0, #8]
 800a134:	8181      	strh	r1, [r0, #12]
 800a136:	6643      	str	r3, [r0, #100]	; 0x64
 800a138:	81c2      	strh	r2, [r0, #14]
 800a13a:	6183      	str	r3, [r0, #24]
 800a13c:	4619      	mov	r1, r3
 800a13e:	2208      	movs	r2, #8
 800a140:	305c      	adds	r0, #92	; 0x5c
 800a142:	f7ff fcff 	bl	8009b44 <memset>
 800a146:	4b05      	ldr	r3, [pc, #20]	; (800a15c <std+0x38>)
 800a148:	6263      	str	r3, [r4, #36]	; 0x24
 800a14a:	4b05      	ldr	r3, [pc, #20]	; (800a160 <std+0x3c>)
 800a14c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a14e:	4b05      	ldr	r3, [pc, #20]	; (800a164 <std+0x40>)
 800a150:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a152:	4b05      	ldr	r3, [pc, #20]	; (800a168 <std+0x44>)
 800a154:	6224      	str	r4, [r4, #32]
 800a156:	6323      	str	r3, [r4, #48]	; 0x30
 800a158:	bd10      	pop	{r4, pc}
 800a15a:	bf00      	nop
 800a15c:	0800a3f9 	.word	0x0800a3f9
 800a160:	0800a41b 	.word	0x0800a41b
 800a164:	0800a453 	.word	0x0800a453
 800a168:	0800a477 	.word	0x0800a477

0800a16c <_cleanup_r>:
 800a16c:	4901      	ldr	r1, [pc, #4]	; (800a174 <_cleanup_r+0x8>)
 800a16e:	f000 b8af 	b.w	800a2d0 <_fwalk_reent>
 800a172:	bf00      	nop
 800a174:	0800a0ad 	.word	0x0800a0ad

0800a178 <__sfmoreglue>:
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	2268      	movs	r2, #104	; 0x68
 800a17c:	1e4d      	subs	r5, r1, #1
 800a17e:	4355      	muls	r5, r2
 800a180:	460e      	mov	r6, r1
 800a182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a186:	f7ff fd51 	bl	8009c2c <_malloc_r>
 800a18a:	4604      	mov	r4, r0
 800a18c:	b140      	cbz	r0, 800a1a0 <__sfmoreglue+0x28>
 800a18e:	2100      	movs	r1, #0
 800a190:	e9c0 1600 	strd	r1, r6, [r0]
 800a194:	300c      	adds	r0, #12
 800a196:	60a0      	str	r0, [r4, #8]
 800a198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a19c:	f7ff fcd2 	bl	8009b44 <memset>
 800a1a0:	4620      	mov	r0, r4
 800a1a2:	bd70      	pop	{r4, r5, r6, pc}

0800a1a4 <__sfp_lock_acquire>:
 800a1a4:	4801      	ldr	r0, [pc, #4]	; (800a1ac <__sfp_lock_acquire+0x8>)
 800a1a6:	f000 b8b3 	b.w	800a310 <__retarget_lock_acquire_recursive>
 800a1aa:	bf00      	nop
 800a1ac:	20000a89 	.word	0x20000a89

0800a1b0 <__sfp_lock_release>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <__sfp_lock_release+0x8>)
 800a1b2:	f000 b8ae 	b.w	800a312 <__retarget_lock_release_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20000a89 	.word	0x20000a89

0800a1bc <__sinit_lock_acquire>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	; (800a1c4 <__sinit_lock_acquire+0x8>)
 800a1be:	f000 b8a7 	b.w	800a310 <__retarget_lock_acquire_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	20000a8a 	.word	0x20000a8a

0800a1c8 <__sinit_lock_release>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__sinit_lock_release+0x8>)
 800a1ca:	f000 b8a2 	b.w	800a312 <__retarget_lock_release_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	20000a8a 	.word	0x20000a8a

0800a1d4 <__sinit>:
 800a1d4:	b510      	push	{r4, lr}
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	f7ff fff0 	bl	800a1bc <__sinit_lock_acquire>
 800a1dc:	69a3      	ldr	r3, [r4, #24]
 800a1de:	b11b      	cbz	r3, 800a1e8 <__sinit+0x14>
 800a1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1e4:	f7ff bff0 	b.w	800a1c8 <__sinit_lock_release>
 800a1e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <__sinit+0x68>)
 800a1f0:	4a13      	ldr	r2, [pc, #76]	; (800a240 <__sinit+0x6c>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1f6:	42a3      	cmp	r3, r4
 800a1f8:	bf04      	itt	eq
 800a1fa:	2301      	moveq	r3, #1
 800a1fc:	61a3      	streq	r3, [r4, #24]
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 f820 	bl	800a244 <__sfp>
 800a204:	6060      	str	r0, [r4, #4]
 800a206:	4620      	mov	r0, r4
 800a208:	f000 f81c 	bl	800a244 <__sfp>
 800a20c:	60a0      	str	r0, [r4, #8]
 800a20e:	4620      	mov	r0, r4
 800a210:	f000 f818 	bl	800a244 <__sfp>
 800a214:	2200      	movs	r2, #0
 800a216:	60e0      	str	r0, [r4, #12]
 800a218:	2104      	movs	r1, #4
 800a21a:	6860      	ldr	r0, [r4, #4]
 800a21c:	f7ff ff82 	bl	800a124 <std>
 800a220:	68a0      	ldr	r0, [r4, #8]
 800a222:	2201      	movs	r2, #1
 800a224:	2109      	movs	r1, #9
 800a226:	f7ff ff7d 	bl	800a124 <std>
 800a22a:	68e0      	ldr	r0, [r4, #12]
 800a22c:	2202      	movs	r2, #2
 800a22e:	2112      	movs	r1, #18
 800a230:	f7ff ff78 	bl	800a124 <std>
 800a234:	2301      	movs	r3, #1
 800a236:	61a3      	str	r3, [r4, #24]
 800a238:	e7d2      	b.n	800a1e0 <__sinit+0xc>
 800a23a:	bf00      	nop
 800a23c:	0800a5a4 	.word	0x0800a5a4
 800a240:	0800a16d 	.word	0x0800a16d

0800a244 <__sfp>:
 800a244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a246:	4607      	mov	r7, r0
 800a248:	f7ff ffac 	bl	800a1a4 <__sfp_lock_acquire>
 800a24c:	4b1e      	ldr	r3, [pc, #120]	; (800a2c8 <__sfp+0x84>)
 800a24e:	681e      	ldr	r6, [r3, #0]
 800a250:	69b3      	ldr	r3, [r6, #24]
 800a252:	b913      	cbnz	r3, 800a25a <__sfp+0x16>
 800a254:	4630      	mov	r0, r6
 800a256:	f7ff ffbd 	bl	800a1d4 <__sinit>
 800a25a:	3648      	adds	r6, #72	; 0x48
 800a25c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a260:	3b01      	subs	r3, #1
 800a262:	d503      	bpl.n	800a26c <__sfp+0x28>
 800a264:	6833      	ldr	r3, [r6, #0]
 800a266:	b30b      	cbz	r3, 800a2ac <__sfp+0x68>
 800a268:	6836      	ldr	r6, [r6, #0]
 800a26a:	e7f7      	b.n	800a25c <__sfp+0x18>
 800a26c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a270:	b9d5      	cbnz	r5, 800a2a8 <__sfp+0x64>
 800a272:	4b16      	ldr	r3, [pc, #88]	; (800a2cc <__sfp+0x88>)
 800a274:	60e3      	str	r3, [r4, #12]
 800a276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a27a:	6665      	str	r5, [r4, #100]	; 0x64
 800a27c:	f000 f847 	bl	800a30e <__retarget_lock_init_recursive>
 800a280:	f7ff ff96 	bl	800a1b0 <__sfp_lock_release>
 800a284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a28c:	6025      	str	r5, [r4, #0]
 800a28e:	61a5      	str	r5, [r4, #24]
 800a290:	2208      	movs	r2, #8
 800a292:	4629      	mov	r1, r5
 800a294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a298:	f7ff fc54 	bl	8009b44 <memset>
 800a29c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2a8:	3468      	adds	r4, #104	; 0x68
 800a2aa:	e7d9      	b.n	800a260 <__sfp+0x1c>
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7ff ff62 	bl	800a178 <__sfmoreglue>
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	6030      	str	r0, [r6, #0]
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d1d5      	bne.n	800a268 <__sfp+0x24>
 800a2bc:	f7ff ff78 	bl	800a1b0 <__sfp_lock_release>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	e7ee      	b.n	800a2a4 <__sfp+0x60>
 800a2c6:	bf00      	nop
 800a2c8:	0800a5a4 	.word	0x0800a5a4
 800a2cc:	ffff0001 	.word	0xffff0001

0800a2d0 <_fwalk_reent>:
 800a2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	4688      	mov	r8, r1
 800a2d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2dc:	2700      	movs	r7, #0
 800a2de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a2e6:	d505      	bpl.n	800a2f4 <_fwalk_reent+0x24>
 800a2e8:	6824      	ldr	r4, [r4, #0]
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	d1f7      	bne.n	800a2de <_fwalk_reent+0xe>
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f4:	89ab      	ldrh	r3, [r5, #12]
 800a2f6:	2b01      	cmp	r3, #1
 800a2f8:	d907      	bls.n	800a30a <_fwalk_reent+0x3a>
 800a2fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2fe:	3301      	adds	r3, #1
 800a300:	d003      	beq.n	800a30a <_fwalk_reent+0x3a>
 800a302:	4629      	mov	r1, r5
 800a304:	4630      	mov	r0, r6
 800a306:	47c0      	blx	r8
 800a308:	4307      	orrs	r7, r0
 800a30a:	3568      	adds	r5, #104	; 0x68
 800a30c:	e7e9      	b.n	800a2e2 <_fwalk_reent+0x12>

0800a30e <__retarget_lock_init_recursive>:
 800a30e:	4770      	bx	lr

0800a310 <__retarget_lock_acquire_recursive>:
 800a310:	4770      	bx	lr

0800a312 <__retarget_lock_release_recursive>:
 800a312:	4770      	bx	lr

0800a314 <__swhatbuf_r>:
 800a314:	b570      	push	{r4, r5, r6, lr}
 800a316:	460e      	mov	r6, r1
 800a318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a31c:	2900      	cmp	r1, #0
 800a31e:	b096      	sub	sp, #88	; 0x58
 800a320:	4614      	mov	r4, r2
 800a322:	461d      	mov	r5, r3
 800a324:	da08      	bge.n	800a338 <__swhatbuf_r+0x24>
 800a326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	602a      	str	r2, [r5, #0]
 800a32e:	061a      	lsls	r2, r3, #24
 800a330:	d410      	bmi.n	800a354 <__swhatbuf_r+0x40>
 800a332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a336:	e00e      	b.n	800a356 <__swhatbuf_r+0x42>
 800a338:	466a      	mov	r2, sp
 800a33a:	f000 f8c3 	bl	800a4c4 <_fstat_r>
 800a33e:	2800      	cmp	r0, #0
 800a340:	dbf1      	blt.n	800a326 <__swhatbuf_r+0x12>
 800a342:	9a01      	ldr	r2, [sp, #4]
 800a344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a34c:	425a      	negs	r2, r3
 800a34e:	415a      	adcs	r2, r3
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	e7ee      	b.n	800a332 <__swhatbuf_r+0x1e>
 800a354:	2340      	movs	r3, #64	; 0x40
 800a356:	2000      	movs	r0, #0
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	b016      	add	sp, #88	; 0x58
 800a35c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a360 <__smakebuf_r>:
 800a360:	898b      	ldrh	r3, [r1, #12]
 800a362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a364:	079d      	lsls	r5, r3, #30
 800a366:	4606      	mov	r6, r0
 800a368:	460c      	mov	r4, r1
 800a36a:	d507      	bpl.n	800a37c <__smakebuf_r+0x1c>
 800a36c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a370:	6023      	str	r3, [r4, #0]
 800a372:	6123      	str	r3, [r4, #16]
 800a374:	2301      	movs	r3, #1
 800a376:	6163      	str	r3, [r4, #20]
 800a378:	b002      	add	sp, #8
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	ab01      	add	r3, sp, #4
 800a37e:	466a      	mov	r2, sp
 800a380:	f7ff ffc8 	bl	800a314 <__swhatbuf_r>
 800a384:	9900      	ldr	r1, [sp, #0]
 800a386:	4605      	mov	r5, r0
 800a388:	4630      	mov	r0, r6
 800a38a:	f7ff fc4f 	bl	8009c2c <_malloc_r>
 800a38e:	b948      	cbnz	r0, 800a3a4 <__smakebuf_r+0x44>
 800a390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a394:	059a      	lsls	r2, r3, #22
 800a396:	d4ef      	bmi.n	800a378 <__smakebuf_r+0x18>
 800a398:	f023 0303 	bic.w	r3, r3, #3
 800a39c:	f043 0302 	orr.w	r3, r3, #2
 800a3a0:	81a3      	strh	r3, [r4, #12]
 800a3a2:	e7e3      	b.n	800a36c <__smakebuf_r+0xc>
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <__smakebuf_r+0x7c>)
 800a3a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3a8:	89a3      	ldrh	r3, [r4, #12]
 800a3aa:	6020      	str	r0, [r4, #0]
 800a3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	9b00      	ldr	r3, [sp, #0]
 800a3b4:	6163      	str	r3, [r4, #20]
 800a3b6:	9b01      	ldr	r3, [sp, #4]
 800a3b8:	6120      	str	r0, [r4, #16]
 800a3ba:	b15b      	cbz	r3, 800a3d4 <__smakebuf_r+0x74>
 800a3bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f000 f891 	bl	800a4e8 <_isatty_r>
 800a3c6:	b128      	cbz	r0, 800a3d4 <__smakebuf_r+0x74>
 800a3c8:	89a3      	ldrh	r3, [r4, #12]
 800a3ca:	f023 0303 	bic.w	r3, r3, #3
 800a3ce:	f043 0301 	orr.w	r3, r3, #1
 800a3d2:	81a3      	strh	r3, [r4, #12]
 800a3d4:	89a0      	ldrh	r0, [r4, #12]
 800a3d6:	4305      	orrs	r5, r0
 800a3d8:	81a5      	strh	r5, [r4, #12]
 800a3da:	e7cd      	b.n	800a378 <__smakebuf_r+0x18>
 800a3dc:	0800a16d 	.word	0x0800a16d

0800a3e0 <__malloc_lock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	; (800a3e8 <__malloc_lock+0x8>)
 800a3e2:	f7ff bf95 	b.w	800a310 <__retarget_lock_acquire_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20000a88 	.word	0x20000a88

0800a3ec <__malloc_unlock>:
 800a3ec:	4801      	ldr	r0, [pc, #4]	; (800a3f4 <__malloc_unlock+0x8>)
 800a3ee:	f7ff bf90 	b.w	800a312 <__retarget_lock_release_recursive>
 800a3f2:	bf00      	nop
 800a3f4:	20000a88 	.word	0x20000a88

0800a3f8 <__sread>:
 800a3f8:	b510      	push	{r4, lr}
 800a3fa:	460c      	mov	r4, r1
 800a3fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a400:	f000 f894 	bl	800a52c <_read_r>
 800a404:	2800      	cmp	r0, #0
 800a406:	bfab      	itete	ge
 800a408:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a40a:	89a3      	ldrhlt	r3, [r4, #12]
 800a40c:	181b      	addge	r3, r3, r0
 800a40e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a412:	bfac      	ite	ge
 800a414:	6563      	strge	r3, [r4, #84]	; 0x54
 800a416:	81a3      	strhlt	r3, [r4, #12]
 800a418:	bd10      	pop	{r4, pc}

0800a41a <__swrite>:
 800a41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a41e:	461f      	mov	r7, r3
 800a420:	898b      	ldrh	r3, [r1, #12]
 800a422:	05db      	lsls	r3, r3, #23
 800a424:	4605      	mov	r5, r0
 800a426:	460c      	mov	r4, r1
 800a428:	4616      	mov	r6, r2
 800a42a:	d505      	bpl.n	800a438 <__swrite+0x1e>
 800a42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a430:	2302      	movs	r3, #2
 800a432:	2200      	movs	r2, #0
 800a434:	f000 f868 	bl	800a508 <_lseek_r>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a43e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	4632      	mov	r2, r6
 800a446:	463b      	mov	r3, r7
 800a448:	4628      	mov	r0, r5
 800a44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a44e:	f000 b817 	b.w	800a480 <_write_r>

0800a452 <__sseek>:
 800a452:	b510      	push	{r4, lr}
 800a454:	460c      	mov	r4, r1
 800a456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a45a:	f000 f855 	bl	800a508 <_lseek_r>
 800a45e:	1c43      	adds	r3, r0, #1
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	bf15      	itete	ne
 800a464:	6560      	strne	r0, [r4, #84]	; 0x54
 800a466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a46a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a46e:	81a3      	strheq	r3, [r4, #12]
 800a470:	bf18      	it	ne
 800a472:	81a3      	strhne	r3, [r4, #12]
 800a474:	bd10      	pop	{r4, pc}

0800a476 <__sclose>:
 800a476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47a:	f000 b813 	b.w	800a4a4 <_close_r>
	...

0800a480 <_write_r>:
 800a480:	b538      	push	{r3, r4, r5, lr}
 800a482:	4d07      	ldr	r5, [pc, #28]	; (800a4a0 <_write_r+0x20>)
 800a484:	4604      	mov	r4, r0
 800a486:	4608      	mov	r0, r1
 800a488:	4611      	mov	r1, r2
 800a48a:	2200      	movs	r2, #0
 800a48c:	602a      	str	r2, [r5, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	f7f7 f8e1 	bl	8001656 <_write>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_write_r+0x1e>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_write_r+0x1e>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20000a8c 	.word	0x20000a8c

0800a4a4 <_close_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4d06      	ldr	r5, [pc, #24]	; (800a4c0 <_close_r+0x1c>)
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	4608      	mov	r0, r1
 800a4ae:	602b      	str	r3, [r5, #0]
 800a4b0:	f7f7 f8ed 	bl	800168e <_close>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_close_r+0x1a>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_close_r+0x1a>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000a8c 	.word	0x20000a8c

0800a4c4 <_fstat_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	4d07      	ldr	r5, [pc, #28]	; (800a4e4 <_fstat_r+0x20>)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	602b      	str	r3, [r5, #0]
 800a4d2:	f7f7 f8e8 	bl	80016a6 <_fstat>
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d102      	bne.n	800a4e0 <_fstat_r+0x1c>
 800a4da:	682b      	ldr	r3, [r5, #0]
 800a4dc:	b103      	cbz	r3, 800a4e0 <_fstat_r+0x1c>
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	bd38      	pop	{r3, r4, r5, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000a8c 	.word	0x20000a8c

0800a4e8 <_isatty_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d06      	ldr	r5, [pc, #24]	; (800a504 <_isatty_r+0x1c>)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	f7f7 f8e7 	bl	80016c6 <_isatty>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_isatty_r+0x1a>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_isatty_r+0x1a>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20000a8c 	.word	0x20000a8c

0800a508 <_lseek_r>:
 800a508:	b538      	push	{r3, r4, r5, lr}
 800a50a:	4d07      	ldr	r5, [pc, #28]	; (800a528 <_lseek_r+0x20>)
 800a50c:	4604      	mov	r4, r0
 800a50e:	4608      	mov	r0, r1
 800a510:	4611      	mov	r1, r2
 800a512:	2200      	movs	r2, #0
 800a514:	602a      	str	r2, [r5, #0]
 800a516:	461a      	mov	r2, r3
 800a518:	f7f7 f8e0 	bl	80016dc <_lseek>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_lseek_r+0x1e>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_lseek_r+0x1e>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20000a8c 	.word	0x20000a8c

0800a52c <_read_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	; (800a54c <_read_r+0x20>)
 800a530:	4604      	mov	r4, r0
 800a532:	4608      	mov	r0, r1
 800a534:	4611      	mov	r1, r2
 800a536:	2200      	movs	r2, #0
 800a538:	602a      	str	r2, [r5, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	f7f7 f86e 	bl	800161c <_read>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d102      	bne.n	800a54a <_read_r+0x1e>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	b103      	cbz	r3, 800a54a <_read_r+0x1e>
 800a548:	6023      	str	r3, [r4, #0]
 800a54a:	bd38      	pop	{r3, r4, r5, pc}
 800a54c:	20000a8c 	.word	0x20000a8c

0800a550 <_init>:
 800a550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a552:	bf00      	nop
 800a554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a556:	bc08      	pop	{r3}
 800a558:	469e      	mov	lr, r3
 800a55a:	4770      	bx	lr

0800a55c <_fini>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr
