
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800ac40  0800ac40  0001ac40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad34  0800ad34  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad34  0800ad34  0001ad34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad3c  0800ad3c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad3c  0800ad3c  0001ad3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad40  0800ad40  0001ad40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ad44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000a00  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a90  20000a90  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002427c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a20  00000000  00000000  0004433c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00048d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b60  00000000  00000000  0004aa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a826  00000000  00000000  0004c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b28  00000000  00000000  00076e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecd7e  00000000  00000000  0009c93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001896bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084e4  00000000  00000000  0018970c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac28 	.word	0x0800ac28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800ac28 	.word	0x0800ac28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 f986 	bl	80018a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f830 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 faca 	bl	8000b38 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a4:	f000 f898 	bl	80006d8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005a8:	f000 f8aa 	bl	8000700 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ac:	f000 fa74 	bl	8000a98 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b0:	f000 f8d8 	bl	8000764 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b4:	f000 f916 	bl	80007e4 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005b8:	f000 f994 	bl	80008e4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005bc:	f000 f9c8 	bl	8000950 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c0:	f000 fa40 	bl	8000a44 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c4:	f008 ffdc 	bl	8009580 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005c8:	f000 fa12 	bl	80009f0 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4809      	ldr	r0, [pc, #36]	; (80005f8 <main+0x64>)
 80005d4:	f001 fe64 	bl	80022a0 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005d8:	2300      	movs	r3, #0
 80005da:	2201      	movs	r2, #1
 80005dc:	4619      	mov	r1, r3
 80005de:	4807      	ldr	r0, [pc, #28]	; (80005fc <main+0x68>)
 80005e0:	f009 fbfe 	bl	8009de0 <iprintf>
  HAL_Delay(5000);
 80005e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80005e8:	f001 f9a0 	bl	800192c <HAL_Delay>
  go_to_application();
 80005ec:	f000 fbc6 	bl	8000d7c <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005f0:	f008 ffec 	bl	80095cc <MX_USB_HOST_Process>
 80005f4:	e7fc      	b.n	80005f0 <main+0x5c>
 80005f6:	bf00      	nop
 80005f8:	40021800 	.word	0x40021800
 80005fc:	0800ac40 	.word	0x0800ac40

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f009 fafe 	bl	8009c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b29      	ldr	r3, [pc, #164]	; (80006d0 <SystemClock_Config+0xd0>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a28      	ldr	r2, [pc, #160]	; (80006d0 <SystemClock_Config+0xd0>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b26      	ldr	r3, [pc, #152]	; (80006d0 <SystemClock_Config+0xd0>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xd4>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd4>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000674:	2310      	movs	r3, #16
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f003 ff54 	bl	8004538 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000696:	f000 fb9f 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 f9b5 	bl	8004a28 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006c4:	f000 fb88 	bl	8000dd8 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_CRC_Init+0x20>)
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <MX_CRC_Init+0x24>)
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_CRC_Init+0x20>)
 80006e4:	f001 fa28 	bl	8001b38 <HAL_CRC_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ee:	f000 fb73 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	40023000 	.word	0x40023000

08000700 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <MX_DMA2D_Init+0x60>)
 8000708:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <MX_DMA2D_Init+0x5c>)
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000716:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <MX_DMA2D_Init+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000724:	2200      	movs	r2, #0
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_DMA2D_Init+0x5c>)
 800072a:	2200      	movs	r2, #0
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000734:	4809      	ldr	r0, [pc, #36]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000736:	f001 fa1b 	bl	8001b70 <HAL_DMA2D_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000740:	f000 fb4a 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000744:	2101      	movs	r1, #1
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_DMA2D_Init+0x5c>)
 8000748:	f001 fb6c 	bl	8001e24 <HAL_DMA2D_ConfigLayer>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000752:	f000 fb41 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	200000b4 	.word	0x200000b4
 8000760:	4002b000 	.word	0x4002b000

08000764 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C3_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C3_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C3_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000782:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000786:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_I2C3_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000794:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C3_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007a2:	f003 f9a1 	bl	8003ae8 <HAL_I2C_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007ac:	f000 fb14 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007b4:	f003 fadc 	bl	8003d70 <HAL_I2CEx_ConfigAnalogFilter>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80007be:	f000 fb0b 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007c2:	2100      	movs	r1, #0
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007c6:	f003 fb0f 	bl	8003de8 <HAL_I2CEx_ConfigDigitalFilter>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80007d0:	f000 fb02 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000f4 	.word	0x200000f4
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	; 0x38
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2234      	movs	r2, #52	; 0x34
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f009 fa0d 	bl	8009c10 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <MX_LTDC_Init+0xf8>)
 80007f8:	4a39      	ldr	r2, [pc, #228]	; (80008e0 <MX_LTDC_Init+0xfc>)
 80007fa:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007fc:	4b37      	ldr	r3, [pc, #220]	; (80008dc <MX_LTDC_Init+0xf8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000802:	4b36      	ldr	r3, [pc, #216]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000808:	4b34      	ldr	r3, [pc, #208]	; (80008dc <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800080e:	4b33      	ldr	r3, [pc, #204]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000814:	4b31      	ldr	r3, [pc, #196]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000816:	2209      	movs	r2, #9
 8000818:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800081a:	4b30      	ldr	r3, [pc, #192]	; (80008dc <MX_LTDC_Init+0xf8>)
 800081c:	2201      	movs	r2, #1
 800081e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000822:	221d      	movs	r2, #29
 8000824:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000828:	2203      	movs	r2, #3
 800082a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_LTDC_Init+0xf8>)
 800082e:	f240 120d 	movw	r2, #269	; 0x10d
 8000832:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000834:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000836:	f240 1243 	movw	r2, #323	; 0x143
 800083a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_LTDC_Init+0xf8>)
 800083e:	f240 1217 	movw	r2, #279	; 0x117
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000846:	f240 1247 	movw	r2, #327	; 0x147
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_LTDC_Init+0xf8>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000856:	2200      	movs	r2, #0
 8000858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_LTDC_Init+0xf8>)
 800085e:	2200      	movs	r2, #0
 8000860:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <MX_LTDC_Init+0xf8>)
 8000866:	f003 faff 	bl	8003e68 <HAL_LTDC_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000870:	f000 fab2 	bl	8000dd8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000878:	23f0      	movs	r3, #240	; 0xf0
 800087a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000880:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000884:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000886:	2302      	movs	r3, #2
 8000888:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800088a:	23ff      	movs	r3, #255	; 0xff
 800088c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000892:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000896:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000898:	2307      	movs	r3, #7
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800089c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80008a2:	23f0      	movs	r3, #240	; 0xf0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80008a6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2200      	movs	r2, #0
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_LTDC_Init+0xf8>)
 80008c6:	f003 fc61 	bl	800418c <HAL_LTDC_ConfigLayer>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80008d0:	f000 fa82 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	3738      	adds	r7, #56	; 0x38
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20000148 	.word	0x20000148
 80008e0:	40016800 	.word	0x40016800

080008e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80008e8:	4b17      	ldr	r3, [pc, #92]	; (8000948 <MX_SPI5_Init+0x64>)
 80008ea:	4a18      	ldr	r2, [pc, #96]	; (800094c <MX_SPI5_Init+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_SPI5_Init+0x64>)
 80008f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_SPI5_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_SPI5_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_SPI5_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000908:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_SPI5_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_SPI5_Init+0x64>)
 8000910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000914:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_SPI5_Init+0x64>)
 8000918:	2218      	movs	r2, #24
 800091a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_SPI5_Init+0x64>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_SPI5_Init+0x64>)
 8000924:	2200      	movs	r2, #0
 8000926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_SPI5_Init+0x64>)
 800092a:	2200      	movs	r2, #0
 800092c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_SPI5_Init+0x64>)
 8000930:	220a      	movs	r2, #10
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_SPI5_Init+0x64>)
 8000936:	f004 fcbd 	bl	80052b4 <HAL_SPI_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000940:	f000 fa4a 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200001f0 	.word	0x200001f0
 800094c:	40015000 	.word	0x40015000

08000950 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_TIM1_Init+0x98>)
 800096e:	4a1f      	ldr	r2, [pc, #124]	; (80009ec <MX_TIM1_Init+0x9c>)
 8000970:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000972:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_TIM1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_TIM1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_TIM1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000998:	4813      	ldr	r0, [pc, #76]	; (80009e8 <MX_TIM1_Init+0x98>)
 800099a:	f004 fd14 	bl	80053c6 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009a4:	f000 fa18 	bl	8000dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM1_Init+0x98>)
 80009b6:	f004 fecd 	bl	8005754 <HAL_TIM_ConfigClockSource>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009c0:	f000 fa0a 	bl	8000dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_TIM1_Init+0x98>)
 80009d2:	f005 f8e9 	bl	8005ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009dc:	f000 f9fc 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000248 	.word	0x20000248
 80009ec:	40010000 	.word	0x40010000

080009f0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_UART5_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_UART5_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_UART5_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_UART5_Init+0x4c>)
 8000a28:	f005 f94e 	bl	8005cc8 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a32:	f000 f9d1 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000290 	.word	0x20000290
 8000a40:	40005000 	.word	0x40005000

08000a44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <MX_USART1_UART_Init+0x50>)
 8000a4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	f005 f924 	bl	8005cc8 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a86:	f000 f9a7 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200002d4 	.word	0x200002d4
 8000a94:	40011000 	.word	0x40011000

08000a98 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]
 8000aae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ab2:	4a20      	ldr	r2, [pc, #128]	; (8000b34 <MX_FMC_Init+0x9c>)
 8000ab4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_FMC_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_FMC_Init+0x98>)
 8000aca:	2210      	movs	r2, #16
 8000acc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ad0:	2240      	movs	r2, #64	; 0x40
 8000ad2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ad6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000ada:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000adc:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ae2:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <MX_FMC_Init+0x98>)
 8000ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_FMC_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000af0:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_FMC_Init+0x98>)
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000af8:	2302      	movs	r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000afc:	2307      	movs	r3, #7
 8000afe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000b00:	2304      	movs	r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_FMC_Init+0x98>)
 8000b1a:	f004 fb97 	bl	800524c <HAL_SDRAM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000b24:	f000 f958 	bl	8000dd8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000b28:	bf00      	nop
 8000b2a:	3720      	adds	r7, #32
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000318 	.word	0x20000318
 8000b34:	a0000140 	.word	0xa0000140

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	; 0x38
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
 8000b52:	4b7b      	ldr	r3, [pc, #492]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a7a      	ldr	r2, [pc, #488]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b78      	ldr	r3, [pc, #480]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	623b      	str	r3, [r7, #32]
 8000b68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	4b74      	ldr	r3, [pc, #464]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a73      	ldr	r2, [pc, #460]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b71      	ldr	r3, [pc, #452]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	4b6d      	ldr	r3, [pc, #436]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a6c      	ldr	r2, [pc, #432]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b6a      	ldr	r3, [pc, #424]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9e:	61bb      	str	r3, [r7, #24]
 8000ba0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	4b66      	ldr	r3, [pc, #408]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a65      	ldr	r2, [pc, #404]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b63      	ldr	r3, [pc, #396]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
 8000bc2:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a5e      	ldr	r2, [pc, #376]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b5c      	ldr	r3, [pc, #368]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	4b58      	ldr	r3, [pc, #352]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a57      	ldr	r2, [pc, #348]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000be4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b55      	ldr	r3, [pc, #340]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	4b51      	ldr	r3, [pc, #324]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a50      	ldr	r2, [pc, #320]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000c00:	f043 0310 	orr.w	r3, r3, #16
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b4e      	ldr	r3, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0310 	and.w	r3, r3, #16
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a49      	ldr	r2, [pc, #292]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b47      	ldr	r3, [pc, #284]	; (8000d40 <MX_GPIO_Init+0x208>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0308 	and.w	r3, r3, #8
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2116      	movs	r1, #22
 8000c32:	4844      	ldr	r0, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x20c>)
 8000c34:	f001 fb34 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	4842      	ldr	r0, [pc, #264]	; (8000d48 <MX_GPIO_Init+0x210>)
 8000c3e:	f001 fb2f 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c48:	4840      	ldr	r0, [pc, #256]	; (8000d4c <MX_GPIO_Init+0x214>)
 8000c4a:	f001 fb29 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c54:	483e      	ldr	r0, [pc, #248]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000c56:	f001 fb23 	bl	80022a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c5a:	2316      	movs	r3, #22
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4834      	ldr	r0, [pc, #208]	; (8000d44 <MX_GPIO_Init+0x20c>)
 8000c72:	f001 f969 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c76:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c7c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	482e      	ldr	r0, [pc, #184]	; (8000d48 <MX_GPIO_Init+0x210>)
 8000c8e:	f001 f95b 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4827      	ldr	r0, [pc, #156]	; (8000d48 <MX_GPIO_Init+0x210>)
 8000caa:	f001 f94d 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4820      	ldr	r0, [pc, #128]	; (8000d44 <MX_GPIO_Init+0x20c>)
 8000cc4:	f001 f940 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481e      	ldr	r0, [pc, #120]	; (8000d54 <MX_GPIO_Init+0x21c>)
 8000cdc:	f001 f934 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ce0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4815      	ldr	r0, [pc, #84]	; (8000d4c <MX_GPIO_Init+0x214>)
 8000cf6:	f001 f927 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cfa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000cfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_GPIO_Init+0x214>)
 8000d14:	f001 f918 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_GPIO_Init+0x218>)
 8000d32:	f001 f909 	bl	8001f48 <HAL_GPIO_Init>

}
 8000d36:	bf00      	nop
 8000d38:	3738      	adds	r7, #56	; 0x38
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020c00 	.word	0x40020c00
 8000d50:	40021800 	.word	0x40021800
 8000d54:	40020400 	.word	0x40020400

08000d58 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d60:	1d39      	adds	r1, r7, #4
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2201      	movs	r2, #1
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <__io_putchar+0x20>)
 8000d6a:	f004 fffa 	bl	8005d62 <HAL_UART_Transmit>
	return ch;
 8000d6e:	687b      	ldr	r3, [r7, #4]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002d4 	.word	0x200002d4

08000d7c <go_to_application>:

static void go_to_application (void){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000d82:	4809      	ldr	r0, [pc, #36]	; (8000da8 <go_to_application+0x2c>)
 8000d84:	f009 f8b2 	bl	8009eec <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (0x08040000 + 4));
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <go_to_application+0x30>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (0x08040000)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d94:	4806      	ldr	r0, [pc, #24]	; (8000db0 <go_to_application+0x34>)
 8000d96:	f001 fa83 	bl	80022a0 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4798      	blx	r3
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	0800ac60 	.word	0x0800ac60
 8000dac:	08040004 	.word	0x08040004
 8000db0:	40021800 	.word	0x40021800

08000db4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d101      	bne.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dc6:	f000 fd91 	bl	80018ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40001000 	.word	0x40001000

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a0f      	ldr	r2, [pc, #60]	; (8000e30 <HAL_MspInit+0x4c>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_MspInit+0x4c>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e14:	6413      	str	r3, [r2, #64]	; 0x40
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_MspInit+0x4c>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	603b      	str	r3, [r7, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800

08000e34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <HAL_CRC_MspInit+0x3c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10d      	bne.n	8000e62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a09      	ldr	r2, [pc, #36]	; (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_CRC_MspInit+0x40>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023000 	.word	0x40023000
 8000e74:	40023800 	.word	0x40023800

08000e78 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_DMA2D_MspInit+0x48>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d115      	bne.n	8000eb6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <HAL_DMA2D_MspInit+0x4c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <HAL_DMA2D_MspInit+0x4c>)
 8000e94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_DMA2D_MspInit+0x4c>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2105      	movs	r1, #5
 8000eaa:	205a      	movs	r0, #90	; 0x5a
 8000eac:	f000 fe1a 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000eb0:	205a      	movs	r0, #90	; 0x5a
 8000eb2:	f000 fe33 	bl	8001b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	4002b000 	.word	0x4002b000
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a29      	ldr	r2, [pc, #164]	; (8000f8c <HAL_I2C_MspInit+0xc4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d14b      	bne.n	8000f82 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a27      	ldr	r2, [pc, #156]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	4b21      	ldr	r3, [pc, #132]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a20      	ldr	r2, [pc, #128]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f28:	2312      	movs	r3, #18
 8000f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f34:	2304      	movs	r3, #4
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4815      	ldr	r0, [pc, #84]	; (8000f94 <HAL_I2C_MspInit+0xcc>)
 8000f40:	f001 f802 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f4a:	2312      	movs	r3, #18
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f56:	2304      	movs	r3, #4
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480d      	ldr	r0, [pc, #52]	; (8000f98 <HAL_I2C_MspInit+0xd0>)
 8000f62:	f000 fff1 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_I2C_MspInit+0xc8>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40005c00 	.word	0x40005c00
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020000 	.word	0x40020000

08000f9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b09a      	sub	sp, #104	; 0x68
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	2230      	movs	r2, #48	; 0x30
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f008 fe27 	bl	8009c10 <memset>
  if(hltdc->Instance==LTDC)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a85      	ldr	r2, [pc, #532]	; (80011dc <HAL_LTDC_MspInit+0x240>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	f040 8102 	bne.w	80011d2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8000fd2:	2331      	movs	r3, #49	; 0x31
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f003 ff72 	bl	8004ecc <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fee:	f7ff fef3 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
 8000ff6:	4b7a      	ldr	r3, [pc, #488]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a79      	ldr	r2, [pc, #484]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8000ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b77      	ldr	r3, [pc, #476]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
 8001012:	4b73      	ldr	r3, [pc, #460]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a72      	ldr	r2, [pc, #456]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b70      	ldr	r3, [pc, #448]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a6b      	ldr	r2, [pc, #428]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b69      	ldr	r3, [pc, #420]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b5e      	ldr	r3, [pc, #376]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a56      	ldr	r2, [pc, #344]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001088:	f043 0304 	orr.w	r3, r3, #4
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0304 	and.w	r3, r3, #4
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b50      	ldr	r3, [pc, #320]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b4d      	ldr	r3, [pc, #308]	; (80011e0 <HAL_LTDC_MspInit+0x244>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80010b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010c8:	230e      	movs	r3, #14
 80010ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d0:	4619      	mov	r1, r3
 80010d2:	4844      	ldr	r0, [pc, #272]	; (80011e4 <HAL_LTDC_MspInit+0x248>)
 80010d4:	f000 ff38 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010d8:	f641 0358 	movw	r3, #6232	; 0x1858
 80010dc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ea:	230e      	movs	r3, #14
 80010ec:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010f2:	4619      	mov	r1, r3
 80010f4:	483c      	ldr	r0, [pc, #240]	; (80011e8 <HAL_LTDC_MspInit+0x24c>)
 80010f6:	f000 ff27 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010fa:	2303      	movs	r3, #3
 80010fc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800110a:	2309      	movs	r3, #9
 800110c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001112:	4619      	mov	r1, r3
 8001114:	4835      	ldr	r0, [pc, #212]	; (80011ec <HAL_LTDC_MspInit+0x250>)
 8001116:	f000 ff17 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800111a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800111e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800112c:	230e      	movs	r3, #14
 800112e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001130:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001134:	4619      	mov	r1, r3
 8001136:	482d      	ldr	r0, [pc, #180]	; (80011ec <HAL_LTDC_MspInit+0x250>)
 8001138:	f000 ff06 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800113c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001140:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800114e:	230e      	movs	r3, #14
 8001150:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001152:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001156:	4619      	mov	r1, r3
 8001158:	4825      	ldr	r0, [pc, #148]	; (80011f0 <HAL_LTDC_MspInit+0x254>)
 800115a:	f000 fef5 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800115e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001162:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001170:	230e      	movs	r3, #14
 8001172:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001178:	4619      	mov	r1, r3
 800117a:	481e      	ldr	r0, [pc, #120]	; (80011f4 <HAL_LTDC_MspInit+0x258>)
 800117c:	f000 fee4 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001180:	2348      	movs	r3, #72	; 0x48
 8001182:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001190:	230e      	movs	r3, #14
 8001192:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001194:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001198:	4619      	mov	r1, r3
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <HAL_LTDC_MspInit+0x25c>)
 800119c:	f000 fed4 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80011a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011b2:	2309      	movs	r3, #9
 80011b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <HAL_LTDC_MspInit+0x254>)
 80011be:	f000 fec3 	bl	8001f48 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2105      	movs	r1, #5
 80011c6:	2058      	movs	r0, #88	; 0x58
 80011c8:	f000 fc8c 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011cc:	2058      	movs	r0, #88	; 0x58
 80011ce:	f000 fca5 	bl	8001b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80011d2:	bf00      	nop
 80011d4:	3768      	adds	r7, #104	; 0x68
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40016800 	.word	0x40016800
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40021400 	.word	0x40021400
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40021800 	.word	0x40021800
 80011f4:	40020800 	.word	0x40020800
 80011f8:	40020c00 	.word	0x40020c00

080011fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a19      	ldr	r2, [pc, #100]	; (8001280 <HAL_SPI_MspInit+0x84>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d12c      	bne.n	8001278 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_SPI_MspInit+0x88>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	4a17      	ldr	r2, [pc, #92]	; (8001284 <HAL_SPI_MspInit+0x88>)
 8001228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800122c:	6453      	str	r3, [r2, #68]	; 0x44
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_SPI_MspInit+0x88>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_SPI_MspInit+0x88>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <HAL_SPI_MspInit+0x88>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_SPI_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001256:	f44f 7360 	mov.w	r3, #896	; 0x380
 800125a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001268:	2305      	movs	r3, #5
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_SPI_MspInit+0x8c>)
 8001274:	f000 fe68 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40015000 	.word	0x40015000
 8001284:	40023800 	.word	0x40023800
 8001288:	40021400 	.word	0x40021400

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10d      	bne.n	80012ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_TIM_Base_MspInit+0x40>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <HAL_UART_MspInit+0x128>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d14b      	bne.n	800138a <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80012fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a39      	ldr	r2, [pc, #228]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001318:	f043 0304 	orr.w	r3, r3, #4
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b33      	ldr	r3, [pc, #204]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a32      	ldr	r2, [pc, #200]	; (80013fc <HAL_UART_MspInit+0x12c>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b30      	ldr	r3, [pc, #192]	; (80013fc <HAL_UART_MspInit+0x12c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001346:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001358:	2308      	movs	r3, #8
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135c:	f107 031c 	add.w	r3, r7, #28
 8001360:	4619      	mov	r1, r3
 8001362:	4827      	ldr	r0, [pc, #156]	; (8001400 <HAL_UART_MspInit+0x130>)
 8001364:	f000 fdf0 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001368:	2304      	movs	r3, #4
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136c:	2302      	movs	r3, #2
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001378:	2308      	movs	r3, #8
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137c:	f107 031c 	add.w	r3, r7, #28
 8001380:	4619      	mov	r1, r3
 8001382:	4820      	ldr	r0, [pc, #128]	; (8001404 <HAL_UART_MspInit+0x134>)
 8001384:	f000 fde0 	bl	8001f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001388:	e031      	b.n	80013ee <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1e      	ldr	r2, [pc, #120]	; (8001408 <HAL_UART_MspInit+0x138>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d12c      	bne.n	80013ee <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_UART_MspInit+0x12c>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	4a17      	ldr	r2, [pc, #92]	; (80013fc <HAL_UART_MspInit+0x12c>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6453      	str	r3, [r2, #68]	; 0x44
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_UART_MspInit+0x12c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013cc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013de:	2307      	movs	r3, #7
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <HAL_UART_MspInit+0x13c>)
 80013ea:	f000 fdad 	bl	8001f48 <HAL_GPIO_Init>
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40005000 	.word	0x40005000
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00
 8001408:	40011000 	.word	0x40011000
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001424:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_FMC_MspInit+0x104>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d16f      	bne.n	800150c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800142c:	4b39      	ldr	r3, [pc, #228]	; (8001514 <HAL_FMC_MspInit+0x104>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b38      	ldr	r3, [pc, #224]	; (8001518 <HAL_FMC_MspInit+0x108>)
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	4a37      	ldr	r2, [pc, #220]	; (8001518 <HAL_FMC_MspInit+0x108>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6393      	str	r3, [r2, #56]	; 0x38
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <HAL_FMC_MspInit+0x108>)
 8001444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800144e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001452:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001460:	230c      	movs	r3, #12
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	; (800151c <HAL_FMC_MspInit+0x10c>)
 800146a:	f000 fd6d 	bl	8001f48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4826      	ldr	r0, [pc, #152]	; (8001520 <HAL_FMC_MspInit+0x110>)
 8001488:	f000 fd5e 	bl	8001f48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800148c:	f248 1333 	movw	r3, #33075	; 0x8133
 8001490:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <HAL_FMC_MspInit+0x114>)
 80014a8:	f000 fd4e 	bl	8001f48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014b0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <HAL_FMC_MspInit+0x118>)
 80014c8:	f000 fd3e 	bl	8001f48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014cc:	f24c 7303 	movw	r3, #50947	; 0xc703
 80014d0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4811      	ldr	r0, [pc, #68]	; (800152c <HAL_FMC_MspInit+0x11c>)
 80014e8:	f000 fd2e 	bl	8001f48 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	480a      	ldr	r0, [pc, #40]	; (8001530 <HAL_FMC_MspInit+0x120>)
 8001506:	f000 fd1f 	bl	8001f48 <HAL_GPIO_Init>
 800150a:	e000      	b.n	800150e <HAL_FMC_MspInit+0xfe>
    return;
 800150c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2000034c 	.word	0x2000034c
 8001518:	40023800 	.word	0x40023800
 800151c:	40021400 	.word	0x40021400
 8001520:	40020800 	.word	0x40020800
 8001524:	40021800 	.word	0x40021800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800153c:	f7ff ff68 	bl	8001410 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	; 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <HAL_InitTick+0xe4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a32      	ldr	r2, [pc, #200]	; (800162c <HAL_InitTick+0xe4>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <HAL_InitTick+0xe4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f003 fc72 	bl	8004e68 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800158e:	f003 fc43 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8001592:	6378      	str	r0, [r7, #52]	; 0x34
 8001594:	e004      	b.n	80015a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001596:	f003 fc3f 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	4a23      	ldr	r2, [pc, #140]	; (8001630 <HAL_InitTick+0xe8>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3b01      	subs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_InitTick+0xec>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_InitTick+0xf0>)
 80015b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <HAL_InitTick+0xec>)
 80015b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_InitTick+0xec>)
 80015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <HAL_InitTick+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_InitTick+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_InitTick+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015d4:	4817      	ldr	r0, [pc, #92]	; (8001634 <HAL_InitTick+0xec>)
 80015d6:	f003 fef6 	bl	80053c6 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015e8:	4812      	ldr	r0, [pc, #72]	; (8001634 <HAL_InitTick+0xec>)
 80015ea:	f003 ff3b 	bl	8005464 <HAL_TIM_Base_Start_IT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	; 0x36
 80015fe:	f000 fa8d 	bl	8001b1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d808      	bhi.n	800161a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2036      	movs	r0, #54	; 0x36
 800160e:	f000 fa69 	bl	8001ae4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001612:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_InitTick+0xf4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e002      	b.n	8001620 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001620:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001624:	4618      	mov	r0, r3
 8001626:	3738      	adds	r7, #56	; 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	431bde83 	.word	0x431bde83
 8001634:	20000350 	.word	0x20000350
 8001638:	40001000 	.word	0x40001000
 800163c:	20000004 	.word	0x20000004

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <NMI_Handler+0x4>

08001646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164a:	e7fe      	b.n	800164a <HardFault_Handler+0x4>

0800164c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <MemManage_Handler+0x4>

08001652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <BusFault_Handler+0x4>

08001658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <UsageFault_Handler+0x4>

0800165e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <TIM6_DAC_IRQHandler+0x10>)
 800169e:	f003 ff51 	bl	8005544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000350 	.word	0x20000350

080016ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <OTG_HS_IRQHandler+0x10>)
 80016b2:	f001 f879 	bl	80027a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000077c 	.word	0x2000077c

080016c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <LTDC_IRQHandler+0x10>)
 80016c6:	f002 fc9f 	bl	8004008 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000148 	.word	0x20000148

080016d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <DMA2D_IRQHandler+0x10>)
 80016da:	f000 fa92 	bl	8001c02 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200000b4 	.word	0x200000b4

080016e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	e00a      	b.n	8001710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fa:	f3af 8000 	nop.w
 80016fe:	4601      	mov	r1, r0
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	60ba      	str	r2, [r7, #8]
 8001706:	b2ca      	uxtb	r2, r1
 8001708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf0      	blt.n	80016fa <_read+0x12>
  }

  return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	60f8      	str	r0, [r7, #12]
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e009      	b.n	8001748 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fb0b 	bl	8000d58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	3301      	adds	r3, #1
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbf1      	blt.n	8001734 <_write+0x12>
  }
  return len;
 8001750:	687b      	ldr	r3, [r7, #4]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <_close>:

int _close(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001782:	605a      	str	r2, [r3, #4]
  return 0;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_isatty>:

int _isatty(int file)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017cc:	4a14      	ldr	r2, [pc, #80]	; (8001820 <_sbrk+0x5c>)
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <_sbrk+0x60>)
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <_sbrk+0x64>)
 80017e2:	4a12      	ldr	r2, [pc, #72]	; (800182c <_sbrk+0x68>)
 80017e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d207      	bcs.n	8001804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f4:	f008 f9d2 	bl	8009b9c <__errno>
 80017f8:	4603      	mov	r3, r0
 80017fa:	220c      	movs	r2, #12
 80017fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e009      	b.n	8001818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001804:	4b08      	ldr	r3, [pc, #32]	; (8001828 <_sbrk+0x64>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <_sbrk+0x64>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <_sbrk+0x64>)
 8001814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001816:	68fb      	ldr	r3, [r7, #12]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20030000 	.word	0x20030000
 8001824:	00000400 	.word	0x00000400
 8001828:	20000398 	.word	0x20000398
 800182c:	20000a90 	.word	0x20000a90

08001830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <SystemInit+0x20>)
 8001836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <SystemInit+0x20>)
 800183c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800188c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480d      	ldr	r0, [pc, #52]	; (8001890 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800185a:	490e      	ldr	r1, [pc, #56]	; (8001894 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001870:	4c0b      	ldr	r4, [pc, #44]	; (80018a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800187e:	f7ff ffd7 	bl	8001830 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001882:	f008 f991 	bl	8009ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7fe fe85 	bl	8000594 <main>
  bx  lr    
 800188a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800188c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001898:	0800ad44 	.word	0x0800ad44
  ldr r2, =_sbss
 800189c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80018a0:	20000a90 	.word	0x20000a90

080018a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_Init+0x40>)
 80018b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0a      	ldr	r2, [pc, #40]	; (80018e8 <HAL_Init+0x40>)
 80018be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a07      	ldr	r2, [pc, #28]	; (80018e8 <HAL_Init+0x40>)
 80018ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d0:	2003      	movs	r0, #3
 80018d2:	f000 f8fc 	bl	8001ace <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d6:	200f      	movs	r0, #15
 80018d8:	f7ff fe36 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018dc:	f7ff fa82 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	2000039c 	.word	0x2000039c

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	2000039c 	.word	0x2000039c

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000008 	.word	0x20000008

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f7ff ff4c 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af6:	f7ff ff61 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001afa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	6978      	ldr	r0, [r7, #20]
 8001b02:	f7ff ffb1 	bl	8001a68 <NVIC_EncodePriority>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff80 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff54 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e00e      	b.n	8001b68 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	795b      	ldrb	r3, [r3, #5]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d105      	bne.n	8001b60 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff f96a 	bl	8000e34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03b      	b.n	8001bfa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d106      	bne.n	8001b9c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff f96e 	bl	8000e78 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	f023 0107 	bic.w	r1, r3, #7
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68d1      	ldr	r1, [r2, #12]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d026      	beq.n	8001c72 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d021      	beq.n	8001c72 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c42:	f043 0201 	orr.w	r2, r3, #1
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2204      	movs	r2, #4
 8001c56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d026      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d021      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c94:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca2:	f043 0202 	orr.w	r2, r3, #2
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d026      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d021      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cec:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	f043 0204 	orr.w	r2, r3, #4
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d013      	beq.n	8001d54 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00e      	beq.n	8001d54 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f853 	bl	8001dfa <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d024      	beq.n	8001da8 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01f      	beq.n	8001da8 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d76:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d01f      	beq.n	8001df2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01a      	beq.n	8001df2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dca:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f80e 	bl	8001e0e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_DMA2D_ConfigLayer+0x20>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e079      	b.n	8001f38 <HAL_DMA2D_ConfigLayer+0x114>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	3318      	adds	r3, #24
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e6e:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e70:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b0a      	cmp	r3, #10
 8001e78:	d003      	beq.n	8001e82 <HAL_DMA2D_ConfigLayer+0x5e>
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b09      	cmp	r3, #9
 8001e80:	d107      	bne.n	8001e92 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e005      	b.n	8001e9e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	061b      	lsls	r3, r3, #24
 8001e98:	697a      	ldr	r2, [r7, #20]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d120      	bne.n	8001ee6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	ea02 0103 	and.w	r1, r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d003      	beq.n	8001ed6 <HAL_DMA2D_ConfigLayer+0xb2>
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b09      	cmp	r3, #9
 8001ed4:	d127      	bne.n	8001f26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ee4:	e01f      	b.n	8001f26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69da      	ldr	r2, [r3, #28]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	ea02 0103 	and.w	r1, r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b0a      	cmp	r3, #10
 8001f0e:	d003      	beq.n	8001f18 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b09      	cmp	r3, #9
 8001f16:	d106      	bne.n	8001f26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001f24:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	ff03000f 	.word	0xff03000f

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e177      	b.n	8002254 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8166 	bne.w	800224e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80c0 	beq.w	800224e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_GPIO_Init+0x324>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_GPIO_Init+0x324>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_GPIO_Init+0x324>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_GPIO_Init+0x328>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a58      	ldr	r2, [pc, #352]	; (8002274 <HAL_GPIO_Init+0x32c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d037      	beq.n	8002186 <HAL_GPIO_Init+0x23e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a57      	ldr	r2, [pc, #348]	; (8002278 <HAL_GPIO_Init+0x330>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_GPIO_Init+0x23a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a56      	ldr	r2, [pc, #344]	; (800227c <HAL_GPIO_Init+0x334>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d02b      	beq.n	800217e <HAL_GPIO_Init+0x236>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_GPIO_Init+0x338>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d025      	beq.n	800217a <HAL_GPIO_Init+0x232>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a54      	ldr	r2, [pc, #336]	; (8002284 <HAL_GPIO_Init+0x33c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d01f      	beq.n	8002176 <HAL_GPIO_Init+0x22e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a53      	ldr	r2, [pc, #332]	; (8002288 <HAL_GPIO_Init+0x340>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d019      	beq.n	8002172 <HAL_GPIO_Init+0x22a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_GPIO_Init+0x344>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_GPIO_Init+0x226>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_GPIO_Init+0x348>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00d      	beq.n	800216a <HAL_GPIO_Init+0x222>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a50      	ldr	r2, [pc, #320]	; (8002294 <HAL_GPIO_Init+0x34c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d007      	beq.n	8002166 <HAL_GPIO_Init+0x21e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4f      	ldr	r2, [pc, #316]	; (8002298 <HAL_GPIO_Init+0x350>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d101      	bne.n	8002162 <HAL_GPIO_Init+0x21a>
 800215e:	2309      	movs	r3, #9
 8002160:	e012      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002162:	230a      	movs	r3, #10
 8002164:	e010      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002166:	2308      	movs	r3, #8
 8002168:	e00e      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216a:	2307      	movs	r3, #7
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800216e:	2306      	movs	r3, #6
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x240>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x240>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	; (8002270 <HAL_GPIO_Init+0x328>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_GPIO_Init+0x354>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a34      	ldr	r2, [pc, #208]	; (800229c <HAL_GPIO_Init+0x354>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_GPIO_Init+0x354>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <HAL_GPIO_Init+0x354>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fa:	4b28      	ldr	r3, [pc, #160]	; (800229c <HAL_GPIO_Init+0x354>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_GPIO_Init+0x354>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_GPIO_Init+0x354>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002248:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_GPIO_Init+0x354>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae84 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	; 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40021c00 	.word	0x40021c00
 8002294:	40022000 	.word	0x40022000
 8002298:	40022400 	.word	0x40022400
 800229c:	40013c00 	.word	0x40013c00

080022a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022b0:	787b      	ldrb	r3, [r7, #1]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022bc:	e003      	b.n	80022c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022be:	887b      	ldrh	r3, [r7, #2]
 80022c0:	041a      	lsls	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80022d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d4:	b08f      	sub	sp, #60	; 0x3c
 80022d6:	af0a      	add	r7, sp, #40	; 0x28
 80022d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e054      	b.n	800238e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f007 f99c 	bl	800963c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2203      	movs	r2, #3
 8002308:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f9ca 	bl	80066bc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	687e      	ldr	r6, [r7, #4]
 8002330:	466d      	mov	r5, sp
 8002332:	f106 0410 	add.w	r4, r6, #16
 8002336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002342:	e885 0003 	stmia.w	r5, {r0, r1}
 8002346:	1d33      	adds	r3, r6, #4
 8002348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f004 f944 	bl	80065d8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	4618      	mov	r0, r3
 8002358:	f004 f9c1 	bl	80066de <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	603b      	str	r3, [r7, #0]
 8002362:	687e      	ldr	r6, [r7, #4]
 8002364:	466d      	mov	r5, sp
 8002366:	f106 0410 	add.w	r4, r6, #16
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002376:	e885 0003 	stmia.w	r5, {r0, r1}
 800237a:	1d33      	adds	r3, r6, #4
 800237c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800237e:	6838      	ldr	r0, [r7, #0]
 8002380:	f004 fb4a 	bl	8006a18 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002396 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002396:	b590      	push	{r4, r7, lr}
 8002398:	b089      	sub	sp, #36	; 0x24
 800239a:	af04      	add	r7, sp, #16
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	4608      	mov	r0, r1
 80023a0:	4611      	mov	r1, r2
 80023a2:	461a      	mov	r2, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	70fb      	strb	r3, [r7, #3]
 80023a8:	460b      	mov	r3, r1
 80023aa:	70bb      	strb	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d101      	bne.n	80023be <HAL_HCD_HC_Init+0x28>
 80023ba:	2302      	movs	r3, #2
 80023bc:	e076      	b.n	80024ac <HAL_HCD_HC_Init+0x116>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	333d      	adds	r3, #61	; 0x3d
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80023d8:	78fb      	ldrb	r3, [r7, #3]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	212c      	movs	r1, #44	; 0x2c
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	4413      	add	r3, r2
 80023e4:	3338      	adds	r3, #56	; 0x38
 80023e6:	787a      	ldrb	r2, [r7, #1]
 80023e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	212c      	movs	r1, #44	; 0x2c
 80023f0:	fb01 f303 	mul.w	r3, r1, r3
 80023f4:	4413      	add	r3, r2
 80023f6:	3340      	adds	r3, #64	; 0x40
 80023f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80023fa:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3339      	adds	r3, #57	; 0x39
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	333f      	adds	r3, #63	; 0x3f
 800241c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002420:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	78ba      	ldrb	r2, [r7, #2]
 8002426:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800242a:	b2d0      	uxtb	r0, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	212c      	movs	r1, #44	; 0x2c
 8002430:	fb01 f303 	mul.w	r3, r1, r3
 8002434:	4413      	add	r3, r2
 8002436:	333a      	adds	r3, #58	; 0x3a
 8002438:	4602      	mov	r2, r0
 800243a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800243c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002440:	2b00      	cmp	r3, #0
 8002442:	da09      	bge.n	8002458 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002444:	78fb      	ldrb	r3, [r7, #3]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	212c      	movs	r1, #44	; 0x2c
 800244a:	fb01 f303 	mul.w	r3, r1, r3
 800244e:	4413      	add	r3, r2
 8002450:	333b      	adds	r3, #59	; 0x3b
 8002452:	2201      	movs	r2, #1
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e008      	b.n	800246a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	212c      	movs	r1, #44	; 0x2c
 800245e:	fb01 f303 	mul.w	r3, r1, r3
 8002462:	4413      	add	r3, r2
 8002464:	333b      	adds	r3, #59	; 0x3b
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	333c      	adds	r3, #60	; 0x3c
 8002478:	f897 2020 	ldrb.w	r2, [r7, #32]
 800247c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	787c      	ldrb	r4, [r7, #1]
 8002484:	78ba      	ldrb	r2, [r7, #2]
 8002486:	78f9      	ldrb	r1, [r7, #3]
 8002488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800248a:	9302      	str	r3, [sp, #8]
 800248c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002490:	9301      	str	r3, [sp, #4]
 8002492:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	4623      	mov	r3, r4
 800249a:	f004 fc43 	bl	8006d24 <USB_HC_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}

080024b4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <HAL_HCD_HC_Halt+0x1e>
 80024ce:	2302      	movs	r3, #2
 80024d0:	e00f      	b.n	80024f2 <HAL_HCD_HC_Halt+0x3e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fe93 	bl	800720e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	4608      	mov	r0, r1
 8002506:	4611      	mov	r1, r2
 8002508:	461a      	mov	r2, r3
 800250a:	4603      	mov	r3, r0
 800250c:	70fb      	strb	r3, [r7, #3]
 800250e:	460b      	mov	r3, r1
 8002510:	70bb      	strb	r3, [r7, #2]
 8002512:	4613      	mov	r3, r2
 8002514:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	333b      	adds	r3, #59	; 0x3b
 8002524:	78ba      	ldrb	r2, [r7, #2]
 8002526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	333f      	adds	r3, #63	; 0x3f
 8002536:	787a      	ldrb	r2, [r7, #1]
 8002538:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800253a:	7c3b      	ldrb	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d112      	bne.n	8002566 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	212c      	movs	r1, #44	; 0x2c
 8002546:	fb01 f303 	mul.w	r3, r1, r3
 800254a:	4413      	add	r3, r2
 800254c:	3342      	adds	r3, #66	; 0x42
 800254e:	2203      	movs	r2, #3
 8002550:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002552:	78fb      	ldrb	r3, [r7, #3]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	212c      	movs	r1, #44	; 0x2c
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	4413      	add	r3, r2
 800255e:	333d      	adds	r3, #61	; 0x3d
 8002560:	7f3a      	ldrb	r2, [r7, #28]
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	e008      	b.n	8002578 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3342      	adds	r3, #66	; 0x42
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002578:	787b      	ldrb	r3, [r7, #1]
 800257a:	2b03      	cmp	r3, #3
 800257c:	f200 80c6 	bhi.w	800270c <HAL_HCD_HC_SubmitRequest+0x210>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	08002599 	.word	0x08002599
 800258c:	080026f9 	.word	0x080026f9
 8002590:	080025fd 	.word	0x080025fd
 8002594:	0800267b 	.word	0x0800267b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002598:	7c3b      	ldrb	r3, [r7, #16]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 80b8 	bne.w	8002710 <HAL_HCD_HC_SubmitRequest+0x214>
 80025a0:	78bb      	ldrb	r3, [r7, #2]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80b4 	bne.w	8002710 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80025a8:	8b3b      	ldrh	r3, [r7, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d108      	bne.n	80025c0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	212c      	movs	r1, #44	; 0x2c
 80025b4:	fb01 f303 	mul.w	r3, r1, r3
 80025b8:	4413      	add	r3, r2
 80025ba:	3355      	adds	r3, #85	; 0x55
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025c0:	78fb      	ldrb	r3, [r7, #3]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	212c      	movs	r1, #44	; 0x2c
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4413      	add	r3, r2
 80025cc:	3355      	adds	r3, #85	; 0x55
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d109      	bne.n	80025e8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	212c      	movs	r1, #44	; 0x2c
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	3342      	adds	r3, #66	; 0x42
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80025e6:	e093      	b.n	8002710 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3342      	adds	r3, #66	; 0x42
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
      break;
 80025fa:	e089      	b.n	8002710 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025fc:	78bb      	ldrb	r3, [r7, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11d      	bne.n	800263e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	3355      	adds	r3, #85	; 0x55
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002616:	78fb      	ldrb	r3, [r7, #3]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3342      	adds	r3, #66	; 0x42
 8002624:	2200      	movs	r2, #0
 8002626:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002628:	e073      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	212c      	movs	r1, #44	; 0x2c
 8002630:	fb01 f303 	mul.w	r3, r1, r3
 8002634:	4413      	add	r3, r2
 8002636:	3342      	adds	r3, #66	; 0x42
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
      break;
 800263c:	e069      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800263e:	78fb      	ldrb	r3, [r7, #3]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	212c      	movs	r1, #44	; 0x2c
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	4413      	add	r3, r2
 800264a:	3354      	adds	r3, #84	; 0x54
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d109      	bne.n	8002666 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	3342      	adds	r3, #66	; 0x42
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
      break;
 8002664:	e055      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	212c      	movs	r1, #44	; 0x2c
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	4413      	add	r3, r2
 8002672:	3342      	adds	r3, #66	; 0x42
 8002674:	2202      	movs	r2, #2
 8002676:	701a      	strb	r2, [r3, #0]
      break;
 8002678:	e04b      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800267a:	78bb      	ldrb	r3, [r7, #2]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d11d      	bne.n	80026bc <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	212c      	movs	r1, #44	; 0x2c
 8002686:	fb01 f303 	mul.w	r3, r1, r3
 800268a:	4413      	add	r3, r2
 800268c:	3355      	adds	r3, #85	; 0x55
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d109      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	212c      	movs	r1, #44	; 0x2c
 800269a:	fb01 f303 	mul.w	r3, r1, r3
 800269e:	4413      	add	r3, r2
 80026a0:	3342      	adds	r3, #66	; 0x42
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026a6:	e034      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	212c      	movs	r1, #44	; 0x2c
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	4413      	add	r3, r2
 80026b4:	3342      	adds	r3, #66	; 0x42
 80026b6:	2202      	movs	r2, #2
 80026b8:	701a      	strb	r2, [r3, #0]
      break;
 80026ba:	e02a      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	212c      	movs	r1, #44	; 0x2c
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	3354      	adds	r3, #84	; 0x54
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d109      	bne.n	80026e4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	212c      	movs	r1, #44	; 0x2c
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	4413      	add	r3, r2
 80026dc:	3342      	adds	r3, #66	; 0x42
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
      break;
 80026e2:	e016      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	212c      	movs	r1, #44	; 0x2c
 80026ea:	fb01 f303 	mul.w	r3, r1, r3
 80026ee:	4413      	add	r3, r2
 80026f0:	3342      	adds	r3, #66	; 0x42
 80026f2:	2202      	movs	r2, #2
 80026f4:	701a      	strb	r2, [r3, #0]
      break;
 80026f6:	e00c      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f8:	78fb      	ldrb	r3, [r7, #3]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3342      	adds	r3, #66	; 0x42
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
      break;
 800270a:	e002      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800270c:	bf00      	nop
 800270e:	e000      	b.n	8002712 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002710:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3344      	adds	r3, #68	; 0x44
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	8b3a      	ldrh	r2, [r7, #24]
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	202c      	movs	r0, #44	; 0x2c
 800272c:	fb00 f303 	mul.w	r3, r0, r3
 8002730:	440b      	add	r3, r1
 8002732:	334c      	adds	r3, #76	; 0x4c
 8002734:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	3360      	adds	r3, #96	; 0x60
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	212c      	movs	r1, #44	; 0x2c
 800274e:	fb01 f303 	mul.w	r3, r1, r3
 8002752:	4413      	add	r3, r2
 8002754:	3350      	adds	r3, #80	; 0x50
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	212c      	movs	r1, #44	; 0x2c
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	4413      	add	r3, r2
 8002766:	3339      	adds	r3, #57	; 0x39
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	3361      	adds	r3, #97	; 0x61
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	222c      	movs	r2, #44	; 0x2c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	3338      	adds	r3, #56	; 0x38
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	18d1      	adds	r1, r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	f004 fbe6 	bl	8006f68 <USB_HC_StartXfer>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop

080027a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 f8e7 	bl	8006992 <USB_GetMode>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	f040 80f6 	bne.w	80029b8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f004 f8cb 	bl	800696c <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80ec 	beq.w	80029b6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 f8c2 	bl	800696c <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027f2:	d104      	bne.n	80027fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80027fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 f8b2 	bl	800696c <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002812:	d104      	bne.n	800281e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800281c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 f8a2 	bl	800696c <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002832:	d104      	bne.n	800283e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800283c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 f892 	bl	800696c <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d103      	bne.n	800285a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2202      	movs	r2, #2
 8002858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f004 f884 	bl	800696c <USB_ReadInterrupts>
 8002864:	4603      	mov	r3, r0
 8002866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800286a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800286e:	d11c      	bne.n	80028aa <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002878:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10f      	bne.n	80028aa <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800288a:	2110      	movs	r1, #16
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f003 ff73 	bl	8006778 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002892:	6938      	ldr	r0, [r7, #16]
 8002894:	f003 ffa4 	bl	80067e0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f004 f97a 	bl	8006b98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f006 ff43 	bl	8009730 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f004 f85c 	bl	800696c <USB_ReadInterrupts>
 80028b4:	4603      	mov	r3, r0
 80028b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028be:	d102      	bne.n	80028c6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f001 f89e 	bl	8003a02 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 f84e 	bl	800696c <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d106      	bne.n	80028e8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f006 ff0c 	bl	80096f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2208      	movs	r2, #8
 80028e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 f83d 	bl	800696c <USB_ReadInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d101      	bne.n	8002900 <HAL_HCD_IRQHandler+0x158>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <HAL_HCD_IRQHandler+0x15a>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d012      	beq.n	800292c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0210 	bic.w	r2, r2, #16
 8002914:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 ffa1 	bl	800385e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0210 	orr.w	r2, r2, #16
 800292a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 f81b 	bl	800696c <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002940:	d13a      	bne.n	80029b8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f004 fc50 	bl	80071ec <USB_HC_ReadInterrupt>
 800294c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e025      	b.n	80029a0 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	fa22 f303 	lsr.w	r3, r2, r3
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d018      	beq.n	800299a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800297a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800297e:	d106      	bne.n	800298e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	4619      	mov	r1, r3
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f8ab 	bl	8002ae2 <HCD_HC_IN_IRQHandler>
 800298c:	e005      	b.n	800299a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	4619      	mov	r1, r3
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 fbf9 	bl	800318c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d3d4      	bcc.n	8002954 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029b2:	615a      	str	r2, [r3, #20]
 80029b4:	e000      	b.n	80029b8 <HAL_HCD_IRQHandler+0x210>
      return;
 80029b6:	bf00      	nop
    }
  }
}
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_HCD_Start+0x16>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e013      	b.n	80029fc <HAL_HCD_Start+0x3e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 f93c 	bl	8006c60 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 fe54 	bl	800669a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_HCD_Stop+0x16>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e00d      	b.n	8002a36 <HAL_HCD_Stop+0x32>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 fd2a 	bl	8007480 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 f8de 	bl	8006c0c <USB_ResetPort>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	460b      	mov	r3, r1
 8002a64:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a66:	78fb      	ldrb	r3, [r7, #3]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	212c      	movs	r1, #44	; 0x2c
 8002a6c:	fb01 f303 	mul.w	r3, r1, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	3360      	adds	r3, #96	; 0x60
 8002a74:	781b      	ldrb	r3, [r3, #0]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a8e:	78fb      	ldrb	r3, [r7, #3]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	212c      	movs	r1, #44	; 0x2c
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	4413      	add	r3, r2
 8002a9a:	3350      	adds	r3, #80	; 0x50
 8002a9c:	681b      	ldr	r3, [r3, #0]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 f922 	bl	8006d00 <USB_GetCurrentFrame>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 f8fd 	bl	8006cd2 <USB_GetHostSpeed>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b086      	sub	sp, #24
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d11a      	bne.n	8002b48 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2304      	movs	r3, #4
 8002b22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	212c      	movs	r1, #44	; 0x2c
 8002b2a:	fb01 f303 	mul.w	r3, r1, r3
 8002b2e:	4413      	add	r3, r2
 8002b30:	3361      	adds	r3, #97	; 0x61
 8002b32:	2206      	movs	r2, #6
 8002b34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fb64 	bl	800720e <USB_HC_Halt>
 8002b46:	e0af      	b.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5e:	d11b      	bne.n	8002b98 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	212c      	movs	r1, #44	; 0x2c
 8002b7a:	fb01 f303 	mul.w	r3, r1, r3
 8002b7e:	4413      	add	r3, r2
 8002b80:	3361      	adds	r3, #97	; 0x61
 8002b82:	2207      	movs	r2, #7
 8002b84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f004 fb3c 	bl	800720e <USB_HC_Halt>
 8002b96:	e087      	b.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d109      	bne.n	8002bc2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	6093      	str	r3, [r2, #8]
 8002bc0:	e072      	b.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d11a      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	015a      	lsls	r2, r3, #5
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002be4:	461a      	mov	r2, r3
 8002be6:	2308      	movs	r3, #8
 8002be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3361      	adds	r3, #97	; 0x61
 8002bf8:	2205      	movs	r2, #5
 8002bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	4611      	mov	r1, r2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f004 fb01 	bl	800720e <USB_HC_Halt>
 8002c0c:	e04c      	b.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c24:	d11b      	bne.n	8002c5e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c32:	461a      	mov	r2, r3
 8002c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	3361      	adds	r3, #97	; 0x61
 8002c48:	2208      	movs	r2, #8
 8002c4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f004 fad9 	bl	800720e <USB_HC_Halt>
 8002c5c:	e024      	b.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d119      	bne.n	8002ca8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	461a      	mov	r2, r3
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	212c      	movs	r1, #44	; 0x2c
 8002c8c:	fb01 f303 	mul.w	r3, r1, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	3361      	adds	r3, #97	; 0x61
 8002c94:	2206      	movs	r2, #6
 8002c96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fab3 	bl	800720e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cbe:	d112      	bne.n	8002ce6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f004 fa9f 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ce2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002ce4:	e24e      	b.n	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	015a      	lsls	r2, r3, #5
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4413      	add	r3, r2
 8002cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	f040 80df 	bne.w	8002ebc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d019      	beq.n	8002d3a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	212c      	movs	r1, #44	; 0x2c
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	4413      	add	r3, r2
 8002d12:	3348      	adds	r3, #72	; 0x48
 8002d14:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0159      	lsls	r1, r3, #5
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002d28:	1ad2      	subs	r2, r2, r3
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	202c      	movs	r0, #44	; 0x2c
 8002d30:	fb00 f303 	mul.w	r3, r0, r3
 8002d34:	440b      	add	r3, r1
 8002d36:	3350      	adds	r3, #80	; 0x50
 8002d38:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	212c      	movs	r1, #44	; 0x2c
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	3361      	adds	r3, #97	; 0x61
 8002d48:	2201      	movs	r2, #1
 8002d4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	335c      	adds	r3, #92	; 0x5c
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	015a      	lsls	r2, r3, #5
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	333f      	adds	r3, #63	; 0x3f
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d009      	beq.n	8002d98 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	333f      	adds	r3, #63	; 0x3f
 8002d92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d111      	bne.n	8002dbc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f004 fa33 	bl	800720e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	2310      	movs	r3, #16
 8002db8:	6093      	str	r3, [r2, #8]
 8002dba:	e03a      	b.n	8002e32 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	333f      	adds	r3, #63	; 0x3f
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b03      	cmp	r3, #3
 8002dce:	d009      	beq.n	8002de4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	333f      	adds	r3, #63	; 0x3f
 8002dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d126      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	015a      	lsls	r2, r3, #5
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4413      	add	r3, r2
 8002dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	0151      	lsls	r1, r2, #5
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	440a      	add	r2, r1
 8002dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3360      	adds	r3, #96	; 0x60
 8002e12:	2201      	movs	r2, #1
 8002e14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	b2d9      	uxtb	r1, r3
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	202c      	movs	r0, #44	; 0x2c
 8002e20:	fb00 f303 	mul.w	r3, r0, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3360      	adds	r3, #96	; 0x60
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f006 fc8d 	bl	800974c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d12b      	bne.n	8002e92 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	212c      	movs	r1, #44	; 0x2c
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	4413      	add	r3, r2
 8002e46:	3348      	adds	r3, #72	; 0x48
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	202c      	movs	r0, #44	; 0x2c
 8002e50:	fb00 f202 	mul.w	r2, r0, r2
 8002e54:	440a      	add	r2, r1
 8002e56:	3240      	adds	r2, #64	; 0x40
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 818e 	beq.w	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	212c      	movs	r1, #44	; 0x2c
 8002e6e:	fb01 f303 	mul.w	r3, r1, r3
 8002e72:	4413      	add	r3, r2
 8002e74:	3354      	adds	r3, #84	; 0x54
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	f083 0301 	eor.w	r3, r3, #1
 8002e7c:	b2d8      	uxtb	r0, r3
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	212c      	movs	r1, #44	; 0x2c
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3354      	adds	r3, #84	; 0x54
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	701a      	strb	r2, [r3, #0]
}
 8002e90:	e178      	b.n	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	212c      	movs	r1, #44	; 0x2c
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3354      	adds	r3, #84	; 0x54
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	f083 0301 	eor.w	r3, r3, #1
 8002ea6:	b2d8      	uxtb	r0, r3
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3354      	adds	r3, #84	; 0x54
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	701a      	strb	r2, [r3, #0]
}
 8002eba:	e163      	b.n	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 80f6 	bne.w	80030c0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	212c      	movs	r1, #44	; 0x2c
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3361      	adds	r3, #97	; 0x61
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d109      	bne.n	8002efc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	212c      	movs	r1, #44	; 0x2c
 8002eee:	fb01 f303 	mul.w	r3, r1, r3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	3360      	adds	r3, #96	; 0x60
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e0c9      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	212c      	movs	r1, #44	; 0x2c
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	4413      	add	r3, r2
 8002f08:	3361      	adds	r3, #97	; 0x61
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d109      	bne.n	8002f24 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	2205      	movs	r2, #5
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e0b5      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	212c      	movs	r1, #44	; 0x2c
 8002f2a:	fb01 f303 	mul.w	r3, r1, r3
 8002f2e:	4413      	add	r3, r2
 8002f30:	3361      	adds	r3, #97	; 0x61
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d009      	beq.n	8002f4c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	212c      	movs	r1, #44	; 0x2c
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	4413      	add	r3, r2
 8002f44:	3361      	adds	r3, #97	; 0x61
 8002f46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d150      	bne.n	8002fee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	212c      	movs	r1, #44	; 0x2c
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	335c      	adds	r3, #92	; 0x5c
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	202c      	movs	r0, #44	; 0x2c
 8002f64:	fb00 f303 	mul.w	r3, r0, r3
 8002f68:	440b      	add	r3, r1
 8002f6a:	335c      	adds	r3, #92	; 0x5c
 8002f6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	335c      	adds	r3, #92	; 0x5c
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d912      	bls.n	8002fa8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	335c      	adds	r3, #92	; 0x5c
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3360      	adds	r3, #96	; 0x60
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fa6:	e073      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3360      	adds	r3, #96	; 0x60
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	015a      	lsls	r2, r3, #5
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002fd0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002fd8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fec:	e050      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	212c      	movs	r1, #44	; 0x2c
 8002ff4:	fb01 f303 	mul.w	r3, r1, r3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3361      	adds	r3, #97	; 0x61
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d122      	bne.n	8003048 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	212c      	movs	r1, #44	; 0x2c
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	4413      	add	r3, r2
 800300e:	3360      	adds	r3, #96	; 0x60
 8003010:	2202      	movs	r2, #2
 8003012:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800302a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003032:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e023      	b.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	212c      	movs	r1, #44	; 0x2c
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	4413      	add	r3, r2
 8003054:	3361      	adds	r3, #97	; 0x61
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b07      	cmp	r3, #7
 800305a:	d119      	bne.n	8003090 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	212c      	movs	r1, #44	; 0x2c
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	4413      	add	r3, r2
 8003068:	335c      	adds	r3, #92	; 0x5c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	1c5a      	adds	r2, r3, #1
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	202c      	movs	r0, #44	; 0x2c
 8003074:	fb00 f303 	mul.w	r3, r0, r3
 8003078:	440b      	add	r3, r1
 800307a:	335c      	adds	r3, #92	; 0x5c
 800307c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	3360      	adds	r3, #96	; 0x60
 800308c:	2204      	movs	r2, #4
 800308e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	2302      	movs	r3, #2
 80030a0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	202c      	movs	r0, #44	; 0x2c
 80030ac:	fb00 f303 	mul.w	r3, r0, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	3360      	adds	r3, #96	; 0x60
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f006 fb47 	bl	800974c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80030be:	e061      	b.n	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b10      	cmp	r3, #16
 80030d4:	d156      	bne.n	8003184 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	212c      	movs	r1, #44	; 0x2c
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	4413      	add	r3, r2
 80030e2:	333f      	adds	r3, #63	; 0x3f
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d111      	bne.n	800310e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	212c      	movs	r1, #44	; 0x2c
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	4413      	add	r3, r2
 80030f6:	335c      	adds	r3, #92	; 0x5c
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f004 f881 	bl	800720e <USB_HC_Halt>
 800310c:	e031      	b.n	8003172 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	212c      	movs	r1, #44	; 0x2c
 8003114:	fb01 f303 	mul.w	r3, r1, r3
 8003118:	4413      	add	r3, r2
 800311a:	333f      	adds	r3, #63	; 0x3f
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d009      	beq.n	8003136 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	212c      	movs	r1, #44	; 0x2c
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	4413      	add	r3, r2
 800312e:	333f      	adds	r3, #63	; 0x3f
 8003130:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003132:	2b02      	cmp	r3, #2
 8003134:	d11d      	bne.n	8003172 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	212c      	movs	r1, #44	; 0x2c
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	335c      	adds	r3, #92	; 0x5c
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d110      	bne.n	8003172 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3361      	adds	r3, #97	; 0x61
 800315e:	2203      	movs	r2, #3
 8003160:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f004 f84e 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	461a      	mov	r2, r3
 8003180:	2310      	movs	r3, #16
 8003182:	6093      	str	r3, [r2, #8]
}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d11a      	bne.n	80031f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	461a      	mov	r2, r3
 80031ca:	2304      	movs	r3, #4
 80031cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	212c      	movs	r1, #44	; 0x2c
 80031d4:	fb01 f303 	mul.w	r3, r1, r3
 80031d8:	4413      	add	r3, r2
 80031da:	3361      	adds	r3, #97	; 0x61
 80031dc:	2206      	movs	r2, #6
 80031de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f80f 	bl	800720e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80031f0:	e331      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b20      	cmp	r3, #32
 8003206:	d12e      	bne.n	8003266 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	015a      	lsls	r2, r3, #5
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	4413      	add	r3, r2
 8003210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003214:	461a      	mov	r2, r3
 8003216:	2320      	movs	r3, #32
 8003218:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	212c      	movs	r1, #44	; 0x2c
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	333d      	adds	r3, #61	; 0x3d
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 8313 	bne.w	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	333d      	adds	r3, #61	; 0x3d
 800323e:	2200      	movs	r2, #0
 8003240:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	212c      	movs	r1, #44	; 0x2c
 8003248:	fb01 f303 	mul.w	r3, r1, r3
 800324c:	4413      	add	r3, r2
 800324e:	3360      	adds	r3, #96	; 0x60
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 ffd5 	bl	800720e <USB_HC_Halt>
}
 8003264:	e2f7      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327c:	d112      	bne.n	80032a4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	4413      	add	r3, r2
 8003286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328a:	461a      	mov	r2, r3
 800328c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003290:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	697a      	ldr	r2, [r7, #20]
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f003 ffb6 	bl	800720e <USB_HC_Halt>
}
 80032a2:	e2d8      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d140      	bne.n	800333c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	212c      	movs	r1, #44	; 0x2c
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	335c      	adds	r3, #92	; 0x5c
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032de:	2b40      	cmp	r3, #64	; 0x40
 80032e0:	d111      	bne.n	8003306 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	212c      	movs	r1, #44	; 0x2c
 80032e8:	fb01 f303 	mul.w	r3, r1, r3
 80032ec:	4413      	add	r3, r2
 80032ee:	333d      	adds	r3, #61	; 0x3d
 80032f0:	2201      	movs	r2, #1
 80032f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	4413      	add	r3, r2
 800330e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003312:	461a      	mov	r2, r3
 8003314:	2301      	movs	r3, #1
 8003316:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	212c      	movs	r1, #44	; 0x2c
 800331e:	fb01 f303 	mul.w	r3, r1, r3
 8003322:	4413      	add	r3, r2
 8003324:	3361      	adds	r3, #97	; 0x61
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f003 ff6a 	bl	800720e <USB_HC_Halt>
}
 800333a:	e28c      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4413      	add	r3, r2
 8003344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b40      	cmp	r3, #64	; 0x40
 8003350:	d12c      	bne.n	80033ac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	212c      	movs	r1, #44	; 0x2c
 8003358:	fb01 f303 	mul.w	r3, r1, r3
 800335c:	4413      	add	r3, r2
 800335e:	3361      	adds	r3, #97	; 0x61
 8003360:	2204      	movs	r2, #4
 8003362:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	212c      	movs	r1, #44	; 0x2c
 800336a:	fb01 f303 	mul.w	r3, r1, r3
 800336e:	4413      	add	r3, r2
 8003370:	333d      	adds	r3, #61	; 0x3d
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	335c      	adds	r3, #92	; 0x5c
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f003 ff3b 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	2340      	movs	r3, #64	; 0x40
 80033a8:	6093      	str	r3, [r2, #8]
}
 80033aa:	e254      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d11a      	bne.n	80033f8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	2308      	movs	r3, #8
 80033d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	212c      	movs	r1, #44	; 0x2c
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	3361      	adds	r3, #97	; 0x61
 80033e2:	2205      	movs	r2, #5
 80033e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f003 ff0c 	bl	800720e <USB_HC_Halt>
}
 80033f6:	e22e      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b10      	cmp	r3, #16
 800340c:	d140      	bne.n	8003490 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	212c      	movs	r1, #44	; 0x2c
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	335c      	adds	r3, #92	; 0x5c
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3361      	adds	r3, #97	; 0x61
 800342e:	2203      	movs	r2, #3
 8003430:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	333d      	adds	r3, #61	; 0x3d
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d112      	bne.n	800346c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	212c      	movs	r1, #44	; 0x2c
 800344c:	fb01 f303 	mul.w	r3, r1, r3
 8003450:	4413      	add	r3, r2
 8003452:	333c      	adds	r3, #60	; 0x3c
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d108      	bne.n	800346c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	212c      	movs	r1, #44	; 0x2c
 8003460:	fb01 f303 	mul.w	r3, r1, r3
 8003464:	4413      	add	r3, r2
 8003466:	333d      	adds	r3, #61	; 0x3d
 8003468:	2201      	movs	r2, #1
 800346a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	4611      	mov	r1, r2
 8003476:	4618      	mov	r0, r3
 8003478:	f003 fec9 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	461a      	mov	r2, r3
 800348a:	2310      	movs	r3, #16
 800348c:	6093      	str	r3, [r2, #8]
}
 800348e:	e1e2      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	4413      	add	r3, r2
 8003498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a2:	2b80      	cmp	r3, #128	; 0x80
 80034a4:	d164      	bne.n	8003570 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d111      	bne.n	80034d2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3361      	adds	r3, #97	; 0x61
 80034bc:	2206      	movs	r2, #6
 80034be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 fe9f 	bl	800720e <USB_HC_Halt>
 80034d0:	e044      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	212c      	movs	r1, #44	; 0x2c
 80034d8:	fb01 f303 	mul.w	r3, r1, r3
 80034dc:	4413      	add	r3, r2
 80034de:	335c      	adds	r3, #92	; 0x5c
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	202c      	movs	r0, #44	; 0x2c
 80034ea:	fb00 f303 	mul.w	r3, r0, r3
 80034ee:	440b      	add	r3, r1
 80034f0:	335c      	adds	r3, #92	; 0x5c
 80034f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80034f4:	687a      	ldr	r2, [r7, #4]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	335c      	adds	r3, #92	; 0x5c
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d920      	bls.n	800354a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	335c      	adds	r3, #92	; 0x5c
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	212c      	movs	r1, #44	; 0x2c
 8003520:	fb01 f303 	mul.w	r3, r1, r3
 8003524:	4413      	add	r3, r2
 8003526:	3360      	adds	r3, #96	; 0x60
 8003528:	2204      	movs	r2, #4
 800352a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	b2d9      	uxtb	r1, r3
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	202c      	movs	r0, #44	; 0x2c
 8003536:	fb00 f303 	mul.w	r3, r0, r3
 800353a:	4413      	add	r3, r2
 800353c:	3360      	adds	r3, #96	; 0x60
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	461a      	mov	r2, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f006 f902 	bl	800974c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003548:	e008      	b.n	800355c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3360      	adds	r3, #96	; 0x60
 8003558:	2202      	movs	r2, #2
 800355a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003568:	461a      	mov	r2, r3
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	6093      	str	r3, [r2, #8]
}
 800356e:	e172      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d11b      	bne.n	80035c0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	212c      	movs	r1, #44	; 0x2c
 800358e:	fb01 f303 	mul.w	r3, r1, r3
 8003592:	4413      	add	r3, r2
 8003594:	3361      	adds	r3, #97	; 0x61
 8003596:	2208      	movs	r2, #8
 8003598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fe32 	bl	800720e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b6:	461a      	mov	r2, r3
 80035b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035bc:	6093      	str	r3, [r2, #8]
}
 80035be:	e14a      	b.n	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	f040 813f 	bne.w	8003856 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3361      	adds	r3, #97	; 0x61
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d17d      	bne.n	80036e8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3360      	adds	r3, #96	; 0x60
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	212c      	movs	r1, #44	; 0x2c
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	4413      	add	r3, r2
 800360a:	333f      	adds	r3, #63	; 0x3f
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b02      	cmp	r3, #2
 8003610:	d00a      	beq.n	8003628 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	212c      	movs	r1, #44	; 0x2c
 8003618:	fb01 f303 	mul.w	r3, r1, r3
 800361c:	4413      	add	r3, r2
 800361e:	333f      	adds	r3, #63	; 0x3f
 8003620:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003622:	2b03      	cmp	r3, #3
 8003624:	f040 8100 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d113      	bne.n	8003658 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	212c      	movs	r1, #44	; 0x2c
 8003636:	fb01 f303 	mul.w	r3, r1, r3
 800363a:	4413      	add	r3, r2
 800363c:	3355      	adds	r3, #85	; 0x55
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	f083 0301 	eor.w	r3, r3, #1
 8003644:	b2d8      	uxtb	r0, r3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	212c      	movs	r1, #44	; 0x2c
 800364c:	fb01 f303 	mul.w	r3, r1, r3
 8003650:	4413      	add	r3, r2
 8003652:	3355      	adds	r3, #85	; 0x55
 8003654:	4602      	mov	r2, r0
 8003656:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b01      	cmp	r3, #1
 800365e:	f040 80e3 	bne.w	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	334c      	adds	r3, #76	; 0x4c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 80d8 	beq.w	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	212c      	movs	r1, #44	; 0x2c
 800367e:	fb01 f303 	mul.w	r3, r1, r3
 8003682:	4413      	add	r3, r2
 8003684:	334c      	adds	r3, #76	; 0x4c
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	202c      	movs	r0, #44	; 0x2c
 800368e:	fb00 f202 	mul.w	r2, r0, r2
 8003692:	440a      	add	r2, r1
 8003694:	3240      	adds	r2, #64	; 0x40
 8003696:	8812      	ldrh	r2, [r2, #0]
 8003698:	4413      	add	r3, r2
 800369a:	3b01      	subs	r3, #1
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	202c      	movs	r0, #44	; 0x2c
 80036a2:	fb00 f202 	mul.w	r2, r0, r2
 80036a6:	440a      	add	r2, r1
 80036a8:	3240      	adds	r2, #64	; 0x40
 80036aa:	8812      	ldrh	r2, [r2, #0]
 80036ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 80b5 	beq.w	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	3355      	adds	r3, #85	; 0x55
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	f083 0301 	eor.w	r3, r3, #1
 80036d2:	b2d8      	uxtb	r0, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3355      	adds	r3, #85	; 0x55
 80036e2:	4602      	mov	r2, r0
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e09f      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	3361      	adds	r3, #97	; 0x61
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d109      	bne.n	8003710 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	212c      	movs	r1, #44	; 0x2c
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	3360      	adds	r3, #96	; 0x60
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
 800370e:	e08b      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3361      	adds	r3, #97	; 0x61
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d109      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	3360      	adds	r3, #96	; 0x60
 8003732:	2202      	movs	r2, #2
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e077      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	212c      	movs	r1, #44	; 0x2c
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	4413      	add	r3, r2
 8003744:	3361      	adds	r3, #97	; 0x61
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b05      	cmp	r3, #5
 800374a:	d109      	bne.n	8003760 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	3360      	adds	r3, #96	; 0x60
 800375a:	2205      	movs	r2, #5
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e063      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	212c      	movs	r1, #44	; 0x2c
 8003766:	fb01 f303 	mul.w	r3, r1, r3
 800376a:	4413      	add	r3, r2
 800376c:	3361      	adds	r3, #97	; 0x61
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d009      	beq.n	8003788 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	212c      	movs	r1, #44	; 0x2c
 800377a:	fb01 f303 	mul.w	r3, r1, r3
 800377e:	4413      	add	r3, r2
 8003780:	3361      	adds	r3, #97	; 0x61
 8003782:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003784:	2b08      	cmp	r3, #8
 8003786:	d14f      	bne.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	212c      	movs	r1, #44	; 0x2c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	335c      	adds	r3, #92	; 0x5c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	202c      	movs	r0, #44	; 0x2c
 80037a0:	fb00 f303 	mul.w	r3, r0, r3
 80037a4:	440b      	add	r3, r1
 80037a6:	335c      	adds	r3, #92	; 0x5c
 80037a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	335c      	adds	r3, #92	; 0x5c
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d912      	bls.n	80037e4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	335c      	adds	r3, #92	; 0x5c
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	3360      	adds	r3, #96	; 0x60
 80037de:	2204      	movs	r2, #4
 80037e0:	701a      	strb	r2, [r3, #0]
 80037e2:	e021      	b.n	8003828 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3360      	adds	r3, #96	; 0x60
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800380c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003814:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003834:	461a      	mov	r2, r3
 8003836:	2302      	movs	r3, #2
 8003838:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	202c      	movs	r0, #44	; 0x2c
 8003844:	fb00 f303 	mul.w	r3, r0, r3
 8003848:	4413      	add	r3, r2
 800384a:	3360      	adds	r3, #96	; 0x60
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f005 ff7b 	bl	800974c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003856:	bf00      	nop
 8003858:	3720      	adds	r7, #32
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08a      	sub	sp, #40	; 0x28
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	0c5b      	lsrs	r3, r3, #17
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	091b      	lsrs	r3, r3, #4
 800388e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003892:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d004      	beq.n	80038a4 <HCD_RXQLVL_IRQHandler+0x46>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b05      	cmp	r3, #5
 800389e:	f000 80a9 	beq.w	80039f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80038a2:	e0aa      	b.n	80039fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 80a6 	beq.w	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	212c      	movs	r1, #44	; 0x2c
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3344      	adds	r3, #68	; 0x44
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 809b 	beq.w	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	212c      	movs	r1, #44	; 0x2c
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	3350      	adds	r3, #80	; 0x50
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	441a      	add	r2, r3
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	202c      	movs	r0, #44	; 0x2c
 80038dc:	fb00 f303 	mul.w	r3, r0, r3
 80038e0:	440b      	add	r3, r1
 80038e2:	334c      	adds	r3, #76	; 0x4c
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d87a      	bhi.n	80039e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	212c      	movs	r1, #44	; 0x2c
 80038f4:	fb01 f303 	mul.w	r3, r1, r3
 80038f8:	4413      	add	r3, r2
 80038fa:	3344      	adds	r3, #68	; 0x44
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	b292      	uxth	r2, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f002 ffda 	bl	80068bc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	212c      	movs	r1, #44	; 0x2c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3344      	adds	r3, #68	; 0x44
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	441a      	add	r2, r3
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	202c      	movs	r0, #44	; 0x2c
 8003922:	fb00 f303 	mul.w	r3, r0, r3
 8003926:	440b      	add	r3, r1
 8003928:	3344      	adds	r3, #68	; 0x44
 800392a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	3350      	adds	r3, #80	; 0x50
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	441a      	add	r2, r3
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	202c      	movs	r0, #44	; 0x2c
 8003946:	fb00 f303 	mul.w	r3, r0, r3
 800394a:	440b      	add	r3, r1
 800394c:	3350      	adds	r3, #80	; 0x50
 800394e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	4413      	add	r3, r2
 8003958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	0cdb      	lsrs	r3, r3, #19
 8003960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003964:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	212c      	movs	r1, #44	; 0x2c
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	3340      	adds	r3, #64	; 0x40
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4293      	cmp	r3, r2
 800397c:	d13c      	bne.n	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d039      	beq.n	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800399a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	212c      	movs	r1, #44	; 0x2c
 80039bc:	fb01 f303 	mul.w	r3, r1, r3
 80039c0:	4413      	add	r3, r2
 80039c2:	3354      	adds	r3, #84	; 0x54
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2d8      	uxtb	r0, r3
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	212c      	movs	r1, #44	; 0x2c
 80039d2:	fb01 f303 	mul.w	r3, r1, r3
 80039d6:	4413      	add	r3, r2
 80039d8:	3354      	adds	r3, #84	; 0x54
 80039da:	4602      	mov	r2, r0
 80039dc:	701a      	strb	r2, [r3, #0]
      break;
 80039de:	e00b      	b.n	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	212c      	movs	r1, #44	; 0x2c
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	4413      	add	r3, r2
 80039ec:	3360      	adds	r3, #96	; 0x60
 80039ee:	2204      	movs	r2, #4
 80039f0:	701a      	strb	r2, [r3, #0]
      break;
 80039f2:	e001      	b.n	80039f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80039f8:	bf00      	nop
  }
}
 80039fa:	bf00      	nop
 80039fc:	3728      	adds	r7, #40	; 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003a2e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d10b      	bne.n	8003a52 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d102      	bne.n	8003a4a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f005 fe65 	bl	8009714 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	f043 0302 	orr.w	r3, r3, #2
 8003a50:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d132      	bne.n	8003ac2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f043 0308 	orr.w	r3, r3, #8
 8003a62:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d126      	bne.n	8003abc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d113      	bne.n	8003a9e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a80:	d106      	bne.n	8003a90 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2102      	movs	r1, #2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f003 f885 	bl	8006b98 <USB_InitFSLSPClkSel>
 8003a8e:	e011      	b.n	8003ab4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 f87e 	bl	8006b98 <USB_InitFSLSPClkSel>
 8003a9c:	e00a      	b.n	8003ab4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d106      	bne.n	8003ab4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aac:	461a      	mov	r2, r3
 8003aae:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003ab2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f005 fe57 	bl	8009768 <HAL_HCD_PortEnabled_Callback>
 8003aba:	e002      	b.n	8003ac2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f005 fe61 	bl	8009784 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d103      	bne.n	8003ad4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f043 0320 	orr.w	r3, r3, #32
 8003ad2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ada:	461a      	mov	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3718      	adds	r7, #24
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e12b      	b.n	8003d52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd f9da 	bl	8000ec8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f001 f964 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8003b50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a81      	ldr	r2, [pc, #516]	; (8003d5c <HAL_I2C_Init+0x274>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d807      	bhi.n	8003b6c <HAL_I2C_Init+0x84>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4a80      	ldr	r2, [pc, #512]	; (8003d60 <HAL_I2C_Init+0x278>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	e006      	b.n	8003b7a <HAL_I2C_Init+0x92>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a7d      	ldr	r2, [pc, #500]	; (8003d64 <HAL_I2C_Init+0x27c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	bf94      	ite	ls
 8003b74:	2301      	movls	r3, #1
 8003b76:	2300      	movhi	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0e7      	b.n	8003d52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a78      	ldr	r2, [pc, #480]	; (8003d68 <HAL_I2C_Init+0x280>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9b      	lsrs	r3, r3, #18
 8003b8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a6a      	ldr	r2, [pc, #424]	; (8003d5c <HAL_I2C_Init+0x274>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d802      	bhi.n	8003bbc <HAL_I2C_Init+0xd4>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	e009      	b.n	8003bd0 <HAL_I2C_Init+0xe8>
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bc2:	fb02 f303 	mul.w	r3, r2, r3
 8003bc6:	4a69      	ldr	r2, [pc, #420]	; (8003d6c <HAL_I2C_Init+0x284>)
 8003bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bcc:	099b      	lsrs	r3, r3, #6
 8003bce:	3301      	adds	r3, #1
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	6812      	ldr	r2, [r2, #0]
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003be2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	495c      	ldr	r1, [pc, #368]	; (8003d5c <HAL_I2C_Init+0x274>)
 8003bec:	428b      	cmp	r3, r1
 8003bee:	d819      	bhi.n	8003c24 <HAL_I2C_Init+0x13c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	1e59      	subs	r1, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bfe:	1c59      	adds	r1, r3, #1
 8003c00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c04:	400b      	ands	r3, r1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_I2C_Init+0x138>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1e59      	subs	r1, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1e:	e051      	b.n	8003cc4 <HAL_I2C_Init+0x1dc>
 8003c20:	2304      	movs	r3, #4
 8003c22:	e04f      	b.n	8003cc4 <HAL_I2C_Init+0x1dc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d111      	bne.n	8003c50 <HAL_I2C_Init+0x168>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	1e58      	subs	r0, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	460b      	mov	r3, r1
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf0c      	ite	eq
 8003c48:	2301      	moveq	r3, #1
 8003c4a:	2300      	movne	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	e012      	b.n	8003c76 <HAL_I2C_Init+0x18e>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	1e58      	subs	r0, r3, #1
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6859      	ldr	r1, [r3, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	0099      	lsls	r1, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_Init+0x196>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e022      	b.n	8003cc4 <HAL_I2C_Init+0x1dc>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10e      	bne.n	8003ca4 <HAL_I2C_Init+0x1bc>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1e58      	subs	r0, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	440b      	add	r3, r1
 8003c94:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ca2:	e00f      	b.n	8003cc4 <HAL_I2C_Init+0x1dc>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	1e58      	subs	r0, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	0099      	lsls	r1, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	6809      	ldr	r1, [r1, #0]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6911      	ldr	r1, [r2, #16]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68d2      	ldr	r2, [r2, #12]
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6812      	ldr	r2, [r2, #0]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695a      	ldr	r2, [r3, #20]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	000186a0 	.word	0x000186a0
 8003d60:	001e847f 	.word	0x001e847f
 8003d64:	003d08ff 	.word	0x003d08ff
 8003d68:	431bde83 	.word	0x431bde83
 8003d6c:	10624dd3 	.word	0x10624dd3

08003d70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d129      	bne.n	8003dda <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2224      	movs	r2, #36	; 0x24
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0210 	bic.w	r2, r2, #16
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	d12a      	bne.n	8003e58 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2224      	movs	r2, #36	; 0x24
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0201 	bic.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003e22:	89fb      	ldrh	r3, [r7, #14]
 8003e24:	f023 030f 	bic.w	r3, r3, #15
 8003e28:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	89fa      	ldrh	r2, [r7, #14]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	e000      	b.n	8003e5a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003e58:	2302      	movs	r3, #2
  }
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e0bf      	b.n	8003ffa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd f884 	bl	8000f9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699a      	ldr	r2, [r3, #24]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003eaa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6999      	ldr	r1, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ec0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6899      	ldr	r1, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_LTDC_Init+0x19c>)
 8003edc:	400b      	ands	r3, r1
 8003ede:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68d9      	ldr	r1, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b3e      	ldr	r3, [pc, #248]	; (8004004 <HAL_LTDC_Init+0x19c>)
 8003f0a:	400b      	ands	r3, r1
 8003f0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68d9      	ldr	r1, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1a      	ldr	r2, [r3, #32]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_LTDC_Init+0x19c>)
 8003f38:	400b      	ands	r3, r1
 8003f3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	041b      	lsls	r3, r3, #16
 8003f42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6919      	ldr	r1, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6959      	ldr	r1, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b27      	ldr	r3, [pc, #156]	; (8004004 <HAL_LTDC_Init+0x19c>)
 8003f66:	400b      	ands	r3, r1
 8003f68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6959      	ldr	r1, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0206 	orr.w	r2, r2, #6
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	699a      	ldr	r2, [r3, #24]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	f000f800 	.word	0xf000f800

08004008 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004016:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b00      	cmp	r3, #0
 8004028:	d023      	beq.n	8004072 <HAL_LTDC_IRQHandler+0x6a>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01e      	beq.n	8004072 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0204 	bic.w	r2, r2, #4
 8004042:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2204      	movs	r2, #4
 800404a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2204      	movs	r2, #4
 8004060:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f86f 	bl	8004150 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d023      	beq.n	80040c4 <HAL_LTDC_IRQHandler+0xbc>
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d01e      	beq.n	80040c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f022 0202 	bic.w	r2, r2, #2
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2202      	movs	r2, #2
 800409c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040a4:	f043 0202 	orr.w	r2, r3, #2
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f846 	bl	8004150 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01b      	beq.n	8004106 <HAL_LTDC_IRQHandler+0xfe>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f82f 	bl	8004164 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01b      	beq.n	8004148 <HAL_LTDC_IRQHandler+0x140>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d016      	beq.n	8004148 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0208 	bic.w	r2, r2, #8
 8004128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2208      	movs	r2, #8
 8004130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f818 	bl	8004178 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800416c:	bf00      	nop
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_LTDC_ConfigLayer+0x1a>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e02c      	b.n	8004200 <HAL_LTDC_ConfigLayer+0x74>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2134      	movs	r1, #52	; 0x34
 80041bc:	fb01 f303 	mul.w	r3, r1, r3
 80041c0:	4413      	add	r3, r2
 80041c2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4614      	mov	r4, r2
 80041ca:	461d      	mov	r5, r3
 80041cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80041d8:	682b      	ldr	r3, [r5, #0]
 80041da:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f811 	bl	8004208 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2201      	movs	r2, #1
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bdb0      	pop	{r4, r5, r7, pc}

08004208 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004208:	b480      	push	{r7}
 800420a:	b089      	sub	sp, #36	; 0x24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0c1b      	lsrs	r3, r3, #16
 8004220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004224:	4413      	add	r3, r2
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	01db      	lsls	r3, r3, #7
 8004234:	4413      	add	r3, r2
 8004236:	3384      	adds	r3, #132	; 0x84
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	4611      	mov	r1, r2
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	01d2      	lsls	r2, r2, #7
 8004244:	440a      	add	r2, r1
 8004246:	3284      	adds	r2, #132	; 0x84
 8004248:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800424c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800425e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004260:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	01db      	lsls	r3, r3, #7
 800426c:	440b      	add	r3, r1
 800426e:	3384      	adds	r3, #132	; 0x84
 8004270:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004276:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004286:	4413      	add	r3, r2
 8004288:	041b      	lsls	r3, r3, #16
 800428a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	01db      	lsls	r3, r3, #7
 8004296:	4413      	add	r3, r2
 8004298:	3384      	adds	r3, #132	; 0x84
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	4611      	mov	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	01d2      	lsls	r2, r2, #7
 80042a6:	440a      	add	r2, r1
 80042a8:	3284      	adds	r2, #132	; 0x84
 80042aa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042ae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042be:	4413      	add	r3, r2
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	01db      	lsls	r3, r3, #7
 80042cc:	440b      	add	r3, r1
 80042ce:	3384      	adds	r3, #132	; 0x84
 80042d0:	4619      	mov	r1, r3
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	01db      	lsls	r3, r3, #7
 80042e2:	4413      	add	r3, r2
 80042e4:	3384      	adds	r3, #132	; 0x84
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	6812      	ldr	r2, [r2, #0]
 80042ec:	4611      	mov	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	01d2      	lsls	r2, r2, #7
 80042f2:	440a      	add	r2, r1
 80042f4:	3284      	adds	r2, #132	; 0x84
 80042f6:	f023 0307 	bic.w	r3, r3, #7
 80042fa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	01db      	lsls	r3, r3, #7
 8004306:	4413      	add	r3, r2
 8004308:	3384      	adds	r3, #132	; 0x84
 800430a:	461a      	mov	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004318:	021b      	lsls	r3, r3, #8
 800431a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004322:	041b      	lsls	r3, r3, #16
 8004324:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	061b      	lsls	r3, r3, #24
 800432c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	01db      	lsls	r3, r3, #7
 8004338:	4413      	add	r3, r2
 800433a:	3384      	adds	r3, #132	; 0x84
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	01db      	lsls	r3, r3, #7
 8004348:	4413      	add	r3, r2
 800434a:	3384      	adds	r3, #132	; 0x84
 800434c:	461a      	mov	r2, r3
 800434e:	2300      	movs	r3, #0
 8004350:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004358:	461a      	mov	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	431a      	orrs	r2, r3
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	01db      	lsls	r3, r3, #7
 800436c:	440b      	add	r3, r1
 800436e:	3384      	adds	r3, #132	; 0x84
 8004370:	4619      	mov	r1, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	01db      	lsls	r3, r3, #7
 8004382:	4413      	add	r3, r2
 8004384:	3384      	adds	r3, #132	; 0x84
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	6812      	ldr	r2, [r2, #0]
 800438c:	4611      	mov	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	01d2      	lsls	r2, r2, #7
 8004392:	440a      	add	r2, r1
 8004394:	3284      	adds	r2, #132	; 0x84
 8004396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	01db      	lsls	r3, r3, #7
 80043a6:	4413      	add	r3, r2
 80043a8:	3384      	adds	r3, #132	; 0x84
 80043aa:	461a      	mov	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	01db      	lsls	r3, r3, #7
 80043bc:	4413      	add	r3, r2
 80043be:	3384      	adds	r3, #132	; 0x84
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	4611      	mov	r1, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	01d2      	lsls	r2, r2, #7
 80043cc:	440a      	add	r2, r1
 80043ce:	3284      	adds	r2, #132	; 0x84
 80043d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	68f9      	ldr	r1, [r7, #12]
 80043e4:	6809      	ldr	r1, [r1, #0]
 80043e6:	4608      	mov	r0, r1
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	01c9      	lsls	r1, r1, #7
 80043ec:	4401      	add	r1, r0
 80043ee:	3184      	adds	r1, #132	; 0x84
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	01db      	lsls	r3, r3, #7
 80043fe:	4413      	add	r3, r2
 8004400:	3384      	adds	r3, #132	; 0x84
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	01db      	lsls	r3, r3, #7
 800440e:	4413      	add	r3, r2
 8004410:	3384      	adds	r3, #132	; 0x84
 8004412:	461a      	mov	r2, r3
 8004414:	2300      	movs	r3, #0
 8004416:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	461a      	mov	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	01db      	lsls	r3, r3, #7
 8004422:	4413      	add	r3, r2
 8004424:	3384      	adds	r3, #132	; 0x84
 8004426:	461a      	mov	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004436:	2304      	movs	r3, #4
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e01b      	b.n	8004474 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004444:	2303      	movs	r3, #3
 8004446:	61fb      	str	r3, [r7, #28]
 8004448:	e014      	b.n	8004474 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b04      	cmp	r3, #4
 8004450:	d00b      	beq.n	800446a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004456:	2b02      	cmp	r3, #2
 8004458:	d007      	beq.n	800446a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800445e:	2b03      	cmp	r3, #3
 8004460:	d003      	beq.n	800446a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004466:	2b07      	cmp	r3, #7
 8004468:	d102      	bne.n	8004470 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800446a:	2302      	movs	r3, #2
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	e001      	b.n	8004474 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004470:	2301      	movs	r3, #1
 8004472:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	461a      	mov	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	01db      	lsls	r3, r3, #7
 800447e:	4413      	add	r3, r2
 8004480:	3384      	adds	r3, #132	; 0x84
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4611      	mov	r1, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	01d2      	lsls	r2, r2, #7
 800448e:	440a      	add	r2, r1
 8004490:	3284      	adds	r2, #132	; 0x84
 8004492:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004496:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	fb02 f303 	mul.w	r3, r2, r3
 80044a2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	1acb      	subs	r3, r1, r3
 80044ae:	69f9      	ldr	r1, [r7, #28]
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	6809      	ldr	r1, [r1, #0]
 80044ba:	4608      	mov	r0, r1
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	01c9      	lsls	r1, r1, #7
 80044c0:	4401      	add	r1, r0
 80044c2:	3184      	adds	r1, #132	; 0x84
 80044c4:	4313      	orrs	r3, r2
 80044c6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	01db      	lsls	r3, r3, #7
 80044d2:	4413      	add	r3, r2
 80044d4:	3384      	adds	r3, #132	; 0x84
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	4611      	mov	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	01d2      	lsls	r2, r2, #7
 80044e2:	440a      	add	r2, r1
 80044e4:	3284      	adds	r2, #132	; 0x84
 80044e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	461a      	mov	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	01db      	lsls	r3, r3, #7
 80044fa:	4413      	add	r3, r2
 80044fc:	3384      	adds	r3, #132	; 0x84
 80044fe:	461a      	mov	r2, r3
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	01db      	lsls	r3, r3, #7
 8004510:	4413      	add	r3, r2
 8004512:	3384      	adds	r3, #132	; 0x84
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	6812      	ldr	r2, [r2, #0]
 800451a:	4611      	mov	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	01d2      	lsls	r2, r2, #7
 8004520:	440a      	add	r2, r1
 8004522:	3284      	adds	r2, #132	; 0x84
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	6013      	str	r3, [r2, #0]
}
 800452a:	bf00      	nop
 800452c:	3724      	adds	r7, #36	; 0x24
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
	...

08004538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e267      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d075      	beq.n	8004642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	4b88      	ldr	r3, [pc, #544]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d00c      	beq.n	800457c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	4b85      	ldr	r3, [pc, #532]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456a:	2b08      	cmp	r3, #8
 800456c:	d112      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800456e:	4b82      	ldr	r3, [pc, #520]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457a:	d10b      	bne.n	8004594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800457c:	4b7e      	ldr	r3, [pc, #504]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d05b      	beq.n	8004640 <HAL_RCC_OscConfig+0x108>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d157      	bne.n	8004640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e242      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800459c:	d106      	bne.n	80045ac <HAL_RCC_OscConfig+0x74>
 800459e:	4b76      	ldr	r3, [pc, #472]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a75      	ldr	r2, [pc, #468]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	e01d      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045b4:	d10c      	bne.n	80045d0 <HAL_RCC_OscConfig+0x98>
 80045b6:	4b70      	ldr	r3, [pc, #448]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a6f      	ldr	r2, [pc, #444]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6c      	ldr	r2, [pc, #432]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e00b      	b.n	80045e8 <HAL_RCC_OscConfig+0xb0>
 80045d0:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a68      	ldr	r2, [pc, #416]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	4b66      	ldr	r3, [pc, #408]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a65      	ldr	r2, [pc, #404]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80045e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d013      	beq.n	8004618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f0:	f7fd f990 	bl	8001914 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045f8:	f7fd f98c 	bl	8001914 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b64      	cmp	r3, #100	; 0x64
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e207      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0f0      	beq.n	80045f8 <HAL_RCC_OscConfig+0xc0>
 8004616:	e014      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7fd f97c 	bl	8001914 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004620:	f7fd f978 	bl	8001914 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b64      	cmp	r3, #100	; 0x64
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e1f3      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	4b51      	ldr	r3, [pc, #324]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0xe8>
 800463e:	e000      	b.n	8004642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d063      	beq.n	8004716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 030c 	and.w	r3, r3, #12
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00b      	beq.n	8004672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004662:	2b08      	cmp	r3, #8
 8004664:	d11c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d116      	bne.n	80046a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	4b41      	ldr	r3, [pc, #260]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e1c7      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4937      	ldr	r1, [pc, #220]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	e03a      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046a8:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_RCC_OscConfig+0x244>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ae:	f7fd f931 	bl	8001914 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b6:	f7fd f92d 	bl	8001914 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e1a8      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	4b2b      	ldr	r3, [pc, #172]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	00db      	lsls	r3, r3, #3
 80046e2:	4925      	ldr	r1, [pc, #148]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	600b      	str	r3, [r1, #0]
 80046e8:	e015      	b.n	8004716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ea:	4b24      	ldr	r3, [pc, #144]	; (800477c <HAL_RCC_OscConfig+0x244>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd f910 	bl	8001914 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f8:	f7fd f90c 	bl	8001914 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e187      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0308 	and.w	r3, r3, #8
 800471e:	2b00      	cmp	r3, #0
 8004720:	d036      	beq.n	8004790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <HAL_RCC_OscConfig+0x248>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd f8f0 	bl	8001914 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004738:	f7fd f8ec 	bl	8001914 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e167      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_OscConfig+0x240>)
 800474c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x200>
 8004756:	e01b      	b.n	8004790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_OscConfig+0x248>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800475e:	f7fd f8d9 	bl	8001914 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	e00e      	b.n	8004784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004766:	f7fd f8d5 	bl	8001914 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d907      	bls.n	8004784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e150      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	42470000 	.word	0x42470000
 8004780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	4b88      	ldr	r3, [pc, #544]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ea      	bne.n	8004766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8097 	beq.w	80048cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047a2:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10f      	bne.n	80047ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ae:	2300      	movs	r3, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	4b7d      	ldr	r3, [pc, #500]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	4a7c      	ldr	r2, [pc, #496]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6413      	str	r3, [r2, #64]	; 0x40
 80047be:	4b7a      	ldr	r3, [pc, #488]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ca:	2301      	movs	r3, #1
 80047cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ce:	4b77      	ldr	r3, [pc, #476]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d118      	bne.n	800480c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047da:	4b74      	ldr	r3, [pc, #464]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a73      	ldr	r2, [pc, #460]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 80047e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047e6:	f7fd f895 	bl	8001914 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ee:	f7fd f891 	bl	8001914 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e10c      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_OscConfig+0x474>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d106      	bne.n	8004822 <HAL_RCC_OscConfig+0x2ea>
 8004814:	4b64      	ldr	r3, [pc, #400]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	4a63      	ldr	r2, [pc, #396]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6713      	str	r3, [r2, #112]	; 0x70
 8004820:	e01c      	b.n	800485c <HAL_RCC_OscConfig+0x324>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b05      	cmp	r3, #5
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0x30c>
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5e      	ldr	r2, [pc, #376]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004830:	f043 0304 	orr.w	r3, r3, #4
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b5c      	ldr	r3, [pc, #368]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a5b      	ldr	r2, [pc, #364]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0x324>
 8004844:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a57      	ldr	r2, [pc, #348]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800484a:	f023 0301 	bic.w	r3, r3, #1
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
 8004850:	4b55      	ldr	r3, [pc, #340]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a54      	ldr	r2, [pc, #336]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 0304 	bic.w	r3, r3, #4
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d015      	beq.n	8004890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fd f856 	bl	8001914 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	e00a      	b.n	8004882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800486c:	f7fd f852 	bl	8001914 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f241 3288 	movw	r2, #5000	; 0x1388
 800487a:	4293      	cmp	r3, r2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e0cb      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	4b49      	ldr	r3, [pc, #292]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RCC_OscConfig+0x334>
 800488e:	e014      	b.n	80048ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fd f840 	bl	8001914 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fd f83c 	bl	8001914 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0b5      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ae:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ee      	bne.n	8004898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c0:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	4a38      	ldr	r2, [pc, #224]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80a1 	beq.w	8004a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048d6:	4b34      	ldr	r3, [pc, #208]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d05c      	beq.n	800499c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d141      	bne.n	800496e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fd f810 	bl	8001914 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd f80c 	bl	8001914 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e087      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	085b      	lsrs	r3, r3, #1
 800492e:	3b01      	subs	r3, #1
 8004930:	041b      	lsls	r3, r3, #16
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	491b      	ldr	r1, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004940:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004946:	f7fc ffe5 	bl	8001914 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800494e:	f7fc ffe1 	bl	8001914 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e05c      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	4b11      	ldr	r3, [pc, #68]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x416>
 800496c:	e054      	b.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_RCC_OscConfig+0x478>)
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fc ffce 	bl	8001914 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497c:	f7fc ffca 	bl	8001914 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e045      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_RCC_OscConfig+0x470>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0x444>
 800499a:	e03d      	b.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d107      	bne.n	80049b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e038      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
 80049a8:	40023800 	.word	0x40023800
 80049ac:	40007000 	.word	0x40007000
 80049b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049b4:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_RCC_OscConfig+0x4ec>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d028      	beq.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d121      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d11a      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049e4:	4013      	ands	r3, r2
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d111      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	3b01      	subs	r3, #1
 80049fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e0cc      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b68      	ldr	r3, [pc, #416]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 030f 	and.w	r3, r3, #15
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90c      	bls.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b65      	ldr	r3, [pc, #404]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b63      	ldr	r3, [pc, #396]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0b8      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d020      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d005      	beq.n	8004a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a7c:	4b59      	ldr	r3, [pc, #356]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4a58      	ldr	r2, [pc, #352]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0308 	and.w	r3, r3, #8
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a94:	4b53      	ldr	r3, [pc, #332]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b50      	ldr	r3, [pc, #320]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	494d      	ldr	r1, [pc, #308]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e07f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d003      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae6:	4b3f      	ldr	r3, [pc, #252]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004af6:	4b3b      	ldr	r3, [pc, #236]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e067      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b06:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 0203 	bic.w	r2, r3, #3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	4934      	ldr	r1, [pc, #208]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b18:	f7fc fefc 	bl	8001914 <HAL_GetTick>
 8004b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1e:	e00a      	b.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b20:	f7fc fef8 	bl	8001914 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e04f      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	4b2b      	ldr	r3, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 020c 	and.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d1eb      	bne.n	8004b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 030f 	and.w	r3, r3, #15
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20c      	bcs.n	8004b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	b2d2      	uxtb	r2, r2
 8004b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5e:	4b20      	ldr	r3, [pc, #128]	; (8004be0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	683a      	ldr	r2, [r7, #0]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e032      	b.n	8004bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d008      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4916      	ldr	r1, [pc, #88]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0308 	and.w	r3, r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d009      	beq.n	8004bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b9a:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	490e      	ldr	r1, [pc, #56]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bae:	f000 f821 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	091b      	lsrs	r3, r3, #4
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	490a      	ldr	r1, [pc, #40]	; (8004be8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	5ccb      	ldrb	r3, [r1, r3]
 8004bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1c4>)
 8004bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc fcba 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	40023c00 	.word	0x40023c00
 8004be4:	40023800 	.word	0x40023800
 8004be8:	0800ac84 	.word	0x0800ac84
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf8:	b094      	sub	sp, #80	; 0x50
 8004bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004c00:	2300      	movs	r3, #0
 8004c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c04:	2300      	movs	r3, #0
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c0c:	4b79      	ldr	r3, [pc, #484]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d00d      	beq.n	8004c34 <HAL_RCC_GetSysClockFreq+0x40>
 8004c18:	2b08      	cmp	r3, #8
 8004c1a:	f200 80e1 	bhi.w	8004de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d003      	beq.n	8004c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c26:	e0db      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c28:	4b73      	ldr	r3, [pc, #460]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004c2c:	e0db      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c2e:	4b73      	ldr	r3, [pc, #460]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8004c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c32:	e0d8      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c34:	4b6f      	ldr	r3, [pc, #444]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d063      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	2200      	movs	r2, #0
 8004c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c5e:	2300      	movs	r3, #0
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
 8004c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c66:	4622      	mov	r2, r4
 8004c68:	462b      	mov	r3, r5
 8004c6a:	f04f 0000 	mov.w	r0, #0
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	0159      	lsls	r1, r3, #5
 8004c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c78:	0150      	lsls	r0, r2, #5
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4621      	mov	r1, r4
 8004c80:	1a51      	subs	r1, r2, r1
 8004c82:	6139      	str	r1, [r7, #16]
 8004c84:	4629      	mov	r1, r5
 8004c86:	eb63 0301 	sbc.w	r3, r3, r1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 0300 	mov.w	r3, #0
 8004c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c98:	4659      	mov	r1, fp
 8004c9a:	018b      	lsls	r3, r1, #6
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	018a      	lsls	r2, r1, #6
 8004ca6:	4651      	mov	r1, sl
 8004ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8004cac:	4659      	mov	r1, fp
 8004cae:	eb63 0901 	sbc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	462b      	mov	r3, r5
 8004cd4:	eb49 0303 	adc.w	r3, r9, r3
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	024b      	lsls	r3, r1, #9
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	024a      	lsls	r2, r1, #9
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d04:	f7fb fac4 	bl	8000290 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d10:	e058      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d12:	4b38      	ldr	r3, [pc, #224]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	2300      	movs	r3, #0
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	f04f 0000 	mov.w	r0, #0
 8004d34:	f04f 0100 	mov.w	r1, #0
 8004d38:	0159      	lsls	r1, r3, #5
 8004d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d3e:	0150      	lsls	r0, r2, #5
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4641      	mov	r1, r8
 8004d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d50:	f04f 0200 	mov.w	r2, #0
 8004d54:	f04f 0300 	mov.w	r3, #0
 8004d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d64:	ebb2 040a 	subs.w	r4, r2, sl
 8004d68:	eb63 050b 	sbc.w	r5, r3, fp
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	00eb      	lsls	r3, r5, #3
 8004d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d7a:	00e2      	lsls	r2, r4, #3
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
 8004d80:	4643      	mov	r3, r8
 8004d82:	18e3      	adds	r3, r4, r3
 8004d84:	603b      	str	r3, [r7, #0]
 8004d86:	464b      	mov	r3, r9
 8004d88:	eb45 0303 	adc.w	r3, r5, r3
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	f04f 0200 	mov.w	r2, #0
 8004d92:	f04f 0300 	mov.w	r3, #0
 8004d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	028b      	lsls	r3, r1, #10
 8004d9e:	4621      	mov	r1, r4
 8004da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004da4:	4621      	mov	r1, r4
 8004da6:	028a      	lsls	r2, r1, #10
 8004da8:	4610      	mov	r0, r2
 8004daa:	4619      	mov	r1, r3
 8004dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dae:	2200      	movs	r2, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	61fa      	str	r2, [r7, #28]
 8004db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db8:	f7fb fa6a 	bl	8000290 <__aeabi_uldivmod>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	0c1b      	lsrs	r3, r3, #16
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	3301      	adds	r3, #1
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3750      	adds	r7, #80	; 0x50
 8004dec:	46bd      	mov	sp, r7
 8004dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004df2:	bf00      	nop
 8004df4:	40023800 	.word	0x40023800
 8004df8:	00f42400 	.word	0x00f42400
 8004dfc:	007a1200 	.word	0x007a1200

08004e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e04:	4b03      	ldr	r3, [pc, #12]	; (8004e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000000 	.word	0x20000000

08004e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e1c:	f7ff fff0 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e20:	4602      	mov	r2, r0
 8004e22:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	0a9b      	lsrs	r3, r3, #10
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	4903      	ldr	r1, [pc, #12]	; (8004e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e2e:	5ccb      	ldrb	r3, [r1, r3]
 8004e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	0800ac94 	.word	0x0800ac94

08004e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e44:	f7ff ffdc 	bl	8004e00 <HAL_RCC_GetHCLKFreq>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	0b5b      	lsrs	r3, r3, #13
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	4903      	ldr	r1, [pc, #12]	; (8004e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e56:	5ccb      	ldrb	r3, [r1, r3]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800ac94 	.word	0x0800ac94

08004e68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	220f      	movs	r2, #15
 8004e76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0203 	and.w	r2, r3, #3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004e90:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004e9c:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_GetClockConfig+0x5c>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	08db      	lsrs	r3, r3, #3
 8004ea2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eaa:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_RCC_GetClockConfig+0x60>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	601a      	str	r2, [r3, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40023c00 	.word	0x40023c00

08004ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d075      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f00:	4b91      	ldr	r3, [pc, #580]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f06:	f7fc fd05 	bl	8001914 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f0e:	f7fc fd01 	bl	8001914 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e189      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f20:	4b8a      	ldr	r3, [pc, #552]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	019a      	lsls	r2, r3, #6
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	071b      	lsls	r3, r3, #28
 8004f44:	4981      	ldr	r1, [pc, #516]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f58:	4b7c      	ldr	r3, [pc, #496]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f5e:	0f1b      	lsrs	r3, r3, #28
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	019a      	lsls	r2, r3, #6
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	061b      	lsls	r3, r3, #24
 8004f72:	431a      	orrs	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	071b      	lsls	r3, r3, #28
 8004f78:	4974      	ldr	r1, [pc, #464]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f80:	4b72      	ldr	r3, [pc, #456]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f86:	f023 021f 	bic.w	r2, r3, #31
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	496e      	ldr	r1, [pc, #440]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	019a      	lsls	r2, r3, #6
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	061b      	lsls	r3, r3, #24
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	071b      	lsls	r3, r3, #28
 8004fb8:	4964      	ldr	r1, [pc, #400]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fc0:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fc6:	f7fc fca5 	bl	8001914 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fce:	f7fc fca1 	bl	8001914 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e129      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe0:	4b5a      	ldr	r3, [pc, #360]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d105      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005000:	2b00      	cmp	r3, #0
 8005002:	d079      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005004:	4b52      	ldr	r3, [pc, #328]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800500a:	f7fc fc83 	bl	8001914 <HAL_GetTick>
 800500e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005010:	e008      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005012:	f7fc fc7f 	bl	8001914 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e107      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005024:	4b49      	ldr	r3, [pc, #292]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005030:	d0ef      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800503e:	4b43      	ldr	r3, [pc, #268]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	0f1b      	lsrs	r3, r3, #28
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	019a      	lsls	r2, r3, #6
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	061b      	lsls	r3, r3, #24
 8005058:	431a      	orrs	r2, r3
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	071b      	lsls	r3, r3, #28
 800505e:	493b      	ldr	r1, [pc, #236]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005066:	4b39      	ldr	r3, [pc, #228]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	3b01      	subs	r3, #1
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	4934      	ldr	r1, [pc, #208]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0308 	and.w	r3, r3, #8
 8005088:	2b00      	cmp	r3, #0
 800508a:	d01e      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800508c:	4b2f      	ldr	r3, [pc, #188]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800508e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005092:	0e1b      	lsrs	r3, r3, #24
 8005094:	f003 030f 	and.w	r3, r3, #15
 8005098:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	019a      	lsls	r2, r3, #6
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	071b      	lsls	r3, r3, #28
 80050ac:	4927      	ldr	r1, [pc, #156]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050b4:	4b25      	ldr	r3, [pc, #148]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	4922      	ldr	r1, [pc, #136]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80050ca:	4b21      	ldr	r3, [pc, #132]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050d0:	f7fc fc20 	bl	8001914 <HAL_GetTick>
 80050d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80050d8:	f7fc fc1c 	bl	8001914 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e0a4      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f6:	d1ef      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 808b 	beq.w	800521c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	4b10      	ldr	r3, [pc, #64]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	4a0f      	ldr	r2, [pc, #60]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	; 0x40
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005122:	4b0c      	ldr	r3, [pc, #48]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800512e:	f7fc fbf1 	bl	8001914 <HAL_GetTick>
 8005132:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005134:	e010      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fc fbed 	bl	8001914 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d909      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e075      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005148:	42470068 	.word	0x42470068
 800514c:	40023800 	.word	0x40023800
 8005150:	42470070 	.word	0x42470070
 8005154:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005158:	4b38      	ldr	r3, [pc, #224]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0e8      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005164:	4b36      	ldr	r3, [pc, #216]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d02f      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d028      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005182:	4b2f      	ldr	r3, [pc, #188]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800518c:	4b2d      	ldr	r3, [pc, #180]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800518e:	2201      	movs	r2, #1
 8005190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005192:	4b2c      	ldr	r3, [pc, #176]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005198:	4a29      	ldr	r2, [pc, #164]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800519e:	4b28      	ldr	r3, [pc, #160]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d114      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051aa:	f7fc fbb3 	bl	8001914 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fc fbaf 	bl	8001914 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e035      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c8:	4b1d      	ldr	r3, [pc, #116]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ee      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e0:	d10d      	bne.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80051e2:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f6:	4912      	ldr	r1, [pc, #72]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]
 80051fc:	e005      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80051fe:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	4a0f      	ldr	r2, [pc, #60]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005204:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005208:	6093      	str	r3, [r2, #8]
 800520a:	4b0d      	ldr	r3, [pc, #52]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800520c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005216:	490a      	ldr	r1, [pc, #40]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005218:	4313      	orrs	r3, r2
 800521a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	d004      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800522e:	4b06      	ldr	r3, [pc, #24]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005230:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40007000 	.word	0x40007000
 8005240:	40023800 	.word	0x40023800
 8005244:	42470e40 	.word	0x42470e40
 8005248:	424711e0 	.word	0x424711e0

0800524c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d101      	bne.n	8005260 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e025      	b.n	80052ac <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d106      	bne.n	800527a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fc f95d 	bl	8001534 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2202      	movs	r2, #2
 800527e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f001 f8dd 	bl	800644c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	461a      	mov	r2, r3
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	f001 f932 	bl	8006506 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07b      	b.n	80053be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d108      	bne.n	80052e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052d6:	d009      	beq.n	80052ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	61da      	str	r2, [r3, #28]
 80052de:	e005      	b.n	80052ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fb ff78 	bl	80011fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2202      	movs	r2, #2
 8005310:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005322:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	431a      	orrs	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	ea42 0103 	orr.w	r1, r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005378:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	0c1b      	lsrs	r3, r3, #16
 800538a:	f003 0104 	and.w	r1, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	f003 0210 	and.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e041      	b.n	800545c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7fb ff4d 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2202      	movs	r2, #2
 80053f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	3304      	adds	r3, #4
 8005402:	4619      	mov	r1, r3
 8005404:	4610      	mov	r0, r2
 8005406:	f000 fa95 	bl	8005934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d001      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e04e      	b.n	800551a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a23      	ldr	r2, [pc, #140]	; (8005528 <HAL_TIM_Base_Start_IT+0xc4>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d022      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a6:	d01d      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	; (800552c <HAL_TIM_Base_Start_IT+0xc8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1e      	ldr	r2, [pc, #120]	; (8005530 <HAL_TIM_Base_Start_IT+0xcc>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_TIM_Base_Start_IT+0xd0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1b      	ldr	r2, [pc, #108]	; (8005538 <HAL_TIM_Base_Start_IT+0xd4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a19      	ldr	r2, [pc, #100]	; (800553c <HAL_TIM_Base_Start_IT+0xd8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a18      	ldr	r2, [pc, #96]	; (8005540 <HAL_TIM_Base_Start_IT+0xdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d111      	bne.n	8005508 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d010      	beq.n	8005518 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0201 	orr.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005506:	e007      	b.n	8005518 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f042 0201 	orr.w	r2, r2, #1
 8005516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40001800 	.word	0x40001800

08005544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d122      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d11b      	bne.n	80055a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0202 	mvn.w	r2, #2
 8005570:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9b5 	bl	80058f6 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9a7 	bl	80058e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f9b8 	bl	800590a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d122      	bne.n	80055f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d11b      	bne.n	80055f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f06f 0204 	mvn.w	r2, #4
 80055c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d003      	beq.n	80055e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f98b 	bl	80058f6 <HAL_TIM_IC_CaptureCallback>
 80055e0:	e005      	b.n	80055ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f97d 	bl	80058e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f98e 	bl	800590a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	f003 0308 	and.w	r3, r3, #8
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d122      	bne.n	8005648 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	d11b      	bne.n	8005648 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f06f 0208 	mvn.w	r2, #8
 8005618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2204      	movs	r2, #4
 800561e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f003 0303 	and.w	r3, r3, #3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f961 	bl	80058f6 <HAL_TIM_IC_CaptureCallback>
 8005634:	e005      	b.n	8005642 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f953 	bl	80058e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f964 	bl	800590a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0310 	and.w	r3, r3, #16
 8005652:	2b10      	cmp	r3, #16
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0310 	and.w	r3, r3, #16
 8005660:	2b10      	cmp	r3, #16
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0210 	mvn.w	r2, #16
 800566c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2208      	movs	r2, #8
 8005672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f937 	bl	80058f6 <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f929 	bl	80058e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f93a 	bl	800590a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d10e      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0301 	and.w	r3, r3, #1
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d107      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0201 	mvn.w	r2, #1
 80056c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fb fb76 	bl	8000db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d10e      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d107      	bne.n	80056f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fae0 	bl	8005cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fe:	2b40      	cmp	r3, #64	; 0x40
 8005700:	d10e      	bne.n	8005720 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b40      	cmp	r3, #64	; 0x40
 800570e:	d107      	bne.n	8005720 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f8ff 	bl	800591e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b20      	cmp	r3, #32
 800572c:	d10e      	bne.n	800574c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0320 	and.w	r3, r3, #32
 8005738:	2b20      	cmp	r3, #32
 800573a:	d107      	bne.n	800574c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0220 	mvn.w	r2, #32
 8005744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 faaa 	bl	8005ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_TIM_ConfigClockSource+0x1c>
 800576c:	2302      	movs	r3, #2
 800576e:	e0b4      	b.n	80058da <HAL_TIM_ConfigClockSource+0x186>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800578e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005796:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a8:	d03e      	beq.n	8005828 <HAL_TIM_ConfigClockSource+0xd4>
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ae:	f200 8087 	bhi.w	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b6:	f000 8086 	beq.w	80058c6 <HAL_TIM_ConfigClockSource+0x172>
 80057ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057be:	d87f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b70      	cmp	r3, #112	; 0x70
 80057c2:	d01a      	beq.n	80057fa <HAL_TIM_ConfigClockSource+0xa6>
 80057c4:	2b70      	cmp	r3, #112	; 0x70
 80057c6:	d87b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b60      	cmp	r3, #96	; 0x60
 80057ca:	d050      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x11a>
 80057cc:	2b60      	cmp	r3, #96	; 0x60
 80057ce:	d877      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b50      	cmp	r3, #80	; 0x50
 80057d2:	d03c      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xfa>
 80057d4:	2b50      	cmp	r3, #80	; 0x50
 80057d6:	d873      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d058      	beq.n	800588e <HAL_TIM_ConfigClockSource+0x13a>
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	d86f      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d064      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b30      	cmp	r3, #48	; 0x30
 80057e6:	d86b      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d060      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d867      	bhi.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d05c      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	2b10      	cmp	r3, #16
 80057f6:	d05a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x15a>
 80057f8:	e062      	b.n	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6818      	ldr	r0, [r3, #0]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	6899      	ldr	r1, [r3, #8]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f000 f9ad 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800581c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	609a      	str	r2, [r3, #8]
      break;
 8005826:	e04f      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6818      	ldr	r0, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f000 f996 	bl	8005b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800584a:	609a      	str	r2, [r3, #8]
      break;
 800584c:	e03c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6859      	ldr	r1, [r3, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	461a      	mov	r2, r3
 800585c:	f000 f90a 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2150      	movs	r1, #80	; 0x50
 8005866:	4618      	mov	r0, r3
 8005868:	f000 f963 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800586c:	e02c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	461a      	mov	r2, r3
 800587c:	f000 f929 	bl	8005ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2160      	movs	r1, #96	; 0x60
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f953 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 800588c:	e01c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	461a      	mov	r2, r3
 800589c:	f000 f8ea 	bl	8005a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2140      	movs	r1, #64	; 0x40
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f943 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e00c      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4619      	mov	r1, r3
 80058b8:	4610      	mov	r0, r2
 80058ba:	f000 f93a 	bl	8005b32 <TIM_ITRx_SetConfig>
      break;
 80058be:	e003      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
      break;
 80058c4:	e000      	b.n	80058c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	370c      	adds	r7, #12
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a40      	ldr	r2, [pc, #256]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005952:	d00f      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3d      	ldr	r2, [pc, #244]	; (8005a4c <TIM_Base_SetConfig+0x118>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d00b      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3c      	ldr	r2, [pc, #240]	; (8005a50 <TIM_Base_SetConfig+0x11c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d007      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3b      	ldr	r2, [pc, #236]	; (8005a54 <TIM_Base_SetConfig+0x120>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d003      	beq.n	8005974 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3a      	ldr	r2, [pc, #232]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d108      	bne.n	8005986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2f      	ldr	r2, [pc, #188]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d02b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d027      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <TIM_Base_SetConfig+0x118>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d023      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2b      	ldr	r2, [pc, #172]	; (8005a50 <TIM_Base_SetConfig+0x11c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2a      	ldr	r2, [pc, #168]	; (8005a54 <TIM_Base_SetConfig+0x120>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d01b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a29      	ldr	r2, [pc, #164]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d017      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a28      	ldr	r2, [pc, #160]	; (8005a5c <TIM_Base_SetConfig+0x128>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a27      	ldr	r2, [pc, #156]	; (8005a60 <TIM_Base_SetConfig+0x12c>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00f      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <TIM_Base_SetConfig+0x130>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a25      	ldr	r2, [pc, #148]	; (8005a68 <TIM_Base_SetConfig+0x134>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d007      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a24      	ldr	r2, [pc, #144]	; (8005a6c <TIM_Base_SetConfig+0x138>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a23      	ldr	r2, [pc, #140]	; (8005a70 <TIM_Base_SetConfig+0x13c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0a      	ldr	r2, [pc, #40]	; (8005a48 <TIM_Base_SetConfig+0x114>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d103      	bne.n	8005a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	615a      	str	r2, [r3, #20]
}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800
 8005a68:	40001800 	.word	0x40001800
 8005a6c:	40001c00 	.word	0x40001c00
 8005a70:	40002000 	.word	0x40002000

08005a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0201 	bic.w	r2, r3, #1
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	011b      	lsls	r3, r3, #4
 8005aa4:	693a      	ldr	r2, [r7, #16]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f023 030a 	bic.w	r3, r3, #10
 8005ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f023 0210 	bic.w	r2, r3, #16
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	031b      	lsls	r3, r3, #12
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b085      	sub	sp, #20
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
 8005b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f043 0307 	orr.w	r3, r3, #7
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	bf00      	nop
 8005b5e:	3714      	adds	r7, #20
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr

08005b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	021a      	lsls	r2, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	609a      	str	r2, [r3, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	371c      	adds	r7, #28
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e05a      	b.n	8005c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a21      	ldr	r2, [pc, #132]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d022      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c0c:	d01d      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d018      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d013      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d00e      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d004      	beq.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d10c      	bne.n	8005c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	40010000 	.word	0x40010000
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	40010400 	.word	0x40010400
 8005c98:	40014000 	.word	0x40014000
 8005c9c:	40001800 	.word	0x40001800

08005ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e03f      	b.n	8005d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d106      	bne.n	8005cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fb faee 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2224      	movs	r2, #36	; 0x24
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f929 	bl	8005f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	695a      	ldr	r2, [r3, #20]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68da      	ldr	r2, [r3, #12]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b08a      	sub	sp, #40	; 0x28
 8005d66:	af02      	add	r7, sp, #8
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	603b      	str	r3, [r7, #0]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b20      	cmp	r3, #32
 8005d80:	d17c      	bne.n	8005e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_UART_Transmit+0x2c>
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e075      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_UART_Transmit+0x3e>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e06e      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2221      	movs	r2, #33	; 0x21
 8005db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005db6:	f7fb fdad 	bl	8001914 <HAL_GetTick>
 8005dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	88fa      	ldrh	r2, [r7, #6]
 8005dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dd0:	d108      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d104      	bne.n	8005de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	e003      	b.n	8005dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005df4:	e02a      	b.n	8005e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2180      	movs	r1, #128	; 0x80
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 f840 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e036      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3302      	adds	r3, #2
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	e007      	b.n	8005e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	781a      	ldrb	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1cf      	bne.n	8005df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f810 	bl	8005e86 <UART_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e006      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	e000      	b.n	8005e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e7c:	2302      	movs	r3, #2
  }
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b090      	sub	sp, #64	; 0x40
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	60b9      	str	r1, [r7, #8]
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	4613      	mov	r3, r2
 8005e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e96:	e050      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d04c      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea6:	f7fb fd35 	bl	8001914 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d241      	bcs.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	330c      	adds	r3, #12
 8005ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	330c      	adds	r3, #12
 8005ed4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed6:	637a      	str	r2, [r7, #52]	; 0x34
 8005ed8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e5      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3314      	adds	r3, #20
 8005ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	e853 3f00 	ldrex	r3, [r3]
 8005ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	f023 0301 	bic.w	r3, r3, #1
 8005f00:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f0a:	623a      	str	r2, [r7, #32]
 8005f0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	69f9      	ldr	r1, [r7, #28]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e5      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d09f      	beq.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3740      	adds	r7, #64	; 0x40
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f68:	b0c0      	sub	sp, #256	; 0x100
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	68d9      	ldr	r1, [r3, #12]
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	ea40 0301 	orr.w	r3, r0, r1
 8005f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005fbc:	f021 010c 	bic.w	r1, r1, #12
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fca:	430b      	orrs	r3, r1
 8005fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fde:	6999      	ldr	r1, [r3, #24]
 8005fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	ea40 0301 	orr.w	r3, r0, r1
 8005fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b8f      	ldr	r3, [pc, #572]	; (8006230 <UART_SetConfig+0x2cc>)
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d005      	beq.n	8006004 <UART_SetConfig+0xa0>
 8005ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b8d      	ldr	r3, [pc, #564]	; (8006234 <UART_SetConfig+0x2d0>)
 8006000:	429a      	cmp	r2, r3
 8006002:	d104      	bne.n	800600e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe ff1c 	bl	8004e40 <HAL_RCC_GetPCLK2Freq>
 8006008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800600c:	e003      	b.n	8006016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800600e:	f7fe ff03 	bl	8004e18 <HAL_RCC_GetPCLK1Freq>
 8006012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006020:	f040 810c 	bne.w	800623c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006028:	2200      	movs	r2, #0
 800602a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800602e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006036:	4622      	mov	r2, r4
 8006038:	462b      	mov	r3, r5
 800603a:	1891      	adds	r1, r2, r2
 800603c:	65b9      	str	r1, [r7, #88]	; 0x58
 800603e:	415b      	adcs	r3, r3
 8006040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006046:	4621      	mov	r1, r4
 8006048:	eb12 0801 	adds.w	r8, r2, r1
 800604c:	4629      	mov	r1, r5
 800604e:	eb43 0901 	adc.w	r9, r3, r1
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800605e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006066:	4690      	mov	r8, r2
 8006068:	4699      	mov	r9, r3
 800606a:	4623      	mov	r3, r4
 800606c:	eb18 0303 	adds.w	r3, r8, r3
 8006070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006074:	462b      	mov	r3, r5
 8006076:	eb49 0303 	adc.w	r3, r9, r3
 800607a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800608a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800608e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006092:	460b      	mov	r3, r1
 8006094:	18db      	adds	r3, r3, r3
 8006096:	653b      	str	r3, [r7, #80]	; 0x50
 8006098:	4613      	mov	r3, r2
 800609a:	eb42 0303 	adc.w	r3, r2, r3
 800609e:	657b      	str	r3, [r7, #84]	; 0x54
 80060a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80060a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80060a8:	f7fa f8f2 	bl	8000290 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4b61      	ldr	r3, [pc, #388]	; (8006238 <UART_SetConfig+0x2d4>)
 80060b2:	fba3 2302 	umull	r2, r3, r3, r2
 80060b6:	095b      	lsrs	r3, r3, #5
 80060b8:	011c      	lsls	r4, r3, #4
 80060ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80060c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80060cc:	4642      	mov	r2, r8
 80060ce:	464b      	mov	r3, r9
 80060d0:	1891      	adds	r1, r2, r2
 80060d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80060d4:	415b      	adcs	r3, r3
 80060d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80060dc:	4641      	mov	r1, r8
 80060de:	eb12 0a01 	adds.w	sl, r2, r1
 80060e2:	4649      	mov	r1, r9
 80060e4:	eb43 0b01 	adc.w	fp, r3, r1
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80060f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80060f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060fc:	4692      	mov	sl, r2
 80060fe:	469b      	mov	fp, r3
 8006100:	4643      	mov	r3, r8
 8006102:	eb1a 0303 	adds.w	r3, sl, r3
 8006106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800610a:	464b      	mov	r3, r9
 800610c:	eb4b 0303 	adc.w	r3, fp, r3
 8006110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006128:	460b      	mov	r3, r1
 800612a:	18db      	adds	r3, r3, r3
 800612c:	643b      	str	r3, [r7, #64]	; 0x40
 800612e:	4613      	mov	r3, r2
 8006130:	eb42 0303 	adc.w	r3, r2, r3
 8006134:	647b      	str	r3, [r7, #68]	; 0x44
 8006136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800613a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800613e:	f7fa f8a7 	bl	8000290 <__aeabi_uldivmod>
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	4611      	mov	r1, r2
 8006148:	4b3b      	ldr	r3, [pc, #236]	; (8006238 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2301 	umull	r2, r3, r3, r1
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	2264      	movs	r2, #100	; 0x64
 8006152:	fb02 f303 	mul.w	r3, r2, r3
 8006156:	1acb      	subs	r3, r1, r3
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800615e:	4b36      	ldr	r3, [pc, #216]	; (8006238 <UART_SetConfig+0x2d4>)
 8006160:	fba3 2302 	umull	r2, r3, r3, r2
 8006164:	095b      	lsrs	r3, r3, #5
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800616c:	441c      	add	r4, r3
 800616e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006172:	2200      	movs	r2, #0
 8006174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800617c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006180:	4642      	mov	r2, r8
 8006182:	464b      	mov	r3, r9
 8006184:	1891      	adds	r1, r2, r2
 8006186:	63b9      	str	r1, [r7, #56]	; 0x38
 8006188:	415b      	adcs	r3, r3
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800618c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006190:	4641      	mov	r1, r8
 8006192:	1851      	adds	r1, r2, r1
 8006194:	6339      	str	r1, [r7, #48]	; 0x30
 8006196:	4649      	mov	r1, r9
 8006198:	414b      	adcs	r3, r1
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80061a8:	4659      	mov	r1, fp
 80061aa:	00cb      	lsls	r3, r1, #3
 80061ac:	4651      	mov	r1, sl
 80061ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061b2:	4651      	mov	r1, sl
 80061b4:	00ca      	lsls	r2, r1, #3
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	4642      	mov	r2, r8
 80061be:	189b      	adds	r3, r3, r2
 80061c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061c4:	464b      	mov	r3, r9
 80061c6:	460a      	mov	r2, r1
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80061dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80061e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80061e4:	460b      	mov	r3, r1
 80061e6:	18db      	adds	r3, r3, r3
 80061e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80061ea:	4613      	mov	r3, r2
 80061ec:	eb42 0303 	adc.w	r3, r2, r3
 80061f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80061fa:	f7fa f849 	bl	8000290 <__aeabi_uldivmod>
 80061fe:	4602      	mov	r2, r0
 8006200:	460b      	mov	r3, r1
 8006202:	4b0d      	ldr	r3, [pc, #52]	; (8006238 <UART_SetConfig+0x2d4>)
 8006204:	fba3 1302 	umull	r1, r3, r3, r2
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	2164      	movs	r1, #100	; 0x64
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	3332      	adds	r3, #50	; 0x32
 8006216:	4a08      	ldr	r2, [pc, #32]	; (8006238 <UART_SetConfig+0x2d4>)
 8006218:	fba2 2303 	umull	r2, r3, r2, r3
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	f003 0207 	and.w	r2, r3, #7
 8006222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4422      	add	r2, r4
 800622a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800622c:	e105      	b.n	800643a <UART_SetConfig+0x4d6>
 800622e:	bf00      	nop
 8006230:	40011000 	.word	0x40011000
 8006234:	40011400 	.word	0x40011400
 8006238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006240:	2200      	movs	r2, #0
 8006242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800624a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800624e:	4642      	mov	r2, r8
 8006250:	464b      	mov	r3, r9
 8006252:	1891      	adds	r1, r2, r2
 8006254:	6239      	str	r1, [r7, #32]
 8006256:	415b      	adcs	r3, r3
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800625e:	4641      	mov	r1, r8
 8006260:	1854      	adds	r4, r2, r1
 8006262:	4649      	mov	r1, r9
 8006264:	eb43 0501 	adc.w	r5, r3, r1
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	f04f 0300 	mov.w	r3, #0
 8006270:	00eb      	lsls	r3, r5, #3
 8006272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006276:	00e2      	lsls	r2, r4, #3
 8006278:	4614      	mov	r4, r2
 800627a:	461d      	mov	r5, r3
 800627c:	4643      	mov	r3, r8
 800627e:	18e3      	adds	r3, r4, r3
 8006280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006284:	464b      	mov	r3, r9
 8006286:	eb45 0303 	adc.w	r3, r5, r3
 800628a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800628e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800629a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800629e:	f04f 0200 	mov.w	r2, #0
 80062a2:	f04f 0300 	mov.w	r3, #0
 80062a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80062aa:	4629      	mov	r1, r5
 80062ac:	008b      	lsls	r3, r1, #2
 80062ae:	4621      	mov	r1, r4
 80062b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b4:	4621      	mov	r1, r4
 80062b6:	008a      	lsls	r2, r1, #2
 80062b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80062bc:	f7f9 ffe8 	bl	8000290 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4b60      	ldr	r3, [pc, #384]	; (8006448 <UART_SetConfig+0x4e4>)
 80062c6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	011c      	lsls	r4, r3, #4
 80062ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80062d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80062dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80062e0:	4642      	mov	r2, r8
 80062e2:	464b      	mov	r3, r9
 80062e4:	1891      	adds	r1, r2, r2
 80062e6:	61b9      	str	r1, [r7, #24]
 80062e8:	415b      	adcs	r3, r3
 80062ea:	61fb      	str	r3, [r7, #28]
 80062ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062f0:	4641      	mov	r1, r8
 80062f2:	1851      	adds	r1, r2, r1
 80062f4:	6139      	str	r1, [r7, #16]
 80062f6:	4649      	mov	r1, r9
 80062f8:	414b      	adcs	r3, r1
 80062fa:	617b      	str	r3, [r7, #20]
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006308:	4659      	mov	r1, fp
 800630a:	00cb      	lsls	r3, r1, #3
 800630c:	4651      	mov	r1, sl
 800630e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006312:	4651      	mov	r1, sl
 8006314:	00ca      	lsls	r2, r1, #3
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	4603      	mov	r3, r0
 800631c:	4642      	mov	r2, r8
 800631e:	189b      	adds	r3, r3, r2
 8006320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006324:	464b      	mov	r3, r9
 8006326:	460a      	mov	r2, r1
 8006328:	eb42 0303 	adc.w	r3, r2, r3
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	67bb      	str	r3, [r7, #120]	; 0x78
 800633a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006348:	4649      	mov	r1, r9
 800634a:	008b      	lsls	r3, r1, #2
 800634c:	4641      	mov	r1, r8
 800634e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006352:	4641      	mov	r1, r8
 8006354:	008a      	lsls	r2, r1, #2
 8006356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800635a:	f7f9 ff99 	bl	8000290 <__aeabi_uldivmod>
 800635e:	4602      	mov	r2, r0
 8006360:	460b      	mov	r3, r1
 8006362:	4b39      	ldr	r3, [pc, #228]	; (8006448 <UART_SetConfig+0x4e4>)
 8006364:	fba3 1302 	umull	r1, r3, r3, r2
 8006368:	095b      	lsrs	r3, r3, #5
 800636a:	2164      	movs	r1, #100	; 0x64
 800636c:	fb01 f303 	mul.w	r3, r1, r3
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	3332      	adds	r3, #50	; 0x32
 8006376:	4a34      	ldr	r2, [pc, #208]	; (8006448 <UART_SetConfig+0x4e4>)
 8006378:	fba2 2303 	umull	r2, r3, r2, r3
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006382:	441c      	add	r4, r3
 8006384:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006388:	2200      	movs	r2, #0
 800638a:	673b      	str	r3, [r7, #112]	; 0x70
 800638c:	677a      	str	r2, [r7, #116]	; 0x74
 800638e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006392:	4642      	mov	r2, r8
 8006394:	464b      	mov	r3, r9
 8006396:	1891      	adds	r1, r2, r2
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	415b      	adcs	r3, r3
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063a2:	4641      	mov	r1, r8
 80063a4:	1851      	adds	r1, r2, r1
 80063a6:	6039      	str	r1, [r7, #0]
 80063a8:	4649      	mov	r1, r9
 80063aa:	414b      	adcs	r3, r1
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80063ba:	4659      	mov	r1, fp
 80063bc:	00cb      	lsls	r3, r1, #3
 80063be:	4651      	mov	r1, sl
 80063c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063c4:	4651      	mov	r1, sl
 80063c6:	00ca      	lsls	r2, r1, #3
 80063c8:	4610      	mov	r0, r2
 80063ca:	4619      	mov	r1, r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	4642      	mov	r2, r8
 80063d0:	189b      	adds	r3, r3, r2
 80063d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80063d4:	464b      	mov	r3, r9
 80063d6:	460a      	mov	r2, r1
 80063d8:	eb42 0303 	adc.w	r3, r2, r3
 80063dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	663b      	str	r3, [r7, #96]	; 0x60
 80063e8:	667a      	str	r2, [r7, #100]	; 0x64
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80063f6:	4649      	mov	r1, r9
 80063f8:	008b      	lsls	r3, r1, #2
 80063fa:	4641      	mov	r1, r8
 80063fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006400:	4641      	mov	r1, r8
 8006402:	008a      	lsls	r2, r1, #2
 8006404:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006408:	f7f9 ff42 	bl	8000290 <__aeabi_uldivmod>
 800640c:	4602      	mov	r2, r0
 800640e:	460b      	mov	r3, r1
 8006410:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <UART_SetConfig+0x4e4>)
 8006412:	fba3 1302 	umull	r1, r3, r3, r2
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2164      	movs	r1, #100	; 0x64
 800641a:	fb01 f303 	mul.w	r3, r1, r3
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	011b      	lsls	r3, r3, #4
 8006422:	3332      	adds	r3, #50	; 0x32
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <UART_SetConfig+0x4e4>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	f003 020f 	and.w	r2, r3, #15
 8006430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4422      	add	r2, r4
 8006438:	609a      	str	r2, [r3, #8]
}
 800643a:	bf00      	nop
 800643c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006440:	46bd      	mov	sp, r7
 8006442:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006446:	bf00      	nop
 8006448:	51eb851f 	.word	0x51eb851f

0800644c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d123      	bne.n	80064a6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	6851      	ldr	r1, [r2, #4]
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	6892      	ldr	r2, [r2, #8]
 8006472:	4311      	orrs	r1, r2
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	68d2      	ldr	r2, [r2, #12]
 8006478:	4311      	orrs	r1, r2
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	6912      	ldr	r2, [r2, #16]
 800647e:	4311      	orrs	r1, r2
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	6952      	ldr	r2, [r2, #20]
 8006484:	4311      	orrs	r1, r2
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	6992      	ldr	r2, [r2, #24]
 800648a:	4311      	orrs	r1, r2
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	69d2      	ldr	r2, [r2, #28]
 8006490:	4311      	orrs	r1, r2
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6a12      	ldr	r2, [r2, #32]
 8006496:	4311      	orrs	r1, r2
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800649c:	430a      	orrs	r2, r1
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e028      	b.n	80064f8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	69d9      	ldr	r1, [r3, #28]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	4319      	orrs	r1, r3
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	430b      	orrs	r3, r1
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80064cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	6851      	ldr	r1, [r2, #4]
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	6892      	ldr	r2, [r2, #8]
 80064d8:	4311      	orrs	r1, r2
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	68d2      	ldr	r2, [r2, #12]
 80064de:	4311      	orrs	r1, r2
 80064e0:	683a      	ldr	r2, [r7, #0]
 80064e2:	6912      	ldr	r2, [r2, #16]
 80064e4:	4311      	orrs	r1, r2
 80064e6:	683a      	ldr	r2, [r7, #0]
 80064e8:	6952      	ldr	r2, [r2, #20]
 80064ea:	4311      	orrs	r1, r2
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	6992      	ldr	r2, [r2, #24]
 80064f0:	430a      	orrs	r2, r1
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d128      	bne.n	800656a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	1e59      	subs	r1, r3, #1
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	3b01      	subs	r3, #1
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	4319      	orrs	r1, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	3b01      	subs	r3, #1
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	4319      	orrs	r1, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	3b01      	subs	r3, #1
 8006540:	031b      	lsls	r3, r3, #12
 8006542:	4319      	orrs	r1, r3
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	3b01      	subs	r3, #1
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	4319      	orrs	r1, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	3b01      	subs	r3, #1
 8006554:	051b      	lsls	r3, r3, #20
 8006556:	4319      	orrs	r1, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	3b01      	subs	r3, #1
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	430b      	orrs	r3, r1
 8006562:	431a      	orrs	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	609a      	str	r2, [r3, #8]
 8006568:	e02f      	b.n	80065ca <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	68d2      	ldr	r2, [r2, #12]
 800657a:	3a01      	subs	r2, #1
 800657c:	0311      	lsls	r1, r2, #12
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	6952      	ldr	r2, [r2, #20]
 8006582:	3a01      	subs	r2, #1
 8006584:	0512      	lsls	r2, r2, #20
 8006586:	430a      	orrs	r2, r1
 8006588:	431a      	orrs	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	1e59      	subs	r1, r3, #1
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	4319      	orrs	r1, r3
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	4319      	orrs	r1, r3
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	4319      	orrs	r1, r3
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	3b01      	subs	r3, #1
 80065c0:	061b      	lsls	r3, r3, #24
 80065c2:	430b      	orrs	r3, r1
 80065c4:	431a      	orrs	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d8:	b084      	sub	sp, #16
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	f107 001c 	add.w	r0, r7, #28
 80065e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d105      	bne.n	800662a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f9c0 	bl	80069b0 <USB_CoreReset>
 8006630:	4603      	mov	r3, r0
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e01a      	b.n	800666c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f9b4 	bl	80069b0 <USB_CoreReset>
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800664c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d106      	bne.n	8006660 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
 800665e:	e005      	b.n	800666c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006664:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10b      	bne.n	800668a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f043 0206 	orr.w	r2, r3, #6
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800668a:	7bfb      	ldrb	r3, [r7, #15]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006696:	b004      	add	sp, #16
 8006698:	4770      	bx	lr

0800669a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f023 0201 	bic.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	460b      	mov	r3, r1
 80066e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066fa:	78fb      	ldrb	r3, [r7, #3]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d115      	bne.n	800672c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800670c:	2001      	movs	r0, #1
 800670e:	f7fb f90d 	bl	800192c <HAL_Delay>
      ms++;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3301      	adds	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f93a 	bl	8006992 <USB_GetMode>
 800671e:	4603      	mov	r3, r0
 8006720:	2b01      	cmp	r3, #1
 8006722:	d01e      	beq.n	8006762 <USB_SetCurrentMode+0x84>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b31      	cmp	r3, #49	; 0x31
 8006728:	d9f0      	bls.n	800670c <USB_SetCurrentMode+0x2e>
 800672a:	e01a      	b.n	8006762 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800672c:	78fb      	ldrb	r3, [r7, #3]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d115      	bne.n	800675e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800673e:	2001      	movs	r0, #1
 8006740:	f7fb f8f4 	bl	800192c <HAL_Delay>
      ms++;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3301      	adds	r3, #1
 8006748:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f921 	bl	8006992 <USB_GetMode>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <USB_SetCurrentMode+0x84>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b31      	cmp	r3, #49	; 0x31
 800675a:	d9f0      	bls.n	800673e <USB_SetCurrentMode+0x60>
 800675c:	e001      	b.n	8006762 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e005      	b.n	800676e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2b32      	cmp	r3, #50	; 0x32
 8006766:	d101      	bne.n	800676c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e000      	b.n	800676e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3301      	adds	r3, #1
 800678a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4a13      	ldr	r2, [pc, #76]	; (80067dc <USB_FlushTxFifo+0x64>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d901      	bls.n	8006798 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e01b      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	daf2      	bge.n	8006786 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	019b      	lsls	r3, r3, #6
 80067a8:	f043 0220 	orr.w	r2, r3, #32
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	4a08      	ldr	r2, [pc, #32]	; (80067dc <USB_FlushTxFifo+0x64>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d901      	bls.n	80067c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e006      	b.n	80067d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d0f0      	beq.n	80067b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	00030d40 	.word	0x00030d40

080067e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	4a11      	ldr	r2, [pc, #68]	; (800683c <USB_FlushRxFifo+0x5c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e018      	b.n	8006830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b00      	cmp	r3, #0
 8006804:	daf2      	bge.n	80067ec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2210      	movs	r2, #16
 800680e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <USB_FlushRxFifo+0x5c>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d901      	bls.n	8006822 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e006      	b.n	8006830 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b10      	cmp	r3, #16
 800682c:	d0f0      	beq.n	8006810 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	00030d40 	.word	0x00030d40

08006840 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006840:	b480      	push	{r7}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	4611      	mov	r1, r2
 800684c:	461a      	mov	r2, r3
 800684e:	460b      	mov	r3, r1
 8006850:	71fb      	strb	r3, [r7, #7]
 8006852:	4613      	mov	r3, r2
 8006854:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800685e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006862:	2b00      	cmp	r3, #0
 8006864:	d123      	bne.n	80068ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006866:	88bb      	ldrh	r3, [r7, #4]
 8006868:	3303      	adds	r3, #3
 800686a:	089b      	lsrs	r3, r3, #2
 800686c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800686e:	2300      	movs	r3, #0
 8006870:	61bb      	str	r3, [r7, #24]
 8006872:	e018      	b.n	80068a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	031a      	lsls	r2, r3, #12
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006880:	461a      	mov	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	3301      	adds	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	3301      	adds	r3, #1
 8006892:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	3301      	adds	r3, #1
 8006898:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	3301      	adds	r3, #1
 800689e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	3301      	adds	r3, #1
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d3e2      	bcc.n	8006874 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3724      	adds	r7, #36	; 0x24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80068bc:	b480      	push	{r7}
 80068be:	b08b      	sub	sp, #44	; 0x2c
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	4613      	mov	r3, r2
 80068c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	089b      	lsrs	r3, r3, #2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068e2:	2300      	movs	r3, #0
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	e014      	b.n	8006912 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f6:	3301      	adds	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	3301      	adds	r3, #1
 80068fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	3301      	adds	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	3301      	adds	r3, #1
 800690a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	3301      	adds	r3, #1
 8006910:	623b      	str	r3, [r7, #32]
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	429a      	cmp	r2, r3
 8006918:	d3e6      	bcc.n	80068e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800691a:	8bfb      	ldrh	r3, [r7, #30]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d01e      	beq.n	800695e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	461a      	mov	r2, r3
 800692c:	f107 0310 	add.w	r3, r7, #16
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006944:	701a      	strb	r2, [r3, #0]
      i++;
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	3301      	adds	r3, #1
 800694a:	623b      	str	r3, [r7, #32]
      pDest++;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	3301      	adds	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	3b01      	subs	r3, #1
 8006956:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006958:	8bfb      	ldrh	r3, [r7, #30]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1ea      	bne.n	8006934 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006960:	4618      	mov	r0, r3
 8006962:	372c      	adds	r7, #44	; 0x2c
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006984:	68fb      	ldr	r3, [r7, #12]
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006992:	b480      	push	{r7}
 8006994:	b083      	sub	sp, #12
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0301 	and.w	r3, r3, #1
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
	...

080069b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <USB_CoreReset+0x64>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e01b      	b.n	8006a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	daf2      	bge.n	80069bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f043 0201 	orr.w	r2, r3, #1
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <USB_CoreReset+0x64>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d901      	bls.n	80069f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d0f0      	beq.n	80069e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3714      	adds	r7, #20
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	00030d40 	.word	0x00030d40

08006a18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a18:	b084      	sub	sp, #16
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d10a      	bne.n	8006a8a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a82:	f043 0304 	orr.w	r3, r3, #4
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e014      	b.n	8006ab4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a98:	f023 0304 	bic.w	r3, r3, #4
 8006a9c:	6013      	str	r3, [r2, #0]
 8006a9e:	e009      	b.n	8006ab4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006aae:	f023 0304 	bic.w	r3, r3, #4
 8006ab2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ab4:	2110      	movs	r1, #16
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fe5e 	bl	8006778 <USB_FlushTxFifo>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fe8a 	bl	80067e0 <USB_FlushRxFifo>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	e015      	b.n	8006b08 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f04f 33ff 	mov.w	r3, #4294967295
 8006aee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006afc:	461a      	mov	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3301      	adds	r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d3e5      	bcc.n	8006adc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a13      	ldr	r2, [pc, #76]	; (8006b84 <USB_HostInit+0x16c>)
 8006b36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	4a13      	ldr	r2, [pc, #76]	; (8006b88 <USB_HostInit+0x170>)
 8006b3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006b40:	e009      	b.n	8006b56 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2280      	movs	r2, #128	; 0x80
 8006b46:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a10      	ldr	r2, [pc, #64]	; (8006b8c <USB_HostInit+0x174>)
 8006b4c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a0f      	ldr	r2, [pc, #60]	; (8006b90 <USB_HostInit+0x178>)
 8006b52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d105      	bne.n	8006b68 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f043 0210 	orr.w	r2, r3, #16
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	699a      	ldr	r2, [r3, #24]
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <USB_HostInit+0x17c>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b80:	b004      	add	sp, #16
 8006b82:	4770      	bx	lr
 8006b84:	01000200 	.word	0x01000200
 8006b88:	00e00300 	.word	0x00e00300
 8006b8c:	00600080 	.word	0x00600080
 8006b90:	004000e0 	.word	0x004000e0
 8006b94:	a3200008 	.word	0xa3200008

08006b98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	78fb      	ldrb	r3, [r7, #3]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006bd4:	78fb      	ldrb	r3, [r7, #3]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d107      	bne.n	8006bea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006be0:	461a      	mov	r2, r3
 8006be2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006be6:	6053      	str	r3, [r2, #4]
 8006be8:	e009      	b.n	8006bfe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006bea:	78fb      	ldrb	r3, [r7, #3]
 8006bec:	2b02      	cmp	r3, #2
 8006bee:	d106      	bne.n	8006bfe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006bfc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3714      	adds	r7, #20
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c2c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006c3c:	2064      	movs	r0, #100	; 0x64
 8006c3e:	f7fa fe75 	bl	800192c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c4e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006c50:	200a      	movs	r0, #10
 8006c52:	f7fa fe6b 	bl	800192c <HAL_Delay>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006c84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d109      	bne.n	8006ca4 <USB_DriveVbus+0x44>
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d106      	bne.n	8006ca4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ca2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d109      	bne.n	8006cc4 <USB_DriveVbus+0x64>
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b085      	sub	sp, #20
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	0c5b      	lsrs	r3, r3, #17
 8006cf0:	f003 0303 	and.w	r3, r3, #3
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	b29b      	uxth	r3, r3
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
	...

08006d24 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	4608      	mov	r0, r1
 8006d2e:	4611      	mov	r1, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	70fb      	strb	r3, [r7, #3]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70bb      	strb	r3, [r7, #2]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d52:	461a      	mov	r2, r3
 8006d54:	f04f 33ff 	mov.w	r3, #4294967295
 8006d58:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d87e      	bhi.n	8006e60 <USB_HC_Init+0x13c>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <USB_HC_Init+0x44>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d79 	.word	0x08006d79
 8006d6c:	08006e23 	.word	0x08006e23
 8006d70:	08006d79 	.word	0x08006d79
 8006d74:	08006de5 	.word	0x08006de5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d78:	78fb      	ldrb	r3, [r7, #3]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d84:	461a      	mov	r2, r3
 8006d86:	f240 439d 	movw	r3, #1181	; 0x49d
 8006d8a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006d8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	da10      	bge.n	8006db6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	78fa      	ldrb	r2, [r7, #3]
 8006da4:	0151      	lsls	r1, r2, #5
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	440a      	add	r2, r1
 8006daa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006db2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006db4:	e057      	b.n	8006e66 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d051      	beq.n	8006e66 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	78fa      	ldrb	r2, [r7, #3]
 8006dd2:	0151      	lsls	r1, r2, #5
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	440a      	add	r2, r1
 8006dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ddc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006de0:	60d3      	str	r3, [r2, #12]
      break;
 8006de2:	e040      	b.n	8006e66 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df0:	461a      	mov	r2, r3
 8006df2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006df6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006df8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	da34      	bge.n	8006e6a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	015a      	lsls	r2, r3, #5
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	78fa      	ldrb	r2, [r7, #3]
 8006e10:	0151      	lsls	r1, r2, #5
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	440a      	add	r2, r1
 8006e16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e20:	e023      	b.n	8006e6a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f240 2325 	movw	r3, #549	; 0x225
 8006e34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	da17      	bge.n	8006e6e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	015a      	lsls	r2, r3, #5
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	78fa      	ldrb	r2, [r7, #3]
 8006e4e:	0151      	lsls	r1, r2, #5
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	440a      	add	r2, r1
 8006e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e58:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006e5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e5e:	e006      	b.n	8006e6e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	77fb      	strb	r3, [r7, #31]
      break;
 8006e64:	e004      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e66:	bf00      	nop
 8006e68:	e002      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e6a:	bf00      	nop
 8006e6c:	e000      	b.n	8006e70 <USB_HC_Init+0x14c>
      break;
 8006e6e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	78fb      	ldrb	r3, [r7, #3]
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	6939      	ldr	r1, [r7, #16]
 8006ea6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006eba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da03      	bge.n	8006eca <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	e001      	b.n	8006ece <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff feff 	bl	8006cd2 <USB_GetHostSpeed>
 8006ed4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006ed6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d106      	bne.n	8006eec <USB_HC_Init+0x1c8>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d003      	beq.n	8006eec <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ee8:	617b      	str	r3, [r7, #20]
 8006eea:	e001      	b.n	8006ef0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006eec:	2300      	movs	r3, #0
 8006eee:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006ef0:	787b      	ldrb	r3, [r7, #1]
 8006ef2:	059b      	lsls	r3, r3, #22
 8006ef4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006ef8:	78bb      	ldrb	r3, [r7, #2]
 8006efa:	02db      	lsls	r3, r3, #11
 8006efc:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f00:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f02:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f06:	049b      	lsls	r3, r3, #18
 8006f08:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f0c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f0e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f14:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	0159      	lsls	r1, r3, #5
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	440b      	add	r3, r1
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f26:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f2c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d003      	beq.n	8006f3e <USB_HC_Init+0x21a>
 8006f36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10f      	bne.n	8006f5e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	015a      	lsls	r2, r3, #5
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	4413      	add	r3, r2
 8006f46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	78fa      	ldrb	r2, [r7, #3]
 8006f4e:	0151      	lsls	r1, r2, #5
 8006f50:	693a      	ldr	r2, [r7, #16]
 8006f52:	440a      	add	r2, r1
 8006f54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f5c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3720      	adds	r7, #32
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08c      	sub	sp, #48	; 0x30
 8006f6c:	af02      	add	r7, sp, #8
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	785b      	ldrb	r3, [r3, #1]
 8006f7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f84:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d02d      	beq.n	8006fee <USB_HC_StartXfer+0x86>
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	791b      	ldrb	r3, [r3, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d129      	bne.n	8006fee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d117      	bne.n	8006fd0 <USB_HC_StartXfer+0x68>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	79db      	ldrb	r3, [r3, #7]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d003      	beq.n	8006fb0 <USB_HC_StartXfer+0x48>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	79db      	ldrb	r3, [r3, #7]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d10f      	bne.n	8006fd0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006fd0:	79fb      	ldrb	r3, [r7, #7]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <USB_HC_StartXfer+0x86>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	795b      	ldrb	r3, [r3, #5]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d107      	bne.n	8006fee <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa0f 	bl	8007408 <USB_DoPing>
      return HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	e0f8      	b.n	80071e0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	8912      	ldrh	r2, [r2, #8]
 8006ffe:	4413      	add	r3, r2
 8007000:	3b01      	subs	r3, #1
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	8912      	ldrh	r2, [r2, #8]
 8007006:	fbb3 f3f2 	udiv	r3, r3, r2
 800700a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800700c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800700e:	8b7b      	ldrh	r3, [r7, #26]
 8007010:	429a      	cmp	r2, r3
 8007012:	d90b      	bls.n	800702c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007014:	8b7b      	ldrh	r3, [r7, #26]
 8007016:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	8912      	ldrh	r2, [r2, #8]
 800701e:	fb03 f202 	mul.w	r2, r3, r2
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	611a      	str	r2, [r3, #16]
 8007026:	e001      	b.n	800702c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8007028:	2301      	movs	r3, #1
 800702a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	78db      	ldrb	r3, [r3, #3]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d007      	beq.n	8007044 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007034:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	8912      	ldrh	r2, [r2, #8]
 800703a:	fb03 f202 	mul.w	r2, r3, r2
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	611a      	str	r2, [r3, #16]
 8007042:	e003      	b.n	800704c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695a      	ldr	r2, [r3, #20]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007056:	04d9      	lsls	r1, r3, #19
 8007058:	4b63      	ldr	r3, [pc, #396]	; (80071e8 <USB_HC_StartXfer+0x280>)
 800705a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800705c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	7a9b      	ldrb	r3, [r3, #10]
 8007062:	075b      	lsls	r3, r3, #29
 8007064:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007068:	69f9      	ldr	r1, [r7, #28]
 800706a:	0148      	lsls	r0, r1, #5
 800706c:	6a39      	ldr	r1, [r7, #32]
 800706e:	4401      	add	r1, r0
 8007070:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007074:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007076:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	68d9      	ldr	r1, [r3, #12]
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800708e:	460a      	mov	r2, r1
 8007090:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bf0c      	ite	eq
 80070a2:	2301      	moveq	r3, #1
 80070a4:	2300      	movne	r3, #0
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69fa      	ldr	r2, [r7, #28]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	6a3a      	ldr	r2, [r7, #32]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80070c8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	6a3b      	ldr	r3, [r7, #32]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	7e7b      	ldrb	r3, [r7, #25]
 80070da:	075b      	lsls	r3, r3, #29
 80070dc:	69f9      	ldr	r1, [r7, #28]
 80070de:	0148      	lsls	r0, r1, #5
 80070e0:	6a39      	ldr	r1, [r7, #32]
 80070e2:	4401      	add	r1, r0
 80070e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80070e8:	4313      	orrs	r3, r2
 80070ea:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	015a      	lsls	r2, r3, #5
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	4413      	add	r3, r2
 80070f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007102:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	78db      	ldrb	r3, [r3, #3]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d004      	beq.n	8007116 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007112:	613b      	str	r3, [r7, #16]
 8007114:	e003      	b.n	800711e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800711c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007124:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	015a      	lsls	r2, r3, #5
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	4413      	add	r3, r2
 800712e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007132:	461a      	mov	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007138:	79fb      	ldrb	r3, [r7, #7]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	e04e      	b.n	80071e0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	78db      	ldrb	r3, [r3, #3]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d149      	bne.n	80071de <USB_HC_StartXfer+0x276>
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d045      	beq.n	80071de <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	79db      	ldrb	r3, [r3, #7]
 8007156:	2b03      	cmp	r3, #3
 8007158:	d830      	bhi.n	80071bc <USB_HC_StartXfer+0x254>
 800715a:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <USB_HC_StartXfer+0x1f8>)
 800715c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007160:	08007171 	.word	0x08007171
 8007164:	08007195 	.word	0x08007195
 8007168:	08007171 	.word	0x08007171
 800716c:	08007195 	.word	0x08007195
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	695b      	ldr	r3, [r3, #20]
 8007174:	3303      	adds	r3, #3
 8007176:	089b      	lsrs	r3, r3, #2
 8007178:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	b29b      	uxth	r3, r3
 8007182:	429a      	cmp	r2, r3
 8007184:	d91c      	bls.n	80071c0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	f043 0220 	orr.w	r2, r3, #32
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	619a      	str	r2, [r3, #24]
        }
        break;
 8007192:	e015      	b.n	80071c0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800719e:	8afa      	ldrh	r2, [r7, #22]
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d90a      	bls.n	80071c4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80071ba:	e003      	b.n	80071c4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80071bc:	bf00      	nop
 80071be:	e002      	b.n	80071c6 <USB_HC_StartXfer+0x25e>
        break;
 80071c0:	bf00      	nop
 80071c2:	e000      	b.n	80071c6 <USB_HC_StartXfer+0x25e>
        break;
 80071c4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	785a      	ldrb	r2, [r3, #1]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2000      	movs	r0, #0
 80071d6:	9000      	str	r0, [sp, #0]
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f7ff fb31 	bl	8006840 <USB_WritePacket>
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3728      	adds	r7, #40	; 0x28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	1ff80000 	.word	0x1ff80000

080071ec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	b29b      	uxth	r3, r3
}
 8007202:	4618      	mov	r0, r3
 8007204:	3714      	adds	r7, #20
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800720e:	b480      	push	{r7}
 8007210:	b089      	sub	sp, #36	; 0x24
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	0c9b      	lsrs	r3, r3, #18
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	0fdb      	lsrs	r3, r3, #31
 800724c:	f003 0301 	and.w	r3, r3, #1
 8007250:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d104      	bne.n	8007268 <USB_HC_Halt+0x5a>
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	e0c8      	b.n	80073fa <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <USB_HC_Halt+0x66>
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2b02      	cmp	r3, #2
 8007272:	d163      	bne.n	800733c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	015a      	lsls	r2, r3, #5
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	4413      	add	r3, r2
 800727c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	69fa      	ldr	r2, [r7, #28]
 8007288:	440a      	add	r2, r1
 800728a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800728e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007292:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	f040 80ab 	bne.w	80073f8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d133      	bne.n	8007316 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	0151      	lsls	r1, r2, #5
 80072c0:	69fa      	ldr	r2, [r7, #28]
 80072c2:	440a      	add	r2, r1
 80072c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072cc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	0151      	lsls	r1, r2, #5
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	440a      	add	r2, r1
 80072e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072ec:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	3301      	adds	r3, #1
 80072f2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fa:	d81d      	bhi.n	8007338 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	4413      	add	r3, r2
 8007304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800730e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007312:	d0ec      	beq.n	80072ee <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007314:	e070      	b.n	80073f8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4413      	add	r3, r2
 800731e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	0151      	lsls	r1, r2, #5
 8007328:	69fa      	ldr	r2, [r7, #28]
 800732a:	440a      	add	r2, r1
 800732c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007330:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007334:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007336:	e05f      	b.n	80073f8 <USB_HC_Halt+0x1ea>
            break;
 8007338:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800733a:	e05d      	b.n	80073f8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800735a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d133      	bne.n	80073d4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	4413      	add	r3, r2
 8007374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69ba      	ldr	r2, [r7, #24]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	440a      	add	r2, r1
 8007382:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007386:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800738a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073aa:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3301      	adds	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073b8:	d81d      	bhi.n	80073f6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073d0:	d0ec      	beq.n	80073ac <USB_HC_Halt+0x19e>
 80073d2:	e011      	b.n	80073f8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69ba      	ldr	r2, [r7, #24]
 80073e4:	0151      	lsls	r1, r2, #5
 80073e6:	69fa      	ldr	r2, [r7, #28]
 80073e8:	440a      	add	r2, r1
 80073ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	e000      	b.n	80073f8 <USB_HC_Halt+0x1ea>
          break;
 80073f6:	bf00      	nop
    }
  }

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800741c:	2301      	movs	r3, #1
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	04da      	lsls	r2, r3, #19
 8007424:	4b15      	ldr	r3, [pc, #84]	; (800747c <USB_DoPing+0x74>)
 8007426:	4013      	ands	r3, r2
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	0151      	lsls	r1, r2, #5
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	440a      	add	r2, r1
 8007430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007438:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007450:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007458:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	4413      	add	r3, r2
 8007462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007466:	461a      	mov	r2, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	1ff80000 	.word	0x1ff80000

08007480 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff f911 	bl	80066bc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800749a:	2110      	movs	r1, #16
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f7ff f96b 	bl	8006778 <USB_FlushTxFifo>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff f997 	bl	80067e0 <USB_FlushRxFifo>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	e01f      	b.n	8007502 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	015a      	lsls	r2, r3, #5
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	4413      	add	r3, r2
 80074f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f6:	461a      	mov	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	3301      	adds	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	2b0f      	cmp	r3, #15
 8007506:	d9dc      	bls.n	80074c2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007508:	2300      	movs	r3, #0
 800750a:	61bb      	str	r3, [r7, #24]
 800750c:	e034      	b.n	8007578 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4413      	add	r3, r2
 8007516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007524:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800752c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007534:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	3301      	adds	r3, #1
 800754c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007554:	d80c      	bhi.n	8007570 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	4413      	add	r3, r2
 800755e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007568:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800756c:	d0ec      	beq.n	8007548 <USB_StopHost+0xc8>
 800756e:	e000      	b.n	8007572 <USB_StopHost+0xf2>
        break;
 8007570:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	3301      	adds	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b0f      	cmp	r3, #15
 800757c:	d9c7      	bls.n	800750e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007584:	461a      	mov	r2, r3
 8007586:	f04f 33ff 	mov.w	r3, #4294967295
 800758a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff f880 	bl	800669a <USB_EnableGlobalInt>

  return ret;
 800759a:	7ffb      	ldrb	r3, [r7, #31]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80075a4:	b590      	push	{r4, r7, lr}
 80075a6:	b089      	sub	sp, #36	; 0x24
 80075a8:	af04      	add	r7, sp, #16
 80075aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80075ac:	2301      	movs	r3, #1
 80075ae:	2202      	movs	r2, #2
 80075b0:	2102      	movs	r1, #2
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fc66 	bl	8007e84 <USBH_FindInterface>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2bff      	cmp	r3, #255	; 0xff
 80075c0:	d002      	beq.n	80075c8 <USBH_CDC_InterfaceInit+0x24>
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d901      	bls.n	80075cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e13d      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fc3b 	bl	8007e4c <USBH_SelectInterface>
 80075d6:	4603      	mov	r3, r0
 80075d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075da:	7bbb      	ldrb	r3, [r7, #14]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075e0:	2302      	movs	r3, #2
 80075e2:	e131      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80075ea:	2050      	movs	r0, #80	; 0x50
 80075ec:	f002 fb00 	bl	8009bf0 <malloc>
 80075f0:	4603      	mov	r3, r0
 80075f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007604:	2302      	movs	r3, #2
 8007606:	e11f      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007608:	2250      	movs	r2, #80	; 0x50
 800760a:	2100      	movs	r1, #0
 800760c:	68b8      	ldr	r0, [r7, #8]
 800760e:	f002 faff 	bl	8009c10 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	211a      	movs	r1, #26
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	b25b      	sxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	da15      	bge.n	8007656 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	211a      	movs	r1, #26
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	4413      	add	r3, r2
 8007636:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800763a:	781a      	ldrb	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	211a      	movs	r1, #26
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	4413      	add	r3, r2
 800764c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007650:	881a      	ldrh	r2, [r3, #0]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	785b      	ldrb	r3, [r3, #1]
 800765a:	4619      	mov	r1, r3
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f001 ff2c 	bl	80094ba <USBH_AllocPipe>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	7819      	ldrb	r1, [r3, #0]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	7858      	ldrb	r0, [r3, #1]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	8952      	ldrh	r2, [r2, #10]
 8007682:	9202      	str	r2, [sp, #8]
 8007684:	2203      	movs	r2, #3
 8007686:	9201      	str	r2, [sp, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	4623      	mov	r3, r4
 800768c:	4602      	mov	r2, r0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 fee4 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2200      	movs	r2, #0
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f002 f9f9 	bl	8009a94 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80076a2:	2300      	movs	r3, #0
 80076a4:	2200      	movs	r2, #0
 80076a6:	210a      	movs	r1, #10
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fbeb 	bl	8007e84 <USBH_FindInterface>
 80076ae:	4603      	mov	r3, r0
 80076b0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80076b2:	7bfb      	ldrb	r3, [r7, #15]
 80076b4:	2bff      	cmp	r3, #255	; 0xff
 80076b6:	d002      	beq.n	80076be <USBH_CDC_InterfaceInit+0x11a>
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d901      	bls.n	80076c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80076be:	2302      	movs	r3, #2
 80076c0:	e0c2      	b.n	8007848 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	211a      	movs	r1, #26
 80076c8:	fb01 f303 	mul.w	r3, r1, r3
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b25b      	sxtb	r3, r3
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	da16      	bge.n	8007708 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	211a      	movs	r1, #26
 80076e0:	fb01 f303 	mul.w	r3, r1, r3
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	211a      	movs	r1, #26
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007700:	881a      	ldrh	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	835a      	strh	r2, [r3, #26]
 8007706:	e015      	b.n	8007734 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	211a      	movs	r1, #26
 800770e:	fb01 f303 	mul.w	r3, r1, r3
 8007712:	4413      	add	r3, r2
 8007714:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	211a      	movs	r1, #26
 8007724:	fb01 f303 	mul.w	r3, r1, r3
 8007728:	4413      	add	r3, r2
 800772a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800772e:	881a      	ldrh	r2, [r3, #0]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	211a      	movs	r1, #26
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	b25b      	sxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	da16      	bge.n	800777a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	211a      	movs	r1, #26
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	f203 3356 	addw	r3, r3, #854	; 0x356
 800775c:	781a      	ldrb	r2, [r3, #0]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	211a      	movs	r1, #26
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	4413      	add	r3, r2
 800776e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007772:	881a      	ldrh	r2, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	835a      	strh	r2, [r3, #26]
 8007778:	e015      	b.n	80077a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	211a      	movs	r1, #26
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	f203 3356 	addw	r3, r3, #854	; 0x356
 800778a:	781a      	ldrb	r2, [r3, #0]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	211a      	movs	r1, #26
 8007796:	fb01 f303 	mul.w	r3, r1, r3
 800779a:	4413      	add	r3, r2
 800779c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80077a0:	881a      	ldrh	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	7b9b      	ldrb	r3, [r3, #14]
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f001 fe84 	bl	80094ba <USBH_AllocPipe>
 80077b2:	4603      	mov	r3, r0
 80077b4:	461a      	mov	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	7bdb      	ldrb	r3, [r3, #15]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fe7a 	bl	80094ba <USBH_AllocPipe>
 80077c6:	4603      	mov	r3, r0
 80077c8:	461a      	mov	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	7b59      	ldrb	r1, [r3, #13]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	7b98      	ldrb	r0, [r3, #14]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	8b12      	ldrh	r2, [r2, #24]
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	2202      	movs	r2, #2
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4623      	mov	r3, r4
 80077f0:	4602      	mov	r2, r0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f001 fe32 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	7b19      	ldrb	r1, [r3, #12]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	7bd8      	ldrb	r0, [r3, #15]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	8b52      	ldrh	r2, [r2, #26]
 8007810:	9202      	str	r2, [sp, #8]
 8007812:	2202      	movs	r2, #2
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	4623      	mov	r3, r4
 800781a:	4602      	mov	r2, r0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 fe1d 	bl	800945c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	7b5b      	ldrb	r3, [r3, #13]
 800782e:	2200      	movs	r2, #0
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f002 f92e 	bl	8009a94 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	7b1b      	ldrb	r3, [r3, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f002 f927 	bl	8009a94 <USBH_LL_SetToggle>

  return USBH_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3714      	adds	r7, #20
 800784c:	46bd      	mov	sp, r7
 800784e:	bd90      	pop	{r4, r7, pc}

08007850 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00e      	beq.n	8007888 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f001 fe12 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fe3d 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	7b1b      	ldrb	r3, [r3, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7b1b      	ldrb	r3, [r3, #12]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f001 fdff 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	7b1b      	ldrb	r3, [r3, #12]
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f001 fe2a 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	7b5b      	ldrb	r3, [r3, #13]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fdec 	bl	800949a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	7b5b      	ldrb	r3, [r3, #13]
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f001 fe17 	bl	80094fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00b      	beq.n	80078f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f002 f989 	bl	8009c00 <free>
    phost->pActiveClass->pData = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f4:	2200      	movs	r2, #0
 80078f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3710      	adds	r7, #16
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b084      	sub	sp, #16
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007910:	69db      	ldr	r3, [r3, #28]
 8007912:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3340      	adds	r3, #64	; 0x40
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f8b1 	bl	8007a82 <GetLineCoding>
 8007920:	4603      	mov	r3, r0
 8007922:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007930:	2102      	movs	r1, #2
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007936:	7afb      	ldrb	r3, [r7, #11]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007956:	69db      	ldr	r3, [r3, #28]
 8007958:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007960:	2b04      	cmp	r3, #4
 8007962:	d877      	bhi.n	8007a54 <USBH_CDC_Process+0x114>
 8007964:	a201      	add	r2, pc, #4	; (adr r2, 800796c <USBH_CDC_Process+0x2c>)
 8007966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796a:	bf00      	nop
 800796c:	08007981 	.word	0x08007981
 8007970:	08007987 	.word	0x08007987
 8007974:	080079b7 	.word	0x080079b7
 8007978:	08007a2b 	.word	0x08007a2b
 800797c:	08007a39 	.word	0x08007a39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	73fb      	strb	r3, [r7, #15]
      break;
 8007984:	e06d      	b.n	8007a62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f897 	bl	8007ac0 <SetLineCoding>
 8007992:	4603      	mov	r3, r0
 8007994:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d104      	bne.n	80079a6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079a4:	e058      	b.n	8007a58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d055      	beq.n	8007a58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2204      	movs	r2, #4
 80079b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80079b4:	e050      	b.n	8007a58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	3340      	adds	r3, #64	; 0x40
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f860 	bl	8007a82 <GetLineCoding>
 80079c2:	4603      	mov	r3, r0
 80079c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80079c6:	7bbb      	ldrb	r3, [r7, #14]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d126      	bne.n	8007a1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079de:	791b      	ldrb	r3, [r3, #4]
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d13b      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d133      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079fe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d12b      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d124      	bne.n	8007a5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f958 	bl	8007cc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a18:	e020      	b.n	8007a5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007a1a:	7bbb      	ldrb	r3, [r7, #14]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d01d      	beq.n	8007a5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2204      	movs	r2, #4
 8007a24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a28:	e018      	b.n	8007a5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f867 	bl	8007afe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f8da 	bl	8007bea <CDC_ProcessReception>
      break;
 8007a36:	e014      	b.n	8007a62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 ffef 	bl	8008a1e <USBH_ClrFeature>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10a      	bne.n	8007a60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007a52:	e005      	b.n	8007a60 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a54:	bf00      	nop
 8007a56:	e004      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a58:	bf00      	nop
 8007a5a:	e002      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a5c:	bf00      	nop
 8007a5e:	e000      	b.n	8007a62 <USBH_CDC_Process+0x122>
      break;
 8007a60:	bf00      	nop

  }

  return status;
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3710      	adds	r7, #16
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}

08007a6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b082      	sub	sp, #8
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	22a1      	movs	r2, #161	; 0xa1
 8007a90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2221      	movs	r2, #33	; 0x21
 8007a96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2207      	movs	r2, #7
 8007aa8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2207      	movs	r2, #7
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f001 fa81 	bl	8008fb8 <USBH_CtlReq>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2221      	movs	r2, #33	; 0x21
 8007ace:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2207      	movs	r2, #7
 8007ae6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	2207      	movs	r2, #7
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f001 fa62 	bl	8008fb8 <USBH_CtlReq>
 8007af4:	4603      	mov	r3, r0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af02      	add	r7, sp, #8
 8007b04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d002      	beq.n	8007b24 <CDC_ProcessTransmission+0x26>
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d023      	beq.n	8007b6a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007b22:	e05e      	b.n	8007be2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	8b12      	ldrh	r2, [r2, #24]
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d90b      	bls.n	8007b48 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8b1a      	ldrh	r2, [r3, #24]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	7b5b      	ldrb	r3, [r3, #13]
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	9000      	str	r0, [sp, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f001 fc48 	bl	80093d6 <USBH_BulkSendData>
 8007b46:	e00b      	b.n	8007b60 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	7b5b      	ldrb	r3, [r3, #13]
 8007b56:	2001      	movs	r0, #1
 8007b58:	9000      	str	r0, [sp, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f001 fc3b 	bl	80093d6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b68:	e03b      	b.n	8007be2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	7b5b      	ldrb	r3, [r3, #13]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 ff65 	bl	8009a40 <USBH_LL_GetURBState>
 8007b76:	4603      	mov	r3, r0
 8007b78:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b7a:	7afb      	ldrb	r3, [r7, #11]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d128      	bne.n	8007bd2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	8b12      	ldrh	r2, [r2, #24]
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d90e      	bls.n	8007baa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	8b12      	ldrh	r2, [r2, #24]
 8007b94:	1a9a      	subs	r2, r3, r2
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	8b12      	ldrh	r2, [r2, #24]
 8007ba2:	441a      	add	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	61da      	str	r2, [r3, #28]
 8007ba8:	e002      	b.n	8007bb0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007bc0:	e00e      	b.n	8007be0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f868 	bl	8007ca0 <USBH_CDC_TransmitCallback>
      break;
 8007bd0:	e006      	b.n	8007be0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d103      	bne.n	8007be0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007be0:	bf00      	nop
  }
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b086      	sub	sp, #24
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d002      	beq.n	8007c10 <CDC_ProcessReception+0x26>
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d00e      	beq.n	8007c2c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007c0e:	e043      	b.n	8007c98 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	6a19      	ldr	r1, [r3, #32]
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	8b5a      	ldrh	r2, [r3, #26]
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	7b1b      	ldrb	r3, [r3, #12]
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 fbff 	bl	8009420 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2204      	movs	r2, #4
 8007c26:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c2a:	e035      	b.n	8007c98 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	7b1b      	ldrb	r3, [r3, #12]
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f001 ff04 	bl	8009a40 <USBH_LL_GetURBState>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c3c:	7cfb      	ldrb	r3, [r7, #19]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d129      	bne.n	8007c96 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	7b1b      	ldrb	r3, [r3, #12]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fe67 	bl	800991c <USBH_LL_GetLastXferSize>
 8007c4e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d016      	beq.n	8007c88 <CDC_ProcessReception+0x9e>
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	8b5b      	ldrh	r3, [r3, #26]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d910      	bls.n	8007c88 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	1ad2      	subs	r2, r2, r3
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	441a      	add	r2, r3
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007c86:	e006      	b.n	8007c96 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 f80f 	bl	8007cb4 <USBH_CDC_ReceiveCallback>
      break;
 8007c96:	bf00      	nop
  }
}
 8007c98:	bf00      	nop
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}

08007ca0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e029      	b.n	8007d48 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	79fa      	ldrb	r2, [r7, #7]
 8007cf8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f81f 	bl	8007d50 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d003      	beq.n	8007d40 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f001 fd2d 	bl	80097a0 <USBH_LL_Init>

  return USBH_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e009      	b.n	8007d76 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	33e0      	adds	r3, #224	; 0xe0
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2b0f      	cmp	r3, #15
 8007d7a:	d9f2      	bls.n	8007d62 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e009      	b.n	8007d96 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	3301      	adds	r3, #1
 8007d94:	60fb      	str	r3, [r7, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d9c:	d3f1      	bcc.n	8007d82 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2200      	movs	r2, #0
 8007da8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2201      	movs	r2, #1
 8007dae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2240      	movs	r2, #64	; 0x40
 8007dc2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d016      	beq.n	8007e3a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10e      	bne.n	8007e34 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007e1c:	1c59      	adds	r1, r3, #1
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	33de      	adds	r3, #222	; 0xde
 8007e28:	6839      	ldr	r1, [r7, #0]
 8007e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
 8007e32:	e004      	b.n	8007e3e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007e34:	2302      	movs	r3, #2
 8007e36:	73fb      	strb	r3, [r7, #15]
 8007e38:	e001      	b.n	8007e3e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007e62:	78fa      	ldrb	r2, [r7, #3]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d204      	bcs.n	8007e72 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007e70:	e001      	b.n	8007e76 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007e72:	2302      	movs	r3, #2
 8007e74:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	461a      	mov	r2, r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	70fb      	strb	r3, [r7, #3]
 8007e96:	460b      	mov	r3, r1
 8007e98:	70bb      	strb	r3, [r7, #2]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007eac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007eae:	e025      	b.n	8007efc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	221a      	movs	r2, #26
 8007eb4:	fb02 f303 	mul.w	r3, r2, r3
 8007eb8:	3308      	adds	r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	795b      	ldrb	r3, [r3, #5]
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d002      	beq.n	8007ed2 <USBH_FindInterface+0x4e>
 8007ecc:	78fb      	ldrb	r3, [r7, #3]
 8007ece:	2bff      	cmp	r3, #255	; 0xff
 8007ed0:	d111      	bne.n	8007ef6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ed6:	78ba      	ldrb	r2, [r7, #2]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d002      	beq.n	8007ee2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007edc:	78bb      	ldrb	r3, [r7, #2]
 8007ede:	2bff      	cmp	r3, #255	; 0xff
 8007ee0:	d109      	bne.n	8007ef6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ee6:	787a      	ldrb	r2, [r7, #1]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d002      	beq.n	8007ef2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007eec:	787b      	ldrb	r3, [r7, #1]
 8007eee:	2bff      	cmp	r3, #255	; 0xff
 8007ef0:	d101      	bne.n	8007ef6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	e006      	b.n	8007f04 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ef6:	7dfb      	ldrb	r3, [r7, #23]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d9d6      	bls.n	8007eb0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f02:	23ff      	movs	r3, #255	; 0xff
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fc87 	bl	800982c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f001 fda0 	bl	8009a66 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af04      	add	r7, sp, #16
 8007f36:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d102      	bne.n	8007f52 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	2b0b      	cmp	r3, #11
 8007f5a:	f200 81be 	bhi.w	80082da <USBH_Process+0x3aa>
 8007f5e:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <USBH_Process+0x34>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f95 	.word	0x08007f95
 8007f68:	08007fc7 	.word	0x08007fc7
 8007f6c:	0800802f 	.word	0x0800802f
 8007f70:	08008275 	.word	0x08008275
 8007f74:	080082db 	.word	0x080082db
 8007f78:	080080d3 	.word	0x080080d3
 8007f7c:	0800821b 	.word	0x0800821b
 8007f80:	08008109 	.word	0x08008109
 8007f84:	08008129 	.word	0x08008129
 8007f88:	08008149 	.word	0x08008149
 8007f8c:	0800818d 	.word	0x0800818d
 8007f90:	0800825d 	.word	0x0800825d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 819e 	beq.w	80082de <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007fa8:	20c8      	movs	r0, #200	; 0xc8
 8007faa:	f001 fda3 	bl	8009af4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fc99 	bl	80098e6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fc4:	e18b      	b.n	80082de <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d107      	bne.n	8007fe0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fde:	e18d      	b.n	80082fc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007fe6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fea:	d914      	bls.n	8008016 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8008002:	2b03      	cmp	r3, #3
 8008004:	d903      	bls.n	800800e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	220d      	movs	r2, #13
 800800a:	701a      	strb	r2, [r3, #0]
      break;
 800800c:	e176      	b.n	80082fc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	701a      	strb	r2, [r3, #0]
      break;
 8008014:	e172      	b.n	80082fc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800801c:	f103 020a 	add.w	r2, r3, #10
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008026:	200a      	movs	r0, #10
 8008028:	f001 fd64 	bl	8009af4 <USBH_Delay>
      break;
 800802c:	e166      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800803e:	2104      	movs	r1, #4
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008044:	2064      	movs	r0, #100	; 0x64
 8008046:	f001 fd55 	bl	8009af4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fc24 	bl	8009898 <USBH_LL_GetSpeed>
 8008050:	4603      	mov	r3, r0
 8008052:	461a      	mov	r2, r3
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2205      	movs	r2, #5
 800805e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008060:	2100      	movs	r1, #0
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fa29 	bl	80094ba <USBH_AllocPipe>
 8008068:	4603      	mov	r3, r0
 800806a:	461a      	mov	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008070:	2180      	movs	r1, #128	; 0x80
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f001 fa21 	bl	80094ba <USBH_AllocPipe>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7919      	ldrb	r1, [r3, #4]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008094:	b292      	uxth	r2, r2
 8008096:	9202      	str	r2, [sp, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	9201      	str	r2, [sp, #4]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4603      	mov	r3, r0
 80080a0:	2280      	movs	r2, #128	; 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f9da 	bl	800945c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7959      	ldrb	r1, [r3, #5]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80080bc:	b292      	uxth	r2, r2
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	9201      	str	r2, [sp, #4]
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	4603      	mov	r3, r0
 80080c8:	2200      	movs	r2, #0
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 f9c6 	bl	800945c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080d0:	e114      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f918 	bl	8008308 <USBH_HandleEnum>
 80080d8:	4603      	mov	r3, r0
 80080da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 80fe 	bne.w	80082e2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d103      	bne.n	8008100 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2208      	movs	r2, #8
 80080fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80080fe:	e0f0      	b.n	80082e2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2207      	movs	r2, #7
 8008104:	701a      	strb	r2, [r3, #0]
      break;
 8008106:	e0ec      	b.n	80082e2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 80e9 	beq.w	80082e6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800811a:	2101      	movs	r1, #1
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2208      	movs	r2, #8
 8008124:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008126:	e0de      	b.n	80082e6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800812e:	b29b      	uxth	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fc2c 	bl	8008990 <USBH_SetCfg>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 80d5 	bne.w	80082ea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2209      	movs	r2, #9
 8008144:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008146:	e0d0      	b.n	80082ea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d016      	beq.n	8008184 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008156:	2101      	movs	r1, #1
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc3c 	bl	80089d6 <USBH_SetFeature>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	220a      	movs	r2, #10
 800816e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008170:	e0bd      	b.n	80082ee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b03      	cmp	r3, #3
 8008178:	f040 80b9 	bne.w	80082ee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	220a      	movs	r2, #10
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e0b4      	b.n	80082ee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	220a      	movs	r2, #10
 8008188:	701a      	strb	r2, [r3, #0]
      break;
 800818a:	e0b0      	b.n	80082ee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008192:	2b00      	cmp	r3, #0
 8008194:	f000 80ad 	beq.w	80082f2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e016      	b.n	80081d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80081a6:	7bfa      	ldrb	r2, [r7, #15]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32de      	adds	r2, #222	; 0xde
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	791a      	ldrb	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d108      	bne.n	80081ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80081bc:	7bfa      	ldrb	r2, [r7, #15]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32de      	adds	r2, #222	; 0xde
 80081c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80081cc:	e005      	b.n	80081da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	3301      	adds	r3, #1
 80081d2:	73fb      	strb	r3, [r7, #15]
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d0e5      	beq.n	80081a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d016      	beq.n	8008212 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d109      	bne.n	800820a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2206      	movs	r2, #6
 80081fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008202:	2103      	movs	r1, #3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008208:	e073      	b.n	80082f2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	220d      	movs	r2, #13
 800820e:	701a      	strb	r2, [r3, #0]
      break;
 8008210:	e06f      	b.n	80082f2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	220d      	movs	r2, #13
 8008216:	701a      	strb	r2, [r3, #0]
      break;
 8008218:	e06b      	b.n	80082f2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008220:	2b00      	cmp	r3, #0
 8008222:	d017      	beq.n	8008254 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	4798      	blx	r3
 8008230:	4603      	mov	r3, r0
 8008232:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008234:	7bbb      	ldrb	r3, [r7, #14]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d103      	bne.n	8008244 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	220b      	movs	r2, #11
 8008240:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008242:	e058      	b.n	80082f6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d154      	bne.n	80082f6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	220d      	movs	r2, #13
 8008250:	701a      	strb	r2, [r3, #0]
      break;
 8008252:	e050      	b.n	80082f6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	220d      	movs	r2, #13
 8008258:	701a      	strb	r2, [r3, #0]
      break;
 800825a:	e04c      	b.n	80082f6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008262:	2b00      	cmp	r3, #0
 8008264:	d049      	beq.n	80082fa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
      }
      break;
 8008272:	e042      	b.n	80082fa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f7ff fd67 	bl	8007d50 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d005      	beq.n	80082b6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082b0:	2105      	movs	r1, #5
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d107      	bne.n	80082d2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7ff fe20 	bl	8007f10 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80082d0:	e014      	b.n	80082fc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 faaa 	bl	800982c <USBH_LL_Start>
      break;
 80082d8:	e010      	b.n	80082fc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80082da:	bf00      	nop
 80082dc:	e00e      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082de:	bf00      	nop
 80082e0:	e00c      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082e2:	bf00      	nop
 80082e4:	e00a      	b.n	80082fc <USBH_Process+0x3cc>
    break;
 80082e6:	bf00      	nop
 80082e8:	e008      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082ea:	bf00      	nop
 80082ec:	e006      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082ee:	bf00      	nop
 80082f0:	e004      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082f2:	bf00      	nop
 80082f4:	e002      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <USBH_Process+0x3cc>
      break;
 80082fa:	bf00      	nop
  }
  return USBH_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop

08008308 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008310:	2301      	movs	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008314:	2301      	movs	r3, #1
 8008316:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	785b      	ldrb	r3, [r3, #1]
 800831c:	2b07      	cmp	r3, #7
 800831e:	f200 81c1 	bhi.w	80086a4 <USBH_HandleEnum+0x39c>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <USBH_HandleEnum+0x20>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008349 	.word	0x08008349
 800832c:	08008407 	.word	0x08008407
 8008330:	08008471 	.word	0x08008471
 8008334:	080084ff 	.word	0x080084ff
 8008338:	08008569 	.word	0x08008569
 800833c:	080085d9 	.word	0x080085d9
 8008340:	0800861f 	.word	0x0800861f
 8008344:	08008665 	.word	0x08008665
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008348:	2108      	movs	r1, #8
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 fa50 	bl	80087f0 <USBH_Get_DevDesc>
 8008350:	4603      	mov	r3, r0
 8008352:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d130      	bne.n	80083bc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2201      	movs	r2, #1
 8008368:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	7919      	ldrb	r1, [r3, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800837e:	b292      	uxth	r2, r2
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	2200      	movs	r2, #0
 8008384:	9201      	str	r2, [sp, #4]
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	4603      	mov	r3, r0
 800838a:	2280      	movs	r2, #128	; 0x80
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 f865 	bl	800945c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7959      	ldrb	r1, [r3, #5]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80083a6:	b292      	uxth	r2, r2
 80083a8:	9202      	str	r2, [sp, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	9201      	str	r2, [sp, #4]
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	4603      	mov	r3, r0
 80083b2:	2200      	movs	r2, #0
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f851 	bl	800945c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80083ba:	e175      	b.n	80086a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b03      	cmp	r3, #3
 80083c0:	f040 8172 	bne.w	80086a8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083ca:	3301      	adds	r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d903      	bls.n	80083e6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	220d      	movs	r2, #13
 80083e2:	701a      	strb	r2, [r3, #0]
      break;
 80083e4:	e160      	b.n	80086a8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	795b      	ldrb	r3, [r3, #5]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f885 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	791b      	ldrb	r3, [r3, #4]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 f87f 	bl	80094fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	701a      	strb	r2, [r3, #0]
      break;
 8008404:	e150      	b.n	80086a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008406:	2112      	movs	r1, #18
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f9f1 	bl	80087f0 <USBH_Get_DevDesc>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800841e:	e145      	b.n	80086ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008420:	7bbb      	ldrb	r3, [r7, #14]
 8008422:	2b03      	cmp	r3, #3
 8008424:	f040 8142 	bne.w	80086ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800842e:	3301      	adds	r3, #1
 8008430:	b2da      	uxtb	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800843e:	2b03      	cmp	r3, #3
 8008440:	d903      	bls.n	800844a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	220d      	movs	r2, #13
 8008446:	701a      	strb	r2, [r3, #0]
      break;
 8008448:	e130      	b.n	80086ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	795b      	ldrb	r3, [r3, #5]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f853 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	791b      	ldrb	r3, [r3, #4]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f84d 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
      break;
 800846e:	e11d      	b.n	80086ac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008470:	2101      	movs	r1, #1
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 fa68 	bl	8008948 <USBH_SetAddress>
 8008478:	4603      	mov	r3, r0
 800847a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d132      	bne.n	80084e8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008482:	2002      	movs	r0, #2
 8008484:	f001 fb36 	bl	8009af4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2203      	movs	r2, #3
 8008494:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	7919      	ldrb	r1, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80084aa:	b292      	uxth	r2, r2
 80084ac:	9202      	str	r2, [sp, #8]
 80084ae:	2200      	movs	r2, #0
 80084b0:	9201      	str	r2, [sp, #4]
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	4603      	mov	r3, r0
 80084b6:	2280      	movs	r2, #128	; 0x80
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 ffcf 	bl	800945c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	7959      	ldrb	r1, [r3, #5]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80084d2:	b292      	uxth	r2, r2
 80084d4:	9202      	str	r2, [sp, #8]
 80084d6:	2200      	movs	r2, #0
 80084d8:	9201      	str	r2, [sp, #4]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	4603      	mov	r3, r0
 80084de:	2200      	movs	r2, #0
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 ffbb 	bl	800945c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80084e6:	e0e3      	b.n	80086b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b03      	cmp	r3, #3
 80084ec:	f040 80e0 	bne.w	80086b0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	220d      	movs	r2, #13
 80084f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	705a      	strb	r2, [r3, #1]
      break;
 80084fc:	e0d8      	b.n	80086b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80084fe:	2109      	movs	r1, #9
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f99d 	bl	8008840 <USBH_Get_CfgDesc>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d103      	bne.n	8008518 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2204      	movs	r2, #4
 8008514:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008516:	e0cd      	b.n	80086b4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b03      	cmp	r3, #3
 800851c:	f040 80ca 	bne.w	80086b4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008526:	3301      	adds	r3, #1
 8008528:	b2da      	uxtb	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008536:	2b03      	cmp	r3, #3
 8008538:	d903      	bls.n	8008542 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	220d      	movs	r2, #13
 800853e:	701a      	strb	r2, [r3, #0]
      break;
 8008540:	e0b8      	b.n	80086b4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	795b      	ldrb	r3, [r3, #5]
 8008546:	4619      	mov	r1, r3
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 ffd7 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	791b      	ldrb	r3, [r3, #4]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 ffd1 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2200      	movs	r2, #0
 800855e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e0a5      	b.n	80086b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f965 	bl	8008840 <USBH_Get_CfgDesc>
 8008576:	4603      	mov	r3, r0
 8008578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2205      	movs	r2, #5
 8008584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008586:	e097      	b.n	80086b8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008588:	7bbb      	ldrb	r3, [r7, #14]
 800858a:	2b03      	cmp	r3, #3
 800858c:	f040 8094 	bne.w	80086b8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008596:	3301      	adds	r3, #1
 8008598:	b2da      	uxtb	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085a6:	2b03      	cmp	r3, #3
 80085a8:	d903      	bls.n	80085b2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	220d      	movs	r2, #13
 80085ae:	701a      	strb	r2, [r3, #0]
      break;
 80085b0:	e082      	b.n	80086b8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	795b      	ldrb	r3, [r3, #5]
 80085b6:	4619      	mov	r1, r3
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 ff9f 	bl	80094fc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	791b      	ldrb	r3, [r3, #4]
 80085c2:	4619      	mov	r1, r3
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 ff99 	bl	80094fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	701a      	strb	r2, [r3, #0]
      break;
 80085d6:	e06f      	b.n	80086b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d019      	beq.n	8008616 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80085ee:	23ff      	movs	r3, #255	; 0xff
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f949 	bl	8008888 <USBH_Get_StringDesc>
 80085f6:	4603      	mov	r3, r0
 80085f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2206      	movs	r2, #6
 8008604:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008606:	e059      	b.n	80086bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	2b03      	cmp	r3, #3
 800860c:	d156      	bne.n	80086bc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2206      	movs	r2, #6
 8008612:	705a      	strb	r2, [r3, #1]
      break;
 8008614:	e052      	b.n	80086bc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2206      	movs	r2, #6
 800861a:	705a      	strb	r2, [r3, #1]
      break;
 800861c:	e04e      	b.n	80086bc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008624:	2b00      	cmp	r3, #0
 8008626:	d019      	beq.n	800865c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008634:	23ff      	movs	r3, #255	; 0xff
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f926 	bl	8008888 <USBH_Get_StringDesc>
 800863c:	4603      	mov	r3, r0
 800863e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d103      	bne.n	800864e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2207      	movs	r2, #7
 800864a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800864c:	e038      	b.n	80086c0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	2b03      	cmp	r3, #3
 8008652:	d135      	bne.n	80086c0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2207      	movs	r2, #7
 8008658:	705a      	strb	r2, [r3, #1]
      break;
 800865a:	e031      	b.n	80086c0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2207      	movs	r2, #7
 8008660:	705a      	strb	r2, [r3, #1]
      break;
 8008662:	e02d      	b.n	80086c0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800866a:	2b00      	cmp	r3, #0
 800866c:	d017      	beq.n	800869e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800867a:	23ff      	movs	r3, #255	; 0xff
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f903 	bl	8008888 <USBH_Get_StringDesc>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d102      	bne.n	8008692 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008690:	e018      	b.n	80086c4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b03      	cmp	r3, #3
 8008696:	d115      	bne.n	80086c4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73fb      	strb	r3, [r7, #15]
      break;
 800869c:	e012      	b.n	80086c4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
      break;
 80086a2:	e00f      	b.n	80086c4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80086a4:	bf00      	nop
 80086a6:	e00e      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086a8:	bf00      	nop
 80086aa:	e00c      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086ac:	bf00      	nop
 80086ae:	e00a      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b0:	bf00      	nop
 80086b2:	e008      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b4:	bf00      	nop
 80086b6:	e006      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086b8:	bf00      	nop
 80086ba:	e004      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086bc:	bf00      	nop
 80086be:	e002      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086c0:	bf00      	nop
 80086c2:	e000      	b.n	80086c6 <USBH_HandleEnum+0x3be>
      break;
 80086c4:	bf00      	nop
  }
  return Status;
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr

080086ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b082      	sub	sp, #8
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086fc:	1c5a      	adds	r2, r3, #1
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f804 	bl	8008712 <USBH_HandleSof>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b082      	sub	sp, #8
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b0b      	cmp	r3, #11
 8008722:	d10a      	bne.n	800873a <USBH_HandleSof+0x28>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d005      	beq.n	800873a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	4798      	blx	r3
  }
}
 800873a:	bf00      	nop
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008752:	bf00      	nop
}
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800876e:	bf00      	nop
}
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800879a:	2300      	movs	r3, #0
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 f84a 	bl	8009862 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	791b      	ldrb	r3, [r3, #4]
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fe91 	bl	80094fc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	795b      	ldrb	r3, [r3, #5]
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fe8b 	bl	80094fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b086      	sub	sp, #24
 80087f4:	af02      	add	r7, sp, #8
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	460b      	mov	r3, r1
 80087fa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b29b      	uxth	r3, r3
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	4613      	mov	r3, r2
 800880a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800880e:	2100      	movs	r1, #0
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 f864 	bl	80088de <USBH_GetDescriptor>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800881a:	7bfb      	ldrb	r3, [r7, #15]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10a      	bne.n	8008836 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800882c:	78fa      	ldrb	r2, [r7, #3]
 800882e:	b292      	uxth	r2, r2
 8008830:	4619      	mov	r1, r3
 8008832:	f000 f918 	bl	8008a66 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af02      	add	r7, sp, #8
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	331c      	adds	r3, #28
 8008850:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008852:	887b      	ldrh	r3, [r7, #2]
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800885c:	2100      	movs	r1, #0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f83d 	bl	80088de <USBH_GetDescriptor>
 8008864:	4603      	mov	r3, r0
 8008866:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008868:	7bfb      	ldrb	r3, [r7, #15]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d107      	bne.n	800887e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800886e:	887b      	ldrh	r3, [r7, #2]
 8008870:	461a      	mov	r2, r3
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f987 	bl	8008b88 <USBH_ParseCfgDesc>
 800887a:	4603      	mov	r3, r0
 800887c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800887e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008880:	4618      	mov	r0, r3
 8008882:	3710      	adds	r7, #16
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	461a      	mov	r2, r3
 8008894:	460b      	mov	r3, r1
 8008896:	72fb      	strb	r3, [r7, #11]
 8008898:	4613      	mov	r3, r2
 800889a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800889c:	7afb      	ldrb	r3, [r7, #11]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80088a4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	460b      	mov	r3, r1
 80088b2:	2100      	movs	r1, #0
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f812 	bl	80088de <USBH_GetDescriptor>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d107      	bne.n	80088d4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088ca:	893a      	ldrh	r2, [r7, #8]
 80088cc:	6879      	ldr	r1, [r7, #4]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fb24 	bl	8008f1c <USBH_ParseStringDesc>
  }

  return status;
 80088d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	607b      	str	r3, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	72fb      	strb	r3, [r7, #11]
 80088ec:	4613      	mov	r3, r2
 80088ee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	789b      	ldrb	r3, [r3, #2]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11c      	bne.n	8008932 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80088f8:	7afb      	ldrb	r3, [r7, #11]
 80088fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2206      	movs	r2, #6
 8008908:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	893a      	ldrh	r2, [r7, #8]
 800890e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008910:	893b      	ldrh	r3, [r7, #8]
 8008912:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800891a:	d104      	bne.n	8008926 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f240 4209 	movw	r2, #1033	; 0x409
 8008922:	829a      	strh	r2, [r3, #20]
 8008924:	e002      	b.n	800892c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	8b3a      	ldrh	r2, [r7, #24]
 8008930:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008932:	8b3b      	ldrh	r3, [r7, #24]
 8008934:	461a      	mov	r2, r3
 8008936:	6879      	ldr	r1, [r7, #4]
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb3d 	bl	8008fb8 <USBH_CtlReq>
 800893e:	4603      	mov	r3, r0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	460b      	mov	r3, r1
 8008952:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	789b      	ldrb	r3, [r3, #2]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d10f      	bne.n	800897c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2205      	movs	r2, #5
 8008966:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008968:	78fb      	ldrb	r3, [r7, #3]
 800896a:	b29a      	uxth	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800897c:	2200      	movs	r2, #0
 800897e:	2100      	movs	r1, #0
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fb19 	bl	8008fb8 <USBH_CtlReq>
 8008986:	4603      	mov	r3, r0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	789b      	ldrb	r3, [r3, #2]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d10e      	bne.n	80089c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2209      	movs	r2, #9
 80089ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	887a      	ldrh	r2, [r7, #2]
 80089b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2100      	movs	r1, #0
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 faf6 	bl	8008fb8 <USBH_CtlReq>
 80089cc:	4603      	mov	r3, r0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b082      	sub	sp, #8
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	789b      	ldrb	r3, [r3, #2]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d10f      	bne.n	8008a0a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2203      	movs	r2, #3
 80089f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fad2 	bl	8008fb8 <USBH_CtlReq>
 8008a14:	4603      	mov	r3, r0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b082      	sub	sp, #8
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	789b      	ldrb	r3, [r3, #2]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d10f      	bne.n	8008a52 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2202      	movs	r2, #2
 8008a36:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008a44:	78fb      	ldrb	r3, [r7, #3]
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8008a52:	2200      	movs	r2, #0
 8008a54:	2100      	movs	r1, #0
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 faae 	bl	8008fb8 <USBH_CtlReq>
 8008a5c:	4603      	mov	r3, r0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3708      	adds	r7, #8
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b085      	sub	sp, #20
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	4613      	mov	r3, r2
 8008a72:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781a      	ldrb	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	785a      	ldrb	r2, [r3, #1]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	3302      	adds	r3, #2
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	3303      	adds	r3, #3
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	021b      	lsls	r3, r3, #8
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	791a      	ldrb	r2, [r3, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	795a      	ldrb	r2, [r3, #5]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	799a      	ldrb	r2, [r3, #6]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	79da      	ldrb	r2, [r3, #7]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	79db      	ldrb	r3, [r3, #7]
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	dc11      	bgt.n	8008aec <USBH_ParseDevDesc+0x86>
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	db16      	blt.n	8008afa <USBH_ParseDevDesc+0x94>
 8008acc:	3b08      	subs	r3, #8
 8008ace:	2201      	movs	r2, #1
 8008ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8008ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bf14      	ite	ne
 8008ae0:	2301      	movne	r3, #1
 8008ae2:	2300      	moveq	r3, #0
 8008ae4:	b2db      	uxtb	r3, r3
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d102      	bne.n	8008af0 <USBH_ParseDevDesc+0x8a>
 8008aea:	e006      	b.n	8008afa <USBH_ParseDevDesc+0x94>
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d104      	bne.n	8008afa <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	79da      	ldrb	r2, [r3, #7]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	71da      	strb	r2, [r3, #7]
      break;
 8008af8:	e003      	b.n	8008b02 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2240      	movs	r2, #64	; 0x40
 8008afe:	71da      	strb	r2, [r3, #7]
      break;
 8008b00:	bf00      	nop
  }

  if (length > 8U)
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d939      	bls.n	8008b7c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	3309      	adds	r3, #9
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	021b      	lsls	r3, r3, #8
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	330a      	adds	r3, #10
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	330b      	adds	r3, #11
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	021b      	lsls	r3, r3, #8
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	b29a      	uxth	r2, r3
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	330c      	adds	r3, #12
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	330d      	adds	r3, #13
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	021b      	lsls	r3, r3, #8
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4313      	orrs	r3, r2
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	7b9a      	ldrb	r2, [r3, #14]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	7bda      	ldrb	r2, [r3, #15]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	7c1a      	ldrb	r2, [r3, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	7c5a      	ldrb	r2, [r3, #17]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	745a      	strb	r2, [r3, #17]
  }
}
 8008b7c:	bf00      	nop
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08c      	sub	sp, #48	; 0x30
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	4613      	mov	r3, r2
 8008b94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008b9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	785a      	ldrb	r2, [r3, #1]
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	3302      	adds	r3, #2
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	3303      	adds	r3, #3
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	021b      	lsls	r3, r3, #8
 8008bda:	b29b      	uxth	r3, r3
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be4:	bf28      	it	cs
 8008be6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6a3b      	ldr	r3, [r7, #32]
 8008bee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	791a      	ldrb	r2, [r3, #4]
 8008bf4:	6a3b      	ldr	r3, [r7, #32]
 8008bf6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	795a      	ldrb	r2, [r3, #5]
 8008bfc:	6a3b      	ldr	r3, [r7, #32]
 8008bfe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	799a      	ldrb	r2, [r3, #6]
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	79da      	ldrb	r2, [r3, #7]
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7a1a      	ldrb	r2, [r3, #8]
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d002      	beq.n	8008c26 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	2209      	movs	r2, #9
 8008c24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c26:	88fb      	ldrh	r3, [r7, #6]
 8008c28:	2b09      	cmp	r3, #9
 8008c2a:	f240 809d 	bls.w	8008d68 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c2e:	2309      	movs	r3, #9
 8008c30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c36:	e081      	b.n	8008d3c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c38:	f107 0316 	add.w	r3, r7, #22
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c40:	f000 f99f 	bl	8008f82 <USBH_GetNextDesc>
 8008c44:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c48:	785b      	ldrb	r3, [r3, #1]
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d176      	bne.n	8008d3c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	2b09      	cmp	r3, #9
 8008c54:	d002      	beq.n	8008c5c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c58:	2209      	movs	r2, #9
 8008c5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c60:	221a      	movs	r2, #26
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	3308      	adds	r3, #8
 8008c68:	6a3a      	ldr	r2, [r7, #32]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008c70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c72:	69f8      	ldr	r0, [r7, #28]
 8008c74:	f000 f87e 	bl	8008d74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c82:	e043      	b.n	8008d0c <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c84:	f107 0316 	add.w	r3, r7, #22
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8c:	f000 f979 	bl	8008f82 <USBH_GetNextDesc>
 8008c90:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d138      	bne.n	8008d0c <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	795b      	ldrb	r3, [r3, #5]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d10f      	bne.n	8008cc2 <USBH_ParseCfgDesc+0x13a>
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	799b      	ldrb	r3, [r3, #6]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d10b      	bne.n	8008cc2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	79db      	ldrb	r3, [r3, #7]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10f      	bne.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	2b09      	cmp	r3, #9
 8008cb8:	d00b      	beq.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cc0:	e007      	b.n	8008cd2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8008cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b07      	cmp	r3, #7
 8008cc8:	d004      	beq.n	8008cd4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ccc:	2207      	movs	r2, #7
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e000      	b.n	8008cd4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008cd2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008cdc:	3201      	adds	r2, #1
 8008cde:	00d2      	lsls	r2, r2, #3
 8008ce0:	211a      	movs	r1, #26
 8008ce2:	fb01 f303 	mul.w	r3, r1, r3
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3308      	adds	r3, #8
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	4413      	add	r3, r2
 8008cee:	3304      	adds	r3, #4
 8008cf0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cf4:	69b9      	ldr	r1, [r7, #24]
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f000 f86b 	bl	8008dd2 <USBH_ParseEPDesc>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8008d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008d06:	3301      	adds	r3, #1
 8008d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	791b      	ldrb	r3, [r3, #4]
 8008d10:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d204      	bcs.n	8008d22 <USBH_ParseCfgDesc+0x19a>
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	885a      	ldrh	r2, [r3, #2]
 8008d1c:	8afb      	ldrh	r3, [r7, #22]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d8b0      	bhi.n	8008c84 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	791b      	ldrb	r3, [r3, #4]
 8008d26:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d201      	bcs.n	8008d32 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e01c      	b.n	8008d6c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8008d32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d36:	3301      	adds	r3, #1
 8008d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d805      	bhi.n	8008d50 <USBH_ParseCfgDesc+0x1c8>
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	885a      	ldrh	r2, [r3, #2]
 8008d48:	8afb      	ldrh	r3, [r7, #22]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	f63f af74 	bhi.w	8008c38 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	791b      	ldrb	r3, [r3, #4]
 8008d54:	2b02      	cmp	r3, #2
 8008d56:	bf28      	it	cs
 8008d58:	2302      	movcs	r3, #2
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d201      	bcs.n	8008d68 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 8008d64:	2303      	movs	r3, #3
 8008d66:	e001      	b.n	8008d6c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8008d68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3730      	adds	r7, #48	; 0x30
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785a      	ldrb	r2, [r3, #1]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	789a      	ldrb	r2, [r3, #2]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	78da      	ldrb	r2, [r3, #3]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	791a      	ldrb	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	795a      	ldrb	r2, [r3, #5]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	799a      	ldrb	r2, [r3, #6]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	79da      	ldrb	r2, [r3, #7]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	7a1a      	ldrb	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	721a      	strb	r2, [r3, #8]
}
 8008dc6:	bf00      	nop
 8008dc8:	370c      	adds	r7, #12
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	781a      	ldrb	r2, [r3, #0]
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	785a      	ldrb	r2, [r3, #1]
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	789a      	ldrb	r2, [r3, #2]
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	78da      	ldrb	r2, [r3, #3]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3304      	adds	r3, #4
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3305      	adds	r3, #5
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	799a      	ldrb	r2, [r3, #6]
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	889b      	ldrh	r3, [r3, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	75fb      	strb	r3, [r7, #23]
 8008e32:	e033      	b.n	8008e9c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	889b      	ldrh	r3, [r3, #4]
 8008e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008e3c:	f023 0307 	bic.w	r3, r3, #7
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	889b      	ldrh	r3, [r3, #4]
 8008e4a:	b21a      	sxth	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	b299      	uxth	r1, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3305      	adds	r3, #5
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	021b      	lsls	r3, r3, #8
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	430b      	orrs	r3, r1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d110      	bne.n	8008e8e <USBH_ParseEPDesc+0xbc>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	3304      	adds	r3, #4
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b299      	uxth	r1, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3305      	adds	r3, #5
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	430b      	orrs	r3, r1
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b21b      	sxth	r3, r3
 8008e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e8a:	b21b      	sxth	r3, r3
 8008e8c:	e001      	b.n	8008e92 <USBH_ParseEPDesc+0xc0>
 8008e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e92:	4313      	orrs	r3, r2
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d116      	bne.n	8008ed4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	78db      	ldrb	r3, [r3, #3]
 8008eaa:	f003 0303 	and.w	r3, r3, #3
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d005      	beq.n	8008ebe <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	78db      	ldrb	r3, [r3, #3]
 8008eb6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d127      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	799b      	ldrb	r3, [r3, #6]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d003      	beq.n	8008ece <USBH_ParseEPDesc+0xfc>
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	799b      	ldrb	r3, [r3, #6]
 8008eca:	2b10      	cmp	r3, #16
 8008ecc:	d91f      	bls.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	75fb      	strb	r3, [r7, #23]
 8008ed2:	e01c      	b.n	8008f0e <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	78db      	ldrb	r3, [r3, #3]
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d10a      	bne.n	8008ef6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	799b      	ldrb	r3, [r3, #6]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <USBH_ParseEPDesc+0x11e>
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	799b      	ldrb	r3, [r3, #6]
 8008eec:	2b10      	cmp	r3, #16
 8008eee:	d90e      	bls.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	e00b      	b.n	8008f0e <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	78db      	ldrb	r3, [r3, #3]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d105      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	799b      	ldrb	r3, [r3, #6]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8008f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	371c      	adds	r7, #28
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	4613      	mov	r3, r2
 8008f28:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b03      	cmp	r3, #3
 8008f32:	d120      	bne.n	8008f76 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	1e9a      	subs	r2, r3, #2
 8008f3a:	88fb      	ldrh	r3, [r7, #6]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bf28      	it	cs
 8008f40:	4613      	movcs	r3, r2
 8008f42:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3302      	adds	r3, #2
 8008f48:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	82fb      	strh	r3, [r7, #22]
 8008f4e:	e00b      	b.n	8008f68 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008f50:	8afb      	ldrh	r3, [r7, #22]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4413      	add	r3, r2
 8008f56:	781a      	ldrb	r2, [r3, #0]
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008f62:	8afb      	ldrh	r3, [r7, #22]
 8008f64:	3302      	adds	r3, #2
 8008f66:	82fb      	strh	r3, [r7, #22]
 8008f68:	8afa      	ldrh	r2, [r7, #22]
 8008f6a:	8abb      	ldrh	r3, [r7, #20]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d3ef      	bcc.n	8008f50 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
  }
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	4413      	add	r3, r2
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008faa:	68fb      	ldr	r3, [r7, #12]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr

08008fb8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	789b      	ldrb	r3, [r3, #2]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d002      	beq.n	8008fd8 <USBH_CtlReq+0x20>
 8008fd2:	2b02      	cmp	r3, #2
 8008fd4:	d00f      	beq.n	8008ff6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008fd6:	e027      	b.n	8009028 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	88fa      	ldrh	r2, [r7, #6]
 8008fe2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2202      	movs	r2, #2
 8008fee:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff4:	e018      	b.n	8009028 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f81c 	bl	8009034 <USBH_HandleControl>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009000:	7dfb      	ldrb	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <USBH_CtlReq+0x54>
 8009006:	7dfb      	ldrb	r3, [r7, #23]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d106      	bne.n	800901a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2201      	movs	r2, #1
 8009010:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2200      	movs	r2, #0
 8009016:	761a      	strb	r2, [r3, #24]
      break;
 8009018:	e005      	b.n	8009026 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2b02      	cmp	r3, #2
 800901e:	d102      	bne.n	8009026 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2201      	movs	r2, #1
 8009024:	709a      	strb	r2, [r3, #2]
      break;
 8009026:	bf00      	nop
  }
  return status;
 8009028:	7dfb      	ldrb	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
	...

08009034 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af02      	add	r7, sp, #8
 800903a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009040:	2300      	movs	r3, #0
 8009042:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7e1b      	ldrb	r3, [r3, #24]
 8009048:	3b01      	subs	r3, #1
 800904a:	2b0a      	cmp	r3, #10
 800904c:	f200 8156 	bhi.w	80092fc <USBH_HandleControl+0x2c8>
 8009050:	a201      	add	r2, pc, #4	; (adr r2, 8009058 <USBH_HandleControl+0x24>)
 8009052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009056:	bf00      	nop
 8009058:	08009085 	.word	0x08009085
 800905c:	0800909f 	.word	0x0800909f
 8009060:	08009109 	.word	0x08009109
 8009064:	0800912f 	.word	0x0800912f
 8009068:	08009167 	.word	0x08009167
 800906c:	08009191 	.word	0x08009191
 8009070:	080091e3 	.word	0x080091e3
 8009074:	08009205 	.word	0x08009205
 8009078:	08009241 	.word	0x08009241
 800907c:	08009267 	.word	0x08009267
 8009080:	080092a5 	.word	0x080092a5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f103 0110 	add.w	r1, r3, #16
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	795b      	ldrb	r3, [r3, #5]
 800908e:	461a      	mov	r2, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f943 	bl	800931c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2202      	movs	r2, #2
 800909a:	761a      	strb	r2, [r3, #24]
      break;
 800909c:	e139      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	795b      	ldrb	r3, [r3, #5]
 80090a2:	4619      	mov	r1, r3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fccb 	bl	8009a40 <USBH_LL_GetURBState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80090ae:	7bbb      	ldrb	r3, [r7, #14]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d11e      	bne.n	80090f2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7c1b      	ldrb	r3, [r3, #16]
 80090b8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80090bc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	8adb      	ldrh	r3, [r3, #22]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80090c6:	7b7b      	ldrb	r3, [r7, #13]
 80090c8:	2b80      	cmp	r3, #128	; 0x80
 80090ca:	d103      	bne.n	80090d4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2203      	movs	r2, #3
 80090d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090d2:	e115      	b.n	8009300 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2205      	movs	r2, #5
 80090d8:	761a      	strb	r2, [r3, #24]
      break;
 80090da:	e111      	b.n	8009300 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80090dc:	7b7b      	ldrb	r3, [r7, #13]
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d103      	bne.n	80090ea <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2209      	movs	r2, #9
 80090e6:	761a      	strb	r2, [r3, #24]
      break;
 80090e8:	e10a      	b.n	8009300 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2207      	movs	r2, #7
 80090ee:	761a      	strb	r2, [r3, #24]
      break;
 80090f0:	e106      	b.n	8009300 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80090f2:	7bbb      	ldrb	r3, [r7, #14]
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d003      	beq.n	8009100 <USBH_HandleControl+0xcc>
 80090f8:	7bbb      	ldrb	r3, [r7, #14]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	f040 8100 	bne.w	8009300 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	220b      	movs	r2, #11
 8009104:	761a      	strb	r2, [r3, #24]
      break;
 8009106:	e0fb      	b.n	8009300 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800910e:	b29a      	uxth	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6899      	ldr	r1, [r3, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	899a      	ldrh	r2, [r3, #12]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	791b      	ldrb	r3, [r3, #4]
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f93a 	bl	800939a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2204      	movs	r2, #4
 800912a:	761a      	strb	r2, [r3, #24]
      break;
 800912c:	e0f1      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	791b      	ldrb	r3, [r3, #4]
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc83 	bl	8009a40 <USBH_LL_GetURBState>
 800913a:	4603      	mov	r3, r0
 800913c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d102      	bne.n	800914a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2209      	movs	r2, #9
 8009148:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800914a:	7bbb      	ldrb	r3, [r7, #14]
 800914c:	2b05      	cmp	r3, #5
 800914e:	d102      	bne.n	8009156 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009150:	2303      	movs	r3, #3
 8009152:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009154:	e0d6      	b.n	8009304 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009156:	7bbb      	ldrb	r3, [r7, #14]
 8009158:	2b04      	cmp	r3, #4
 800915a:	f040 80d3 	bne.w	8009304 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	220b      	movs	r2, #11
 8009162:	761a      	strb	r2, [r3, #24]
      break;
 8009164:	e0ce      	b.n	8009304 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6899      	ldr	r1, [r3, #8]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	899a      	ldrh	r2, [r3, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	795b      	ldrb	r3, [r3, #5]
 8009172:	2001      	movs	r0, #1
 8009174:	9000      	str	r0, [sp, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8ea 	bl	8009350 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009182:	b29a      	uxth	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2206      	movs	r2, #6
 800918c:	761a      	strb	r2, [r3, #24]
      break;
 800918e:	e0c0      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	795b      	ldrb	r3, [r3, #5]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fc52 	bl	8009a40 <USBH_LL_GetURBState>
 800919c:	4603      	mov	r3, r0
 800919e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d103      	bne.n	80091ae <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2207      	movs	r2, #7
 80091aa:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091ac:	e0ac      	b.n	8009308 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80091ae:	7bbb      	ldrb	r3, [r7, #14]
 80091b0:	2b05      	cmp	r3, #5
 80091b2:	d105      	bne.n	80091c0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	220c      	movs	r2, #12
 80091b8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80091ba:	2303      	movs	r3, #3
 80091bc:	73fb      	strb	r3, [r7, #15]
      break;
 80091be:	e0a3      	b.n	8009308 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091c0:	7bbb      	ldrb	r3, [r7, #14]
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d103      	bne.n	80091ce <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2205      	movs	r2, #5
 80091ca:	761a      	strb	r2, [r3, #24]
      break;
 80091cc:	e09c      	b.n	8009308 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80091ce:	7bbb      	ldrb	r3, [r7, #14]
 80091d0:	2b04      	cmp	r3, #4
 80091d2:	f040 8099 	bne.w	8009308 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	220b      	movs	r2, #11
 80091da:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80091dc:	2302      	movs	r3, #2
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	e092      	b.n	8009308 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	791b      	ldrb	r3, [r3, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	2100      	movs	r1, #0
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f8d5 	bl	800939a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2208      	movs	r2, #8
 8009200:	761a      	strb	r2, [r3, #24]

      break;
 8009202:	e086      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fc18 	bl	8009a40 <USBH_LL_GetURBState>
 8009210:	4603      	mov	r3, r0
 8009212:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009214:	7bbb      	ldrb	r3, [r7, #14]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d105      	bne.n	8009226 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	220d      	movs	r2, #13
 800921e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009220:	2300      	movs	r3, #0
 8009222:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009224:	e072      	b.n	800930c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b04      	cmp	r3, #4
 800922a:	d103      	bne.n	8009234 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220b      	movs	r2, #11
 8009230:	761a      	strb	r2, [r3, #24]
      break;
 8009232:	e06b      	b.n	800930c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009234:	7bbb      	ldrb	r3, [r7, #14]
 8009236:	2b05      	cmp	r3, #5
 8009238:	d168      	bne.n	800930c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800923a:	2303      	movs	r3, #3
 800923c:	73fb      	strb	r3, [r7, #15]
      break;
 800923e:	e065      	b.n	800930c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	795b      	ldrb	r3, [r3, #5]
 8009244:	2201      	movs	r2, #1
 8009246:	9200      	str	r2, [sp, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	2100      	movs	r1, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f87f 	bl	8009350 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009258:	b29a      	uxth	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	220a      	movs	r2, #10
 8009262:	761a      	strb	r2, [r3, #24]
      break;
 8009264:	e055      	b.n	8009312 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	795b      	ldrb	r3, [r3, #5]
 800926a:	4619      	mov	r1, r3
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fbe7 	bl	8009a40 <USBH_LL_GetURBState>
 8009272:	4603      	mov	r3, r0
 8009274:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d105      	bne.n	8009288 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220d      	movs	r2, #13
 8009284:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009286:	e043      	b.n	8009310 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	2b02      	cmp	r3, #2
 800928c:	d103      	bne.n	8009296 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2209      	movs	r2, #9
 8009292:	761a      	strb	r2, [r3, #24]
      break;
 8009294:	e03c      	b.n	8009310 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009296:	7bbb      	ldrb	r3, [r7, #14]
 8009298:	2b04      	cmp	r3, #4
 800929a:	d139      	bne.n	8009310 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	220b      	movs	r2, #11
 80092a0:	761a      	strb	r2, [r3, #24]
      break;
 80092a2:	e035      	b.n	8009310 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	7e5b      	ldrb	r3, [r3, #25]
 80092a8:	3301      	adds	r3, #1
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	765a      	strb	r2, [r3, #25]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7e5b      	ldrb	r3, [r3, #25]
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d806      	bhi.n	80092c6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80092c4:	e025      	b.n	8009312 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092cc:	2106      	movs	r1, #6
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	795b      	ldrb	r3, [r3, #5]
 80092dc:	4619      	mov	r1, r3
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f90c 	bl	80094fc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	791b      	ldrb	r3, [r3, #4]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f906 	bl	80094fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	73fb      	strb	r3, [r7, #15]
      break;
 80092fa:	e00a      	b.n	8009312 <USBH_HandleControl+0x2de>

    default:
      break;
 80092fc:	bf00      	nop
 80092fe:	e008      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009300:	bf00      	nop
 8009302:	e006      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009304:	bf00      	nop
 8009306:	e004      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009308:	bf00      	nop
 800930a:	e002      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 800930c:	bf00      	nop
 800930e:	e000      	b.n	8009312 <USBH_HandleControl+0x2de>
      break;
 8009310:	bf00      	nop
  }

  return status;
 8009312:	7bfb      	ldrb	r3, [r7, #15]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af04      	add	r7, sp, #16
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800932a:	79f9      	ldrb	r1, [r7, #7]
 800932c:	2300      	movs	r3, #0
 800932e:	9303      	str	r3, [sp, #12]
 8009330:	2308      	movs	r3, #8
 8009332:	9302      	str	r3, [sp, #8]
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	2300      	movs	r3, #0
 800933a:	9300      	str	r3, [sp, #0]
 800933c:	2300      	movs	r3, #0
 800933e:	2200      	movs	r2, #0
 8009340:	68f8      	ldr	r0, [r7, #12]
 8009342:	f000 fb4c 	bl	80099de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af04      	add	r7, sp, #16
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	4611      	mov	r1, r2
 800935c:	461a      	mov	r2, r3
 800935e:	460b      	mov	r3, r1
 8009360:	80fb      	strh	r3, [r7, #6]
 8009362:	4613      	mov	r3, r2
 8009364:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009374:	7979      	ldrb	r1, [r7, #5]
 8009376:	7e3b      	ldrb	r3, [r7, #24]
 8009378:	9303      	str	r3, [sp, #12]
 800937a:	88fb      	ldrh	r3, [r7, #6]
 800937c:	9302      	str	r3, [sp, #8]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	2301      	movs	r3, #1
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	2300      	movs	r3, #0
 8009388:	2200      	movs	r2, #0
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 fb27 	bl	80099de <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009390:	2300      	movs	r3, #0
}
 8009392:	4618      	mov	r0, r3
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b088      	sub	sp, #32
 800939e:	af04      	add	r7, sp, #16
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	4611      	mov	r1, r2
 80093a6:	461a      	mov	r2, r3
 80093a8:	460b      	mov	r3, r1
 80093aa:	80fb      	strh	r3, [r7, #6]
 80093ac:	4613      	mov	r3, r2
 80093ae:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093b0:	7979      	ldrb	r1, [r7, #5]
 80093b2:	2300      	movs	r3, #0
 80093b4:	9303      	str	r3, [sp, #12]
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	9302      	str	r3, [sp, #8]
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	2301      	movs	r3, #1
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	2300      	movs	r3, #0
 80093c4:	2201      	movs	r2, #1
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f000 fb09 	bl	80099de <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093cc:	2300      	movs	r3, #0

}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b088      	sub	sp, #32
 80093da:	af04      	add	r7, sp, #16
 80093dc:	60f8      	str	r0, [r7, #12]
 80093de:	60b9      	str	r1, [r7, #8]
 80093e0:	4611      	mov	r1, r2
 80093e2:	461a      	mov	r2, r3
 80093e4:	460b      	mov	r3, r1
 80093e6:	80fb      	strh	r3, [r7, #6]
 80093e8:	4613      	mov	r3, r2
 80093ea:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093fa:	7979      	ldrb	r1, [r7, #5]
 80093fc:	7e3b      	ldrb	r3, [r7, #24]
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	88fb      	ldrh	r3, [r7, #6]
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	2301      	movs	r3, #1
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2302      	movs	r3, #2
 800940e:	2200      	movs	r2, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fae4 	bl	80099de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b088      	sub	sp, #32
 8009424:	af04      	add	r7, sp, #16
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4611      	mov	r1, r2
 800942c:	461a      	mov	r2, r3
 800942e:	460b      	mov	r3, r1
 8009430:	80fb      	strh	r3, [r7, #6]
 8009432:	4613      	mov	r3, r2
 8009434:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009436:	7979      	ldrb	r1, [r7, #5]
 8009438:	2300      	movs	r3, #0
 800943a:	9303      	str	r3, [sp, #12]
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	9302      	str	r3, [sp, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	2301      	movs	r3, #1
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	2302      	movs	r3, #2
 800944a:	2201      	movs	r2, #1
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 fac6 	bl	80099de <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af04      	add	r7, sp, #16
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4603      	mov	r3, r0
 800946c:	70fb      	strb	r3, [r7, #3]
 800946e:	460b      	mov	r3, r1
 8009470:	70bb      	strb	r3, [r7, #2]
 8009472:	4613      	mov	r3, r2
 8009474:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009476:	7878      	ldrb	r0, [r7, #1]
 8009478:	78ba      	ldrb	r2, [r7, #2]
 800947a:	78f9      	ldrb	r1, [r7, #3]
 800947c:	8b3b      	ldrh	r3, [r7, #24]
 800947e:	9302      	str	r3, [sp, #8]
 8009480:	7d3b      	ldrb	r3, [r7, #20]
 8009482:	9301      	str	r3, [sp, #4]
 8009484:	7c3b      	ldrb	r3, [r7, #16]
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	4603      	mov	r3, r0
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fa59 	bl	8009942 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b082      	sub	sp, #8
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80094a6:	78fb      	ldrb	r3, [r7, #3]
 80094a8:	4619      	mov	r1, r3
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa78 	bl	80099a0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f836 	bl	8009538 <USBH_GetFreePipe>
 80094cc:	4603      	mov	r3, r0
 80094ce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80094d0:	89fb      	ldrh	r3, [r7, #14]
 80094d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d00a      	beq.n	80094f0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80094da:	78fa      	ldrb	r2, [r7, #3]
 80094dc:	89fb      	ldrh	r3, [r7, #14]
 80094de:	f003 030f 	and.w	r3, r3, #15
 80094e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	33e0      	adds	r3, #224	; 0xe0
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	440b      	add	r3, r1
 80094ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80094f0:	89fb      	ldrh	r3, [r7, #14]
 80094f2:	b2db      	uxtb	r3, r3
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	2b0f      	cmp	r3, #15
 800950c:	d80d      	bhi.n	800952a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	33e0      	adds	r3, #224	; 0xe0
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4413      	add	r3, r2
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	33e0      	adds	r3, #224	; 0xe0
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	440b      	add	r3, r1
 8009528:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]
 8009548:	e00f      	b.n	800956a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	33e0      	adds	r3, #224	; 0xe0
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d102      	bne.n	8009564 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	b29b      	uxth	r3, r3
 8009562:	e007      	b.n	8009574 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	3301      	adds	r3, #1
 8009568:	73fb      	strb	r3, [r7, #15]
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2b0f      	cmp	r3, #15
 800956e:	d9ec      	bls.n	800954a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009570:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8009584:	2200      	movs	r2, #0
 8009586:	490e      	ldr	r1, [pc, #56]	; (80095c0 <MX_USB_HOST_Init+0x40>)
 8009588:	480e      	ldr	r0, [pc, #56]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 800958a:	f7fe fba7 	bl	8007cdc <USBH_Init>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009594:	f7f7 fc20 	bl	8000dd8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8009598:	490b      	ldr	r1, [pc, #44]	; (80095c8 <MX_USB_HOST_Init+0x48>)
 800959a:	480a      	ldr	r0, [pc, #40]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 800959c:	f7fe fc2c 	bl	8007df8 <USBH_RegisterClass>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80095a6:	f7f7 fc17 	bl	8000dd8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 80095aa:	4806      	ldr	r0, [pc, #24]	; (80095c4 <MX_USB_HOST_Init+0x44>)
 80095ac:	f7fe fcb0 	bl	8007f10 <USBH_Start>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80095b6:	f7f7 fc0f 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80095ba:	bf00      	nop
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	200003a0 	.word	0x200003a0
 80095c8:	2000000c 	.word	0x2000000c

080095cc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 80095d0:	4802      	ldr	r0, [pc, #8]	; (80095dc <MX_USB_HOST_Process+0x10>)
 80095d2:	f7fe fcad 	bl	8007f30 <USBH_Process>
}
 80095d6:	bf00      	nop
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	200003a0 	.word	0x200003a0

080095e0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d819      	bhi.n	8009628 <USBH_UserProcess+0x48>
 80095f4:	a201      	add	r2, pc, #4	; (adr r2, 80095fc <USBH_UserProcess+0x1c>)
 80095f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fa:	bf00      	nop
 80095fc:	08009629 	.word	0x08009629
 8009600:	08009619 	.word	0x08009619
 8009604:	08009629 	.word	0x08009629
 8009608:	08009621 	.word	0x08009621
 800960c:	08009611 	.word	0x08009611
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009610:	4b09      	ldr	r3, [pc, #36]	; (8009638 <USBH_UserProcess+0x58>)
 8009612:	2203      	movs	r2, #3
 8009614:	701a      	strb	r2, [r3, #0]
  break;
 8009616:	e008      	b.n	800962a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009618:	4b07      	ldr	r3, [pc, #28]	; (8009638 <USBH_UserProcess+0x58>)
 800961a:	2202      	movs	r2, #2
 800961c:	701a      	strb	r2, [r3, #0]
  break;
 800961e:	e004      	b.n	800962a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009620:	4b05      	ldr	r3, [pc, #20]	; (8009638 <USBH_UserProcess+0x58>)
 8009622:	2201      	movs	r2, #1
 8009624:	701a      	strb	r2, [r3, #0]
  break;
 8009626:	e000      	b.n	800962a <USBH_UserProcess+0x4a>

  default:
  break;
 8009628:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	20000778 	.word	0x20000778

0800963c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b08a      	sub	sp, #40	; 0x28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009644:	f107 0314 	add.w	r3, r7, #20
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]
 800964c:	605a      	str	r2, [r3, #4]
 800964e:	609a      	str	r2, [r3, #8]
 8009650:	60da      	str	r2, [r3, #12]
 8009652:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a24      	ldr	r2, [pc, #144]	; (80096ec <HAL_HCD_MspInit+0xb0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d141      	bne.n	80096e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800965e:	2300      	movs	r3, #0
 8009660:	613b      	str	r3, [r7, #16]
 8009662:	4b23      	ldr	r3, [pc, #140]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 8009664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009666:	4a22      	ldr	r2, [pc, #136]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 8009668:	f043 0302 	orr.w	r3, r3, #2
 800966c:	6313      	str	r3, [r2, #48]	; 0x30
 800966e:	4b20      	ldr	r3, [pc, #128]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 8009670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009672:	f003 0302 	and.w	r3, r3, #2
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800967a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800967e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009680:	2302      	movs	r3, #2
 8009682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009688:	2300      	movs	r3, #0
 800968a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800968c:	230c      	movs	r3, #12
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009690:	f107 0314 	add.w	r3, r7, #20
 8009694:	4619      	mov	r1, r3
 8009696:	4817      	ldr	r0, [pc, #92]	; (80096f4 <HAL_HCD_MspInit+0xb8>)
 8009698:	f7f8 fc56 	bl	8001f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800969c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096a2:	2300      	movs	r3, #0
 80096a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	4619      	mov	r1, r3
 80096b0:	4810      	ldr	r0, [pc, #64]	; (80096f4 <HAL_HCD_MspInit+0xb8>)
 80096b2:	f7f8 fc49 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80096b6:	2300      	movs	r3, #0
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 80096bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096be:	4a0c      	ldr	r2, [pc, #48]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 80096c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80096c4:	6313      	str	r3, [r2, #48]	; 0x30
 80096c6:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <HAL_HCD_MspInit+0xb4>)
 80096c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80096d2:	2200      	movs	r2, #0
 80096d4:	2100      	movs	r1, #0
 80096d6:	204d      	movs	r0, #77	; 0x4d
 80096d8:	f7f8 fa04 	bl	8001ae4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80096dc:	204d      	movs	r0, #77	; 0x4d
 80096de:	f7f8 fa1d 	bl	8001b1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80096e2:	bf00      	nop
 80096e4:	3728      	adds	r7, #40	; 0x28
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	40040000 	.word	0x40040000
 80096f0:	40023800 	.word	0x40023800
 80096f4:	40020400 	.word	0x40020400

080096f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009706:	4618      	mov	r0, r3
 8009708:	f7fe fff1 	bl	80086ee <USBH_LL_IncTimer>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f829 	bl	800877a <USBH_LL_Connect>
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff f832 	bl	80087a8 <USBH_LL_Disconnect>
}
 8009744:	bf00      	nop
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
 8009758:	4613      	mov	r3, r2
 800975a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe ffe3 	bl	8008742 <USBH_LL_PortEnabled>
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009792:	4618      	mov	r0, r3
 8009794:	f7fe ffe3 	bl	800875e <USBH_LL_PortDisabled>
}
 8009798:	bf00      	nop
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d132      	bne.n	8009818 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 80097b2:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <USBH_LL_Init+0x84>)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a19      	ldr	r2, [pc, #100]	; (8009824 <USBH_LL_Init+0x84>)
 80097be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80097c2:	4b18      	ldr	r3, [pc, #96]	; (8009824 <USBH_LL_Init+0x84>)
 80097c4:	4a18      	ldr	r2, [pc, #96]	; (8009828 <USBH_LL_Init+0x88>)
 80097c6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80097c8:	4b16      	ldr	r3, [pc, #88]	; (8009824 <USBH_LL_Init+0x84>)
 80097ca:	220c      	movs	r2, #12
 80097cc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80097ce:	4b15      	ldr	r3, [pc, #84]	; (8009824 <USBH_LL_Init+0x84>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80097d4:	4b13      	ldr	r3, [pc, #76]	; (8009824 <USBH_LL_Init+0x84>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <USBH_LL_Init+0x84>)
 80097dc:	2202      	movs	r2, #2
 80097de:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80097e0:	4b10      	ldr	r3, [pc, #64]	; (8009824 <USBH_LL_Init+0x84>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <USBH_LL_Init+0x84>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <USBH_LL_Init+0x84>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80097f2:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <USBH_LL_Init+0x84>)
 80097f4:	2200      	movs	r2, #0
 80097f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80097f8:	480a      	ldr	r0, [pc, #40]	; (8009824 <USBH_LL_Init+0x84>)
 80097fa:	f7f8 fd6a 	bl	80022d2 <HAL_HCD_Init>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d001      	beq.n	8009808 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 8009804:	f7f7 fae8 	bl	8000dd8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 8009808:	4806      	ldr	r0, [pc, #24]	; (8009824 <USBH_LL_Init+0x84>)
 800980a:	f7f9 f94e 	bl	8002aaa <HAL_HCD_GetCurrentFrame>
 800980e:	4603      	mov	r3, r0
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7fe ff5c 	bl	80086d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	2000077c 	.word	0x2000077c
 8009828:	40040000 	.word	0x40040000

0800982c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009838:	2300      	movs	r3, #0
 800983a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009842:	4618      	mov	r0, r3
 8009844:	f7f9 f8bb 	bl	80029be <HAL_HCD_Start>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f95c 	bl	8009b0c <USBH_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009858:	7bbb      	ldrb	r3, [r7, #14]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009878:	4618      	mov	r0, r3
 800987a:	f7f9 f8c3 	bl	8002a04 <HAL_HCD_Stop>
 800987e:	4603      	mov	r3, r0
 8009880:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	4618      	mov	r0, r3
 8009886:	f000 f941 	bl	8009b0c <USBH_Get_USB_Status>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009890:	4618      	mov	r0, r3
 8009892:	3710      	adds	r7, #16
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80098a0:	2301      	movs	r3, #1
 80098a2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7f9 f90b 	bl	8002ac6 <HAL_HCD_GetCurrentSpeed>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	d00c      	beq.n	80098d0 <USBH_LL_GetSpeed+0x38>
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d80d      	bhi.n	80098d6 <USBH_LL_GetSpeed+0x3e>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <USBH_LL_GetSpeed+0x2c>
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d003      	beq.n	80098ca <USBH_LL_GetSpeed+0x32>
 80098c2:	e008      	b.n	80098d6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80098c4:	2300      	movs	r3, #0
 80098c6:	73fb      	strb	r3, [r7, #15]
    break;
 80098c8:	e008      	b.n	80098dc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
    break;
 80098ce:	e005      	b.n	80098dc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80098d0:	2302      	movs	r3, #2
 80098d2:	73fb      	strb	r3, [r7, #15]
    break;
 80098d4:	e002      	b.n	80098dc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80098d6:	2301      	movs	r3, #1
 80098d8:	73fb      	strb	r3, [r7, #15]
    break;
 80098da:	bf00      	nop
  }
  return  speed;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b084      	sub	sp, #16
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7f9 f89e 	bl	8002a3e <HAL_HCD_ResetPort>
 8009902:	4603      	mov	r3, r0
 8009904:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009906:	7bfb      	ldrb	r3, [r7, #15]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 f8ff 	bl	8009b0c <USBH_Get_USB_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009912:	7bbb      	ldrb	r3, [r7, #14]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	460b      	mov	r3, r1
 8009926:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800992e:	78fa      	ldrb	r2, [r7, #3]
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f9 f8a5 	bl	8002a82 <HAL_HCD_HC_GetXferCount>
 8009938:	4603      	mov	r3, r0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009942:	b590      	push	{r4, r7, lr}
 8009944:	b089      	sub	sp, #36	; 0x24
 8009946:	af04      	add	r7, sp, #16
 8009948:	6078      	str	r0, [r7, #4]
 800994a:	4608      	mov	r0, r1
 800994c:	4611      	mov	r1, r2
 800994e:	461a      	mov	r2, r3
 8009950:	4603      	mov	r3, r0
 8009952:	70fb      	strb	r3, [r7, #3]
 8009954:	460b      	mov	r3, r1
 8009956:	70bb      	strb	r3, [r7, #2]
 8009958:	4613      	mov	r3, r2
 800995a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800996a:	787c      	ldrb	r4, [r7, #1]
 800996c:	78ba      	ldrb	r2, [r7, #2]
 800996e:	78f9      	ldrb	r1, [r7, #3]
 8009970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009972:	9302      	str	r3, [sp, #8]
 8009974:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009978:	9301      	str	r3, [sp, #4]
 800997a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800997e:	9300      	str	r3, [sp, #0]
 8009980:	4623      	mov	r3, r4
 8009982:	f7f8 fd08 	bl	8002396 <HAL_HCD_HC_Init>
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4618      	mov	r0, r3
 800998e:	f000 f8bd 	bl	8009b0c <USBH_Get_USB_Status>
 8009992:	4603      	mov	r3, r0
 8009994:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009996:	7bbb      	ldrb	r3, [r7, #14]
}
 8009998:	4618      	mov	r0, r3
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	bd90      	pop	{r4, r7, pc}

080099a0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099b0:	2300      	movs	r3, #0
 80099b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80099ba:	78fa      	ldrb	r2, [r7, #3]
 80099bc:	4611      	mov	r1, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7f8 fd78 	bl	80024b4 <HAL_HCD_HC_Halt>
 80099c4:	4603      	mov	r3, r0
 80099c6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 f89e 	bl	8009b0c <USBH_Get_USB_Status>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80099de:	b590      	push	{r4, r7, lr}
 80099e0:	b089      	sub	sp, #36	; 0x24
 80099e2:	af04      	add	r7, sp, #16
 80099e4:	6078      	str	r0, [r7, #4]
 80099e6:	4608      	mov	r0, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	461a      	mov	r2, r3
 80099ec:	4603      	mov	r3, r0
 80099ee:	70fb      	strb	r3, [r7, #3]
 80099f0:	460b      	mov	r3, r1
 80099f2:	70bb      	strb	r3, [r7, #2]
 80099f4:	4613      	mov	r3, r2
 80099f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009a06:	787c      	ldrb	r4, [r7, #1]
 8009a08:	78ba      	ldrb	r2, [r7, #2]
 8009a0a:	78f9      	ldrb	r1, [r7, #3]
 8009a0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009a10:	9303      	str	r3, [sp, #12]
 8009a12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	4623      	mov	r3, r4
 8009a22:	f7f8 fd6b 	bl	80024fc <HAL_HCD_HC_SubmitRequest>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f000 f86d 	bl	8009b0c <USBH_Get_USB_Status>
 8009a32:	4603      	mov	r3, r0
 8009a34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a36:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd90      	pop	{r4, r7, pc}

08009a40 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	460b      	mov	r3, r1
 8009a4a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009a52:	78fa      	ldrb	r2, [r7, #3]
 8009a54:	4611      	mov	r1, r2
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7f8 ffff 	bl	8002a5a <HAL_HCD_HC_GetURBState>
 8009a5c:	4603      	mov	r3, r0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d103      	bne.n	8009a84 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f870 	bl	8009b64 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a84:	20c8      	movs	r0, #200	; 0xc8
 8009a86:	f7f7 ff51 	bl	800192c <HAL_Delay>
  return USBH_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	70fb      	strb	r3, [r7, #3]
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009aaa:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	212c      	movs	r1, #44	; 0x2c
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	333b      	adds	r3, #59	; 0x3b
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d009      	beq.n	8009ad4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	212c      	movs	r1, #44	; 0x2c
 8009ac6:	fb01 f303 	mul.w	r3, r1, r3
 8009aca:	4413      	add	r3, r2
 8009acc:	3354      	adds	r3, #84	; 0x54
 8009ace:	78ba      	ldrb	r2, [r7, #2]
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	e008      	b.n	8009ae6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ad4:	78fb      	ldrb	r3, [r7, #3]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	212c      	movs	r1, #44	; 0x2c
 8009ada:	fb01 f303 	mul.w	r3, r1, r3
 8009ade:	4413      	add	r3, r2
 8009ae0:	3355      	adds	r3, #85	; 0x55
 8009ae2:	78ba      	ldrb	r2, [r7, #2]
 8009ae4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f7f7 ff15 	bl	800192c <HAL_Delay>
}
 8009b02:	bf00      	nop
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d817      	bhi.n	8009b50 <USBH_Get_USB_Status+0x44>
 8009b20:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <USBH_Get_USB_Status+0x1c>)
 8009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b26:	bf00      	nop
 8009b28:	08009b39 	.word	0x08009b39
 8009b2c:	08009b3f 	.word	0x08009b3f
 8009b30:	08009b45 	.word	0x08009b45
 8009b34:	08009b4b 	.word	0x08009b4b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b3c:	e00b      	b.n	8009b56 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009b3e:	2302      	movs	r3, #2
 8009b40:	73fb      	strb	r3, [r7, #15]
    break;
 8009b42:	e008      	b.n	8009b56 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009b44:	2301      	movs	r3, #1
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	e005      	b.n	8009b56 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4e:	e002      	b.n	8009b56 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009b50:	2302      	movs	r3, #2
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	bf00      	nop
  }
  return usb_status;
 8009b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3714      	adds	r7, #20
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 8009b72:	79fb      	ldrb	r3, [r7, #7]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	73fb      	strb	r3, [r7, #15]
 8009b7c:	e001      	b.n	8009b82 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
 8009b84:	461a      	mov	r2, r3
 8009b86:	2110      	movs	r1, #16
 8009b88:	4803      	ldr	r0, [pc, #12]	; (8009b98 <MX_DriverVbusHS+0x34>)
 8009b8a:	f7f8 fb89 	bl	80022a0 <HAL_GPIO_WritePin>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	40020800 	.word	0x40020800

08009b9c <__errno>:
 8009b9c:	4b01      	ldr	r3, [pc, #4]	; (8009ba4 <__errno+0x8>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	2000002c 	.word	0x2000002c

08009ba8 <__libc_init_array>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4d0d      	ldr	r5, [pc, #52]	; (8009be0 <__libc_init_array+0x38>)
 8009bac:	4c0d      	ldr	r4, [pc, #52]	; (8009be4 <__libc_init_array+0x3c>)
 8009bae:	1b64      	subs	r4, r4, r5
 8009bb0:	10a4      	asrs	r4, r4, #2
 8009bb2:	2600      	movs	r6, #0
 8009bb4:	42a6      	cmp	r6, r4
 8009bb6:	d109      	bne.n	8009bcc <__libc_init_array+0x24>
 8009bb8:	4d0b      	ldr	r5, [pc, #44]	; (8009be8 <__libc_init_array+0x40>)
 8009bba:	4c0c      	ldr	r4, [pc, #48]	; (8009bec <__libc_init_array+0x44>)
 8009bbc:	f001 f834 	bl	800ac28 <_init>
 8009bc0:	1b64      	subs	r4, r4, r5
 8009bc2:	10a4      	asrs	r4, r4, #2
 8009bc4:	2600      	movs	r6, #0
 8009bc6:	42a6      	cmp	r6, r4
 8009bc8:	d105      	bne.n	8009bd6 <__libc_init_array+0x2e>
 8009bca:	bd70      	pop	{r4, r5, r6, pc}
 8009bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bd0:	4798      	blx	r3
 8009bd2:	3601      	adds	r6, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__libc_init_array+0xc>
 8009bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bda:	4798      	blx	r3
 8009bdc:	3601      	adds	r6, #1
 8009bde:	e7f2      	b.n	8009bc6 <__libc_init_array+0x1e>
 8009be0:	0800ad3c 	.word	0x0800ad3c
 8009be4:	0800ad3c 	.word	0x0800ad3c
 8009be8:	0800ad3c 	.word	0x0800ad3c
 8009bec:	0800ad40 	.word	0x0800ad40

08009bf0 <malloc>:
 8009bf0:	4b02      	ldr	r3, [pc, #8]	; (8009bfc <malloc+0xc>)
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	6818      	ldr	r0, [r3, #0]
 8009bf6:	f000 b87f 	b.w	8009cf8 <_malloc_r>
 8009bfa:	bf00      	nop
 8009bfc:	2000002c 	.word	0x2000002c

08009c00 <free>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	; (8009c0c <free+0xc>)
 8009c02:	4601      	mov	r1, r0
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f000 b80b 	b.w	8009c20 <_free_r>
 8009c0a:	bf00      	nop
 8009c0c:	2000002c 	.word	0x2000002c

08009c10 <memset>:
 8009c10:	4402      	add	r2, r0
 8009c12:	4603      	mov	r3, r0
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d100      	bne.n	8009c1a <memset+0xa>
 8009c18:	4770      	bx	lr
 8009c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c1e:	e7f9      	b.n	8009c14 <memset+0x4>

08009c20 <_free_r>:
 8009c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c22:	2900      	cmp	r1, #0
 8009c24:	d044      	beq.n	8009cb0 <_free_r+0x90>
 8009c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2a:	9001      	str	r0, [sp, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c32:	bfb8      	it	lt
 8009c34:	18e4      	addlt	r4, r4, r3
 8009c36:	f000 fc51 	bl	800a4dc <__malloc_lock>
 8009c3a:	4a1e      	ldr	r2, [pc, #120]	; (8009cb4 <_free_r+0x94>)
 8009c3c:	9801      	ldr	r0, [sp, #4]
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	b933      	cbnz	r3, 8009c50 <_free_r+0x30>
 8009c42:	6063      	str	r3, [r4, #4]
 8009c44:	6014      	str	r4, [r2, #0]
 8009c46:	b003      	add	sp, #12
 8009c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c4c:	f000 bc4c 	b.w	800a4e8 <__malloc_unlock>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d908      	bls.n	8009c66 <_free_r+0x46>
 8009c54:	6825      	ldr	r5, [r4, #0]
 8009c56:	1961      	adds	r1, r4, r5
 8009c58:	428b      	cmp	r3, r1
 8009c5a:	bf01      	itttt	eq
 8009c5c:	6819      	ldreq	r1, [r3, #0]
 8009c5e:	685b      	ldreq	r3, [r3, #4]
 8009c60:	1949      	addeq	r1, r1, r5
 8009c62:	6021      	streq	r1, [r4, #0]
 8009c64:	e7ed      	b.n	8009c42 <_free_r+0x22>
 8009c66:	461a      	mov	r2, r3
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	b10b      	cbz	r3, 8009c70 <_free_r+0x50>
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d9fa      	bls.n	8009c66 <_free_r+0x46>
 8009c70:	6811      	ldr	r1, [r2, #0]
 8009c72:	1855      	adds	r5, r2, r1
 8009c74:	42a5      	cmp	r5, r4
 8009c76:	d10b      	bne.n	8009c90 <_free_r+0x70>
 8009c78:	6824      	ldr	r4, [r4, #0]
 8009c7a:	4421      	add	r1, r4
 8009c7c:	1854      	adds	r4, r2, r1
 8009c7e:	42a3      	cmp	r3, r4
 8009c80:	6011      	str	r1, [r2, #0]
 8009c82:	d1e0      	bne.n	8009c46 <_free_r+0x26>
 8009c84:	681c      	ldr	r4, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	6053      	str	r3, [r2, #4]
 8009c8a:	4421      	add	r1, r4
 8009c8c:	6011      	str	r1, [r2, #0]
 8009c8e:	e7da      	b.n	8009c46 <_free_r+0x26>
 8009c90:	d902      	bls.n	8009c98 <_free_r+0x78>
 8009c92:	230c      	movs	r3, #12
 8009c94:	6003      	str	r3, [r0, #0]
 8009c96:	e7d6      	b.n	8009c46 <_free_r+0x26>
 8009c98:	6825      	ldr	r5, [r4, #0]
 8009c9a:	1961      	adds	r1, r4, r5
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	bf04      	itt	eq
 8009ca0:	6819      	ldreq	r1, [r3, #0]
 8009ca2:	685b      	ldreq	r3, [r3, #4]
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	bf04      	itt	eq
 8009ca8:	1949      	addeq	r1, r1, r5
 8009caa:	6021      	streq	r1, [r4, #0]
 8009cac:	6054      	str	r4, [r2, #4]
 8009cae:	e7ca      	b.n	8009c46 <_free_r+0x26>
 8009cb0:	b003      	add	sp, #12
 8009cb2:	bd30      	pop	{r4, r5, pc}
 8009cb4:	20000a80 	.word	0x20000a80

08009cb8 <sbrk_aligned>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	4e0e      	ldr	r6, [pc, #56]	; (8009cf4 <sbrk_aligned+0x3c>)
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	6831      	ldr	r1, [r6, #0]
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	b911      	cbnz	r1, 8009cca <sbrk_aligned+0x12>
 8009cc4:	f000 f91a 	bl	8009efc <_sbrk_r>
 8009cc8:	6030      	str	r0, [r6, #0]
 8009cca:	4621      	mov	r1, r4
 8009ccc:	4628      	mov	r0, r5
 8009cce:	f000 f915 	bl	8009efc <_sbrk_r>
 8009cd2:	1c43      	adds	r3, r0, #1
 8009cd4:	d00a      	beq.n	8009cec <sbrk_aligned+0x34>
 8009cd6:	1cc4      	adds	r4, r0, #3
 8009cd8:	f024 0403 	bic.w	r4, r4, #3
 8009cdc:	42a0      	cmp	r0, r4
 8009cde:	d007      	beq.n	8009cf0 <sbrk_aligned+0x38>
 8009ce0:	1a21      	subs	r1, r4, r0
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	f000 f90a 	bl	8009efc <_sbrk_r>
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d101      	bne.n	8009cf0 <sbrk_aligned+0x38>
 8009cec:	f04f 34ff 	mov.w	r4, #4294967295
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	bd70      	pop	{r4, r5, r6, pc}
 8009cf4:	20000a84 	.word	0x20000a84

08009cf8 <_malloc_r>:
 8009cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfc:	1ccd      	adds	r5, r1, #3
 8009cfe:	f025 0503 	bic.w	r5, r5, #3
 8009d02:	3508      	adds	r5, #8
 8009d04:	2d0c      	cmp	r5, #12
 8009d06:	bf38      	it	cc
 8009d08:	250c      	movcc	r5, #12
 8009d0a:	2d00      	cmp	r5, #0
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	db01      	blt.n	8009d14 <_malloc_r+0x1c>
 8009d10:	42a9      	cmp	r1, r5
 8009d12:	d905      	bls.n	8009d20 <_malloc_r+0x28>
 8009d14:	230c      	movs	r3, #12
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	2600      	movs	r6, #0
 8009d1a:	4630      	mov	r0, r6
 8009d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d20:	4e2e      	ldr	r6, [pc, #184]	; (8009ddc <_malloc_r+0xe4>)
 8009d22:	f000 fbdb 	bl	800a4dc <__malloc_lock>
 8009d26:	6833      	ldr	r3, [r6, #0]
 8009d28:	461c      	mov	r4, r3
 8009d2a:	bb34      	cbnz	r4, 8009d7a <_malloc_r+0x82>
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f7ff ffc2 	bl	8009cb8 <sbrk_aligned>
 8009d34:	1c43      	adds	r3, r0, #1
 8009d36:	4604      	mov	r4, r0
 8009d38:	d14d      	bne.n	8009dd6 <_malloc_r+0xde>
 8009d3a:	6834      	ldr	r4, [r6, #0]
 8009d3c:	4626      	mov	r6, r4
 8009d3e:	2e00      	cmp	r6, #0
 8009d40:	d140      	bne.n	8009dc4 <_malloc_r+0xcc>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	4631      	mov	r1, r6
 8009d46:	4638      	mov	r0, r7
 8009d48:	eb04 0803 	add.w	r8, r4, r3
 8009d4c:	f000 f8d6 	bl	8009efc <_sbrk_r>
 8009d50:	4580      	cmp	r8, r0
 8009d52:	d13a      	bne.n	8009dca <_malloc_r+0xd2>
 8009d54:	6821      	ldr	r1, [r4, #0]
 8009d56:	3503      	adds	r5, #3
 8009d58:	1a6d      	subs	r5, r5, r1
 8009d5a:	f025 0503 	bic.w	r5, r5, #3
 8009d5e:	3508      	adds	r5, #8
 8009d60:	2d0c      	cmp	r5, #12
 8009d62:	bf38      	it	cc
 8009d64:	250c      	movcc	r5, #12
 8009d66:	4629      	mov	r1, r5
 8009d68:	4638      	mov	r0, r7
 8009d6a:	f7ff ffa5 	bl	8009cb8 <sbrk_aligned>
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d02b      	beq.n	8009dca <_malloc_r+0xd2>
 8009d72:	6823      	ldr	r3, [r4, #0]
 8009d74:	442b      	add	r3, r5
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	e00e      	b.n	8009d98 <_malloc_r+0xa0>
 8009d7a:	6822      	ldr	r2, [r4, #0]
 8009d7c:	1b52      	subs	r2, r2, r5
 8009d7e:	d41e      	bmi.n	8009dbe <_malloc_r+0xc6>
 8009d80:	2a0b      	cmp	r2, #11
 8009d82:	d916      	bls.n	8009db2 <_malloc_r+0xba>
 8009d84:	1961      	adds	r1, r4, r5
 8009d86:	42a3      	cmp	r3, r4
 8009d88:	6025      	str	r5, [r4, #0]
 8009d8a:	bf18      	it	ne
 8009d8c:	6059      	strne	r1, [r3, #4]
 8009d8e:	6863      	ldr	r3, [r4, #4]
 8009d90:	bf08      	it	eq
 8009d92:	6031      	streq	r1, [r6, #0]
 8009d94:	5162      	str	r2, [r4, r5]
 8009d96:	604b      	str	r3, [r1, #4]
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f104 060b 	add.w	r6, r4, #11
 8009d9e:	f000 fba3 	bl	800a4e8 <__malloc_unlock>
 8009da2:	f026 0607 	bic.w	r6, r6, #7
 8009da6:	1d23      	adds	r3, r4, #4
 8009da8:	1af2      	subs	r2, r6, r3
 8009daa:	d0b6      	beq.n	8009d1a <_malloc_r+0x22>
 8009dac:	1b9b      	subs	r3, r3, r6
 8009dae:	50a3      	str	r3, [r4, r2]
 8009db0:	e7b3      	b.n	8009d1a <_malloc_r+0x22>
 8009db2:	6862      	ldr	r2, [r4, #4]
 8009db4:	42a3      	cmp	r3, r4
 8009db6:	bf0c      	ite	eq
 8009db8:	6032      	streq	r2, [r6, #0]
 8009dba:	605a      	strne	r2, [r3, #4]
 8009dbc:	e7ec      	b.n	8009d98 <_malloc_r+0xa0>
 8009dbe:	4623      	mov	r3, r4
 8009dc0:	6864      	ldr	r4, [r4, #4]
 8009dc2:	e7b2      	b.n	8009d2a <_malloc_r+0x32>
 8009dc4:	4634      	mov	r4, r6
 8009dc6:	6876      	ldr	r6, [r6, #4]
 8009dc8:	e7b9      	b.n	8009d3e <_malloc_r+0x46>
 8009dca:	230c      	movs	r3, #12
 8009dcc:	603b      	str	r3, [r7, #0]
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f000 fb8a 	bl	800a4e8 <__malloc_unlock>
 8009dd4:	e7a1      	b.n	8009d1a <_malloc_r+0x22>
 8009dd6:	6025      	str	r5, [r4, #0]
 8009dd8:	e7de      	b.n	8009d98 <_malloc_r+0xa0>
 8009dda:	bf00      	nop
 8009ddc:	20000a80 	.word	0x20000a80

08009de0 <iprintf>:
 8009de0:	b40f      	push	{r0, r1, r2, r3}
 8009de2:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <iprintf+0x2c>)
 8009de4:	b513      	push	{r0, r1, r4, lr}
 8009de6:	681c      	ldr	r4, [r3, #0]
 8009de8:	b124      	cbz	r4, 8009df4 <iprintf+0x14>
 8009dea:	69a3      	ldr	r3, [r4, #24]
 8009dec:	b913      	cbnz	r3, 8009df4 <iprintf+0x14>
 8009dee:	4620      	mov	r0, r4
 8009df0:	f000 fa6e 	bl	800a2d0 <__sinit>
 8009df4:	ab05      	add	r3, sp, #20
 8009df6:	9a04      	ldr	r2, [sp, #16]
 8009df8:	68a1      	ldr	r1, [r4, #8]
 8009dfa:	9301      	str	r3, [sp, #4]
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 fba3 	bl	800a548 <_vfiprintf_r>
 8009e02:	b002      	add	sp, #8
 8009e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e08:	b004      	add	sp, #16
 8009e0a:	4770      	bx	lr
 8009e0c:	2000002c 	.word	0x2000002c

08009e10 <_puts_r>:
 8009e10:	b570      	push	{r4, r5, r6, lr}
 8009e12:	460e      	mov	r6, r1
 8009e14:	4605      	mov	r5, r0
 8009e16:	b118      	cbz	r0, 8009e20 <_puts_r+0x10>
 8009e18:	6983      	ldr	r3, [r0, #24]
 8009e1a:	b90b      	cbnz	r3, 8009e20 <_puts_r+0x10>
 8009e1c:	f000 fa58 	bl	800a2d0 <__sinit>
 8009e20:	69ab      	ldr	r3, [r5, #24]
 8009e22:	68ac      	ldr	r4, [r5, #8]
 8009e24:	b913      	cbnz	r3, 8009e2c <_puts_r+0x1c>
 8009e26:	4628      	mov	r0, r5
 8009e28:	f000 fa52 	bl	800a2d0 <__sinit>
 8009e2c:	4b2c      	ldr	r3, [pc, #176]	; (8009ee0 <_puts_r+0xd0>)
 8009e2e:	429c      	cmp	r4, r3
 8009e30:	d120      	bne.n	8009e74 <_puts_r+0x64>
 8009e32:	686c      	ldr	r4, [r5, #4]
 8009e34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e36:	07db      	lsls	r3, r3, #31
 8009e38:	d405      	bmi.n	8009e46 <_puts_r+0x36>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	0598      	lsls	r0, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_puts_r+0x36>
 8009e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e42:	f000 fae3 	bl	800a40c <__retarget_lock_acquire_recursive>
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	0719      	lsls	r1, r3, #28
 8009e4a:	d51d      	bpl.n	8009e88 <_puts_r+0x78>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	b1db      	cbz	r3, 8009e88 <_puts_r+0x78>
 8009e50:	3e01      	subs	r6, #1
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	60a3      	str	r3, [r4, #8]
 8009e5c:	bb39      	cbnz	r1, 8009eae <_puts_r+0x9e>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da38      	bge.n	8009ed4 <_puts_r+0xc4>
 8009e62:	4622      	mov	r2, r4
 8009e64:	210a      	movs	r1, #10
 8009e66:	4628      	mov	r0, r5
 8009e68:	f000 f858 	bl	8009f1c <__swbuf_r>
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	d011      	beq.n	8009e94 <_puts_r+0x84>
 8009e70:	250a      	movs	r5, #10
 8009e72:	e011      	b.n	8009e98 <_puts_r+0x88>
 8009e74:	4b1b      	ldr	r3, [pc, #108]	; (8009ee4 <_puts_r+0xd4>)
 8009e76:	429c      	cmp	r4, r3
 8009e78:	d101      	bne.n	8009e7e <_puts_r+0x6e>
 8009e7a:	68ac      	ldr	r4, [r5, #8]
 8009e7c:	e7da      	b.n	8009e34 <_puts_r+0x24>
 8009e7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <_puts_r+0xd8>)
 8009e80:	429c      	cmp	r4, r3
 8009e82:	bf08      	it	eq
 8009e84:	68ec      	ldreq	r4, [r5, #12]
 8009e86:	e7d5      	b.n	8009e34 <_puts_r+0x24>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f898 	bl	8009fc0 <__swsetup_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d0dd      	beq.n	8009e50 <_puts_r+0x40>
 8009e94:	f04f 35ff 	mov.w	r5, #4294967295
 8009e98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e9a:	07da      	lsls	r2, r3, #31
 8009e9c:	d405      	bmi.n	8009eaa <_puts_r+0x9a>
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	059b      	lsls	r3, r3, #22
 8009ea2:	d402      	bmi.n	8009eaa <_puts_r+0x9a>
 8009ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea6:	f000 fab2 	bl	800a40e <__retarget_lock_release_recursive>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	bd70      	pop	{r4, r5, r6, pc}
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da04      	bge.n	8009ebc <_puts_r+0xac>
 8009eb2:	69a2      	ldr	r2, [r4, #24]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	dc06      	bgt.n	8009ec6 <_puts_r+0xb6>
 8009eb8:	290a      	cmp	r1, #10
 8009eba:	d004      	beq.n	8009ec6 <_puts_r+0xb6>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	7019      	strb	r1, [r3, #0]
 8009ec4:	e7c5      	b.n	8009e52 <_puts_r+0x42>
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f000 f827 	bl	8009f1c <__swbuf_r>
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d1bf      	bne.n	8009e52 <_puts_r+0x42>
 8009ed2:	e7df      	b.n	8009e94 <_puts_r+0x84>
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	250a      	movs	r5, #10
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	6022      	str	r2, [r4, #0]
 8009edc:	701d      	strb	r5, [r3, #0]
 8009ede:	e7db      	b.n	8009e98 <_puts_r+0x88>
 8009ee0:	0800acc0 	.word	0x0800acc0
 8009ee4:	0800ace0 	.word	0x0800ace0
 8009ee8:	0800aca0 	.word	0x0800aca0

08009eec <puts>:
 8009eec:	4b02      	ldr	r3, [pc, #8]	; (8009ef8 <puts+0xc>)
 8009eee:	4601      	mov	r1, r0
 8009ef0:	6818      	ldr	r0, [r3, #0]
 8009ef2:	f7ff bf8d 	b.w	8009e10 <_puts_r>
 8009ef6:	bf00      	nop
 8009ef8:	2000002c 	.word	0x2000002c

08009efc <_sbrk_r>:
 8009efc:	b538      	push	{r3, r4, r5, lr}
 8009efe:	4d06      	ldr	r5, [pc, #24]	; (8009f18 <_sbrk_r+0x1c>)
 8009f00:	2300      	movs	r3, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	4608      	mov	r0, r1
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	f7f7 fc5c 	bl	80017c4 <_sbrk>
 8009f0c:	1c43      	adds	r3, r0, #1
 8009f0e:	d102      	bne.n	8009f16 <_sbrk_r+0x1a>
 8009f10:	682b      	ldr	r3, [r5, #0]
 8009f12:	b103      	cbz	r3, 8009f16 <_sbrk_r+0x1a>
 8009f14:	6023      	str	r3, [r4, #0]
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	20000a8c 	.word	0x20000a8c

08009f1c <__swbuf_r>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	460e      	mov	r6, r1
 8009f20:	4614      	mov	r4, r2
 8009f22:	4605      	mov	r5, r0
 8009f24:	b118      	cbz	r0, 8009f2e <__swbuf_r+0x12>
 8009f26:	6983      	ldr	r3, [r0, #24]
 8009f28:	b90b      	cbnz	r3, 8009f2e <__swbuf_r+0x12>
 8009f2a:	f000 f9d1 	bl	800a2d0 <__sinit>
 8009f2e:	4b21      	ldr	r3, [pc, #132]	; (8009fb4 <__swbuf_r+0x98>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d12b      	bne.n	8009f8c <__swbuf_r+0x70>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	69a3      	ldr	r3, [r4, #24]
 8009f38:	60a3      	str	r3, [r4, #8]
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	071a      	lsls	r2, r3, #28
 8009f3e:	d52f      	bpl.n	8009fa0 <__swbuf_r+0x84>
 8009f40:	6923      	ldr	r3, [r4, #16]
 8009f42:	b36b      	cbz	r3, 8009fa0 <__swbuf_r+0x84>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	6820      	ldr	r0, [r4, #0]
 8009f48:	1ac0      	subs	r0, r0, r3
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	b2f6      	uxtb	r6, r6
 8009f4e:	4283      	cmp	r3, r0
 8009f50:	4637      	mov	r7, r6
 8009f52:	dc04      	bgt.n	8009f5e <__swbuf_r+0x42>
 8009f54:	4621      	mov	r1, r4
 8009f56:	4628      	mov	r0, r5
 8009f58:	f000 f926 	bl	800a1a8 <_fflush_r>
 8009f5c:	bb30      	cbnz	r0, 8009fac <__swbuf_r+0x90>
 8009f5e:	68a3      	ldr	r3, [r4, #8]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	6823      	ldr	r3, [r4, #0]
 8009f66:	1c5a      	adds	r2, r3, #1
 8009f68:	6022      	str	r2, [r4, #0]
 8009f6a:	701e      	strb	r6, [r3, #0]
 8009f6c:	6963      	ldr	r3, [r4, #20]
 8009f6e:	3001      	adds	r0, #1
 8009f70:	4283      	cmp	r3, r0
 8009f72:	d004      	beq.n	8009f7e <__swbuf_r+0x62>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	07db      	lsls	r3, r3, #31
 8009f78:	d506      	bpl.n	8009f88 <__swbuf_r+0x6c>
 8009f7a:	2e0a      	cmp	r6, #10
 8009f7c:	d104      	bne.n	8009f88 <__swbuf_r+0x6c>
 8009f7e:	4621      	mov	r1, r4
 8009f80:	4628      	mov	r0, r5
 8009f82:	f000 f911 	bl	800a1a8 <_fflush_r>
 8009f86:	b988      	cbnz	r0, 8009fac <__swbuf_r+0x90>
 8009f88:	4638      	mov	r0, r7
 8009f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <__swbuf_r+0x9c>)
 8009f8e:	429c      	cmp	r4, r3
 8009f90:	d101      	bne.n	8009f96 <__swbuf_r+0x7a>
 8009f92:	68ac      	ldr	r4, [r5, #8]
 8009f94:	e7cf      	b.n	8009f36 <__swbuf_r+0x1a>
 8009f96:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <__swbuf_r+0xa0>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	bf08      	it	eq
 8009f9c:	68ec      	ldreq	r4, [r5, #12]
 8009f9e:	e7ca      	b.n	8009f36 <__swbuf_r+0x1a>
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f000 f80c 	bl	8009fc0 <__swsetup_r>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	d0cb      	beq.n	8009f44 <__swbuf_r+0x28>
 8009fac:	f04f 37ff 	mov.w	r7, #4294967295
 8009fb0:	e7ea      	b.n	8009f88 <__swbuf_r+0x6c>
 8009fb2:	bf00      	nop
 8009fb4:	0800acc0 	.word	0x0800acc0
 8009fb8:	0800ace0 	.word	0x0800ace0
 8009fbc:	0800aca0 	.word	0x0800aca0

08009fc0 <__swsetup_r>:
 8009fc0:	4b32      	ldr	r3, [pc, #200]	; (800a08c <__swsetup_r+0xcc>)
 8009fc2:	b570      	push	{r4, r5, r6, lr}
 8009fc4:	681d      	ldr	r5, [r3, #0]
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460c      	mov	r4, r1
 8009fca:	b125      	cbz	r5, 8009fd6 <__swsetup_r+0x16>
 8009fcc:	69ab      	ldr	r3, [r5, #24]
 8009fce:	b913      	cbnz	r3, 8009fd6 <__swsetup_r+0x16>
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	f000 f97d 	bl	800a2d0 <__sinit>
 8009fd6:	4b2e      	ldr	r3, [pc, #184]	; (800a090 <__swsetup_r+0xd0>)
 8009fd8:	429c      	cmp	r4, r3
 8009fda:	d10f      	bne.n	8009ffc <__swsetup_r+0x3c>
 8009fdc:	686c      	ldr	r4, [r5, #4]
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fe4:	0719      	lsls	r1, r3, #28
 8009fe6:	d42c      	bmi.n	800a042 <__swsetup_r+0x82>
 8009fe8:	06dd      	lsls	r5, r3, #27
 8009fea:	d411      	bmi.n	800a010 <__swsetup_r+0x50>
 8009fec:	2309      	movs	r3, #9
 8009fee:	6033      	str	r3, [r6, #0]
 8009ff0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ff4:	81a3      	strh	r3, [r4, #12]
 8009ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffa:	e03e      	b.n	800a07a <__swsetup_r+0xba>
 8009ffc:	4b25      	ldr	r3, [pc, #148]	; (800a094 <__swsetup_r+0xd4>)
 8009ffe:	429c      	cmp	r4, r3
 800a000:	d101      	bne.n	800a006 <__swsetup_r+0x46>
 800a002:	68ac      	ldr	r4, [r5, #8]
 800a004:	e7eb      	b.n	8009fde <__swsetup_r+0x1e>
 800a006:	4b24      	ldr	r3, [pc, #144]	; (800a098 <__swsetup_r+0xd8>)
 800a008:	429c      	cmp	r4, r3
 800a00a:	bf08      	it	eq
 800a00c:	68ec      	ldreq	r4, [r5, #12]
 800a00e:	e7e6      	b.n	8009fde <__swsetup_r+0x1e>
 800a010:	0758      	lsls	r0, r3, #29
 800a012:	d512      	bpl.n	800a03a <__swsetup_r+0x7a>
 800a014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a016:	b141      	cbz	r1, 800a02a <__swsetup_r+0x6a>
 800a018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a01c:	4299      	cmp	r1, r3
 800a01e:	d002      	beq.n	800a026 <__swsetup_r+0x66>
 800a020:	4630      	mov	r0, r6
 800a022:	f7ff fdfd 	bl	8009c20 <_free_r>
 800a026:	2300      	movs	r3, #0
 800a028:	6363      	str	r3, [r4, #52]	; 0x34
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	2300      	movs	r3, #0
 800a034:	6063      	str	r3, [r4, #4]
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	6023      	str	r3, [r4, #0]
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f043 0308 	orr.w	r3, r3, #8
 800a040:	81a3      	strh	r3, [r4, #12]
 800a042:	6923      	ldr	r3, [r4, #16]
 800a044:	b94b      	cbnz	r3, 800a05a <__swsetup_r+0x9a>
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a04c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a050:	d003      	beq.n	800a05a <__swsetup_r+0x9a>
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	f000 fa01 	bl	800a45c <__smakebuf_r>
 800a05a:	89a0      	ldrh	r0, [r4, #12]
 800a05c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a060:	f010 0301 	ands.w	r3, r0, #1
 800a064:	d00a      	beq.n	800a07c <__swsetup_r+0xbc>
 800a066:	2300      	movs	r3, #0
 800a068:	60a3      	str	r3, [r4, #8]
 800a06a:	6963      	ldr	r3, [r4, #20]
 800a06c:	425b      	negs	r3, r3
 800a06e:	61a3      	str	r3, [r4, #24]
 800a070:	6923      	ldr	r3, [r4, #16]
 800a072:	b943      	cbnz	r3, 800a086 <__swsetup_r+0xc6>
 800a074:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a078:	d1ba      	bne.n	8009ff0 <__swsetup_r+0x30>
 800a07a:	bd70      	pop	{r4, r5, r6, pc}
 800a07c:	0781      	lsls	r1, r0, #30
 800a07e:	bf58      	it	pl
 800a080:	6963      	ldrpl	r3, [r4, #20]
 800a082:	60a3      	str	r3, [r4, #8]
 800a084:	e7f4      	b.n	800a070 <__swsetup_r+0xb0>
 800a086:	2000      	movs	r0, #0
 800a088:	e7f7      	b.n	800a07a <__swsetup_r+0xba>
 800a08a:	bf00      	nop
 800a08c:	2000002c 	.word	0x2000002c
 800a090:	0800acc0 	.word	0x0800acc0
 800a094:	0800ace0 	.word	0x0800ace0
 800a098:	0800aca0 	.word	0x0800aca0

0800a09c <__sflush_r>:
 800a09c:	898a      	ldrh	r2, [r1, #12]
 800a09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a2:	4605      	mov	r5, r0
 800a0a4:	0710      	lsls	r0, r2, #28
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	d458      	bmi.n	800a15c <__sflush_r+0xc0>
 800a0aa:	684b      	ldr	r3, [r1, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	dc05      	bgt.n	800a0bc <__sflush_r+0x20>
 800a0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dc02      	bgt.n	800a0bc <__sflush_r+0x20>
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0be:	2e00      	cmp	r6, #0
 800a0c0:	d0f9      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0c8:	682f      	ldr	r7, [r5, #0]
 800a0ca:	602b      	str	r3, [r5, #0]
 800a0cc:	d032      	beq.n	800a134 <__sflush_r+0x98>
 800a0ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	075a      	lsls	r2, r3, #29
 800a0d4:	d505      	bpl.n	800a0e2 <__sflush_r+0x46>
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	1ac0      	subs	r0, r0, r3
 800a0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0dc:	b10b      	cbz	r3, 800a0e2 <__sflush_r+0x46>
 800a0de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0e0:	1ac0      	subs	r0, r0, r3
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0e8:	6a21      	ldr	r1, [r4, #32]
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b0      	blx	r6
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	89a3      	ldrh	r3, [r4, #12]
 800a0f2:	d106      	bne.n	800a102 <__sflush_r+0x66>
 800a0f4:	6829      	ldr	r1, [r5, #0]
 800a0f6:	291d      	cmp	r1, #29
 800a0f8:	d82c      	bhi.n	800a154 <__sflush_r+0xb8>
 800a0fa:	4a2a      	ldr	r2, [pc, #168]	; (800a1a4 <__sflush_r+0x108>)
 800a0fc:	40ca      	lsrs	r2, r1
 800a0fe:	07d6      	lsls	r6, r2, #31
 800a100:	d528      	bpl.n	800a154 <__sflush_r+0xb8>
 800a102:	2200      	movs	r2, #0
 800a104:	6062      	str	r2, [r4, #4]
 800a106:	04d9      	lsls	r1, r3, #19
 800a108:	6922      	ldr	r2, [r4, #16]
 800a10a:	6022      	str	r2, [r4, #0]
 800a10c:	d504      	bpl.n	800a118 <__sflush_r+0x7c>
 800a10e:	1c42      	adds	r2, r0, #1
 800a110:	d101      	bne.n	800a116 <__sflush_r+0x7a>
 800a112:	682b      	ldr	r3, [r5, #0]
 800a114:	b903      	cbnz	r3, 800a118 <__sflush_r+0x7c>
 800a116:	6560      	str	r0, [r4, #84]	; 0x54
 800a118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a11a:	602f      	str	r7, [r5, #0]
 800a11c:	2900      	cmp	r1, #0
 800a11e:	d0ca      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__sflush_r+0x92>
 800a128:	4628      	mov	r0, r5
 800a12a:	f7ff fd79 	bl	8009c20 <_free_r>
 800a12e:	2000      	movs	r0, #0
 800a130:	6360      	str	r0, [r4, #52]	; 0x34
 800a132:	e7c1      	b.n	800a0b8 <__sflush_r+0x1c>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	2301      	movs	r3, #1
 800a138:	4628      	mov	r0, r5
 800a13a:	47b0      	blx	r6
 800a13c:	1c41      	adds	r1, r0, #1
 800a13e:	d1c7      	bne.n	800a0d0 <__sflush_r+0x34>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c4      	beq.n	800a0d0 <__sflush_r+0x34>
 800a146:	2b1d      	cmp	r3, #29
 800a148:	d001      	beq.n	800a14e <__sflush_r+0xb2>
 800a14a:	2b16      	cmp	r3, #22
 800a14c:	d101      	bne.n	800a152 <__sflush_r+0xb6>
 800a14e:	602f      	str	r7, [r5, #0]
 800a150:	e7b1      	b.n	800a0b6 <__sflush_r+0x1a>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a158:	81a3      	strh	r3, [r4, #12]
 800a15a:	e7ad      	b.n	800a0b8 <__sflush_r+0x1c>
 800a15c:	690f      	ldr	r7, [r1, #16]
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d0a9      	beq.n	800a0b6 <__sflush_r+0x1a>
 800a162:	0793      	lsls	r3, r2, #30
 800a164:	680e      	ldr	r6, [r1, #0]
 800a166:	bf08      	it	eq
 800a168:	694b      	ldreq	r3, [r1, #20]
 800a16a:	600f      	str	r7, [r1, #0]
 800a16c:	bf18      	it	ne
 800a16e:	2300      	movne	r3, #0
 800a170:	eba6 0807 	sub.w	r8, r6, r7
 800a174:	608b      	str	r3, [r1, #8]
 800a176:	f1b8 0f00 	cmp.w	r8, #0
 800a17a:	dd9c      	ble.n	800a0b6 <__sflush_r+0x1a>
 800a17c:	6a21      	ldr	r1, [r4, #32]
 800a17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a180:	4643      	mov	r3, r8
 800a182:	463a      	mov	r2, r7
 800a184:	4628      	mov	r0, r5
 800a186:	47b0      	blx	r6
 800a188:	2800      	cmp	r0, #0
 800a18a:	dc06      	bgt.n	800a19a <__sflush_r+0xfe>
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a192:	81a3      	strh	r3, [r4, #12]
 800a194:	f04f 30ff 	mov.w	r0, #4294967295
 800a198:	e78e      	b.n	800a0b8 <__sflush_r+0x1c>
 800a19a:	4407      	add	r7, r0
 800a19c:	eba8 0800 	sub.w	r8, r8, r0
 800a1a0:	e7e9      	b.n	800a176 <__sflush_r+0xda>
 800a1a2:	bf00      	nop
 800a1a4:	20400001 	.word	0x20400001

0800a1a8 <_fflush_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	690b      	ldr	r3, [r1, #16]
 800a1ac:	4605      	mov	r5, r0
 800a1ae:	460c      	mov	r4, r1
 800a1b0:	b913      	cbnz	r3, 800a1b8 <_fflush_r+0x10>
 800a1b2:	2500      	movs	r5, #0
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	b118      	cbz	r0, 800a1c2 <_fflush_r+0x1a>
 800a1ba:	6983      	ldr	r3, [r0, #24]
 800a1bc:	b90b      	cbnz	r3, 800a1c2 <_fflush_r+0x1a>
 800a1be:	f000 f887 	bl	800a2d0 <__sinit>
 800a1c2:	4b14      	ldr	r3, [pc, #80]	; (800a214 <_fflush_r+0x6c>)
 800a1c4:	429c      	cmp	r4, r3
 800a1c6:	d11b      	bne.n	800a200 <_fflush_r+0x58>
 800a1c8:	686c      	ldr	r4, [r5, #4]
 800a1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d0ef      	beq.n	800a1b2 <_fflush_r+0xa>
 800a1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1d4:	07d0      	lsls	r0, r2, #31
 800a1d6:	d404      	bmi.n	800a1e2 <_fflush_r+0x3a>
 800a1d8:	0599      	lsls	r1, r3, #22
 800a1da:	d402      	bmi.n	800a1e2 <_fflush_r+0x3a>
 800a1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1de:	f000 f915 	bl	800a40c <__retarget_lock_acquire_recursive>
 800a1e2:	4628      	mov	r0, r5
 800a1e4:	4621      	mov	r1, r4
 800a1e6:	f7ff ff59 	bl	800a09c <__sflush_r>
 800a1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1ec:	07da      	lsls	r2, r3, #31
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	d4e0      	bmi.n	800a1b4 <_fflush_r+0xc>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	059b      	lsls	r3, r3, #22
 800a1f6:	d4dd      	bmi.n	800a1b4 <_fflush_r+0xc>
 800a1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1fa:	f000 f908 	bl	800a40e <__retarget_lock_release_recursive>
 800a1fe:	e7d9      	b.n	800a1b4 <_fflush_r+0xc>
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <_fflush_r+0x70>)
 800a202:	429c      	cmp	r4, r3
 800a204:	d101      	bne.n	800a20a <_fflush_r+0x62>
 800a206:	68ac      	ldr	r4, [r5, #8]
 800a208:	e7df      	b.n	800a1ca <_fflush_r+0x22>
 800a20a:	4b04      	ldr	r3, [pc, #16]	; (800a21c <_fflush_r+0x74>)
 800a20c:	429c      	cmp	r4, r3
 800a20e:	bf08      	it	eq
 800a210:	68ec      	ldreq	r4, [r5, #12]
 800a212:	e7da      	b.n	800a1ca <_fflush_r+0x22>
 800a214:	0800acc0 	.word	0x0800acc0
 800a218:	0800ace0 	.word	0x0800ace0
 800a21c:	0800aca0 	.word	0x0800aca0

0800a220 <std>:
 800a220:	2300      	movs	r3, #0
 800a222:	b510      	push	{r4, lr}
 800a224:	4604      	mov	r4, r0
 800a226:	e9c0 3300 	strd	r3, r3, [r0]
 800a22a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a22e:	6083      	str	r3, [r0, #8]
 800a230:	8181      	strh	r1, [r0, #12]
 800a232:	6643      	str	r3, [r0, #100]	; 0x64
 800a234:	81c2      	strh	r2, [r0, #14]
 800a236:	6183      	str	r3, [r0, #24]
 800a238:	4619      	mov	r1, r3
 800a23a:	2208      	movs	r2, #8
 800a23c:	305c      	adds	r0, #92	; 0x5c
 800a23e:	f7ff fce7 	bl	8009c10 <memset>
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <std+0x38>)
 800a244:	6263      	str	r3, [r4, #36]	; 0x24
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <std+0x3c>)
 800a248:	62a3      	str	r3, [r4, #40]	; 0x28
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <std+0x40>)
 800a24c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a24e:	4b05      	ldr	r3, [pc, #20]	; (800a264 <std+0x44>)
 800a250:	6224      	str	r4, [r4, #32]
 800a252:	6323      	str	r3, [r4, #48]	; 0x30
 800a254:	bd10      	pop	{r4, pc}
 800a256:	bf00      	nop
 800a258:	0800aad1 	.word	0x0800aad1
 800a25c:	0800aaf3 	.word	0x0800aaf3
 800a260:	0800ab2b 	.word	0x0800ab2b
 800a264:	0800ab4f 	.word	0x0800ab4f

0800a268 <_cleanup_r>:
 800a268:	4901      	ldr	r1, [pc, #4]	; (800a270 <_cleanup_r+0x8>)
 800a26a:	f000 b8af 	b.w	800a3cc <_fwalk_reent>
 800a26e:	bf00      	nop
 800a270:	0800a1a9 	.word	0x0800a1a9

0800a274 <__sfmoreglue>:
 800a274:	b570      	push	{r4, r5, r6, lr}
 800a276:	2268      	movs	r2, #104	; 0x68
 800a278:	1e4d      	subs	r5, r1, #1
 800a27a:	4355      	muls	r5, r2
 800a27c:	460e      	mov	r6, r1
 800a27e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a282:	f7ff fd39 	bl	8009cf8 <_malloc_r>
 800a286:	4604      	mov	r4, r0
 800a288:	b140      	cbz	r0, 800a29c <__sfmoreglue+0x28>
 800a28a:	2100      	movs	r1, #0
 800a28c:	e9c0 1600 	strd	r1, r6, [r0]
 800a290:	300c      	adds	r0, #12
 800a292:	60a0      	str	r0, [r4, #8]
 800a294:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a298:	f7ff fcba 	bl	8009c10 <memset>
 800a29c:	4620      	mov	r0, r4
 800a29e:	bd70      	pop	{r4, r5, r6, pc}

0800a2a0 <__sfp_lock_acquire>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__sfp_lock_acquire+0x8>)
 800a2a2:	f000 b8b3 	b.w	800a40c <__retarget_lock_acquire_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	20000a89 	.word	0x20000a89

0800a2ac <__sfp_lock_release>:
 800a2ac:	4801      	ldr	r0, [pc, #4]	; (800a2b4 <__sfp_lock_release+0x8>)
 800a2ae:	f000 b8ae 	b.w	800a40e <__retarget_lock_release_recursive>
 800a2b2:	bf00      	nop
 800a2b4:	20000a89 	.word	0x20000a89

0800a2b8 <__sinit_lock_acquire>:
 800a2b8:	4801      	ldr	r0, [pc, #4]	; (800a2c0 <__sinit_lock_acquire+0x8>)
 800a2ba:	f000 b8a7 	b.w	800a40c <__retarget_lock_acquire_recursive>
 800a2be:	bf00      	nop
 800a2c0:	20000a8a 	.word	0x20000a8a

0800a2c4 <__sinit_lock_release>:
 800a2c4:	4801      	ldr	r0, [pc, #4]	; (800a2cc <__sinit_lock_release+0x8>)
 800a2c6:	f000 b8a2 	b.w	800a40e <__retarget_lock_release_recursive>
 800a2ca:	bf00      	nop
 800a2cc:	20000a8a 	.word	0x20000a8a

0800a2d0 <__sinit>:
 800a2d0:	b510      	push	{r4, lr}
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	f7ff fff0 	bl	800a2b8 <__sinit_lock_acquire>
 800a2d8:	69a3      	ldr	r3, [r4, #24]
 800a2da:	b11b      	cbz	r3, 800a2e4 <__sinit+0x14>
 800a2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e0:	f7ff bff0 	b.w	800a2c4 <__sinit_lock_release>
 800a2e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2e8:	6523      	str	r3, [r4, #80]	; 0x50
 800a2ea:	4b13      	ldr	r3, [pc, #76]	; (800a338 <__sinit+0x68>)
 800a2ec:	4a13      	ldr	r2, [pc, #76]	; (800a33c <__sinit+0x6c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	bf04      	itt	eq
 800a2f6:	2301      	moveq	r3, #1
 800a2f8:	61a3      	streq	r3, [r4, #24]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 f820 	bl	800a340 <__sfp>
 800a300:	6060      	str	r0, [r4, #4]
 800a302:	4620      	mov	r0, r4
 800a304:	f000 f81c 	bl	800a340 <__sfp>
 800a308:	60a0      	str	r0, [r4, #8]
 800a30a:	4620      	mov	r0, r4
 800a30c:	f000 f818 	bl	800a340 <__sfp>
 800a310:	2200      	movs	r2, #0
 800a312:	60e0      	str	r0, [r4, #12]
 800a314:	2104      	movs	r1, #4
 800a316:	6860      	ldr	r0, [r4, #4]
 800a318:	f7ff ff82 	bl	800a220 <std>
 800a31c:	68a0      	ldr	r0, [r4, #8]
 800a31e:	2201      	movs	r2, #1
 800a320:	2109      	movs	r1, #9
 800a322:	f7ff ff7d 	bl	800a220 <std>
 800a326:	68e0      	ldr	r0, [r4, #12]
 800a328:	2202      	movs	r2, #2
 800a32a:	2112      	movs	r1, #18
 800a32c:	f7ff ff78 	bl	800a220 <std>
 800a330:	2301      	movs	r3, #1
 800a332:	61a3      	str	r3, [r4, #24]
 800a334:	e7d2      	b.n	800a2dc <__sinit+0xc>
 800a336:	bf00      	nop
 800a338:	0800ac9c 	.word	0x0800ac9c
 800a33c:	0800a269 	.word	0x0800a269

0800a340 <__sfp>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	4607      	mov	r7, r0
 800a344:	f7ff ffac 	bl	800a2a0 <__sfp_lock_acquire>
 800a348:	4b1e      	ldr	r3, [pc, #120]	; (800a3c4 <__sfp+0x84>)
 800a34a:	681e      	ldr	r6, [r3, #0]
 800a34c:	69b3      	ldr	r3, [r6, #24]
 800a34e:	b913      	cbnz	r3, 800a356 <__sfp+0x16>
 800a350:	4630      	mov	r0, r6
 800a352:	f7ff ffbd 	bl	800a2d0 <__sinit>
 800a356:	3648      	adds	r6, #72	; 0x48
 800a358:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a35c:	3b01      	subs	r3, #1
 800a35e:	d503      	bpl.n	800a368 <__sfp+0x28>
 800a360:	6833      	ldr	r3, [r6, #0]
 800a362:	b30b      	cbz	r3, 800a3a8 <__sfp+0x68>
 800a364:	6836      	ldr	r6, [r6, #0]
 800a366:	e7f7      	b.n	800a358 <__sfp+0x18>
 800a368:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a36c:	b9d5      	cbnz	r5, 800a3a4 <__sfp+0x64>
 800a36e:	4b16      	ldr	r3, [pc, #88]	; (800a3c8 <__sfp+0x88>)
 800a370:	60e3      	str	r3, [r4, #12]
 800a372:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a376:	6665      	str	r5, [r4, #100]	; 0x64
 800a378:	f000 f847 	bl	800a40a <__retarget_lock_init_recursive>
 800a37c:	f7ff ff96 	bl	800a2ac <__sfp_lock_release>
 800a380:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a384:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a388:	6025      	str	r5, [r4, #0]
 800a38a:	61a5      	str	r5, [r4, #24]
 800a38c:	2208      	movs	r2, #8
 800a38e:	4629      	mov	r1, r5
 800a390:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a394:	f7ff fc3c 	bl	8009c10 <memset>
 800a398:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a39c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a4:	3468      	adds	r4, #104	; 0x68
 800a3a6:	e7d9      	b.n	800a35c <__sfp+0x1c>
 800a3a8:	2104      	movs	r1, #4
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	f7ff ff62 	bl	800a274 <__sfmoreglue>
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	6030      	str	r0, [r6, #0]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d1d5      	bne.n	800a364 <__sfp+0x24>
 800a3b8:	f7ff ff78 	bl	800a2ac <__sfp_lock_release>
 800a3bc:	230c      	movs	r3, #12
 800a3be:	603b      	str	r3, [r7, #0]
 800a3c0:	e7ee      	b.n	800a3a0 <__sfp+0x60>
 800a3c2:	bf00      	nop
 800a3c4:	0800ac9c 	.word	0x0800ac9c
 800a3c8:	ffff0001 	.word	0xffff0001

0800a3cc <_fwalk_reent>:
 800a3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	4688      	mov	r8, r1
 800a3d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3d8:	2700      	movs	r7, #0
 800a3da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3de:	f1b9 0901 	subs.w	r9, r9, #1
 800a3e2:	d505      	bpl.n	800a3f0 <_fwalk_reent+0x24>
 800a3e4:	6824      	ldr	r4, [r4, #0]
 800a3e6:	2c00      	cmp	r4, #0
 800a3e8:	d1f7      	bne.n	800a3da <_fwalk_reent+0xe>
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f0:	89ab      	ldrh	r3, [r5, #12]
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d907      	bls.n	800a406 <_fwalk_reent+0x3a>
 800a3f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	d003      	beq.n	800a406 <_fwalk_reent+0x3a>
 800a3fe:	4629      	mov	r1, r5
 800a400:	4630      	mov	r0, r6
 800a402:	47c0      	blx	r8
 800a404:	4307      	orrs	r7, r0
 800a406:	3568      	adds	r5, #104	; 0x68
 800a408:	e7e9      	b.n	800a3de <_fwalk_reent+0x12>

0800a40a <__retarget_lock_init_recursive>:
 800a40a:	4770      	bx	lr

0800a40c <__retarget_lock_acquire_recursive>:
 800a40c:	4770      	bx	lr

0800a40e <__retarget_lock_release_recursive>:
 800a40e:	4770      	bx	lr

0800a410 <__swhatbuf_r>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	460e      	mov	r6, r1
 800a414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a418:	2900      	cmp	r1, #0
 800a41a:	b096      	sub	sp, #88	; 0x58
 800a41c:	4614      	mov	r4, r2
 800a41e:	461d      	mov	r5, r3
 800a420:	da08      	bge.n	800a434 <__swhatbuf_r+0x24>
 800a422:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	602a      	str	r2, [r5, #0]
 800a42a:	061a      	lsls	r2, r3, #24
 800a42c:	d410      	bmi.n	800a450 <__swhatbuf_r+0x40>
 800a42e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a432:	e00e      	b.n	800a452 <__swhatbuf_r+0x42>
 800a434:	466a      	mov	r2, sp
 800a436:	f000 fbb1 	bl	800ab9c <_fstat_r>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	dbf1      	blt.n	800a422 <__swhatbuf_r+0x12>
 800a43e:	9a01      	ldr	r2, [sp, #4]
 800a440:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a444:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a448:	425a      	negs	r2, r3
 800a44a:	415a      	adcs	r2, r3
 800a44c:	602a      	str	r2, [r5, #0]
 800a44e:	e7ee      	b.n	800a42e <__swhatbuf_r+0x1e>
 800a450:	2340      	movs	r3, #64	; 0x40
 800a452:	2000      	movs	r0, #0
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	b016      	add	sp, #88	; 0x58
 800a458:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a45c <__smakebuf_r>:
 800a45c:	898b      	ldrh	r3, [r1, #12]
 800a45e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a460:	079d      	lsls	r5, r3, #30
 800a462:	4606      	mov	r6, r0
 800a464:	460c      	mov	r4, r1
 800a466:	d507      	bpl.n	800a478 <__smakebuf_r+0x1c>
 800a468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	6123      	str	r3, [r4, #16]
 800a470:	2301      	movs	r3, #1
 800a472:	6163      	str	r3, [r4, #20]
 800a474:	b002      	add	sp, #8
 800a476:	bd70      	pop	{r4, r5, r6, pc}
 800a478:	ab01      	add	r3, sp, #4
 800a47a:	466a      	mov	r2, sp
 800a47c:	f7ff ffc8 	bl	800a410 <__swhatbuf_r>
 800a480:	9900      	ldr	r1, [sp, #0]
 800a482:	4605      	mov	r5, r0
 800a484:	4630      	mov	r0, r6
 800a486:	f7ff fc37 	bl	8009cf8 <_malloc_r>
 800a48a:	b948      	cbnz	r0, 800a4a0 <__smakebuf_r+0x44>
 800a48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a490:	059a      	lsls	r2, r3, #22
 800a492:	d4ef      	bmi.n	800a474 <__smakebuf_r+0x18>
 800a494:	f023 0303 	bic.w	r3, r3, #3
 800a498:	f043 0302 	orr.w	r3, r3, #2
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	e7e3      	b.n	800a468 <__smakebuf_r+0xc>
 800a4a0:	4b0d      	ldr	r3, [pc, #52]	; (800a4d8 <__smakebuf_r+0x7c>)
 800a4a2:	62b3      	str	r3, [r6, #40]	; 0x28
 800a4a4:	89a3      	ldrh	r3, [r4, #12]
 800a4a6:	6020      	str	r0, [r4, #0]
 800a4a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ac:	81a3      	strh	r3, [r4, #12]
 800a4ae:	9b00      	ldr	r3, [sp, #0]
 800a4b0:	6163      	str	r3, [r4, #20]
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	6120      	str	r0, [r4, #16]
 800a4b6:	b15b      	cbz	r3, 800a4d0 <__smakebuf_r+0x74>
 800a4b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4bc:	4630      	mov	r0, r6
 800a4be:	f000 fb7f 	bl	800abc0 <_isatty_r>
 800a4c2:	b128      	cbz	r0, 800a4d0 <__smakebuf_r+0x74>
 800a4c4:	89a3      	ldrh	r3, [r4, #12]
 800a4c6:	f023 0303 	bic.w	r3, r3, #3
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	89a0      	ldrh	r0, [r4, #12]
 800a4d2:	4305      	orrs	r5, r0
 800a4d4:	81a5      	strh	r5, [r4, #12]
 800a4d6:	e7cd      	b.n	800a474 <__smakebuf_r+0x18>
 800a4d8:	0800a269 	.word	0x0800a269

0800a4dc <__malloc_lock>:
 800a4dc:	4801      	ldr	r0, [pc, #4]	; (800a4e4 <__malloc_lock+0x8>)
 800a4de:	f7ff bf95 	b.w	800a40c <__retarget_lock_acquire_recursive>
 800a4e2:	bf00      	nop
 800a4e4:	20000a88 	.word	0x20000a88

0800a4e8 <__malloc_unlock>:
 800a4e8:	4801      	ldr	r0, [pc, #4]	; (800a4f0 <__malloc_unlock+0x8>)
 800a4ea:	f7ff bf90 	b.w	800a40e <__retarget_lock_release_recursive>
 800a4ee:	bf00      	nop
 800a4f0:	20000a88 	.word	0x20000a88

0800a4f4 <__sfputc_r>:
 800a4f4:	6893      	ldr	r3, [r2, #8]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	b410      	push	{r4}
 800a4fc:	6093      	str	r3, [r2, #8]
 800a4fe:	da08      	bge.n	800a512 <__sfputc_r+0x1e>
 800a500:	6994      	ldr	r4, [r2, #24]
 800a502:	42a3      	cmp	r3, r4
 800a504:	db01      	blt.n	800a50a <__sfputc_r+0x16>
 800a506:	290a      	cmp	r1, #10
 800a508:	d103      	bne.n	800a512 <__sfputc_r+0x1e>
 800a50a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a50e:	f7ff bd05 	b.w	8009f1c <__swbuf_r>
 800a512:	6813      	ldr	r3, [r2, #0]
 800a514:	1c58      	adds	r0, r3, #1
 800a516:	6010      	str	r0, [r2, #0]
 800a518:	7019      	strb	r1, [r3, #0]
 800a51a:	4608      	mov	r0, r1
 800a51c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <__sfputs_r>:
 800a522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a524:	4606      	mov	r6, r0
 800a526:	460f      	mov	r7, r1
 800a528:	4614      	mov	r4, r2
 800a52a:	18d5      	adds	r5, r2, r3
 800a52c:	42ac      	cmp	r4, r5
 800a52e:	d101      	bne.n	800a534 <__sfputs_r+0x12>
 800a530:	2000      	movs	r0, #0
 800a532:	e007      	b.n	800a544 <__sfputs_r+0x22>
 800a534:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a538:	463a      	mov	r2, r7
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ffda 	bl	800a4f4 <__sfputc_r>
 800a540:	1c43      	adds	r3, r0, #1
 800a542:	d1f3      	bne.n	800a52c <__sfputs_r+0xa>
 800a544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a548 <_vfiprintf_r>:
 800a548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a54c:	460d      	mov	r5, r1
 800a54e:	b09d      	sub	sp, #116	; 0x74
 800a550:	4614      	mov	r4, r2
 800a552:	4698      	mov	r8, r3
 800a554:	4606      	mov	r6, r0
 800a556:	b118      	cbz	r0, 800a560 <_vfiprintf_r+0x18>
 800a558:	6983      	ldr	r3, [r0, #24]
 800a55a:	b90b      	cbnz	r3, 800a560 <_vfiprintf_r+0x18>
 800a55c:	f7ff feb8 	bl	800a2d0 <__sinit>
 800a560:	4b89      	ldr	r3, [pc, #548]	; (800a788 <_vfiprintf_r+0x240>)
 800a562:	429d      	cmp	r5, r3
 800a564:	d11b      	bne.n	800a59e <_vfiprintf_r+0x56>
 800a566:	6875      	ldr	r5, [r6, #4]
 800a568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a56a:	07d9      	lsls	r1, r3, #31
 800a56c:	d405      	bmi.n	800a57a <_vfiprintf_r+0x32>
 800a56e:	89ab      	ldrh	r3, [r5, #12]
 800a570:	059a      	lsls	r2, r3, #22
 800a572:	d402      	bmi.n	800a57a <_vfiprintf_r+0x32>
 800a574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a576:	f7ff ff49 	bl	800a40c <__retarget_lock_acquire_recursive>
 800a57a:	89ab      	ldrh	r3, [r5, #12]
 800a57c:	071b      	lsls	r3, r3, #28
 800a57e:	d501      	bpl.n	800a584 <_vfiprintf_r+0x3c>
 800a580:	692b      	ldr	r3, [r5, #16]
 800a582:	b9eb      	cbnz	r3, 800a5c0 <_vfiprintf_r+0x78>
 800a584:	4629      	mov	r1, r5
 800a586:	4630      	mov	r0, r6
 800a588:	f7ff fd1a 	bl	8009fc0 <__swsetup_r>
 800a58c:	b1c0      	cbz	r0, 800a5c0 <_vfiprintf_r+0x78>
 800a58e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a590:	07dc      	lsls	r4, r3, #31
 800a592:	d50e      	bpl.n	800a5b2 <_vfiprintf_r+0x6a>
 800a594:	f04f 30ff 	mov.w	r0, #4294967295
 800a598:	b01d      	add	sp, #116	; 0x74
 800a59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a59e:	4b7b      	ldr	r3, [pc, #492]	; (800a78c <_vfiprintf_r+0x244>)
 800a5a0:	429d      	cmp	r5, r3
 800a5a2:	d101      	bne.n	800a5a8 <_vfiprintf_r+0x60>
 800a5a4:	68b5      	ldr	r5, [r6, #8]
 800a5a6:	e7df      	b.n	800a568 <_vfiprintf_r+0x20>
 800a5a8:	4b79      	ldr	r3, [pc, #484]	; (800a790 <_vfiprintf_r+0x248>)
 800a5aa:	429d      	cmp	r5, r3
 800a5ac:	bf08      	it	eq
 800a5ae:	68f5      	ldreq	r5, [r6, #12]
 800a5b0:	e7da      	b.n	800a568 <_vfiprintf_r+0x20>
 800a5b2:	89ab      	ldrh	r3, [r5, #12]
 800a5b4:	0598      	lsls	r0, r3, #22
 800a5b6:	d4ed      	bmi.n	800a594 <_vfiprintf_r+0x4c>
 800a5b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5ba:	f7ff ff28 	bl	800a40e <__retarget_lock_release_recursive>
 800a5be:	e7e9      	b.n	800a594 <_vfiprintf_r+0x4c>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c4:	2320      	movs	r3, #32
 800a5c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5ce:	2330      	movs	r3, #48	; 0x30
 800a5d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a794 <_vfiprintf_r+0x24c>
 800a5d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5d8:	f04f 0901 	mov.w	r9, #1
 800a5dc:	4623      	mov	r3, r4
 800a5de:	469a      	mov	sl, r3
 800a5e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5e4:	b10a      	cbz	r2, 800a5ea <_vfiprintf_r+0xa2>
 800a5e6:	2a25      	cmp	r2, #37	; 0x25
 800a5e8:	d1f9      	bne.n	800a5de <_vfiprintf_r+0x96>
 800a5ea:	ebba 0b04 	subs.w	fp, sl, r4
 800a5ee:	d00b      	beq.n	800a608 <_vfiprintf_r+0xc0>
 800a5f0:	465b      	mov	r3, fp
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	4629      	mov	r1, r5
 800a5f6:	4630      	mov	r0, r6
 800a5f8:	f7ff ff93 	bl	800a522 <__sfputs_r>
 800a5fc:	3001      	adds	r0, #1
 800a5fe:	f000 80aa 	beq.w	800a756 <_vfiprintf_r+0x20e>
 800a602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a604:	445a      	add	r2, fp
 800a606:	9209      	str	r2, [sp, #36]	; 0x24
 800a608:	f89a 3000 	ldrb.w	r3, [sl]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 80a2 	beq.w	800a756 <_vfiprintf_r+0x20e>
 800a612:	2300      	movs	r3, #0
 800a614:	f04f 32ff 	mov.w	r2, #4294967295
 800a618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a61c:	f10a 0a01 	add.w	sl, sl, #1
 800a620:	9304      	str	r3, [sp, #16]
 800a622:	9307      	str	r3, [sp, #28]
 800a624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a628:	931a      	str	r3, [sp, #104]	; 0x68
 800a62a:	4654      	mov	r4, sl
 800a62c:	2205      	movs	r2, #5
 800a62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a632:	4858      	ldr	r0, [pc, #352]	; (800a794 <_vfiprintf_r+0x24c>)
 800a634:	f7f5 fddc 	bl	80001f0 <memchr>
 800a638:	9a04      	ldr	r2, [sp, #16]
 800a63a:	b9d8      	cbnz	r0, 800a674 <_vfiprintf_r+0x12c>
 800a63c:	06d1      	lsls	r1, r2, #27
 800a63e:	bf44      	itt	mi
 800a640:	2320      	movmi	r3, #32
 800a642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a646:	0713      	lsls	r3, r2, #28
 800a648:	bf44      	itt	mi
 800a64a:	232b      	movmi	r3, #43	; 0x2b
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a650:	f89a 3000 	ldrb.w	r3, [sl]
 800a654:	2b2a      	cmp	r3, #42	; 0x2a
 800a656:	d015      	beq.n	800a684 <_vfiprintf_r+0x13c>
 800a658:	9a07      	ldr	r2, [sp, #28]
 800a65a:	4654      	mov	r4, sl
 800a65c:	2000      	movs	r0, #0
 800a65e:	f04f 0c0a 	mov.w	ip, #10
 800a662:	4621      	mov	r1, r4
 800a664:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a668:	3b30      	subs	r3, #48	; 0x30
 800a66a:	2b09      	cmp	r3, #9
 800a66c:	d94e      	bls.n	800a70c <_vfiprintf_r+0x1c4>
 800a66e:	b1b0      	cbz	r0, 800a69e <_vfiprintf_r+0x156>
 800a670:	9207      	str	r2, [sp, #28]
 800a672:	e014      	b.n	800a69e <_vfiprintf_r+0x156>
 800a674:	eba0 0308 	sub.w	r3, r0, r8
 800a678:	fa09 f303 	lsl.w	r3, r9, r3
 800a67c:	4313      	orrs	r3, r2
 800a67e:	9304      	str	r3, [sp, #16]
 800a680:	46a2      	mov	sl, r4
 800a682:	e7d2      	b.n	800a62a <_vfiprintf_r+0xe2>
 800a684:	9b03      	ldr	r3, [sp, #12]
 800a686:	1d19      	adds	r1, r3, #4
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	9103      	str	r1, [sp, #12]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfbb      	ittet	lt
 800a690:	425b      	neglt	r3, r3
 800a692:	f042 0202 	orrlt.w	r2, r2, #2
 800a696:	9307      	strge	r3, [sp, #28]
 800a698:	9307      	strlt	r3, [sp, #28]
 800a69a:	bfb8      	it	lt
 800a69c:	9204      	strlt	r2, [sp, #16]
 800a69e:	7823      	ldrb	r3, [r4, #0]
 800a6a0:	2b2e      	cmp	r3, #46	; 0x2e
 800a6a2:	d10c      	bne.n	800a6be <_vfiprintf_r+0x176>
 800a6a4:	7863      	ldrb	r3, [r4, #1]
 800a6a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a8:	d135      	bne.n	800a716 <_vfiprintf_r+0x1ce>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	1d1a      	adds	r2, r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	9203      	str	r2, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfb8      	it	lt
 800a6b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6ba:	3402      	adds	r4, #2
 800a6bc:	9305      	str	r3, [sp, #20]
 800a6be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7a4 <_vfiprintf_r+0x25c>
 800a6c2:	7821      	ldrb	r1, [r4, #0]
 800a6c4:	2203      	movs	r2, #3
 800a6c6:	4650      	mov	r0, sl
 800a6c8:	f7f5 fd92 	bl	80001f0 <memchr>
 800a6cc:	b140      	cbz	r0, 800a6e0 <_vfiprintf_r+0x198>
 800a6ce:	2340      	movs	r3, #64	; 0x40
 800a6d0:	eba0 000a 	sub.w	r0, r0, sl
 800a6d4:	fa03 f000 	lsl.w	r0, r3, r0
 800a6d8:	9b04      	ldr	r3, [sp, #16]
 800a6da:	4303      	orrs	r3, r0
 800a6dc:	3401      	adds	r4, #1
 800a6de:	9304      	str	r3, [sp, #16]
 800a6e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e4:	482c      	ldr	r0, [pc, #176]	; (800a798 <_vfiprintf_r+0x250>)
 800a6e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6ea:	2206      	movs	r2, #6
 800a6ec:	f7f5 fd80 	bl	80001f0 <memchr>
 800a6f0:	2800      	cmp	r0, #0
 800a6f2:	d03f      	beq.n	800a774 <_vfiprintf_r+0x22c>
 800a6f4:	4b29      	ldr	r3, [pc, #164]	; (800a79c <_vfiprintf_r+0x254>)
 800a6f6:	bb1b      	cbnz	r3, 800a740 <_vfiprintf_r+0x1f8>
 800a6f8:	9b03      	ldr	r3, [sp, #12]
 800a6fa:	3307      	adds	r3, #7
 800a6fc:	f023 0307 	bic.w	r3, r3, #7
 800a700:	3308      	adds	r3, #8
 800a702:	9303      	str	r3, [sp, #12]
 800a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a706:	443b      	add	r3, r7
 800a708:	9309      	str	r3, [sp, #36]	; 0x24
 800a70a:	e767      	b.n	800a5dc <_vfiprintf_r+0x94>
 800a70c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a710:	460c      	mov	r4, r1
 800a712:	2001      	movs	r0, #1
 800a714:	e7a5      	b.n	800a662 <_vfiprintf_r+0x11a>
 800a716:	2300      	movs	r3, #0
 800a718:	3401      	adds	r4, #1
 800a71a:	9305      	str	r3, [sp, #20]
 800a71c:	4619      	mov	r1, r3
 800a71e:	f04f 0c0a 	mov.w	ip, #10
 800a722:	4620      	mov	r0, r4
 800a724:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a728:	3a30      	subs	r2, #48	; 0x30
 800a72a:	2a09      	cmp	r2, #9
 800a72c:	d903      	bls.n	800a736 <_vfiprintf_r+0x1ee>
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0c5      	beq.n	800a6be <_vfiprintf_r+0x176>
 800a732:	9105      	str	r1, [sp, #20]
 800a734:	e7c3      	b.n	800a6be <_vfiprintf_r+0x176>
 800a736:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73a:	4604      	mov	r4, r0
 800a73c:	2301      	movs	r3, #1
 800a73e:	e7f0      	b.n	800a722 <_vfiprintf_r+0x1da>
 800a740:	ab03      	add	r3, sp, #12
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	462a      	mov	r2, r5
 800a746:	4b16      	ldr	r3, [pc, #88]	; (800a7a0 <_vfiprintf_r+0x258>)
 800a748:	a904      	add	r1, sp, #16
 800a74a:	4630      	mov	r0, r6
 800a74c:	f3af 8000 	nop.w
 800a750:	4607      	mov	r7, r0
 800a752:	1c78      	adds	r0, r7, #1
 800a754:	d1d6      	bne.n	800a704 <_vfiprintf_r+0x1bc>
 800a756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a758:	07d9      	lsls	r1, r3, #31
 800a75a:	d405      	bmi.n	800a768 <_vfiprintf_r+0x220>
 800a75c:	89ab      	ldrh	r3, [r5, #12]
 800a75e:	059a      	lsls	r2, r3, #22
 800a760:	d402      	bmi.n	800a768 <_vfiprintf_r+0x220>
 800a762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a764:	f7ff fe53 	bl	800a40e <__retarget_lock_release_recursive>
 800a768:	89ab      	ldrh	r3, [r5, #12]
 800a76a:	065b      	lsls	r3, r3, #25
 800a76c:	f53f af12 	bmi.w	800a594 <_vfiprintf_r+0x4c>
 800a770:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a772:	e711      	b.n	800a598 <_vfiprintf_r+0x50>
 800a774:	ab03      	add	r3, sp, #12
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	462a      	mov	r2, r5
 800a77a:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <_vfiprintf_r+0x258>)
 800a77c:	a904      	add	r1, sp, #16
 800a77e:	4630      	mov	r0, r6
 800a780:	f000 f880 	bl	800a884 <_printf_i>
 800a784:	e7e4      	b.n	800a750 <_vfiprintf_r+0x208>
 800a786:	bf00      	nop
 800a788:	0800acc0 	.word	0x0800acc0
 800a78c:	0800ace0 	.word	0x0800ace0
 800a790:	0800aca0 	.word	0x0800aca0
 800a794:	0800ad00 	.word	0x0800ad00
 800a798:	0800ad0a 	.word	0x0800ad0a
 800a79c:	00000000 	.word	0x00000000
 800a7a0:	0800a523 	.word	0x0800a523
 800a7a4:	0800ad06 	.word	0x0800ad06

0800a7a8 <_printf_common>:
 800a7a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7ac:	4616      	mov	r6, r2
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	688a      	ldr	r2, [r1, #8]
 800a7b2:	690b      	ldr	r3, [r1, #16]
 800a7b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	bfb8      	it	lt
 800a7bc:	4613      	movlt	r3, r2
 800a7be:	6033      	str	r3, [r6, #0]
 800a7c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7c4:	4607      	mov	r7, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	b10a      	cbz	r2, 800a7ce <_printf_common+0x26>
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	6033      	str	r3, [r6, #0]
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0699      	lsls	r1, r3, #26
 800a7d2:	bf42      	ittt	mi
 800a7d4:	6833      	ldrmi	r3, [r6, #0]
 800a7d6:	3302      	addmi	r3, #2
 800a7d8:	6033      	strmi	r3, [r6, #0]
 800a7da:	6825      	ldr	r5, [r4, #0]
 800a7dc:	f015 0506 	ands.w	r5, r5, #6
 800a7e0:	d106      	bne.n	800a7f0 <_printf_common+0x48>
 800a7e2:	f104 0a19 	add.w	sl, r4, #25
 800a7e6:	68e3      	ldr	r3, [r4, #12]
 800a7e8:	6832      	ldr	r2, [r6, #0]
 800a7ea:	1a9b      	subs	r3, r3, r2
 800a7ec:	42ab      	cmp	r3, r5
 800a7ee:	dc26      	bgt.n	800a83e <_printf_common+0x96>
 800a7f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7f4:	1e13      	subs	r3, r2, #0
 800a7f6:	6822      	ldr	r2, [r4, #0]
 800a7f8:	bf18      	it	ne
 800a7fa:	2301      	movne	r3, #1
 800a7fc:	0692      	lsls	r2, r2, #26
 800a7fe:	d42b      	bmi.n	800a858 <_printf_common+0xb0>
 800a800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a804:	4649      	mov	r1, r9
 800a806:	4638      	mov	r0, r7
 800a808:	47c0      	blx	r8
 800a80a:	3001      	adds	r0, #1
 800a80c:	d01e      	beq.n	800a84c <_printf_common+0xa4>
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	68e5      	ldr	r5, [r4, #12]
 800a812:	6832      	ldr	r2, [r6, #0]
 800a814:	f003 0306 	and.w	r3, r3, #6
 800a818:	2b04      	cmp	r3, #4
 800a81a:	bf08      	it	eq
 800a81c:	1aad      	subeq	r5, r5, r2
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	6922      	ldr	r2, [r4, #16]
 800a822:	bf0c      	ite	eq
 800a824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a828:	2500      	movne	r5, #0
 800a82a:	4293      	cmp	r3, r2
 800a82c:	bfc4      	itt	gt
 800a82e:	1a9b      	subgt	r3, r3, r2
 800a830:	18ed      	addgt	r5, r5, r3
 800a832:	2600      	movs	r6, #0
 800a834:	341a      	adds	r4, #26
 800a836:	42b5      	cmp	r5, r6
 800a838:	d11a      	bne.n	800a870 <_printf_common+0xc8>
 800a83a:	2000      	movs	r0, #0
 800a83c:	e008      	b.n	800a850 <_printf_common+0xa8>
 800a83e:	2301      	movs	r3, #1
 800a840:	4652      	mov	r2, sl
 800a842:	4649      	mov	r1, r9
 800a844:	4638      	mov	r0, r7
 800a846:	47c0      	blx	r8
 800a848:	3001      	adds	r0, #1
 800a84a:	d103      	bne.n	800a854 <_printf_common+0xac>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a854:	3501      	adds	r5, #1
 800a856:	e7c6      	b.n	800a7e6 <_printf_common+0x3e>
 800a858:	18e1      	adds	r1, r4, r3
 800a85a:	1c5a      	adds	r2, r3, #1
 800a85c:	2030      	movs	r0, #48	; 0x30
 800a85e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a862:	4422      	add	r2, r4
 800a864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a86c:	3302      	adds	r3, #2
 800a86e:	e7c7      	b.n	800a800 <_printf_common+0x58>
 800a870:	2301      	movs	r3, #1
 800a872:	4622      	mov	r2, r4
 800a874:	4649      	mov	r1, r9
 800a876:	4638      	mov	r0, r7
 800a878:	47c0      	blx	r8
 800a87a:	3001      	adds	r0, #1
 800a87c:	d0e6      	beq.n	800a84c <_printf_common+0xa4>
 800a87e:	3601      	adds	r6, #1
 800a880:	e7d9      	b.n	800a836 <_printf_common+0x8e>
	...

0800a884 <_printf_i>:
 800a884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a888:	7e0f      	ldrb	r7, [r1, #24]
 800a88a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a88c:	2f78      	cmp	r7, #120	; 0x78
 800a88e:	4691      	mov	r9, r2
 800a890:	4680      	mov	r8, r0
 800a892:	460c      	mov	r4, r1
 800a894:	469a      	mov	sl, r3
 800a896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a89a:	d807      	bhi.n	800a8ac <_printf_i+0x28>
 800a89c:	2f62      	cmp	r7, #98	; 0x62
 800a89e:	d80a      	bhi.n	800a8b6 <_printf_i+0x32>
 800a8a0:	2f00      	cmp	r7, #0
 800a8a2:	f000 80d8 	beq.w	800aa56 <_printf_i+0x1d2>
 800a8a6:	2f58      	cmp	r7, #88	; 0x58
 800a8a8:	f000 80a3 	beq.w	800a9f2 <_printf_i+0x16e>
 800a8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8b4:	e03a      	b.n	800a92c <_printf_i+0xa8>
 800a8b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ba:	2b15      	cmp	r3, #21
 800a8bc:	d8f6      	bhi.n	800a8ac <_printf_i+0x28>
 800a8be:	a101      	add	r1, pc, #4	; (adr r1, 800a8c4 <_printf_i+0x40>)
 800a8c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8c4:	0800a91d 	.word	0x0800a91d
 800a8c8:	0800a931 	.word	0x0800a931
 800a8cc:	0800a8ad 	.word	0x0800a8ad
 800a8d0:	0800a8ad 	.word	0x0800a8ad
 800a8d4:	0800a8ad 	.word	0x0800a8ad
 800a8d8:	0800a8ad 	.word	0x0800a8ad
 800a8dc:	0800a931 	.word	0x0800a931
 800a8e0:	0800a8ad 	.word	0x0800a8ad
 800a8e4:	0800a8ad 	.word	0x0800a8ad
 800a8e8:	0800a8ad 	.word	0x0800a8ad
 800a8ec:	0800a8ad 	.word	0x0800a8ad
 800a8f0:	0800aa3d 	.word	0x0800aa3d
 800a8f4:	0800a961 	.word	0x0800a961
 800a8f8:	0800aa1f 	.word	0x0800aa1f
 800a8fc:	0800a8ad 	.word	0x0800a8ad
 800a900:	0800a8ad 	.word	0x0800a8ad
 800a904:	0800aa5f 	.word	0x0800aa5f
 800a908:	0800a8ad 	.word	0x0800a8ad
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8ad 	.word	0x0800a8ad
 800a914:	0800a8ad 	.word	0x0800a8ad
 800a918:	0800aa27 	.word	0x0800aa27
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	1d1a      	adds	r2, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	602a      	str	r2, [r5, #0]
 800a924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a92c:	2301      	movs	r3, #1
 800a92e:	e0a3      	b.n	800aa78 <_printf_i+0x1f4>
 800a930:	6820      	ldr	r0, [r4, #0]
 800a932:	6829      	ldr	r1, [r5, #0]
 800a934:	0606      	lsls	r6, r0, #24
 800a936:	f101 0304 	add.w	r3, r1, #4
 800a93a:	d50a      	bpl.n	800a952 <_printf_i+0xce>
 800a93c:	680e      	ldr	r6, [r1, #0]
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	2e00      	cmp	r6, #0
 800a942:	da03      	bge.n	800a94c <_printf_i+0xc8>
 800a944:	232d      	movs	r3, #45	; 0x2d
 800a946:	4276      	negs	r6, r6
 800a948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a94c:	485e      	ldr	r0, [pc, #376]	; (800aac8 <_printf_i+0x244>)
 800a94e:	230a      	movs	r3, #10
 800a950:	e019      	b.n	800a986 <_printf_i+0x102>
 800a952:	680e      	ldr	r6, [r1, #0]
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a95a:	bf18      	it	ne
 800a95c:	b236      	sxthne	r6, r6
 800a95e:	e7ef      	b.n	800a940 <_printf_i+0xbc>
 800a960:	682b      	ldr	r3, [r5, #0]
 800a962:	6820      	ldr	r0, [r4, #0]
 800a964:	1d19      	adds	r1, r3, #4
 800a966:	6029      	str	r1, [r5, #0]
 800a968:	0601      	lsls	r1, r0, #24
 800a96a:	d501      	bpl.n	800a970 <_printf_i+0xec>
 800a96c:	681e      	ldr	r6, [r3, #0]
 800a96e:	e002      	b.n	800a976 <_printf_i+0xf2>
 800a970:	0646      	lsls	r6, r0, #25
 800a972:	d5fb      	bpl.n	800a96c <_printf_i+0xe8>
 800a974:	881e      	ldrh	r6, [r3, #0]
 800a976:	4854      	ldr	r0, [pc, #336]	; (800aac8 <_printf_i+0x244>)
 800a978:	2f6f      	cmp	r7, #111	; 0x6f
 800a97a:	bf0c      	ite	eq
 800a97c:	2308      	moveq	r3, #8
 800a97e:	230a      	movne	r3, #10
 800a980:	2100      	movs	r1, #0
 800a982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a986:	6865      	ldr	r5, [r4, #4]
 800a988:	60a5      	str	r5, [r4, #8]
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	bfa2      	ittt	ge
 800a98e:	6821      	ldrge	r1, [r4, #0]
 800a990:	f021 0104 	bicge.w	r1, r1, #4
 800a994:	6021      	strge	r1, [r4, #0]
 800a996:	b90e      	cbnz	r6, 800a99c <_printf_i+0x118>
 800a998:	2d00      	cmp	r5, #0
 800a99a:	d04d      	beq.n	800aa38 <_printf_i+0x1b4>
 800a99c:	4615      	mov	r5, r2
 800a99e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a9a2:	fb03 6711 	mls	r7, r3, r1, r6
 800a9a6:	5dc7      	ldrb	r7, [r0, r7]
 800a9a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a9ac:	4637      	mov	r7, r6
 800a9ae:	42bb      	cmp	r3, r7
 800a9b0:	460e      	mov	r6, r1
 800a9b2:	d9f4      	bls.n	800a99e <_printf_i+0x11a>
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d10b      	bne.n	800a9d0 <_printf_i+0x14c>
 800a9b8:	6823      	ldr	r3, [r4, #0]
 800a9ba:	07de      	lsls	r6, r3, #31
 800a9bc:	d508      	bpl.n	800a9d0 <_printf_i+0x14c>
 800a9be:	6923      	ldr	r3, [r4, #16]
 800a9c0:	6861      	ldr	r1, [r4, #4]
 800a9c2:	4299      	cmp	r1, r3
 800a9c4:	bfde      	ittt	le
 800a9c6:	2330      	movle	r3, #48	; 0x30
 800a9c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9d0:	1b52      	subs	r2, r2, r5
 800a9d2:	6122      	str	r2, [r4, #16]
 800a9d4:	f8cd a000 	str.w	sl, [sp]
 800a9d8:	464b      	mov	r3, r9
 800a9da:	aa03      	add	r2, sp, #12
 800a9dc:	4621      	mov	r1, r4
 800a9de:	4640      	mov	r0, r8
 800a9e0:	f7ff fee2 	bl	800a7a8 <_printf_common>
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d14c      	bne.n	800aa82 <_printf_i+0x1fe>
 800a9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9ec:	b004      	add	sp, #16
 800a9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9f2:	4835      	ldr	r0, [pc, #212]	; (800aac8 <_printf_i+0x244>)
 800a9f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9f8:	6829      	ldr	r1, [r5, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa00:	6029      	str	r1, [r5, #0]
 800aa02:	061d      	lsls	r5, r3, #24
 800aa04:	d514      	bpl.n	800aa30 <_printf_i+0x1ac>
 800aa06:	07df      	lsls	r7, r3, #31
 800aa08:	bf44      	itt	mi
 800aa0a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa0e:	6023      	strmi	r3, [r4, #0]
 800aa10:	b91e      	cbnz	r6, 800aa1a <_printf_i+0x196>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	f023 0320 	bic.w	r3, r3, #32
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	2310      	movs	r3, #16
 800aa1c:	e7b0      	b.n	800a980 <_printf_i+0xfc>
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	f043 0320 	orr.w	r3, r3, #32
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	2378      	movs	r3, #120	; 0x78
 800aa28:	4828      	ldr	r0, [pc, #160]	; (800aacc <_printf_i+0x248>)
 800aa2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa2e:	e7e3      	b.n	800a9f8 <_printf_i+0x174>
 800aa30:	0659      	lsls	r1, r3, #25
 800aa32:	bf48      	it	mi
 800aa34:	b2b6      	uxthmi	r6, r6
 800aa36:	e7e6      	b.n	800aa06 <_printf_i+0x182>
 800aa38:	4615      	mov	r5, r2
 800aa3a:	e7bb      	b.n	800a9b4 <_printf_i+0x130>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	6826      	ldr	r6, [r4, #0]
 800aa40:	6961      	ldr	r1, [r4, #20]
 800aa42:	1d18      	adds	r0, r3, #4
 800aa44:	6028      	str	r0, [r5, #0]
 800aa46:	0635      	lsls	r5, r6, #24
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	d501      	bpl.n	800aa50 <_printf_i+0x1cc>
 800aa4c:	6019      	str	r1, [r3, #0]
 800aa4e:	e002      	b.n	800aa56 <_printf_i+0x1d2>
 800aa50:	0670      	lsls	r0, r6, #25
 800aa52:	d5fb      	bpl.n	800aa4c <_printf_i+0x1c8>
 800aa54:	8019      	strh	r1, [r3, #0]
 800aa56:	2300      	movs	r3, #0
 800aa58:	6123      	str	r3, [r4, #16]
 800aa5a:	4615      	mov	r5, r2
 800aa5c:	e7ba      	b.n	800a9d4 <_printf_i+0x150>
 800aa5e:	682b      	ldr	r3, [r5, #0]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	681d      	ldr	r5, [r3, #0]
 800aa66:	6862      	ldr	r2, [r4, #4]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4628      	mov	r0, r5
 800aa6c:	f7f5 fbc0 	bl	80001f0 <memchr>
 800aa70:	b108      	cbz	r0, 800aa76 <_printf_i+0x1f2>
 800aa72:	1b40      	subs	r0, r0, r5
 800aa74:	6060      	str	r0, [r4, #4]
 800aa76:	6863      	ldr	r3, [r4, #4]
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa80:	e7a8      	b.n	800a9d4 <_printf_i+0x150>
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	462a      	mov	r2, r5
 800aa86:	4649      	mov	r1, r9
 800aa88:	4640      	mov	r0, r8
 800aa8a:	47d0      	blx	sl
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d0ab      	beq.n	800a9e8 <_printf_i+0x164>
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	079b      	lsls	r3, r3, #30
 800aa94:	d413      	bmi.n	800aabe <_printf_i+0x23a>
 800aa96:	68e0      	ldr	r0, [r4, #12]
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	4298      	cmp	r0, r3
 800aa9c:	bfb8      	it	lt
 800aa9e:	4618      	movlt	r0, r3
 800aaa0:	e7a4      	b.n	800a9ec <_printf_i+0x168>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	47d0      	blx	sl
 800aaac:	3001      	adds	r0, #1
 800aaae:	d09b      	beq.n	800a9e8 <_printf_i+0x164>
 800aab0:	3501      	adds	r5, #1
 800aab2:	68e3      	ldr	r3, [r4, #12]
 800aab4:	9903      	ldr	r1, [sp, #12]
 800aab6:	1a5b      	subs	r3, r3, r1
 800aab8:	42ab      	cmp	r3, r5
 800aaba:	dcf2      	bgt.n	800aaa2 <_printf_i+0x21e>
 800aabc:	e7eb      	b.n	800aa96 <_printf_i+0x212>
 800aabe:	2500      	movs	r5, #0
 800aac0:	f104 0619 	add.w	r6, r4, #25
 800aac4:	e7f5      	b.n	800aab2 <_printf_i+0x22e>
 800aac6:	bf00      	nop
 800aac8:	0800ad11 	.word	0x0800ad11
 800aacc:	0800ad22 	.word	0x0800ad22

0800aad0 <__sread>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aad8:	f000 f894 	bl	800ac04 <_read_r>
 800aadc:	2800      	cmp	r0, #0
 800aade:	bfab      	itete	ge
 800aae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aae2:	89a3      	ldrhlt	r3, [r4, #12]
 800aae4:	181b      	addge	r3, r3, r0
 800aae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aaea:	bfac      	ite	ge
 800aaec:	6563      	strge	r3, [r4, #84]	; 0x54
 800aaee:	81a3      	strhlt	r3, [r4, #12]
 800aaf0:	bd10      	pop	{r4, pc}

0800aaf2 <__swrite>:
 800aaf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf6:	461f      	mov	r7, r3
 800aaf8:	898b      	ldrh	r3, [r1, #12]
 800aafa:	05db      	lsls	r3, r3, #23
 800aafc:	4605      	mov	r5, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4616      	mov	r6, r2
 800ab02:	d505      	bpl.n	800ab10 <__swrite+0x1e>
 800ab04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab08:	2302      	movs	r3, #2
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f000 f868 	bl	800abe0 <_lseek_r>
 800ab10:	89a3      	ldrh	r3, [r4, #12]
 800ab12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab1a:	81a3      	strh	r3, [r4, #12]
 800ab1c:	4632      	mov	r2, r6
 800ab1e:	463b      	mov	r3, r7
 800ab20:	4628      	mov	r0, r5
 800ab22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab26:	f000 b817 	b.w	800ab58 <_write_r>

0800ab2a <__sseek>:
 800ab2a:	b510      	push	{r4, lr}
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab32:	f000 f855 	bl	800abe0 <_lseek_r>
 800ab36:	1c43      	adds	r3, r0, #1
 800ab38:	89a3      	ldrh	r3, [r4, #12]
 800ab3a:	bf15      	itete	ne
 800ab3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab46:	81a3      	strheq	r3, [r4, #12]
 800ab48:	bf18      	it	ne
 800ab4a:	81a3      	strhne	r3, [r4, #12]
 800ab4c:	bd10      	pop	{r4, pc}

0800ab4e <__sclose>:
 800ab4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab52:	f000 b813 	b.w	800ab7c <_close_r>
	...

0800ab58 <_write_r>:
 800ab58:	b538      	push	{r3, r4, r5, lr}
 800ab5a:	4d07      	ldr	r5, [pc, #28]	; (800ab78 <_write_r+0x20>)
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	4608      	mov	r0, r1
 800ab60:	4611      	mov	r1, r2
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	f7f6 fddb 	bl	8001722 <_write>
 800ab6c:	1c43      	adds	r3, r0, #1
 800ab6e:	d102      	bne.n	800ab76 <_write_r+0x1e>
 800ab70:	682b      	ldr	r3, [r5, #0]
 800ab72:	b103      	cbz	r3, 800ab76 <_write_r+0x1e>
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	bd38      	pop	{r3, r4, r5, pc}
 800ab78:	20000a8c 	.word	0x20000a8c

0800ab7c <_close_r>:
 800ab7c:	b538      	push	{r3, r4, r5, lr}
 800ab7e:	4d06      	ldr	r5, [pc, #24]	; (800ab98 <_close_r+0x1c>)
 800ab80:	2300      	movs	r3, #0
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	602b      	str	r3, [r5, #0]
 800ab88:	f7f6 fde7 	bl	800175a <_close>
 800ab8c:	1c43      	adds	r3, r0, #1
 800ab8e:	d102      	bne.n	800ab96 <_close_r+0x1a>
 800ab90:	682b      	ldr	r3, [r5, #0]
 800ab92:	b103      	cbz	r3, 800ab96 <_close_r+0x1a>
 800ab94:	6023      	str	r3, [r4, #0]
 800ab96:	bd38      	pop	{r3, r4, r5, pc}
 800ab98:	20000a8c 	.word	0x20000a8c

0800ab9c <_fstat_r>:
 800ab9c:	b538      	push	{r3, r4, r5, lr}
 800ab9e:	4d07      	ldr	r5, [pc, #28]	; (800abbc <_fstat_r+0x20>)
 800aba0:	2300      	movs	r3, #0
 800aba2:	4604      	mov	r4, r0
 800aba4:	4608      	mov	r0, r1
 800aba6:	4611      	mov	r1, r2
 800aba8:	602b      	str	r3, [r5, #0]
 800abaa:	f7f6 fde2 	bl	8001772 <_fstat>
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	d102      	bne.n	800abb8 <_fstat_r+0x1c>
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	b103      	cbz	r3, 800abb8 <_fstat_r+0x1c>
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	bf00      	nop
 800abbc:	20000a8c 	.word	0x20000a8c

0800abc0 <_isatty_r>:
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4d06      	ldr	r5, [pc, #24]	; (800abdc <_isatty_r+0x1c>)
 800abc4:	2300      	movs	r3, #0
 800abc6:	4604      	mov	r4, r0
 800abc8:	4608      	mov	r0, r1
 800abca:	602b      	str	r3, [r5, #0]
 800abcc:	f7f6 fde1 	bl	8001792 <_isatty>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_isatty_r+0x1a>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b103      	cbz	r3, 800abda <_isatty_r+0x1a>
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	20000a8c 	.word	0x20000a8c

0800abe0 <_lseek_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d07      	ldr	r5, [pc, #28]	; (800ac00 <_lseek_r+0x20>)
 800abe4:	4604      	mov	r4, r0
 800abe6:	4608      	mov	r0, r1
 800abe8:	4611      	mov	r1, r2
 800abea:	2200      	movs	r2, #0
 800abec:	602a      	str	r2, [r5, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	f7f6 fdda 	bl	80017a8 <_lseek>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_lseek_r+0x1e>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_lseek_r+0x1e>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	20000a8c 	.word	0x20000a8c

0800ac04 <_read_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d07      	ldr	r5, [pc, #28]	; (800ac24 <_read_r+0x20>)
 800ac08:	4604      	mov	r4, r0
 800ac0a:	4608      	mov	r0, r1
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	2200      	movs	r2, #0
 800ac10:	602a      	str	r2, [r5, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f7f6 fd68 	bl	80016e8 <_read>
 800ac18:	1c43      	adds	r3, r0, #1
 800ac1a:	d102      	bne.n	800ac22 <_read_r+0x1e>
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	b103      	cbz	r3, 800ac22 <_read_r+0x1e>
 800ac20:	6023      	str	r3, [r4, #0]
 800ac22:	bd38      	pop	{r3, r4, r5, pc}
 800ac24:	20000a8c 	.word	0x20000a8c

0800ac28 <_init>:
 800ac28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac2a:	bf00      	nop
 800ac2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac2e:	bc08      	pop	{r3}
 800ac30:	469e      	mov	lr, r3
 800ac32:	4770      	bx	lr

0800ac34 <_fini>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr
