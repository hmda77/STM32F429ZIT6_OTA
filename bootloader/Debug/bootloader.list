
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd54  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000964  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c868  0800c868  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800c868  0800c868  0001c868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c870  0800c870  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c870  0800c870  0001c870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c874  0800c874  0001c874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800c878  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020094  2**0
                  CONTENTS
 10 .bss          00000e3c  20000094  20000094  00020094  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ed0  20000ed0  00020094  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026611  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d6  00000000  00000000  000466d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f10  00000000  00000000  0004b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d58  00000000  00000000  0004d8c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b135  00000000  00000000  0004f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028781  00000000  00000000  0007a74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed9d5  00000000  00000000  000a2ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001908a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c6c  00000000  00000000  001908f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000094 	.word	0x20000094
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800beec 	.word	0x0800beec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000098 	.word	0x20000098
 80001ec:	0800beec 	.word	0x0800beec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f001 ff25 	bl	80023e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f88d 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 fb27 	bl	8000bf4 <MX_GPIO_Init>
  MX_CRC_Init();
 80005a6:	f000 f8f5 	bl	8000794 <MX_CRC_Init>
  MX_DMA2D_Init();
 80005aa:	f000 f907 	bl	80007bc <MX_DMA2D_Init>
  MX_FMC_Init();
 80005ae:	f000 fad1 	bl	8000b54 <MX_FMC_Init>
  MX_I2C3_Init();
 80005b2:	f000 f935 	bl	8000820 <MX_I2C3_Init>
  MX_LTDC_Init();
 80005b6:	f000 f973 	bl	80008a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ba:	f000 f9f1 	bl	80009a0 <MX_SPI5_Init>
  MX_TIM1_Init();
 80005be:	f000 fa25 	bl	8000a0c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005c2:	f000 fa9d 	bl	8000b00 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80005c6:	f00a f93d 	bl	800a844 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80005ca:	f000 fa6f 	bl	8000aac <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d4:	4830      	ldr	r0, [pc, #192]	; (8000698 <main+0x104>)
 80005d6:	f002 ff23 	bl	8003420 <HAL_GPIO_WritePin>
  printf("Starting Bootloader (%d.%d)\r\n", BL_Version[0], BL_Version[1]);
 80005da:	2300      	movs	r3, #0
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	482e      	ldr	r0, [pc, #184]	; (800069c <main+0x108>)
 80005e2:	f00a fd5f 	bl	800b0a4 <iprintf>

  OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <main+0x10c>)
 80005e8:	60bb      	str	r3, [r7, #8]
  bool goto_ota_mode = false;
 80005ea:	2300      	movs	r3, #0
 80005ec:	73fb      	strb	r3, [r7, #15]
  bool should_backup = false;
 80005ee:	2300      	movs	r3, #0
 80005f0:	71fb      	strb	r3, [r7, #7]

  switch(cfg->reboot_cause)
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005fa:	d00c      	beq.n	8000616 <main+0x82>
 80005fc:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000600:	d01b      	beq.n	800063a <main+0xa6>
 8000602:	f1b3 3fef 	cmp.w	r3, #4025479151	; 0xefefefef
 8000606:	d81c      	bhi.n	8000642 <main+0xae>
 8000608:	f1b3 3fab 	cmp.w	r3, #2880154539	; 0xabababab
 800060c:	d009      	beq.n	8000622 <main+0x8e>
 800060e:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 8000612:	d00a      	beq.n	800062a <main+0x96>
 8000614:	e015      	b.n	8000642 <main+0xae>
  {
	  case OTA_FIRST_TIME_BOOT:
	  {
		  printf("First Time Boot\r\nNo Configuration was found\r\n");
 8000616:	4823      	ldr	r0, [pc, #140]	; (80006a4 <main+0x110>)
 8000618:	f00a fdca 	bl	800b1b0 <puts>
		  goto_ota_mode = true;
 800061c:	2301      	movs	r3, #1
 800061e:	73fb      	strb	r3, [r7, #15]
	  }
	  break;
 8000620:	e00f      	b.n	8000642 <main+0xae>

	  case OTA_NORMAL_BOOT:
	  {
		  printf("Normal Boot\r\n");
 8000622:	4821      	ldr	r0, [pc, #132]	; (80006a8 <main+0x114>)
 8000624:	f00a fdc4 	bl	800b1b0 <puts>
	  }
	  break;
 8000628:	e00b      	b.n	8000642 <main+0xae>

	  case OTA_UPDATE_APP:
	  {
		  printf("New Firmware was found!\r\n");
 800062a:	4820      	ldr	r0, [pc, #128]	; (80006ac <main+0x118>)
 800062c:	f00a fdc0 	bl	800b1b0 <puts>
		  goto_ota_mode = true;
 8000630:	2301      	movs	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
		  should_backup = true;
 8000634:	2301      	movs	r3, #1
 8000636:	71fb      	strb	r3, [r7, #7]
	  }
	  break;
 8000638:	e003      	b.n	8000642 <main+0xae>

	  case OTA_LOAD_PREV_APP:
	  {
		  printf("Update Unsuccessful, Back to previous APP if Available\r\n");
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <main+0x11c>)
 800063c:	f00a fdb8 	bl	800b1b0 <puts>

	  }
	  break;
 8000640:	bf00      	nop
  }

  do
  {
	  if (goto_ota_mode){
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d01f      	beq.n	8000688 <main+0xf4>
		printf("OTA Update Requested...\r\n");
 8000648:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0x120>)
 800064a:	f00a fdb1 	bl	800b1b0 <puts>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000654:	4810      	ldr	r0, [pc, #64]	; (8000698 <main+0x104>)
 8000656:	f002 fee3 	bl	8003420 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <main+0x104>)
 8000662:	f002 fedd 	bl	8003420 <HAL_GPIO_WritePin>
		go_to_ota_app(&huart5);
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0x124>)
 8000668:	f000 fc1a 	bl	8000ea0 <go_to_ota_app>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	4809      	ldr	r0, [pc, #36]	; (8000698 <main+0x104>)
 8000674:	f002 fed4 	bl	8003420 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <main+0x104>)
 8000680:	f002 fece 	bl	8003420 <HAL_GPIO_WritePin>
		goto_ota_mode = false;
 8000684:	2300      	movs	r3, #0
 8000686:	73fb      	strb	r3, [r7, #15]
	  }
  }while(false);

  // Validate application
  app_validation();
 8000688:	f000 fffc 	bl	8001684 <app_validation>

  // Jump to Application
  go_to_application();
 800068c:	f000 fbd4 	bl	8000e38 <go_to_application>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000690:	f00a f8fe 	bl	800a890 <MX_USB_HOST_Process>
 8000694:	e7fc      	b.n	8000690 <main+0xfc>
 8000696:	bf00      	nop
 8000698:	40021800 	.word	0x40021800
 800069c:	0800bf04 	.word	0x0800bf04
 80006a0:	08010000 	.word	0x08010000
 80006a4:	0800bf24 	.word	0x0800bf24
 80006a8:	0800bf54 	.word	0x0800bf54
 80006ac:	0800bf64 	.word	0x0800bf64
 80006b0:	0800bf80 	.word	0x0800bf80
 80006b4:	0800bfb8 	.word	0x0800bfb8
 80006b8:	20000294 	.word	0x20000294

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b094      	sub	sp, #80	; 0x50
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f00a fc02 	bl	800aed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemClock_Config+0xd0>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <SystemClock_Config+0xd0>)
 80006ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ee:	6413      	str	r3, [r2, #64]	; 0x40
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006fc:	2300      	movs	r3, #0
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemClock_Config+0xd4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd4>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd4>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800071c:	2301      	movs	r3, #1
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000720:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800072a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000730:	2310      	movs	r3, #16
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000734:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073e:	2307      	movs	r3, #7
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	4618      	mov	r0, r3
 8000748:	f004 ffb6 	bl	80056b8 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000752:	f000 fb9f 	bl	8000e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2102      	movs	r1, #2
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fa17 	bl	8005ba8 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000780:	f000 fb88 	bl	8000e94 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_CRC_Init+0x20>)
 800079a:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <MX_CRC_Init+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_CRC_Init+0x20>)
 80007a0:	f001 ff85 	bl	80026ae <HAL_CRC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007aa:	f000 fb73 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000b0 	.word	0x200000b0
 80007b8:	40023000 	.word	0x40023000

080007bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_DMA2D_Init+0x60>)
 80007c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_DMA2D_Init+0x5c>)
 80007f2:	f001 ff78 	bl	80026e6 <HAL_DMA2D_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80007fc:	f000 fb4a 	bl	8000e94 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000800:	2101      	movs	r1, #1
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_DMA2D_Init+0x5c>)
 8000804:	f002 f8c8 	bl	8002998 <HAL_DMA2D_ConfigLayer>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800080e:	f000 fb41 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200000b8 	.word	0x200000b8
 800081c:	4002b000 	.word	0x4002b000

08000820 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <MX_I2C3_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_I2C3_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_I2C3_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	; (800089c <MX_I2C3_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MX_I2C3_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_I2C3_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_I2C3_Init+0x74>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_I2C3_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_I2C3_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_I2C3_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_I2C3_Init+0x74>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800085c:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_I2C3_Init+0x74>)
 800085e:	f004 fa03 	bl	8004c68 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 fb14 	bl	8000e94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086c:	2100      	movs	r1, #0
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <MX_I2C3_Init+0x74>)
 8000870:	f004 fb3e 	bl	8004ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800087a:	f000 fb0b 	bl	8000e94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800087e:	2100      	movs	r1, #0
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_I2C3_Init+0x74>)
 8000882:	f004 fb71 	bl	8004f68 <HAL_I2CEx_ConfigDigitalFilter>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800088c:	f000 fb02 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200000f8 	.word	0x200000f8
 8000898:	40005c00 	.word	0x40005c00
 800089c:	000186a0 	.word	0x000186a0

080008a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08e      	sub	sp, #56	; 0x38
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2234      	movs	r2, #52	; 0x34
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00a fb11 	bl	800aed4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80008b2:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008b4:	4a39      	ldr	r2, [pc, #228]	; (800099c <MX_LTDC_Init+0xfc>)
 80008b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80008b8:	4b37      	ldr	r3, [pc, #220]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80008c4:	4b34      	ldr	r3, [pc, #208]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80008ca:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80008d0:	4b31      	ldr	r3, [pc, #196]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008d2:	2209      	movs	r2, #9
 80008d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80008d6:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008d8:	2201      	movs	r2, #1
 80008da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008de:	221d      	movs	r2, #29
 80008e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80008e2:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80008e8:	4b2b      	ldr	r3, [pc, #172]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008ea:	f240 120d 	movw	r2, #269	; 0x10d
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008f2:	f240 1243 	movw	r2, #323	; 0x143
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_LTDC_Init+0xf8>)
 80008fa:	f240 1217 	movw	r2, #279	; 0x117
 80008fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000900:	4b25      	ldr	r3, [pc, #148]	; (8000998 <MX_LTDC_Init+0xf8>)
 8000902:	f240 1247 	movw	r2, #327	; 0x147
 8000906:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_LTDC_Init+0xf8>)
 800090a:	2200      	movs	r2, #0
 800090c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_LTDC_Init+0xf8>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_LTDC_Init+0xf8>)
 800091a:	2200      	movs	r2, #0
 800091c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000920:	481d      	ldr	r0, [pc, #116]	; (8000998 <MX_LTDC_Init+0xf8>)
 8000922:	f004 fb61 	bl	8004fe8 <HAL_LTDC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800092c:	f000 fab2 	bl	8000e94 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000934:	23f0      	movs	r3, #240	; 0xf0
 8000936:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800093c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000940:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000942:	2302      	movs	r3, #2
 8000944:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000946:	23ff      	movs	r3, #255	; 0xff
 8000948:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800094e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000952:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000954:	2307      	movs	r3, #7
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000958:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800095e:	23f0      	movs	r3, #240	; 0xf0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000962:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	4619      	mov	r1, r3
 8000980:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_LTDC_Init+0xf8>)
 8000982:	f004 fcc3 	bl	800530c <HAL_LTDC_ConfigLayer>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800098c:	f000 fa82 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	3738      	adds	r7, #56	; 0x38
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000014c 	.word	0x2000014c
 800099c:	40016800 	.word	0x40016800

080009a0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80009a4:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009a6:	4a18      	ldr	r2, [pc, #96]	; (8000a08 <MX_SPI5_Init+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009b0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009d4:	2218      	movs	r2, #24
 80009d6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009ec:	220a      	movs	r2, #10
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_SPI5_Init+0x64>)
 80009f2:	f005 fd1f 	bl	8006434 <HAL_SPI_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009fc:	f000 fa4a 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001f4 	.word	0x200001f4
 8000a08:	40015000 	.word	0x40015000

08000a0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0308 	add.w	r3, r7, #8
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	463b      	mov	r3, r7
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <MX_TIM1_Init+0x9c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a54:	4813      	ldr	r0, [pc, #76]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a56:	f005 fd76 	bl	8006546 <HAL_TIM_Base_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000a60:	f000 fa18 	bl	8000e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a72:	f005 ff2f 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a7c:	f000 fa0a 	bl	8000e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a80:	2300      	movs	r3, #0
 8000a82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_TIM1_Init+0x98>)
 8000a8e:	f006 f94b 	bl	8006d28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a98:	f000 f9fc 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a9c:	bf00      	nop
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000024c 	.word	0x2000024c
 8000aa8:	40010000 	.word	0x40010000

08000aac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <MX_UART5_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_UART5_Init+0x4c>)
 8000ae4:	f006 f9b0 	bl	8006e48 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f9d1 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000294 	.word	0x20000294
 8000afc:	40005000 	.word	0x40005000

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <MX_USART1_UART_Init+0x50>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_USART1_UART_Init+0x4c>)
 8000b38:	f006 f986 	bl	8006e48 <HAL_UART_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b42:	f000 f9a7 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200002d8 	.word	0x200002d8
 8000b50:	40011000 	.word	0x40011000

08000b54 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_FMC_Init+0x98>)
 8000b6e:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <MX_FMC_Init+0x9c>)
 8000b70:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <MX_FMC_Init+0x98>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_FMC_Init+0x98>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_FMC_Init+0x98>)
 8000b80:	2204      	movs	r2, #4
 8000b82:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b84:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_FMC_Init+0x98>)
 8000b86:	2210      	movs	r2, #16
 8000b88:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_FMC_Init+0x98>)
 8000b8c:	2240      	movs	r2, #64	; 0x40
 8000b8e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b90:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_FMC_Init+0x98>)
 8000b92:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000b96:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_FMC_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <MX_FMC_Init+0x98>)
 8000ba0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ba4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_FMC_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_FMC_Init+0x98>)
 8000bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bb8:	2307      	movs	r3, #7
 8000bba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bc0:	2307      	movs	r3, #7
 8000bc2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_FMC_Init+0x98>)
 8000bd6:	f005 fbf9 	bl	80063cc <HAL_SDRAM_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000be0:	f000 f958 	bl	8000e94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000be4:	bf00      	nop
 8000be6:	3720      	adds	r7, #32
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000031c 	.word	0x2000031c
 8000bf0:	a0000140 	.word	0xa0000140

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b78      	ldr	r3, [pc, #480]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	623b      	str	r3, [r7, #32]
 8000c24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	4b74      	ldr	r3, [pc, #464]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a73      	ldr	r2, [pc, #460]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0320 	and.w	r3, r3, #32
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
 8000c46:	4b6d      	ldr	r3, [pc, #436]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a6c      	ldr	r2, [pc, #432]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b6a      	ldr	r3, [pc, #424]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5a:	61bb      	str	r3, [r7, #24]
 8000c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	4b66      	ldr	r3, [pc, #408]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a65      	ldr	r2, [pc, #404]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b63      	ldr	r3, [pc, #396]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b5f      	ldr	r3, [pc, #380]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a5e      	ldr	r2, [pc, #376]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b5c      	ldr	r3, [pc, #368]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b58      	ldr	r3, [pc, #352]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a57      	ldr	r2, [pc, #348]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b55      	ldr	r3, [pc, #340]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	4b51      	ldr	r3, [pc, #324]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a50      	ldr	r2, [pc, #320]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0310 	and.w	r3, r3, #16
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b4a      	ldr	r3, [pc, #296]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000cd8:	f043 0308 	orr.w	r3, r3, #8
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b47      	ldr	r3, [pc, #284]	; (8000dfc <MX_GPIO_Init+0x208>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0308 	and.w	r3, r3, #8
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2116      	movs	r1, #22
 8000cee:	4844      	ldr	r0, [pc, #272]	; (8000e00 <MX_GPIO_Init+0x20c>)
 8000cf0:	f002 fb96 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	4842      	ldr	r0, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000cfa:	f002 fb91 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d04:	4840      	ldr	r0, [pc, #256]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000d06:	f002 fb8b 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d10:	483e      	ldr	r0, [pc, #248]	; (8000e0c <MX_GPIO_Init+0x218>)
 8000d12:	f002 fb85 	bl	8003420 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d16:	2316      	movs	r3, #22
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4834      	ldr	r0, [pc, #208]	; (8000e00 <MX_GPIO_Init+0x20c>)
 8000d2e:	f002 f9cb 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d32:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d38:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	482e      	ldr	r0, [pc, #184]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000d4a:	f002 f9bd 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d62:	4619      	mov	r1, r3
 8000d64:	4827      	ldr	r0, [pc, #156]	; (8000e04 <MX_GPIO_Init+0x210>)
 8000d66:	f002 f9af 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d6e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <MX_GPIO_Init+0x20c>)
 8000d80:	f002 f9a2 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d84:	2304      	movs	r3, #4
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <MX_GPIO_Init+0x21c>)
 8000d98:	f002 f996 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4815      	ldr	r0, [pc, #84]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000db2:	f002 f989 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000db6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480e      	ldr	r0, [pc, #56]	; (8000e08 <MX_GPIO_Init+0x214>)
 8000dd0:	f002 f97a 	bl	80030c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dd4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <MX_GPIO_Init+0x218>)
 8000dee:	f002 f96b 	bl	80030c8 <HAL_GPIO_Init>

}
 8000df2:	bf00      	nop
 8000df4:	3738      	adds	r7, #56	; 0x38
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40021800 	.word	0x40021800
 8000e10:	40020400 	.word	0x40020400

08000e14 <__io_putchar>:
int __io_putchar(int ch)

#else
int fputc(int ch, FILE *f)
#endif
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e1c:	1d39      	adds	r1, r7, #4
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e22:	2201      	movs	r2, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <__io_putchar+0x20>)
 8000e26:	f006 f85c 	bl	8006ee2 <HAL_UART_Transmit>
	return ch;
 8000e2a:	687b      	ldr	r3, [r7, #4]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200002d8 	.word	0x200002d8

08000e38 <go_to_application>:

static void go_to_application (void){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	printf("Gonna Jump to Application ...\n");
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <go_to_application+0x2c>)
 8000e40:	f00a f9b6 	bl	800b1b0 <puts>
	void (*app_reset_handler) (void) = (void*) (*(volatile uint32_t *) (OTA_APP_FLASH_ADDR + 4));
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <go_to_application+0x30>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	607b      	str	r3, [r7, #4]

//	__set_MSP((*(volatile uint32_t *) (OTA_APP_FLASH_ADDR)));
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <go_to_application+0x34>)
 8000e52:	f002 fae5 	bl	8003420 <HAL_GPIO_WritePin>

	app_reset_handler();
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4798      	blx	r3
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	0800bfd4 	.word	0x0800bfd4
 8000e68:	08020004 	.word	0x08020004
 8000e6c:	40021800 	.word	0x40021800

08000e70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d101      	bne.n	8000e86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e82:	f001 fad3 	bl	800242c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40001000 	.word	0x40001000

08000e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e98:	b672      	cpsid	i
}
 8000e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <Error_Handler+0x8>
	...

08000ea0 <go_to_ota_app>:
 * @param hurat uart handler receive ota
 * @param backup should back up?
 * @retval None
 */
void go_to_ota_app(UART_HandleTypeDef *huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /*Start the Firmware or Application update */
    printf("Starting Firmware Download!!!\r\n");
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <go_to_ota_app+0x40>)
 8000eaa:	f00a f981 	bl	800b1b0 <puts>
    if( ota_download_and_flash(huart) != OTA_EX_OK )
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f81e 	bl	8000ef0 <ota_download_and_flash>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <go_to_ota_app+0x2e>
    {
      /* Error. Don't process. */
      printf("OTA Update : ERROR!!! HALT!!!\r\n");
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <go_to_ota_app+0x44>)
 8000ebc:	f00a f978 	bl	800b1b0 <puts>
      HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec6:	4808      	ldr	r0, [pc, #32]	; (8000ee8 <go_to_ota_app+0x48>)
 8000ec8:	f002 faaa 	bl	8003420 <HAL_GPIO_WritePin>
    {
      /* Reset to load the new application */
      printf("Firmware update is done!!! Rebooting...\r\n");
      HAL_NVIC_SystemReset();
    }
}
 8000ecc:	e004      	b.n	8000ed8 <go_to_ota_app+0x38>
      printf("Firmware update is done!!! Rebooting...\r\n");
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <go_to_ota_app+0x4c>)
 8000ed0:	f00a f96e 	bl	800b1b0 <puts>
      HAL_NVIC_SystemReset();
 8000ed4:	f001 fbe7 	bl	80026a6 <HAL_NVIC_SystemReset>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	0800bff4 	.word	0x0800bff4
 8000ee4:	0800c014 	.word	0x0800c014
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	0800c034 	.word	0x0800c034

08000ef0 <ota_download_and_flash>:
  * @param huart uart handler
  * @retval ETX_OTA_EX_
  */

OTA_EX_ ota_download_and_flash(UART_HandleTypeDef *huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	OTA_EX_ ret  = OTA_EX_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
	uint16_t    len;

	printf("Waiting for the OTA data\r\n");
 8000efc:	4820      	ldr	r0, [pc, #128]	; (8000f80 <ota_download_and_flash+0x90>)
 8000efe:	f00a f957 	bl	800b1b0 <puts>

	/* Reset the variables */
	ota_fw_total_size		= 0u;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <ota_download_and_flash+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
	ota_fw_received_size	= 0u;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <ota_download_and_flash+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <ota_download_and_flash+0x9c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
	ota_state				= OTA_STATE_START;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	; (8000f90 <ota_download_and_flash+0xa0>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]

	do
	{
		// clear the buffer
		memset(Rx_Buffer, 0, OTA_PACKET_MAX_SIZE);
 8000f1a:	f240 4209 	movw	r2, #1033	; 0x409
 8000f1e:	2100      	movs	r1, #0
 8000f20:	481c      	ldr	r0, [pc, #112]	; (8000f94 <ota_download_and_flash+0xa4>)
 8000f22:	f009 ffd7 	bl	800aed4 <memset>
		len = ota_receive_chunk(huart, Rx_Buffer, OTA_PACKET_MAX_SIZE);
 8000f26:	f240 4209 	movw	r2, #1033	; 0x409
 8000f2a:	491a      	ldr	r1, [pc, #104]	; (8000f94 <ota_download_and_flash+0xa4>)
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f000 f835 	bl	8000f9c <ota_receive_chunk>
 8000f32:	4603      	mov	r3, r0
 8000f34:	81bb      	strh	r3, [r7, #12]

		if (len != 0)
 8000f36:	89bb      	ldrh	r3, [r7, #12]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <ota_download_and_flash+0x5c>
		{
			ret = ota_process_data(Rx_Buffer, len);
 8000f3c:	89bb      	ldrh	r3, [r7, #12]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4814      	ldr	r0, [pc, #80]	; (8000f94 <ota_download_and_flash+0xa4>)
 8000f42:	f000 f90d 	bl	8001160 <ota_process_data>
 8000f46:	4603      	mov	r3, r0
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e001      	b.n	8000f50 <ota_download_and_flash+0x60>
		}
		else
		{
			// didn't received data or received more than expected. break
			ret = OTA_EX_ERR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
		}

		// Send ACK or NACK
		if( ret != OTA_EX_OK)
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <ota_download_and_flash+0x76>
		{
			printf("Sending NACK\r\n");
 8000f56:	4810      	ldr	r0, [pc, #64]	; (8000f98 <ota_download_and_flash+0xa8>)
 8000f58:	f00a f92a 	bl	800b1b0 <puts>
			ota_send_resp(huart, OTA_NACK);
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 fc86 	bl	8001870 <ota_send_resp>
			break;
 8000f64:	e007      	b.n	8000f76 <ota_download_and_flash+0x86>
		}
		else
		{
			ota_send_resp(huart, OTA_ACK);
 8000f66:	2100      	movs	r1, #0
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f000 fc81 	bl	8001870 <ota_send_resp>
		}


	}while( ota_state != OTA_STATE_IDLE);
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <ota_download_and_flash+0xa0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1d1      	bne.n	8000f1a <ota_download_and_flash+0x2a>

	return ret;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	0800c060 	.word	0x0800c060
 8000f84:	20000354 	.word	0x20000354
 8000f88:	2000035c 	.word	0x2000035c
 8000f8c:	20000358 	.word	0x20000358
 8000f90:	20000350 	.word	0x20000350
 8000f94:	20000360 	.word	0x20000360
 8000f98:	0800c07c 	.word	0x0800c07c

08000f9c <ota_receive_chunk>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static uint16_t ota_receive_chunk(UART_HandleTypeDef *huart, uint8_t *buf, uint16_t max_len )
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	80fb      	strh	r3, [r7, #6]
	int16_t  ret;
	uint16_t index		  =	0u;
 8000faa:	2300      	movs	r3, #0
 8000fac:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
	uint32_t rec_data_crc = 0u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]

	do
	{
		// Receive SOF byte(1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 8000fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	18d1      	adds	r1, r2, r3
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f006 f81f 	bl	8007006 <HAL_UART_Receive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	84fb      	strh	r3, [r7, #38]	; 0x26
		if( ret != HAL_OK)
 8000fcc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f040 809c 	bne.w	800110e <ota_receive_chunk+0x172>
		{
			break;
		}

		if (buf[index++] != OTA_SOF)
 8000fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000fdc:	461a      	mov	r2, r3
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2baa      	cmp	r3, #170	; 0xaa
 8000fe6:	f040 8094 	bne.w	8001112 <ota_receive_chunk+0x176>
			// Not received start of frame
			break;
		}

		// Received the packet type (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8000fea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fec:	1c5a      	adds	r2, r3, #1
 8000fee:	84ba      	strh	r2, [r7, #36]	; 0x24
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	1899      	adds	r1, r3, r2
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	f006 f802 	bl	8007006 <HAL_UART_Receive>
 8001002:	4603      	mov	r3, r0
 8001004:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8001006:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 8083 	bne.w	8001116 <ota_receive_chunk+0x17a>
			// doesn't received anything
			break;
		}

		// Get the data length (2 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 2, HAL_MAX_DELAY);
 8001010:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	18d1      	adds	r1, r2, r3
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2202      	movs	r2, #2
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f005 fff2 	bl	8007006 <HAL_UART_Receive>
 8001022:	4603      	mov	r3, r0
 8001024:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8001026:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800102a:	2b00      	cmp	r3, #0
 800102c:	d175      	bne.n	800111a <ota_receive_chunk+0x17e>
		{
			// doesn't received anything
			break;
		}
		data_len = *(uint16_t *)&buf[index];
 800102e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	4413      	add	r3, r2
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	82fb      	strh	r3, [r7, #22]
		index += 2u;
 8001038:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800103a:	3302      	adds	r3, #2
 800103c:	84bb      	strh	r3, [r7, #36]	; 0x24

		for(uint16_t i = 0u; i < data_len; i++){
 800103e:	2300      	movs	r3, #0
 8001040:	847b      	strh	r3, [r7, #34]	; 0x22
 8001042:	e014      	b.n	800106e <ota_receive_chunk+0xd2>
			ret = HAL_UART_Receive(huart, &buf[index++], 1, HAL_MAX_DELAY);
 8001044:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	84ba      	strh	r2, [r7, #36]	; 0x24
 800104a:	461a      	mov	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	1899      	adds	r1, r3, r2
 8001050:	f04f 33ff 	mov.w	r3, #4294967295
 8001054:	2201      	movs	r2, #1
 8001056:	68f8      	ldr	r0, [r7, #12]
 8001058:	f005 ffd5 	bl	8007006 <HAL_UART_Receive>
 800105c:	4603      	mov	r3, r0
 800105e:	84fb      	strh	r3, [r7, #38]	; 0x26
			if ( ret != HAL_OK)
 8001060:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001064:	2b00      	cmp	r3, #0
 8001066:	d107      	bne.n	8001078 <ota_receive_chunk+0xdc>
		for(uint16_t i = 0u; i < data_len; i++){
 8001068:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800106a:	3301      	adds	r3, #1
 800106c:	847b      	strh	r3, [r7, #34]	; 0x22
 800106e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001070:	8afb      	ldrh	r3, [r7, #22]
 8001072:	429a      	cmp	r2, r3
 8001074:	d3e6      	bcc.n	8001044 <ota_receive_chunk+0xa8>
 8001076:	e000      	b.n	800107a <ota_receive_chunk+0xde>
			{
				// doesn't received anything
				break;
 8001078:	bf00      	nop
			}
		}

		if ( ret != HAL_OK)
 800107a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800107e:	2b00      	cmp	r3, #0
 8001080:	d14d      	bne.n	800111e <ota_receive_chunk+0x182>
			// doesn't received anything
			break;
		}

		// Get the CRC (4 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 4, HAL_MAX_DELAY);
 8001082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	18d1      	adds	r1, r2, r3
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	2204      	movs	r2, #4
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	f005 ffb9 	bl	8007006 <HAL_UART_Receive>
 8001094:	4603      	mov	r3, r0
 8001096:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 8001098:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800109c:	2b00      	cmp	r3, #0
 800109e:	d140      	bne.n	8001122 <ota_receive_chunk+0x186>
		{
			// doesn't received anything
			break;
		}
		rec_data_crc = *(uint32_t *)&buf[index];
 80010a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
		index +=4u;
 80010aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010ac:	3304      	adds	r3, #4
 80010ae:	84bb      	strh	r3, [r7, #36]	; 0x24

		// Receive EOF byte (1 byte)
		ret = HAL_UART_Receive(huart, &buf[index], 1, HAL_MAX_DELAY);
 80010b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	18d1      	adds	r1, r2, r3
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	2201      	movs	r2, #1
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f005 ffa2 	bl	8007006 <HAL_UART_Receive>
 80010c2:	4603      	mov	r3, r0
 80010c4:	84fb      	strh	r3, [r7, #38]	; 0x26
		if ( ret != HAL_OK)
 80010c6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d12b      	bne.n	8001126 <ota_receive_chunk+0x18a>
		{
			// doesn't received anything
			break;
		}

		if(buf[index++] != OTA_EOF)
 80010ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	84ba      	strh	r2, [r7, #36]	; 0x24
 80010d4:	461a      	mov	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2bbb      	cmp	r3, #187	; 0xbb
 80010de:	d002      	beq.n	80010e6 <ota_receive_chunk+0x14a>
		{
			// NOT received EOF
			ret = OTA_EX_ERR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 80010e4:	e020      	b.n	8001128 <ota_receive_chunk+0x18c>
		}

		//calculate the received data's CRC
		cal_data_crc = ota_calcCRC(&buf[OTA_DATA_STARTBYTES], data_len);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3304      	adds	r3, #4
 80010ea:	8afa      	ldrh	r2, [r7, #22]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fbea 	bl	80018c8 <ota_calcCRC>
 80010f4:	61f8      	str	r0, [r7, #28]

		// Verify the CRC
		if( cal_data_crc != rec_data_crc )
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d014      	beq.n	8001128 <ota_receive_chunk+0x18c>
		{
			printf("Chunk's CRC mismatch [Calc CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n",
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	69f9      	ldr	r1, [r7, #28]
 8001102:	4815      	ldr	r0, [pc, #84]	; (8001158 <ota_receive_chunk+0x1bc>)
 8001104:	f009 ffce 	bl	800b0a4 <iprintf>
			                                                   cal_data_crc, rec_data_crc );
			ret = OTA_EX_ERR;
 8001108:	2301      	movs	r3, #1
 800110a:	84fb      	strh	r3, [r7, #38]	; 0x26
			break;
 800110c:	e00c      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 800110e:	bf00      	nop
 8001110:	e00a      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 8001112:	bf00      	nop
 8001114:	e008      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 8001116:	bf00      	nop
 8001118:	e006      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 800111a:	bf00      	nop
 800111c:	e004      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 800111e:	bf00      	nop
 8001120:	e002      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 8001122:	bf00      	nop
 8001124:	e000      	b.n	8001128 <ota_receive_chunk+0x18c>
			break;
 8001126:	bf00      	nop
		}

	}while(false);

	if( ret != HAL_OK )
 8001128:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <ota_receive_chunk+0x198>
	{
		//clear the index if error
		index = 0u;
 8001130:	2300      	movs	r3, #0
 8001132:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	if( index > max_len )
 8001134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	429a      	cmp	r2, r3
 800113a:	d907      	bls.n	800114c <ota_receive_chunk+0x1b0>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n",
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <ota_receive_chunk+0x1c0>)
 8001144:	f009 ffae 	bl	800b0a4 <iprintf>
															  	  max_len, index );
		index = 0u;
 8001148:	2300      	movs	r3, #0
 800114a:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	return index;
 800114c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
}
 800114e:	4618      	mov	r0, r3
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	0800c08c 	.word	0x0800c08c
 800115c:	0800c0cc 	.word	0x0800c0cc

08001160 <ota_process_data>:
  * @param buf buffer to store the received data
  * @param max_len maximum length to receive
  * @retval OTA_EX_
  */
static OTA_EX_ ota_process_data( uint8_t *buf, uint16_t len )
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b097      	sub	sp, #92	; 0x5c
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
	OTA_EX_ ret = OTA_EX_ERR;
 800116c:	2301      	movs	r3, #1
 800116e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	do
	{
		if( (buf== NULL) || (len == 0u))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 814e 	beq.w	8001416 <ota_process_data+0x2b6>
 800117a:	887b      	ldrh	r3, [r7, #2]
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 814a 	beq.w	8001416 <ota_process_data+0x2b6>
		{
			break;
		}

		//Check OTA Abort Command
		OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	653b      	str	r3, [r7, #80]	; 0x50
		if (cmd->packet_type == OTA_PACKET_TYPE_CMD){
 8001186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001188:	785b      	ldrb	r3, [r3, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <ota_process_data+0x38>
			if(cmd->cmd == OTA_CMD_ABORT){
 800118e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001190:	791b      	ldrb	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	f000 8141 	beq.w	800141a <ota_process_data+0x2ba>
				// received OTA Abort Command stop process
				break;
			}
		}

		switch (ota_state)
 8001198:	4ba9      	ldr	r3, [pc, #676]	; (8001440 <ota_process_data+0x2e0>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b04      	cmp	r3, #4
 800119e:	f200 8136 	bhi.w	800140e <ota_process_data+0x2ae>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <ota_process_data+0x48>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011bd 	.word	0x080011bd
 80011ac:	080011cb 	.word	0x080011cb
 80011b0:	080011f7 	.word	0x080011f7
 80011b4:	08001233 	.word	0x08001233
 80011b8:	0800135b 	.word	0x0800135b
		{
			case OTA_STATE_IDLE:
			{
				printf("OTA_STATE_IDLE....\r\n");
 80011bc:	48a1      	ldr	r0, [pc, #644]	; (8001444 <ota_process_data+0x2e4>)
 80011be:	f009 fff7 	bl	800b1b0 <puts>
				ret = OTA_EX_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 80011c8:	e134      	b.n	8001434 <ota_process_data+0x2d4>

			case OTA_STATE_START:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_*)buf;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	63bb      	str	r3, [r7, #56]	; 0x38
				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 80011ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f040 8123 	bne.w	800141e <ota_process_data+0x2be>
				{
					if( cmd->cmd == OTA_CMD_START)
 80011d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011da:	791b      	ldrb	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 811e 	bne.w	800141e <ota_process_data+0x2be>
					{
						printf("Received OTA Start command\r\n");
 80011e2:	4899      	ldr	r0, [pc, #612]	; (8001448 <ota_process_data+0x2e8>)
 80011e4:	f009 ffe4 	bl	800b1b0 <puts>
						ota_state = OTA_STATE_HEADER;
 80011e8:	4b95      	ldr	r3, [pc, #596]	; (8001440 <ota_process_data+0x2e0>)
 80011ea:	2202      	movs	r2, #2
 80011ec:	701a      	strb	r2, [r3, #0]
						ret = OTA_EX_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 80011f4:	e113      	b.n	800141e <ota_process_data+0x2be>

			case OTA_STATE_HEADER:
			{
				OTA_HEADER_ *header = (OTA_HEADER_ *)buf;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	63fb      	str	r3, [r7, #60]	; 0x3c

				if( header->packet_type == OTA_PACKET_TYPE_HEADER )
 80011fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011fc:	785b      	ldrb	r3, [r3, #1]
 80011fe:	2b02      	cmp	r3, #2
 8001200:	f040 810f 	bne.w	8001422 <ota_process_data+0x2c2>
				{
					ota_fw_total_size = header->meta_data.package_size;
 8001204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a90      	ldr	r2, [pc, #576]	; (800144c <ota_process_data+0x2ec>)
 800120a:	6013      	str	r3, [r2, #0]
					ota_fw_crc 		  = header->meta_data.package_crc;
 800120c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4a8f      	ldr	r2, [pc, #572]	; (8001450 <ota_process_data+0x2f0>)
 8001212:	6013      	str	r3, [r2, #0]
					printf("Received OTA Header. FW size = %ld, FW crc = [0x%08lX]\r\n",
 8001214:	4b8d      	ldr	r3, [pc, #564]	; (800144c <ota_process_data+0x2ec>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a8d      	ldr	r2, [pc, #564]	; (8001450 <ota_process_data+0x2f0>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	488d      	ldr	r0, [pc, #564]	; (8001454 <ota_process_data+0x2f4>)
 8001220:	f009 ff40 	bl	800b0a4 <iprintf>
													ota_fw_total_size, ota_fw_crc);

					ota_state = OTA_STATE_DATA;
 8001224:	4b86      	ldr	r3, [pc, #536]	; (8001440 <ota_process_data+0x2e0>)
 8001226:	2203      	movs	r2, #3
 8001228:	701a      	strb	r2, [r3, #0]
					ret = OTA_EX_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

				}
			}
			break;
 8001230:	e0f7      	b.n	8001422 <ota_process_data+0x2c2>

			case OTA_STATE_DATA:
			{
				OTA_DATA_	 		*data 	 = (OTA_DATA_ *)buf;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	647b      	str	r3, [r7, #68]	; 0x44
				uint16_t			data_len = data->data_len;
 8001236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001238:	789a      	ldrb	r2, [r3, #2]
 800123a:	78db      	ldrb	r3, [r3, #3]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4313      	orrs	r3, r2
 8001240:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				HAL_StatusTypeDef	ex		 = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

				if( data->packet_type == OTA_PACKET_TYPE_DATA ){
 800124a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800124c:	785b      	ldrb	r3, [r3, #1]
 800124e:	2b01      	cmp	r3, #1
 8001250:	f040 80e9 	bne.w	8001426 <ota_process_data+0x2c6>

					bool is_first_block = false;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

					if( ota_fw_received_size == 0){
 800125a:	4b7f      	ldr	r3, [pc, #508]	; (8001458 <ota_process_data+0x2f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d154      	bne.n	800130c <ota_process_data+0x1ac>
						// This is the first block
						is_first_block = true;
 8001262:	2301      	movs	r3, #1
 8001264:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

						/* Read the configuration */
						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8001268:	4b7c      	ldr	r3, [pc, #496]	; (800145c <ota_process_data+0x2fc>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	461c      	mov	r4, r3
 800126e:	f107 0608 	add.w	r6, r7, #8
 8001272:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8001276:	4635      	mov	r5, r6
 8001278:	4623      	mov	r3, r4
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	6859      	ldr	r1, [r3, #4]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001284:	3410      	adds	r4, #16
 8001286:	3610      	adds	r6, #16
 8001288:	4564      	cmp	r4, ip
 800128a:	d1f4      	bne.n	8001276 <ota_process_data+0x116>

						cfg.backup_table.is_this_slot_not_valid = 1u;
 800128c:	2301      	movs	r3, #1
 800128e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* write back the updated config */
			            ret = write_cfg_to_flash( &cfg );
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f978 	bl	800158c <write_cfg_to_flash>
 800129c:	4603      	mov	r3, r0
 800129e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 80012a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f040 80bf 	bne.w	800142a <ota_process_data+0x2ca>
			            {
			              break;
			            }

						if( cfg.reboot_cause == OTA_UPDATE_APP)
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	f1b3 3fcd 	cmp.w	r3, #3452816845	; 0xcdcdcdcd
 80012b2:	d112      	bne.n	80012da <ota_process_data+0x17a>
						{
							printf("Backing up from previous FW version\r\n");
 80012b4:	486a      	ldr	r0, [pc, #424]	; (8001460 <ota_process_data+0x300>)
 80012b6:	f009 ff7b 	bl	800b1b0 <puts>
							ex = backup_old_version();
 80012ba:	f000 fa5d 	bl	8001778 <backup_old_version>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

							if (ex != HAL_OK){
 80012c4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <ota_process_data+0x174>
								printf("Unsuccessful Backup \r\n");
 80012cc:	4865      	ldr	r0, [pc, #404]	; (8001464 <ota_process_data+0x304>)
 80012ce:	f009 ff6f 	bl	800b1b0 <puts>
								break;
 80012d2:	e0af      	b.n	8001434 <ota_process_data+0x2d4>
							}
							printf("Done!!!\r\n");
 80012d4:	4864      	ldr	r0, [pc, #400]	; (8001468 <ota_process_data+0x308>)
 80012d6:	f009 ff6b 	bl	800b1b0 <puts>
						}

						cfg.backup_table.fw_crc 				= cfg.app_table.fw_crc;
 80012da:	f8d7 3012 	ldr.w	r3, [r7, #18]
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
						cfg.backup_table.fw_size				= cfg.app_table.fw_size;
 80012e0:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
						cfg.backup_table.is_this_slot_active 	= 0u;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						cfg.backup_table.is_this_slot_not_valid = 0u;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

						/* write back the updated configuration */
			            ret = write_cfg_to_flash( &cfg );
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f948 	bl	800158c <write_cfg_to_flash>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			            if( ret != OTA_EX_OK )
 8001302:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 8091 	bne.w	800142e <ota_process_data+0x2ce>
			            }

					}

					/* Write the chunk to the Flash */
					ex = write_data_to_flash(buf+4, data_len, is_first_block);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3304      	adds	r3, #4
 8001310:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8001314:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8001318:	4618      	mov	r0, r3
 800131a:	f000 f8b3 	bl	8001484 <write_data_to_flash>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
					if( ex == HAL_OK)
 8001324:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001328:	2b00      	cmp	r3, #0
 800132a:	d17c      	bne.n	8001426 <ota_process_data+0x2c6>
					{
						printf("[%ld/%ld]\r\n", ota_fw_received_size/OTA_DATA_MAX_SIZE,
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <ota_process_data+0x2f8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0a99      	lsrs	r1, r3, #10
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <ota_process_data+0x2ec>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	0a9b      	lsrs	r3, r3, #10
 8001338:	461a      	mov	r2, r3
 800133a:	484c      	ldr	r0, [pc, #304]	; (800146c <ota_process_data+0x30c>)
 800133c:	f009 feb2 	bl	800b0a4 <iprintf>
												ota_fw_total_size/OTA_DATA_MAX_SIZE);

						if( ota_fw_received_size >= ota_fw_total_size)
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <ota_process_data+0x2f8>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b41      	ldr	r3, [pc, #260]	; (800144c <ota_process_data+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d302      	bcc.n	8001352 <ota_process_data+0x1f2>
						{
							// receive all data, move to end
							ota_state = OTA_STATE_END;
 800134c:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <ota_process_data+0x2e0>)
 800134e:	2204      	movs	r2, #4
 8001350:	701a      	strb	r2, [r3, #0]
						}
						ret = OTA_EX_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					}
				}
			}
			break;
 8001358:	e065      	b.n	8001426 <ota_process_data+0x2c6>

			case OTA_STATE_END:
			{
				OTA_COMMAND_ *cmd = (OTA_COMMAND_ *)buf;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	64fb      	str	r3, [r7, #76]	; 0x4c

				if( cmd->packet_type == OTA_PACKET_TYPE_CMD )
 800135e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d165      	bne.n	8001432 <ota_process_data+0x2d2>
				{
					if( cmd->cmd )
 8001366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d061      	beq.n	8001432 <ota_process_data+0x2d2>
					{
						printf("Received OTA END COMMAND\r\n");
 800136e:	4840      	ldr	r0, [pc, #256]	; (8001470 <ota_process_data+0x310>)
 8001370:	f009 ff1e 	bl	800b1b0 <puts>

						printf("Validating the received Binary....\r\n");
 8001374:	483f      	ldr	r0, [pc, #252]	; (8001474 <ota_process_data+0x314>)
 8001376:	f009 ff1b 	bl	800b1b0 <puts>

						uint32_t cal_crc = ota_calcCRC((uint8_t *) OTA_APP_FLASH_ADDR
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <ota_process_data+0x2ec>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	483d      	ldr	r0, [pc, #244]	; (8001478 <ota_process_data+0x318>)
 8001382:	f000 faa1 	bl	80018c8 <ota_calcCRC>
 8001386:	64b8      	str	r0, [r7, #72]	; 0x48
																, ota_fw_total_size);

						if(cal_crc != ota_fw_crc)
 8001388:	4b31      	ldr	r3, [pc, #196]	; (8001450 <ota_process_data+0x2f0>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800138e:	429a      	cmp	r2, r3
 8001390:	d007      	beq.n	80013a2 <ota_process_data+0x242>
						{
							printf("ERROR: FW CRC Mismatch: calculated: [0x%08lx] received: [0x%08lx]\r\n",
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <ota_process_data+0x2f0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800139a:	4838      	ldr	r0, [pc, #224]	; (800147c <ota_process_data+0x31c>)
 800139c:	f009 fe82 	bl	800b0a4 <iprintf>
 80013a0:	e048      	b.n	8001434 <ota_process_data+0x2d4>
																			cal_crc, ota_fw_crc);
							break;
						}

						printf("Validated Successfully!\r\n");
 80013a2:	4837      	ldr	r0, [pc, #220]	; (8001480 <ota_process_data+0x320>)
 80013a4:	f009 ff04 	bl	800b1b0 <puts>


						OTA_GNRL_CFG_ cfg;
						memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <ota_process_data+0x2fc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	461c      	mov	r4, r3
 80013ae:	f107 0608 	add.w	r6, r7, #8
 80013b2:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 80013b6:	4635      	mov	r5, r6
 80013b8:	4623      	mov	r3, r4
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c4:	3410      	adds	r4, #16
 80013c6:	3610      	adds	r6, #16
 80013c8:	4564      	cmp	r4, ip
 80013ca:	d1f4      	bne.n	80013b6 <ota_process_data+0x256>

						// update information
						cfg.app_table.fw_crc					= cal_crc;
 80013cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80013ce:	f8c7 3012 	str.w	r3, [r7, #18]
						cfg.app_table.fw_size					= ota_fw_total_size;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <ota_process_data+0x2ec>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f8c7 300e 	str.w	r3, [r7, #14]
						cfg.app_table.is_this_slot_not_valid	= 0u;
 80013da:	2300      	movs	r3, #0
 80013dc:	733b      	strb	r3, [r7, #12]
						cfg.app_table.is_this_slot_active		= 0u;
 80013de:	2300      	movs	r3, #0
 80013e0:	737b      	strb	r3, [r7, #13]

						// update the reboot reason
						cfg.reboot_cause = OTA_NORMAL_BOOT;
 80013e2:	f04f 33ab 	mov.w	r3, #2880154539	; 0xabababab
 80013e6:	60bb      	str	r3, [r7, #8]

						// Write config to flash
						ret = write_cfg_to_flash( &cfg );
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8cd 	bl	800158c <write_cfg_to_flash>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						if( ret == OTA_EX_OK )
 80013f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d118      	bne.n	8001432 <ota_process_data+0x2d2>
						{
							ota_state = OTA_STATE_IDLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <ota_process_data+0x2e0>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
							ret = OTA_EX_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						}
					}
				}
			}
			break;
 800140c:	e011      	b.n	8001432 <ota_process_data+0x2d2>

			default:
			{
				ret = OTA_EX_ERR;
 800140e:	2301      	movs	r3, #1
 8001410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			break;
 8001414:	e00e      	b.n	8001434 <ota_process_data+0x2d4>
		};
 8001416:	bf00      	nop
 8001418:	e00c      	b.n	8001434 <ota_process_data+0x2d4>
				break;
 800141a:	bf00      	nop
 800141c:	e00a      	b.n	8001434 <ota_process_data+0x2d4>
			break;
 800141e:	bf00      	nop
 8001420:	e008      	b.n	8001434 <ota_process_data+0x2d4>
			break;
 8001422:	bf00      	nop
 8001424:	e006      	b.n	8001434 <ota_process_data+0x2d4>
			break;
 8001426:	bf00      	nop
 8001428:	e004      	b.n	8001434 <ota_process_data+0x2d4>
			              break;
 800142a:	bf00      	nop
 800142c:	e002      	b.n	8001434 <ota_process_data+0x2d4>
			              break;
 800142e:	bf00      	nop
 8001430:	e000      	b.n	8001434 <ota_process_data+0x2d4>
			break;
 8001432:	bf00      	nop
	}while(false);

	return ret;
 8001434:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001438:	4618      	mov	r0, r3
 800143a:	375c      	adds	r7, #92	; 0x5c
 800143c:	46bd      	mov	sp, r7
 800143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001440:	20000350 	.word	0x20000350
 8001444:	0800c110 	.word	0x0800c110
 8001448:	0800c124 	.word	0x0800c124
 800144c:	20000354 	.word	0x20000354
 8001450:	20000358 	.word	0x20000358
 8001454:	0800c140 	.word	0x0800c140
 8001458:	2000035c 	.word	0x2000035c
 800145c:	20000000 	.word	0x20000000
 8001460:	0800c17c 	.word	0x0800c17c
 8001464:	0800c1a4 	.word	0x0800c1a4
 8001468:	0800c1bc 	.word	0x0800c1bc
 800146c:	0800c1c8 	.word	0x0800c1c8
 8001470:	0800c1d4 	.word	0x0800c1d4
 8001474:	0800c1f0 	.word	0x0800c1f0
 8001478:	08020000 	.word	0x08020000
 800147c:	0800c214 	.word	0x0800c214
 8001480:	0800c258 	.word	0x0800c258

08001484 <write_data_to_flash>:
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef write_data_to_flash(uint8_t *data,
											uint32_t data_len,
											bool is_first_block)
{
 8001484:	b5b0      	push	{r4, r5, r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	4613      	mov	r3, r2
 8001490:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	do
	{
		// Unlock Flash
		ret = HAL_FLASH_Unlock();
 8001498:	f001 fb64 	bl	8002b64 <HAL_FLASH_Unlock>
 800149c:	4603      	mov	r3, r0
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if ( ret != HAL_OK )
 80014a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d15d      	bne.n	8001566 <write_data_to_flash+0xe2>
		{
			break;
		}

		// Erase Only on First Block
		if( is_first_block )
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01f      	beq.n	80014f0 <write_data_to_flash+0x6c>
		{
			printf("Erasing The Slot Flash memory....\r\n");
 80014b0:	4831      	ldr	r0, [pc, #196]	; (8001578 <write_data_to_flash+0xf4>)
 80014b2:	f009 fe7d 	bl	800b1b0 <puts>
			// Erase The Flash
			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t SectorError;

			EraseInitStruct.TypeErase			= FLASH_TYPEERASE_SECTORS;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
			EraseInitStruct.Sector				= OTA_APP_SECTOR;
 80014ba:	2305      	movs	r3, #5
 80014bc:	623b      	str	r3, [r7, #32]
			EraseInitStruct.NbSectors			= OTA_APP_NB_SECTOR;
 80014be:	2307      	movs	r3, #7
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
			EraseInitStruct.VoltageRange		= FLASH_VOLTAGE_RANGE_3;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80014c6:	f107 0214 	add.w	r2, r7, #20
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fcb9 	bl	8002e48 <HAL_FLASHEx_Erase>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if( ret != HAL_OK ){
 80014dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <write_data_to_flash+0x6c>
				printf("Flash Erase Error On Sector 0x%08lx\r\n",SectorError);
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4824      	ldr	r0, [pc, #144]	; (800157c <write_data_to_flash+0xf8>)
 80014ea:	f009 fddb 	bl	800b0a4 <iprintf>
 80014ee:	e03d      	b.n	800156c <write_data_to_flash+0xe8>
				break;
			}
		}

		uint32_t flash_addr = OTA_APP_FLASH_ADDR;
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <write_data_to_flash+0xfc>)
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		for( int i = 0; i < data_len; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
 80014f8:	e024      	b.n	8001544 <write_data_to_flash+0xc0>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <write_data_to_flash+0x100>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	18d1      	adds	r1, r2, r3
									(flash_addr + ota_fw_received_size),
									data[i]);
 8001502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	461c      	mov	r4, r3
 8001510:	4615      	mov	r5, r2
 8001512:	4622      	mov	r2, r4
 8001514:	462b      	mov	r3, r5
 8001516:	2000      	movs	r0, #0
 8001518:	f001 fad0 	bl	8002abc <HAL_FLASH_Program>
 800151c:	4603      	mov	r3, r0
 800151e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			if ( ret == HAL_OK )
 8001522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001526:	2b00      	cmp	r3, #0
 8001528:	d105      	bne.n	8001536 <write_data_to_flash+0xb2>
			{
				//update the data count
				ota_fw_received_size +=1;
 800152a:	4b16      	ldr	r3, [pc, #88]	; (8001584 <write_data_to_flash+0x100>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	3301      	adds	r3, #1
 8001530:	4a14      	ldr	r2, [pc, #80]	; (8001584 <write_data_to_flash+0x100>)
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e003      	b.n	800153e <write_data_to_flash+0xba>
			}
			else
			{
				printf("Flash Write Error\r\n");
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <write_data_to_flash+0x104>)
 8001538:	f009 fe3a 	bl	800b1b0 <puts>
				break;
 800153c:	e006      	b.n	800154c <write_data_to_flash+0xc8>
		for( int i = 0; i < data_len; i++)
 800153e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001540:	3301      	adds	r3, #1
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
 8001544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	429a      	cmp	r2, r3
 800154a:	d8d6      	bhi.n	80014fa <write_data_to_flash+0x76>
			}
		}

		if( ret != HAL_OK )
 800154c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10a      	bne.n	800156a <write_data_to_flash+0xe6>
			break;
		}


		// Lock Flash
		ret = HAL_FLASH_Lock();
 8001554:	f001 fb28 	bl	8002ba8 <HAL_FLASH_Lock>
 8001558:	4603      	mov	r3, r0
 800155a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 800155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001562:	2b00      	cmp	r3, #0
 8001564:	e002      	b.n	800156c <write_data_to_flash+0xe8>
			break;
 8001566:	bf00      	nop
 8001568:	e000      	b.n	800156c <write_data_to_flash+0xe8>
			break;
 800156a:	bf00      	nop
		{
			break;
		}
	}while(false);

	return ret;
 800156c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001570:	4618      	mov	r0, r3
 8001572:	3738      	adds	r7, #56	; 0x38
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	0800c274 	.word	0x0800c274
 800157c:	0800c298 	.word	0x0800c298
 8001580:	08020000 	.word	0x08020000
 8001584:	2000035c 	.word	0x2000035c
 8001588:	0800c2c0 	.word	0x0800c2c0

0800158c <write_cfg_to_flash>:
  * @brief Write the configuration to flash
  * @param cfg config structure
  * @retval none
  */
static HAL_StatusTypeDef write_cfg_to_flash( OTA_GNRL_CFG_ *cfg )
{
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b08c      	sub	sp, #48	; 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	do
	{
		if( cfg == NULL )
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d05f      	beq.n	8001660 <write_cfg_to_flash+0xd4>
		{
			break;
		}

		ret = HAL_FLASH_Unlock();
 80015a0:	f001 fae0 	bl	8002b64 <HAL_FLASH_Unlock>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d158      	bne.n	8001664 <write_cfg_to_flash+0xd8>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 80015b2:	f04f 30ff 	mov.w	r0, #4294967295
 80015b6:	f001 fb07 	bl	8002bc8 <FLASH_WaitForLastOperation>

		// Erase the flash configuration sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
		EraseInitStruct.Sector			= OTA_CFG_SECTOR;
 80015be:	2304      	movs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbSectors		= 1u;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80015c6:	2302      	movs	r3, #2
 80015c8:	623b      	str	r3, [r7, #32]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <write_cfg_to_flash+0xf0>)
 80015cc:	2273      	movs	r2, #115	; 0x73
 80015ce:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80015d0:	f107 020c 	add.w	r2, r7, #12
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fc34 	bl	8002e48 <HAL_FLASHEx_Erase>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( ret != HAL_OK )
 80015e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d13c      	bne.n	8001668 <write_cfg_to_flash+0xdc>
		{
			break;
		}

		// Write the configuration
		uint8_t *data = (uint8_t*) cfg;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 80015f2:	2300      	movs	r3, #0
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f6:	e01f      	b.n	8001638 <write_cfg_to_flash+0xac>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80015f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fa:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80015fe:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
									OTA_CFG_FLASH_ADDR + i,
									data[i]);
 8001602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001606:	4413      	add	r3, r2
 8001608:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2200      	movs	r2, #0
 800160e:	461c      	mov	r4, r3
 8001610:	4615      	mov	r5, r2
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	2000      	movs	r0, #0
 8001618:	f001 fa50 	bl	8002abc <HAL_FLASH_Program>
 800161c:	4603      	mov	r3, r0
 800161e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if( ret != HAL_OK )
 8001622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <write_cfg_to_flash+0xa6>
			{
				printf("Slot table Flash Write Error\r\n");
 800162a:	4815      	ldr	r0, [pc, #84]	; (8001680 <write_cfg_to_flash+0xf4>)
 800162c:	f009 fdc0 	bl	800b1b0 <puts>
				break;
 8001630:	e005      	b.n	800163e <write_cfg_to_flash+0xb2>
		for( uint32_t i = 0u; i<sizeof(OTA_GNRL_CFG_); i++ )
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	3301      	adds	r3, #1
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	2b2f      	cmp	r3, #47	; 0x2f
 800163c:	d9dc      	bls.n	80015f8 <write_cfg_to_flash+0x6c>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 800163e:	f04f 30ff 	mov.w	r0, #4294967295
 8001642:	f001 fac1 	bl	8002bc8 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <write_cfg_to_flash+0xe0>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 800164e:	f001 faab 	bl	8002ba8 <HAL_FLASH_Lock>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	    if( ret != HAL_OK )
 8001658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800165c:	2b00      	cmp	r3, #0
 800165e:	e006      	b.n	800166e <write_cfg_to_flash+0xe2>
			break;
 8001660:	bf00      	nop
 8001662:	e004      	b.n	800166e <write_cfg_to_flash+0xe2>
			break;
 8001664:	bf00      	nop
 8001666:	e002      	b.n	800166e <write_cfg_to_flash+0xe2>
			break;
 8001668:	bf00      	nop
 800166a:	e000      	b.n	800166e <write_cfg_to_flash+0xe2>
	      break;
 800166c:	bf00      	nop
	    {
	      break;
	    }
	}while(false);

	return ret;
 800166e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001672:	4618      	mov	r0, r3
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bdb0      	pop	{r4, r5, r7, pc}
 800167a:	bf00      	nop
 800167c:	40023c00 	.word	0x40023c00
 8001680:	0800c2d4 	.word	0x0800c2d4

08001684 <app_validation>:
 * @brief Validate Current APP in APP SLOT
 * @param none
 * @retval none
 */
void app_validation()
{
 8001684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001686:	b091      	sub	sp, #68	; 0x44
 8001688:	af00      	add	r7, sp, #0
	bool is_app_updated = false;
 800168a:	2300      	movs	r3, #0
 800168c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	HAL_StatusTypeDef ret;

	/* read configuration */
	OTA_GNRL_CFG_ cfg;
	memcpy(&cfg, cfg_flash, sizeof(OTA_GNRL_CFG_));
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <app_validation+0xd8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461c      	mov	r4, r3
 8001696:	1d3e      	adds	r6, r7, #4
 8001698:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 800169c:	4635      	mov	r5, r6
 800169e:	4623      	mov	r3, r4
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	3410      	adds	r4, #16
 80016ac:	3610      	adds	r6, #16
 80016ae:	4564      	cmp	r4, ip
 80016b0:	d1f4      	bne.n	800169c <app_validation+0x18>

	if(cfg.app_table.is_this_slot_active == 0)
 80016b2:	7a7b      	ldrb	r3, [r7, #9]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d105      	bne.n	80016c4 <app_validation+0x40>
	{
		printf("New Application found!\r\n");
 80016b8:	4829      	ldr	r0, [pc, #164]	; (8001760 <app_validation+0xdc>)
 80016ba:	f009 fd79 	bl	800b1b0 <puts>
		is_app_updated = true;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	// Validating
	printf("Validating...\r\n");
 80016c4:	4827      	ldr	r0, [pc, #156]	; (8001764 <app_validation+0xe0>)
 80016c6:	f009 fd73 	bl	800b1b0 <puts>

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80016ca:	f04f 30ff 	mov.w	r0, #4294967295
 80016ce:	f001 fa7b 	bl	8002bc8 <FLASH_WaitForLastOperation>

	// Check CRC
	uint32_t cal_data_crc = ota_calcCRC((uint8_t *)OTA_APP_FLASH_ADDR, cfg.app_table.fw_size);
 80016d2:	f8d7 300a 	ldr.w	r3, [r7, #10]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4823      	ldr	r0, [pc, #140]	; (8001768 <app_validation+0xe4>)
 80016da:	f000 f8f5 	bl	80018c8 <ota_calcCRC>
 80016de:	63b8      	str	r0, [r7, #56]	; 0x38

	FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f001 fa70 	bl	8002bc8 <FLASH_WaitForLastOperation>

	// Verify the CRC
	if( cal_data_crc != cfg.app_table.fw_crc)
 80016e8:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80016ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d017      	beq.n	8001722 <app_validation+0x9e>
	{
		printf("CRC Mismatch!!! calc_crc = [0x%08lx], rec_crc = [0x%08lx]\r\nHALT...\r\n",
 80016f2:	f8d7 300e 	ldr.w	r3, [r7, #14]
 80016f6:	461a      	mov	r2, r3
 80016f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016fa:	481c      	ldr	r0, [pc, #112]	; (800176c <app_validation+0xe8>)
 80016fc:	f009 fcd2 	bl	800b0a4 <iprintf>
										cal_data_crc, cfg.app_table.fw_crc);

		cfg.app_table.is_this_slot_not_valid = 1u;
 8001700:	2301      	movs	r3, #1
 8001702:	723b      	strb	r3, [r7, #8]
		ret = write_cfg_to_flash( &cfg );
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff40 	bl	800158c <write_cfg_to_flash>
 800170c:	4603      	mov	r3, r0
 800170e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001716:	2b00      	cmp	r3, #0
 8001718:	d002      	beq.n	8001720 <app_validation+0x9c>
		{
			printf("Configuration Flash write Error\r\n");
 800171a:	4815      	ldr	r0, [pc, #84]	; (8001770 <app_validation+0xec>)
 800171c:	f009 fd48 	bl	800b1b0 <puts>
		}

		// TODO: Restore previous APP if APP Updated
		// At this time:
		while(1); //HALT
 8001720:	e7fe      	b.n	8001720 <app_validation+0x9c>
	}
	printf("Validation DONE!!!\r\n");
 8001722:	4814      	ldr	r0, [pc, #80]	; (8001774 <app_validation+0xf0>)
 8001724:	f009 fd44 	bl	800b1b0 <puts>

	if( is_app_updated ){
 8001728:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800172c:	2b00      	cmp	r3, #0
 800172e:	d011      	beq.n	8001754 <app_validation+0xd0>
		cfg.app_table.is_this_slot_active = 1u;
 8001730:	2301      	movs	r3, #1
 8001732:	727b      	strb	r3, [r7, #9]
		cfg.app_table.is_this_slot_not_valid = 0u;
 8001734:	2300      	movs	r3, #0
 8001736:	723b      	strb	r3, [r7, #8]

		ret = write_cfg_to_flash( &cfg );
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff26 	bl	800158c <write_cfg_to_flash>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if( ret != HAL_OK )
 8001746:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <app_validation+0xd0>
		{
			printf("Configuration Flash write Error\r\n");
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <app_validation+0xec>)
 8001750:	f009 fd2e 	bl	800b1b0 <puts>
		}

	}

}
 8001754:	bf00      	nop
 8001756:	3744      	adds	r7, #68	; 0x44
 8001758:	46bd      	mov	sp, r7
 800175a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800175c:	20000000 	.word	0x20000000
 8001760:	0800c2f4 	.word	0x0800c2f4
 8001764:	0800c30c 	.word	0x0800c30c
 8001768:	08020000 	.word	0x08020000
 800176c:	0800c31c 	.word	0x0800c31c
 8001770:	0800c364 	.word	0x0800c364
 8001774:	0800c388 	.word	0x0800c388

08001778 <backup_old_version>:
 * @brief backup current APP slot to backup Slot
 * @param none
 * @retval HAL_StatusTypeDef
 */
HAL_StatusTypeDef backup_old_version()
{
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do
	{
		ret = HAL_FLASH_Unlock();
 8001784:	f001 f9ee 	bl	8002b64 <HAL_FLASH_Unlock>
 8001788:	4603      	mov	r3, r0
 800178a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 800178e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001792:	2b00      	cmp	r3, #0
 8001794:	d159      	bne.n	800184a <backup_old_version+0xd2>
		{
			break;
		}

		// Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY);
 8001796:	f04f 30ff 	mov.w	r0, #4294967295
 800179a:	f001 fa15 	bl	8002bc8 <FLASH_WaitForLastOperation>

		// Erase the flash backup sector
		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t SectorError;

		EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
		EraseInitStruct.Sector			= OTA_SLOT_SECTOR;
 80017a2:	2311      	movs	r3, #17
 80017a4:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.NbSectors		= OTA_SLOT_NB_SECTOR;
 80017a6:	2307      	movs	r3, #7
 80017a8:	613b      	str	r3, [r7, #16]
		EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]

		// clear all flags before you write it to flash
		    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <backup_old_version+0xe8>)
 80017b0:	2273      	movs	r2, #115	; 0x73
 80017b2:	60da      	str	r2, [r3, #12]
		                FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR);

		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 80017b4:	463a      	mov	r2, r7
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	4611      	mov	r1, r2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 fb44 	bl	8002e48 <HAL_FLASHEx_Erase>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if( ret != HAL_OK )
 80017c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d13f      	bne.n	800184e <backup_old_version+0xd6>
		{
			break;
		}

		// Write the old app
		OTA_GNRL_CFG_ *cfg = (OTA_GNRL_CFG_ *)OTA_CFG_FLASH_ADDR;
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <backup_old_version+0xec>)
 80017d0:	61fb      	str	r3, [r7, #28]
		uint8_t *data = (uint8_t *) OTA_APP_FLASH_ADDR;
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <backup_old_version+0xf0>)
 80017d4:	61bb      	str	r3, [r7, #24]
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 80017d6:	2300      	movs	r3, #0
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	e01f      	b.n	800181c <backup_old_version+0xa4>
		{
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	f103 6101 	add.w	r1, r3, #135266304	; 0x8100000
 80017e2:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
									OTA_SLOT_FLASH_ADDR + i,
									data[i]);
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2200      	movs	r2, #0
 80017f2:	461c      	mov	r4, r3
 80017f4:	4615      	mov	r5, r2
 80017f6:	4622      	mov	r2, r4
 80017f8:	462b      	mov	r3, r5
 80017fa:	2000      	movs	r0, #0
 80017fc:	f001 f95e 	bl	8002abc <HAL_FLASH_Program>
 8001800:	4603      	mov	r3, r0
 8001802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( ret != HAL_OK )
 8001806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <backup_old_version+0x9e>
			{
				printf("Slot Flash Write Error\r\n");
 800180e:	4817      	ldr	r0, [pc, #92]	; (800186c <backup_old_version+0xf4>)
 8001810:	f009 fcce 	bl	800b1b0 <puts>
				break;
 8001814:	e008      	b.n	8001828 <backup_old_version+0xb0>
		for( uint32_t i = 0u; i<cfg->app_table.fw_size; i++ )
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	3301      	adds	r3, #1
 800181a:	623b      	str	r3, [r7, #32]
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8001822:	6a3a      	ldr	r2, [r7, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d3d9      	bcc.n	80017dc <backup_old_version+0x64>
			}
		}

	    //Check if the FLASH_FLAG_BSY.
	    FLASH_WaitForLastOperation( HAL_MAX_DELAY );
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f001 f9cc 	bl	8002bc8 <FLASH_WaitForLastOperation>

	    if( ret != HAL_OK )
 8001830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10c      	bne.n	8001852 <backup_old_version+0xda>
	    {
	      break;
	    }

	    ret = HAL_FLASH_Lock();
 8001838:	f001 f9b6 	bl	8002ba8 <HAL_FLASH_Lock>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	    if( ret != HAL_OK )
 8001842:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001846:	2b00      	cmp	r3, #0
 8001848:	e004      	b.n	8001854 <backup_old_version+0xdc>
			break;
 800184a:	bf00      	nop
 800184c:	e002      	b.n	8001854 <backup_old_version+0xdc>
			break;
 800184e:	bf00      	nop
 8001850:	e000      	b.n	8001854 <backup_old_version+0xdc>
	      break;
 8001852:	bf00      	nop
	    }


	}while(false);

	return ret;
 8001854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001858:	4618      	mov	r0, r3
 800185a:	3728      	adds	r7, #40	; 0x28
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	40023c00 	.word	0x40023c00
 8001864:	08010000 	.word	0x08010000
 8001868:	08020000 	.word	0x08020000
 800186c:	0800c39c 	.word	0x0800c39c

08001870 <ota_send_resp>:
 * @brief send response to host
 * @param huart uart handler
 * @param rsp ACK or NACK response
 * @retval none
 */
static void ota_send_resp(UART_HandleTypeDef *huart, uint8_t rsp){
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	70fb      	strb	r3, [r7, #3]
	OTA_RESP_ pack =
 800187c:	f107 030c 	add.w	r3, r7, #12
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	811a      	strh	r2, [r3, #8]
 8001888:	23aa      	movs	r3, #170	; 0xaa
 800188a:	733b      	strb	r3, [r7, #12]
 800188c:	2303      	movs	r3, #3
 800188e:	737b      	strb	r3, [r7, #13]
 8001890:	2301      	movs	r3, #1
 8001892:	81fb      	strh	r3, [r7, #14]
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	743b      	strb	r3, [r7, #16]
 8001898:	23bb      	movs	r3, #187	; 0xbb
 800189a:	757b      	strb	r3, [r7, #21]
	  .data_len		= 1u,
	  .status		= rsp,
	  .eof			= OTA_EOF
	};

	pack.crc = ota_calcCRC(&pack.status, 1);
 800189c:	f107 030c 	add.w	r3, r7, #12
 80018a0:	3304      	adds	r3, #4
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f80f 	bl	80018c8 <ota_calcCRC>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f8c7 3011 	str.w	r3, [r7, #17]

	//send respond
	HAL_UART_Transmit(huart, (uint8_t *)&pack, sizeof(OTA_RESP_),HAL_MAX_DELAY);
 80018b0:	f107 010c 	add.w	r1, r7, #12
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	220a      	movs	r2, #10
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f005 fb11 	bl	8006ee2 <HAL_UART_Transmit>

}
 80018c0:	bf00      	nop
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <ota_calcCRC>:
 * @param DataLength length of data
 * @retval CRC32
 */

uint32_t ota_calcCRC(uint8_t * pData, uint32_t DataLength)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 80018d8:	2300      	movs	r3, #0
 80018da:	613b      	str	r3, [r7, #16]
 80018dc:	e014      	b.n	8001908 <ota_calcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	0e1b      	lsrs	r3, r3, #24
 80018e2:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4413      	add	r3, r2
 80018ea:	781a      	ldrb	r2, [r3, #0]
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
 80018ee:	4053      	eors	r3, r2
 80018f0:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	021a      	lsls	r2, r3, #8
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	4909      	ldr	r1, [pc, #36]	; (8001920 <ota_calcCRC+0x58>)
 80018fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fe:	4053      	eors	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	3301      	adds	r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d3e6      	bcc.n	80018de <ota_calcCRC+0x16>
    }
    return Checksum;
 8001910:	697b      	ldr	r3, [r7, #20]
}
 8001912:	4618      	mov	r0, r3
 8001914:	371c      	adds	r7, #28
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	0800c3b8 	.word	0x0800c3b8

08001924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	607b      	str	r3, [r7, #4]
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <HAL_MspInit+0x4c>)
 8001934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_MspInit+0x4c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_MspInit+0x4c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800

08001974 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_CRC_MspInit+0x3c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10d      	bne.n	80019a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_CRC_MspInit+0x40>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <HAL_CRC_MspInit+0x40>)
 8001990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001994:	6313      	str	r3, [r2, #48]	; 0x30
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_CRC_MspInit+0x40>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023000 	.word	0x40023000
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_DMA2D_MspInit+0x48>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d115      	bne.n	80019f6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <HAL_DMA2D_MspInit+0x4c>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a0c      	ldr	r2, [pc, #48]	; (8001a04 <HAL_DMA2D_MspInit+0x4c>)
 80019d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_DMA2D_MspInit+0x4c>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	205a      	movs	r0, #90	; 0x5a
 80019ec:	f000 fe31 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80019f0:	205a      	movs	r0, #90	; 0x5a
 80019f2:	f000 fe4a 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80019f6:	bf00      	nop
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	4002b000 	.word	0x4002b000
 8001a04:	40023800 	.word	0x40023800

08001a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <HAL_I2C_MspInit+0xc4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d14b      	bne.n	8001ac2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a34:	f043 0304 	orr.w	r3, r3, #4
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b25      	ldr	r3, [pc, #148]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0304 	and.w	r3, r3, #4
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a20      	ldr	r2, [pc, #128]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a68:	2312      	movs	r3, #18
 8001a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a74:	2304      	movs	r3, #4
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4815      	ldr	r0, [pc, #84]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001a80:	f001 fb22 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8a:	2312      	movs	r3, #18
 8001a8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a96:	2304      	movs	r3, #4
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_I2C_MspInit+0xd0>)
 8001aa2:	f001 fb11 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3728      	adds	r7, #40	; 0x28
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40005c00 	.word	0x40005c00
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020000 	.word	0x40020000

08001adc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b09a      	sub	sp, #104	; 0x68
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	2230      	movs	r2, #48	; 0x30
 8001afa:	2100      	movs	r1, #0
 8001afc:	4618      	mov	r0, r3
 8001afe:	f009 f9e9 	bl	800aed4 <memset>
  if(hltdc->Instance==LTDC)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a85      	ldr	r2, [pc, #532]	; (8001d1c <HAL_LTDC_MspInit+0x240>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	f040 8102 	bne.w	8001d12 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b0e:	2308      	movs	r3, #8
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8001b12:	2331      	movs	r3, #49	; 0x31
 8001b14:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8001b16:	2302      	movs	r3, #2
 8001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 fa92 	bl	800604c <HAL_RCCEx_PeriphCLKConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001b2e:	f7ff f9b1 	bl	8000e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	623b      	str	r3, [r7, #32]
 8001b36:	4b7a      	ldr	r3, [pc, #488]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4a79      	ldr	r2, [pc, #484]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b40:	6453      	str	r3, [r2, #68]	; 0x44
 8001b42:	4b77      	ldr	r3, [pc, #476]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b4a:	623b      	str	r3, [r7, #32]
 8001b4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	4b73      	ldr	r3, [pc, #460]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a72      	ldr	r2, [pc, #456]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b58:	f043 0320 	orr.w	r3, r3, #32
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0320 	and.w	r3, r3, #32
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4b6c      	ldr	r3, [pc, #432]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a6b      	ldr	r2, [pc, #428]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b69      	ldr	r3, [pc, #420]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b65      	ldr	r3, [pc, #404]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a64      	ldr	r2, [pc, #400]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b62      	ldr	r3, [pc, #392]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b5e      	ldr	r3, [pc, #376]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a5d      	ldr	r2, [pc, #372]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b5b      	ldr	r3, [pc, #364]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001be4:	f043 0308 	orr.w	r3, r3, #8
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b4d      	ldr	r3, [pc, #308]	; (8001d20 <HAL_LTDC_MspInit+0x244>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c04:	2300      	movs	r3, #0
 8001c06:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c08:	230e      	movs	r3, #14
 8001c0a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c10:	4619      	mov	r1, r3
 8001c12:	4844      	ldr	r0, [pc, #272]	; (8001d24 <HAL_LTDC_MspInit+0x248>)
 8001c14:	f001 fa58 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001c18:	f641 0358 	movw	r3, #6232	; 0x1858
 8001c1c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c2a:	230e      	movs	r3, #14
 8001c2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c32:	4619      	mov	r1, r3
 8001c34:	483c      	ldr	r0, [pc, #240]	; (8001d28 <HAL_LTDC_MspInit+0x24c>)
 8001c36:	f001 fa47 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c4a:	2309      	movs	r3, #9
 8001c4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c52:	4619      	mov	r1, r3
 8001c54:	4835      	ldr	r0, [pc, #212]	; (8001d2c <HAL_LTDC_MspInit+0x250>)
 8001c56:	f001 fa37 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c5a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c5e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c6c:	230e      	movs	r3, #14
 8001c6e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c74:	4619      	mov	r1, r3
 8001c76:	482d      	ldr	r0, [pc, #180]	; (8001d2c <HAL_LTDC_MspInit+0x250>)
 8001c78:	f001 fa26 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c7c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c80:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c8e:	230e      	movs	r3, #14
 8001c90:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c96:	4619      	mov	r1, r3
 8001c98:	4825      	ldr	r0, [pc, #148]	; (8001d30 <HAL_LTDC_MspInit+0x254>)
 8001c9a:	f001 fa15 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c9e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001ca2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cac:	2300      	movs	r3, #0
 8001cae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cb0:	230e      	movs	r3, #14
 8001cb2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481e      	ldr	r0, [pc, #120]	; (8001d34 <HAL_LTDC_MspInit+0x258>)
 8001cbc:	f001 fa04 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001cc0:	2348      	movs	r3, #72	; 0x48
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cd0:	230e      	movs	r3, #14
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4817      	ldr	r0, [pc, #92]	; (8001d38 <HAL_LTDC_MspInit+0x25c>)
 8001cdc:	f001 f9f4 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ce0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ce4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <HAL_LTDC_MspInit+0x254>)
 8001cfe:	f001 f9e3 	bl	80030c8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2105      	movs	r1, #5
 8001d06:	2058      	movs	r0, #88	; 0x58
 8001d08:	f000 fca3 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d0c:	2058      	movs	r0, #88	; 0x58
 8001d0e:	f000 fcbc 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3768      	adds	r7, #104	; 0x68
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40016800 	.word	0x40016800
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40021400 	.word	0x40021400
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40020800 	.word	0x40020800
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_SPI_MspInit+0x84>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d12c      	bne.n	8001db8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a17      	ldr	r2, [pc, #92]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a10      	ldr	r2, [pc, #64]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d84:	f043 0320 	orr.w	r3, r3, #32
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_SPI_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001d96:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001da8:	2305      	movs	r3, #5
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	4619      	mov	r1, r3
 8001db2:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <HAL_SPI_MspInit+0x8c>)
 8001db4:	f001 f988 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001db8:	bf00      	nop
 8001dba:	3728      	adds	r7, #40	; 0x28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40015000 	.word	0x40015000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40021400 	.word	0x40021400

08001dcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	; (8001e08 <HAL_TIM_Base_MspInit+0x3c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d10d      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <HAL_TIM_Base_MspInit+0x40>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <HAL_TIM_Base_MspInit+0x40>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_TIM_Base_MspInit+0x40>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
 8001df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3714      	adds	r7, #20
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	40023800 	.word	0x40023800

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	; 0x30
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 031c 	add.w	r3, r7, #28
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a42      	ldr	r2, [pc, #264]	; (8001f38 <HAL_UART_MspInit+0x128>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d14b      	bne.n	8001eca <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a40      	ldr	r2, [pc, #256]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
 8001e42:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a39      	ldr	r2, [pc, #228]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e58:	f043 0304 	orr.w	r3, r3, #4
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a32      	ldr	r2, [pc, #200]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e9c:	f107 031c 	add.w	r3, r7, #28
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4827      	ldr	r0, [pc, #156]	; (8001f40 <HAL_UART_MspInit+0x130>)
 8001ea4:	f001 f910 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ea8:	2304      	movs	r3, #4
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4820      	ldr	r0, [pc, #128]	; (8001f44 <HAL_UART_MspInit+0x134>)
 8001ec4:	f001 f900 	bl	80030c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ec8:	e031      	b.n	8001f2e <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1e      	ldr	r2, [pc, #120]	; (8001f48 <HAL_UART_MspInit+0x138>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d12c      	bne.n	8001f2e <HAL_UART_MspInit+0x11e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee4:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6313      	str	r3, [r2, #48]	; 0x30
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_UART_MspInit+0x12c>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001f0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	4808      	ldr	r0, [pc, #32]	; (8001f4c <HAL_UART_MspInit+0x13c>)
 8001f2a:	f001 f8cd 	bl	80030c8 <HAL_GPIO_Init>
}
 8001f2e:	bf00      	nop
 8001f30:	3730      	adds	r7, #48	; 0x30
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40005000 	.word	0x40005000
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00
 8001f48:	40011000 	.word	0x40011000
 8001f4c:	40020000 	.word	0x40020000

08001f50 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001f64:	4b3b      	ldr	r3, [pc, #236]	; (8002054 <HAL_FMC_MspInit+0x104>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d16f      	bne.n	800204c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001f6c:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_FMC_MspInit+0x104>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <HAL_FMC_MspInit+0x108>)
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	4a37      	ldr	r2, [pc, #220]	; (8002058 <HAL_FMC_MspInit+0x108>)
 8001f7c:	f043 0301 	orr.w	r3, r3, #1
 8001f80:	6393      	str	r3, [r2, #56]	; 0x38
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <HAL_FMC_MspInit+0x108>)
 8001f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f92:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fa4:	1d3b      	adds	r3, r7, #4
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	482c      	ldr	r0, [pc, #176]	; (800205c <HAL_FMC_MspInit+0x10c>)
 8001faa:	f001 f88d 	bl	80030c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001fc2:	1d3b      	adds	r3, r7, #4
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4826      	ldr	r0, [pc, #152]	; (8002060 <HAL_FMC_MspInit+0x110>)
 8001fc8:	f001 f87e 	bl	80030c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001fcc:	f248 1333 	movw	r3, #33075	; 0x8133
 8001fd0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001fde:	230c      	movs	r3, #12
 8001fe0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481f      	ldr	r0, [pc, #124]	; (8002064 <HAL_FMC_MspInit+0x114>)
 8001fe8:	f001 f86e 	bl	80030c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001fec:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ff0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ffe:	230c      	movs	r3, #12
 8002000:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4818      	ldr	r0, [pc, #96]	; (8002068 <HAL_FMC_MspInit+0x118>)
 8002008:	f001 f85e 	bl	80030c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800200c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002010:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800201e:	230c      	movs	r3, #12
 8002020:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4811      	ldr	r0, [pc, #68]	; (800206c <HAL_FMC_MspInit+0x11c>)
 8002028:	f001 f84e 	bl	80030c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800202c:	2360      	movs	r3, #96	; 0x60
 800202e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800203c:	230c      	movs	r3, #12
 800203e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	4619      	mov	r1, r3
 8002044:	480a      	ldr	r0, [pc, #40]	; (8002070 <HAL_FMC_MspInit+0x120>)
 8002046:	f001 f83f 	bl	80030c8 <HAL_GPIO_Init>
 800204a:	e000      	b.n	800204e <HAL_FMC_MspInit+0xfe>
    return;
 800204c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	2000076c 	.word	0x2000076c
 8002058:	40023800 	.word	0x40023800
 800205c:	40021400 	.word	0x40021400
 8002060:	40020800 	.word	0x40020800
 8002064:	40021800 	.word	0x40021800
 8002068:	40021000 	.word	0x40021000
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40020400 	.word	0x40020400

08002074 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800207c:	f7ff ff68 	bl	8001f50 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_InitTick+0xe4>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a32      	ldr	r2, [pc, #200]	; (800216c <HAL_InitTick+0xe4>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_InitTick+0xe4>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020b4:	f107 0210 	add.w	r2, r7, #16
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 ff92 	bl	8005fe8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d103      	bne.n	80020d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80020ce:	f003 ff63 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80020d2:	6378      	str	r0, [r7, #52]	; 0x34
 80020d4:	e004      	b.n	80020e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80020d6:	f003 ff5f 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80020da:	4603      	mov	r3, r0
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80020e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e2:	4a23      	ldr	r2, [pc, #140]	; (8002170 <HAL_InitTick+0xe8>)
 80020e4:	fba2 2303 	umull	r2, r3, r2, r3
 80020e8:	0c9b      	lsrs	r3, r3, #18
 80020ea:	3b01      	subs	r3, #1
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <HAL_InitTick+0xec>)
 80020f0:	4a21      	ldr	r2, [pc, #132]	; (8002178 <HAL_InitTick+0xf0>)
 80020f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80020f4:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <HAL_InitTick+0xec>)
 80020f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80020fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80020fc:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <HAL_InitTick+0xec>)
 80020fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002100:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <HAL_InitTick+0xec>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_InitTick+0xec>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_InitTick+0xec>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002114:	4817      	ldr	r0, [pc, #92]	; (8002174 <HAL_InitTick+0xec>)
 8002116:	f004 fa16 	bl	8006546 <HAL_TIM_Base_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11b      	bne.n	8002160 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002128:	4812      	ldr	r0, [pc, #72]	; (8002174 <HAL_InitTick+0xec>)
 800212a:	f004 fa5b 	bl	80065e4 <HAL_TIM_Base_Start_IT>
 800212e:	4603      	mov	r3, r0
 8002130:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002134:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800213c:	2036      	movs	r0, #54	; 0x36
 800213e:	f000 faa4 	bl	800268a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d808      	bhi.n	800215a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	2036      	movs	r0, #54	; 0x36
 800214e:	f000 fa80 	bl	8002652 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <HAL_InitTick+0xf4>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e002      	b.n	8002160 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002160:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002164:	4618      	mov	r0, r3
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40023800 	.word	0x40023800
 8002170:	431bde83 	.word	0x431bde83
 8002174:	20000770 	.word	0x20000770
 8002178:	40001000 	.word	0x40001000
 800217c:	20000008 	.word	0x20000008

08002180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <NMI_Handler+0x4>

08002186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <MemManage_Handler+0x4>

08002192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <UsageFault_Handler+0x4>

0800219e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <TIM6_DAC_IRQHandler+0x10>)
 80021de:	f004 fa71 	bl	80066c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000770 	.word	0x20000770

080021ec <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <OTG_HS_IRQHandler+0x10>)
 80021f2:	f001 fb99 	bl	8003928 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000bbc 	.word	0x20000bbc

08002200 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <LTDC_IRQHandler+0x10>)
 8002206:	f002 ffbf 	bl	8005188 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000014c 	.word	0x2000014c

08002214 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <DMA2D_IRQHandler+0x10>)
 800221a:	f000 faad 	bl	8002778 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200000b8 	.word	0x200000b8

08002228 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	e00a      	b.n	8002250 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800223a:	f3af 8000 	nop.w
 800223e:	4601      	mov	r1, r0
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	b2ca      	uxtb	r2, r1
 8002248:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3301      	adds	r3, #1
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	429a      	cmp	r2, r3
 8002256:	dbf0      	blt.n	800223a <_read+0x12>
  }

  return len;
 8002258:	687b      	ldr	r3, [r7, #4]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e009      	b.n	8002288 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60ba      	str	r2, [r7, #8]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fdc9 	bl	8000e14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3301      	adds	r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbf1      	blt.n	8002274 <_write+0x12>
  }
  return len;
 8002290:	687b      	ldr	r3, [r7, #4]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <_close>:

int _close(int file)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022c2:	605a      	str	r2, [r3, #4]
  return 0;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <_isatty>:

int _isatty(int file)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800230c:	4a14      	ldr	r2, [pc, #80]	; (8002360 <_sbrk+0x5c>)
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <_sbrk+0x60>)
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <_sbrk+0x64>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002320:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_sbrk+0x64>)
 8002322:	4a12      	ldr	r2, [pc, #72]	; (800236c <_sbrk+0x68>)
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <_sbrk+0x64>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	429a      	cmp	r2, r3
 8002332:	d207      	bcs.n	8002344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002334:	f008 fd94 	bl	800ae60 <__errno>
 8002338:	4603      	mov	r3, r0
 800233a:	220c      	movs	r2, #12
 800233c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233e:	f04f 33ff 	mov.w	r3, #4294967295
 8002342:	e009      	b.n	8002358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <_sbrk+0x64>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_sbrk+0x64>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <_sbrk+0x64>)
 8002354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20030000 	.word	0x20030000
 8002364:	00000400 	.word	0x00000400
 8002368:	200007b8 	.word	0x200007b8
 800236c:	20000ed0 	.word	0x20000ed0

08002370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <SystemInit+0x20>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <SystemInit+0x20>)
 800237c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002380:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023cc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800239a:	490e      	ldr	r1, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800239c:	4a0e      	ldr	r2, [pc, #56]	; (80023d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a0:	e002      	b.n	80023a8 <LoopCopyDataInit>

080023a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a6:	3304      	adds	r3, #4

080023a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ac:	d3f9      	bcc.n	80023a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023b0:	4c0b      	ldr	r4, [pc, #44]	; (80023e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b4:	e001      	b.n	80023ba <LoopFillZerobss>

080023b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b8:	3204      	adds	r2, #4

080023ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023bc:	d3fb      	bcc.n	80023b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023be:	f7ff ffd7 	bl	8002370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023c2:	f008 fd53 	bl	800ae6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c6:	f7fe f8e5 	bl	8000594 <main>
  bx  lr    
 80023ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023cc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80023d8:	0800c878 	.word	0x0800c878
  ldr r2, =_sbss
 80023dc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80023e0:	20000ed0 	.word	0x20000ed0

080023e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e4:	e7fe      	b.n	80023e4 <ADC_IRQHandler>
	...

080023e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023ec:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <HAL_Init+0x40>)
 80023f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_Init+0x40>)
 80023fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_Init+0x40>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_Init+0x40>)
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f913 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	200f      	movs	r0, #15
 8002418:	f7ff fe36 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fa82 	bl	8001924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <HAL_IncTick+0x20>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_IncTick+0x24>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4413      	add	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_IncTick+0x24>)
 800243e:	6013      	str	r3, [r2, #0]
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	2000000c 	.word	0x2000000c
 8002450:	200007bc 	.word	0x200007bc

08002454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  return uwTick;
 8002458:	4b03      	ldr	r3, [pc, #12]	; (8002468 <HAL_GetTick+0x14>)
 800245a:	681b      	ldr	r3, [r3, #0]
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	200007bc 	.word	0x200007bc

0800246c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002474:	f7ff ffee 	bl	8002454 <HAL_GetTick>
 8002478:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d005      	beq.n	8002492 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_Delay+0x44>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002492:	bf00      	nop
 8002494:	f7ff ffde 	bl	8002454 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d8f7      	bhi.n	8002494 <HAL_Delay+0x28>
  {
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	2000000c 	.word	0x2000000c

080024b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c4:	4b0c      	ldr	r3, [pc, #48]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e6:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <__NVIC_SetPriorityGrouping+0x44>)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	60d3      	str	r3, [r2, #12]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_GetPriorityGrouping+0x18>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	f003 0307 	and.w	r3, r3, #7
}
 800250a:	4618      	mov	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002526:	2b00      	cmp	r3, #0
 8002528:	db0b      	blt.n	8002542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4907      	ldr	r1, [pc, #28]	; (8002550 <__NVIC_EnableIRQ+0x38>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	095b      	lsrs	r3, r3, #5
 8002538:	2001      	movs	r0, #1
 800253a:	fa00 f202 	lsl.w	r2, r0, r2
 800253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000e100 	.word	0xe000e100

08002554 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002564:	2b00      	cmp	r3, #0
 8002566:	db0a      	blt.n	800257e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	b2da      	uxtb	r2, r3
 800256c:	490c      	ldr	r1, [pc, #48]	; (80025a0 <__NVIC_SetPriority+0x4c>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	0112      	lsls	r2, r2, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	440b      	add	r3, r1
 8002578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800257c:	e00a      	b.n	8002594 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4908      	ldr	r1, [pc, #32]	; (80025a4 <__NVIC_SetPriority+0x50>)
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	3b04      	subs	r3, #4
 800258c:	0112      	lsls	r2, r2, #4
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	440b      	add	r3, r1
 8002592:	761a      	strb	r2, [r3, #24]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	e000e100 	.word	0xe000e100
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b089      	sub	sp, #36	; 0x24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	f1c3 0307 	rsb	r3, r3, #7
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	bf28      	it	cs
 80025c6:	2304      	movcs	r3, #4
 80025c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3304      	adds	r3, #4
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <NVIC_EncodePriority+0x30>
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	3b03      	subs	r3, #3
 80025d6:	e000      	b.n	80025da <NVIC_EncodePriority+0x32>
 80025d8:	2300      	movs	r3, #0
 80025da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	401a      	ands	r2, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025f0:	f04f 31ff 	mov.w	r1, #4294967295
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa01 f303 	lsl.w	r3, r1, r3
 80025fa:	43d9      	mvns	r1, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	4313      	orrs	r3, r2
         );
}
 8002602:	4618      	mov	r0, r3
 8002604:	3724      	adds	r7, #36	; 0x24
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002614:	f3bf 8f4f 	dsb	sy
}
 8002618:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800261a:	4b06      	ldr	r3, [pc, #24]	; (8002634 <__NVIC_SystemReset+0x24>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002622:	4904      	ldr	r1, [pc, #16]	; (8002634 <__NVIC_SystemReset+0x24>)
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <__NVIC_SystemReset+0x28>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800262a:	f3bf 8f4f 	dsb	sy
}
 800262e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002630:	bf00      	nop
 8002632:	e7fd      	b.n	8002630 <__NVIC_SystemReset+0x20>
 8002634:	e000ed00 	.word	0xe000ed00
 8002638:	05fa0004 	.word	0x05fa0004

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff35 	bl	80024b4 <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff4a 	bl	80024fc <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff9a 	bl	80025a8 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff69 	bl	8002554 <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff3d 	bl	8002518 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80026aa:	f7ff ffb1 	bl	8002610 <__NVIC_SystemReset>

080026ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e00e      	b.n	80026de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	795b      	ldrb	r3, [r3, #5]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff f94f 	bl	8001974 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e03b      	b.n	8002770 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d106      	bne.n	8002712 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff f953 	bl	80019b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	f023 0107 	bic.w	r1, r3, #7
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	430a      	orrs	r2, r1
 8002744:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002750:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	68d1      	ldr	r1, [r2, #12]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	6812      	ldr	r2, [r2, #0]
 800275c:	430b      	orrs	r3, r1
 800275e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d026      	beq.n	80027e8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b8:	f043 0201 	orr.w	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2201      	movs	r2, #1
 80027c6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2204      	movs	r2, #4
 80027cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d026      	beq.n	8002840 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d021      	beq.n	8002840 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2220      	movs	r2, #32
 8002812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	f043 0202 	orr.w	r2, r3, #2
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2204      	movs	r2, #4
 8002824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d026      	beq.n	8002898 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002850:	2b00      	cmp	r3, #0
 8002852:	d021      	beq.n	8002898 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2204      	movs	r2, #4
 800287c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d013      	beq.n	80028ca <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ba:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2204      	movs	r2, #4
 80028c2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f853 	bl	8002970 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d024      	beq.n	800291e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01f      	beq.n	800291e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ec:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2202      	movs	r2, #2
 80028f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0310 	and.w	r3, r3, #16
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01f      	beq.n	8002968 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002940:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2210      	movs	r2, #16
 8002948:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f80e 	bl	8002984 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_DMA2D_ConfigLayer+0x20>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e079      	b.n	8002aac <HAL_DMA2D_ConfigLayer+0x114>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2202      	movs	r2, #2
 80029c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	3318      	adds	r3, #24
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	041b      	lsls	r3, r3, #16
 80029de:	4313      	orrs	r3, r2
 80029e0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <HAL_DMA2D_ConfigLayer+0x120>)
 80029e4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2b0a      	cmp	r3, #10
 80029ec:	d003      	beq.n	80029f6 <HAL_DMA2D_ConfigLayer+0x5e>
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b09      	cmp	r3, #9
 80029f4:	d107      	bne.n	8002a06 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	e005      	b.n	8002a12 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d120      	bne.n	8002a5a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	43db      	mvns	r3, r3
 8002a22:	ea02 0103 	and.w	r1, r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b0a      	cmp	r3, #10
 8002a40:	d003      	beq.n	8002a4a <HAL_DMA2D_ConfigLayer+0xb2>
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	d127      	bne.n	8002a9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
 8002a58:	e01f      	b.n	8002a9a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69da      	ldr	r2, [r3, #28]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	ea02 0103 	and.w	r1, r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	2b0a      	cmp	r3, #10
 8002a82:	d003      	beq.n	8002a8c <HAL_DMA2D_ConfigLayer+0xf4>
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b09      	cmp	r3, #9
 8002a8a:	d106      	bne.n	8002a9a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002a98:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	ff03000f 	.word	0xff03000f

08002abc <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <HAL_FLASH_Program+0xa0>)
 8002ad0:	7e1b      	ldrb	r3, [r3, #24]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_FLASH_Program+0x1e>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e03b      	b.n	8002b52 <HAL_FLASH_Program+0x96>
 8002ada:	4b20      	ldr	r3, [pc, #128]	; (8002b5c <HAL_FLASH_Program+0xa0>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ae0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ae4:	f000 f870 	bl	8002bc8 <FLASH_WaitForLastOperation>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d12b      	bne.n	8002b4a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002af8:	783b      	ldrb	r3, [r7, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	68b8      	ldr	r0, [r7, #8]
 8002afe:	f000 f91b 	bl	8002d38 <FLASH_Program_Byte>
 8002b02:	e016      	b.n	8002b32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002b0a:	883b      	ldrh	r3, [r7, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	68b8      	ldr	r0, [r7, #8]
 8002b10:	f000 f8ee 	bl	8002cf0 <FLASH_Program_HalfWord>
 8002b14:	e00d      	b.n	8002b32 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d105      	bne.n	8002b28 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4619      	mov	r1, r3
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f000 f8c3 	bl	8002cac <FLASH_Program_Word>
 8002b26:	e004      	b.n	8002b32 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b2c:	68b8      	ldr	r0, [r7, #8]
 8002b2e:	f000 f88b 	bl	8002c48 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002b32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002b36:	f000 f847 	bl	8002bc8 <FLASH_WaitForLastOperation>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_FLASH_Program+0xa4>)
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_FLASH_Program+0xa4>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002b4a:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <HAL_FLASH_Program+0xa0>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	200007c0 	.word	0x200007c0
 8002b60:	40023c00 	.word	0x40023c00

08002b64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b6e:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <HAL_FLASH_Unlock+0x38>)
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da0b      	bge.n	8002b8e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_FLASH_Unlock+0x38>)
 8002b78:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_FLASH_Unlock+0x3c>)
 8002b7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002b7c:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <HAL_FLASH_Unlock+0x38>)
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <HAL_FLASH_Unlock+0x40>)
 8002b80:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_FLASH_Unlock+0x38>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da01      	bge.n	8002b8e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40023c00 	.word	0x40023c00
 8002ba0:	45670123 	.word	0x45670123
 8002ba4:	cdef89ab 	.word	0xcdef89ab

08002ba8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_FLASH_Lock+0x1c>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4a04      	ldr	r2, [pc, #16]	; (8002bc4 <HAL_FLASH_Lock+0x1c>)
 8002bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40023c00 	.word	0x40023c00

08002bc8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <FLASH_WaitForLastOperation+0x78>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bda:	f7ff fc3b 	bl	8002454 <HAL_GetTick>
 8002bde:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002be0:	e010      	b.n	8002c04 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d00c      	beq.n	8002c04 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <FLASH_WaitForLastOperation+0x38>
 8002bf0:	f7ff fc30 	bl	8002454 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d201      	bcs.n	8002c04 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e019      	b.n	8002c38 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <FLASH_WaitForLastOperation+0x7c>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1e8      	bne.n	8002be2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <FLASH_WaitForLastOperation+0x7c>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <FLASH_WaitForLastOperation+0x7c>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <FLASH_WaitForLastOperation+0x7c>)
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002c2e:	f000 f8a5 	bl	8002d7c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
  
}  
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	200007c0 	.word	0x200007c0
 8002c44:	40023c00 	.word	0x40023c00

08002c48 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002c60:	4b11      	ldr	r3, [pc, #68]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	4a10      	ldr	r2, [pc, #64]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c66:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <FLASH_Program_DoubleWord+0x60>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8002c7e:	f3bf 8f6f 	isb	sy
}
 8002c82:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002c84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	000a      	movs	r2, r1
 8002c92:	2300      	movs	r3, #0
 8002c94:	68f9      	ldr	r1, [r7, #12]
 8002c96:	3104      	adds	r1, #4
 8002c98:	4613      	mov	r3, r2
 8002c9a:	600b      	str	r3, [r1, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40023c00 	.word	0x40023c00

08002cac <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	4a06      	ldr	r2, [pc, #24]	; (8002cec <FLASH_Program_Word+0x40>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	601a      	str	r2, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40023c00 	.word	0x40023c00

08002cf0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	4a0c      	ldr	r2, [pc, #48]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d14:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <FLASH_Program_HalfWord+0x44>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	801a      	strh	r2, [r3, #0]
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00

08002d38 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	4a0b      	ldr	r2, [pc, #44]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <FLASH_Program_Byte+0x40>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	701a      	strb	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023c00 	.word	0x40023c00

08002d7c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002d80:	4b2f      	ldr	r3, [pc, #188]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	f043 0310 	orr.w	r3, r3, #16
 8002d94:	4a2b      	ldr	r2, [pc, #172]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002d96:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f003 0320 	and.w	r3, r3, #32
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d008      	beq.n	8002dbc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f043 0308 	orr.w	r3, r3, #8
 8002db2:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002db4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002db8:	2220      	movs	r2, #32
 8002dba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002dc8:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002dd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002dd6:	2240      	movs	r2, #64	; 0x40
 8002dd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002dda:	4b19      	ldr	r3, [pc, #100]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f043 0302 	orr.w	r3, r3, #2
 8002dee:	4a15      	ldr	r2, [pc, #84]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002df0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002df2:	4b13      	ldr	r3, [pc, #76]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f043 0301 	orr.w	r3, r3, #1
 8002e0c:	4a0d      	ldr	r2, [pc, #52]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002e0e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e16:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002e18:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002e24:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <FLASH_SetErrorCode+0xc8>)
 8002e2e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <FLASH_SetErrorCode+0xc4>)
 8002e32:	2202      	movs	r2, #2
 8002e34:	60da      	str	r2, [r3, #12]
  }
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40023c00 	.word	0x40023c00
 8002e44:	200007c0 	.word	0x200007c0

08002e48 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_FLASHEx_Erase+0xdc>)
 8002e5c:	7e1b      	ldrb	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_FLASHEx_Erase+0x1e>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e05a      	b.n	8002f1c <HAL_FLASHEx_Erase+0xd4>
 8002e66:	4b2f      	ldr	r3, [pc, #188]	; (8002f24 <HAL_FLASHEx_Erase+0xdc>)
 8002e68:	2201      	movs	r2, #1
 8002e6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002e6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002e70:	f7ff feaa 	bl	8002bc8 <FLASH_WaitForLastOperation>
 8002e74:	4603      	mov	r3, r0
 8002e76:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d14a      	bne.n	8002f14 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d117      	bne.n	8002ebe <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f000 f846 	bl	8002f2c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ea0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ea4:	f7ff fe90 	bl	8002bc8 <FLASH_WaitForLastOperation>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_FLASHEx_Erase+0xe0>)
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_FLASHEx_Erase+0xe0>)
 8002eb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002eb6:	f023 0304 	bic.w	r3, r3, #4
 8002eba:	6113      	str	r3, [r2, #16]
 8002ebc:	e028      	b.n	8002f10 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]
 8002ec4:	e01c      	b.n	8002f00 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	4619      	mov	r1, r3
 8002ece:	68b8      	ldr	r0, [r7, #8]
 8002ed0:	f000 f866 	bl	8002fa0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002ed4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002ed8:	f7ff fe76 	bl	8002bc8 <FLASH_WaitForLastOperation>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_FLASHEx_Erase+0xe0>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	4a10      	ldr	r2, [pc, #64]	; (8002f28 <HAL_FLASHEx_Erase+0xe0>)
 8002ee6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002eea:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	601a      	str	r2, [r3, #0]
          break;
 8002ef8:	e00a      	b.n	8002f10 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d3da      	bcc.n	8002ec6 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8002f10:	f000 f894 	bl	800303c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <HAL_FLASHEx_Erase+0xdc>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	761a      	strb	r2, [r3, #24]

  return status;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200007c0 	.word	0x200007c0
 8002f28:	40023c00 	.word	0x40023c00

08002f2c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002f38:	4b18      	ldr	r3, [pc, #96]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	4a17      	ldr	r2, [pc, #92]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d108      	bne.n	8002f5c <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6113      	str	r3, [r2, #16]
 8002f5a:	e00f      	b.n	8002f7c <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d106      	bne.n	8002f70 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8002f62:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f68:	f043 0304 	orr.w	r3, r3, #4
 8002f6c:	6113      	str	r3, [r2, #16]
 8002f6e:	e005      	b.n	8002f7c <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8002f70:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f7a:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002f7c:	4b07      	ldr	r3, [pc, #28]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	021b      	lsls	r3, r3, #8
 8002f84:	4313      	orrs	r3, r2
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <FLASH_MassErase+0x70>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6113      	str	r3, [r2, #16]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00

08002fa0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d102      	bne.n	8002fbc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e010      	b.n	8002fde <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d103      	bne.n	8002fca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002fc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e009      	b.n	8002fde <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002fca:	78fb      	ldrb	r3, [r7, #3]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d103      	bne.n	8002fd8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002fd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e002      	b.n	8002fde <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002fd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0b      	cmp	r3, #11
 8002fe2:	d902      	bls.n	8002fea <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002fea:	4b13      	ldr	r3, [pc, #76]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	490f      	ldr	r1, [pc, #60]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	4a0c      	ldr	r2, [pc, #48]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8003008:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800300c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800300e:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4313      	orrs	r3, r2
 8003018:	4a07      	ldr	r2, [pc, #28]	; (8003038 <FLASH_Erase_Sector+0x98>)
 800301a:	f043 0302 	orr.w	r3, r3, #2
 800301e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <FLASH_Erase_Sector+0x98>)
 8003026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302a:	6113      	str	r3, [r2, #16]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	40023c00 	.word	0x40023c00

0800303c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003040:	4b20      	ldr	r3, [pc, #128]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003048:	2b00      	cmp	r3, #0
 800304a:	d017      	beq.n	800307c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1c      	ldr	r2, [pc, #112]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003052:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003056:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800305e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a16      	ldr	r2, [pc, #88]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800306a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800306e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0d      	ldr	r2, [pc, #52]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800308e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <FLASH_FlushCaches+0x88>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <FLASH_FlushCaches+0x88>)
 800309a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <FLASH_FlushCaches+0x88>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a07      	ldr	r2, [pc, #28]	; (80030c4 <FLASH_FlushCaches+0x88>)
 80030a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <FLASH_FlushCaches+0x88>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <FLASH_FlushCaches+0x88>)
 80030b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030b6:	6013      	str	r3, [r2, #0]
  }
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40023c00 	.word	0x40023c00

080030c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	; 0x24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	e177      	b.n	80033d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e4:	2201      	movs	r2, #1
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4013      	ands	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	f040 8166 	bne.w	80033ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f003 0303 	and.w	r3, r3, #3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d005      	beq.n	800311a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003116:	2b02      	cmp	r3, #2
 8003118:	d130      	bne.n	800317c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	2203      	movs	r2, #3
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003150:	2201      	movs	r2, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 0201 	and.w	r2, r3, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b03      	cmp	r3, #3
 8003186:	d017      	beq.n	80031b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4013      	ands	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d123      	bne.n	800320c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	08da      	lsrs	r2, r3, #3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3208      	adds	r2, #8
 80031cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	220f      	movs	r2, #15
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	69b9      	ldr	r1, [r7, #24]
 8003208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80c0 	beq.w	80033ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	4b66      	ldr	r3, [pc, #408]	; (80033ec <HAL_GPIO_Init+0x324>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003256:	4a65      	ldr	r2, [pc, #404]	; (80033ec <HAL_GPIO_Init+0x324>)
 8003258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	4b63      	ldr	r3, [pc, #396]	; (80033ec <HAL_GPIO_Init+0x324>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326a:	4a61      	ldr	r2, [pc, #388]	; (80033f0 <HAL_GPIO_Init+0x328>)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	3302      	adds	r3, #2
 8003272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	220f      	movs	r2, #15
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a58      	ldr	r2, [pc, #352]	; (80033f4 <HAL_GPIO_Init+0x32c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d037      	beq.n	8003306 <HAL_GPIO_Init+0x23e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a57      	ldr	r2, [pc, #348]	; (80033f8 <HAL_GPIO_Init+0x330>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d031      	beq.n	8003302 <HAL_GPIO_Init+0x23a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a56      	ldr	r2, [pc, #344]	; (80033fc <HAL_GPIO_Init+0x334>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d02b      	beq.n	80032fe <HAL_GPIO_Init+0x236>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_GPIO_Init+0x338>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d025      	beq.n	80032fa <HAL_GPIO_Init+0x232>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a54      	ldr	r2, [pc, #336]	; (8003404 <HAL_GPIO_Init+0x33c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01f      	beq.n	80032f6 <HAL_GPIO_Init+0x22e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a53      	ldr	r2, [pc, #332]	; (8003408 <HAL_GPIO_Init+0x340>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x22a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_GPIO_Init+0x344>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x226>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a51      	ldr	r2, [pc, #324]	; (8003410 <HAL_GPIO_Init+0x348>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x222>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a50      	ldr	r2, [pc, #320]	; (8003414 <HAL_GPIO_Init+0x34c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x21e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4f      	ldr	r2, [pc, #316]	; (8003418 <HAL_GPIO_Init+0x350>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x21a>
 80032de:	2309      	movs	r3, #9
 80032e0:	e012      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032e2:	230a      	movs	r3, #10
 80032e4:	e010      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032e6:	2308      	movs	r3, #8
 80032e8:	e00e      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e00c      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032ee:	2306      	movs	r3, #6
 80032f0:	e00a      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032f2:	2305      	movs	r3, #5
 80032f4:	e008      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032f6:	2304      	movs	r3, #4
 80032f8:	e006      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032fa:	2303      	movs	r3, #3
 80032fc:	e004      	b.n	8003308 <HAL_GPIO_Init+0x240>
 80032fe:	2302      	movs	r3, #2
 8003300:	e002      	b.n	8003308 <HAL_GPIO_Init+0x240>
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <HAL_GPIO_Init+0x240>
 8003306:	2300      	movs	r3, #0
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	f002 0203 	and.w	r2, r2, #3
 800330e:	0092      	lsls	r2, r2, #2
 8003310:	4093      	lsls	r3, r2
 8003312:	69ba      	ldr	r2, [r7, #24]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003318:	4935      	ldr	r1, [pc, #212]	; (80033f0 <HAL_GPIO_Init+0x328>)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	089b      	lsrs	r3, r3, #2
 800331e:	3302      	adds	r3, #2
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003326:	4b3d      	ldr	r3, [pc, #244]	; (800341c <HAL_GPIO_Init+0x354>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334a:	4a34      	ldr	r2, [pc, #208]	; (800341c <HAL_GPIO_Init+0x354>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_GPIO_Init+0x354>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003374:	4a29      	ldr	r2, [pc, #164]	; (800341c <HAL_GPIO_Init+0x354>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337a:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_GPIO_Init+0x354>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800339e:	4a1f      	ldr	r2, [pc, #124]	; (800341c <HAL_GPIO_Init+0x354>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_GPIO_Init+0x354>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033c8:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_GPIO_Init+0x354>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3301      	adds	r3, #1
 80033d2:	61fb      	str	r3, [r7, #28]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b0f      	cmp	r3, #15
 80033d8:	f67f ae84 	bls.w	80030e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3724      	adds	r7, #36	; 0x24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40013800 	.word	0x40013800
 80033f4:	40020000 	.word	0x40020000
 80033f8:	40020400 	.word	0x40020400
 80033fc:	40020800 	.word	0x40020800
 8003400:	40020c00 	.word	0x40020c00
 8003404:	40021000 	.word	0x40021000
 8003408:	40021400 	.word	0x40021400
 800340c:	40021800 	.word	0x40021800
 8003410:	40021c00 	.word	0x40021c00
 8003414:	40022000 	.word	0x40022000
 8003418:	40022400 	.word	0x40022400
 800341c:	40013c00 	.word	0x40013c00

08003420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	807b      	strh	r3, [r7, #2]
 800342c:	4613      	mov	r3, r2
 800342e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003430:	787b      	ldrb	r3, [r7, #1]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800343c:	e003      	b.n	8003446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003454:	b08f      	sub	sp, #60	; 0x3c
 8003456:	af0a      	add	r7, sp, #40	; 0x28
 8003458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e054      	b.n	800350e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f007 fa3e 	bl	800a900 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2203      	movs	r2, #3
 8003488:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d102      	bne.n	800349e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fa6c 	bl	8007980 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	687e      	ldr	r6, [r7, #4]
 80034b0:	466d      	mov	r5, sp
 80034b2:	f106 0410 	add.w	r4, r6, #16
 80034b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80034c6:	1d33      	adds	r3, r6, #4
 80034c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ca:	6838      	ldr	r0, [r7, #0]
 80034cc:	f004 f9e6 	bl	800789c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f004 fa63 	bl	80079a2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	687e      	ldr	r6, [r7, #4]
 80034e4:	466d      	mov	r5, sp
 80034e6:	f106 0410 	add.w	r4, r6, #16
 80034ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80034fa:	1d33      	adds	r3, r6, #4
 80034fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034fe:	6838      	ldr	r0, [r7, #0]
 8003500:	f004 fbec 	bl	8007cdc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3714      	adds	r7, #20
 8003512:	46bd      	mov	sp, r7
 8003514:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003516 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003516:	b590      	push	{r4, r7, lr}
 8003518:	b089      	sub	sp, #36	; 0x24
 800351a:	af04      	add	r7, sp, #16
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	461a      	mov	r2, r3
 8003524:	4603      	mov	r3, r0
 8003526:	70fb      	strb	r3, [r7, #3]
 8003528:	460b      	mov	r3, r1
 800352a:	70bb      	strb	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_HCD_HC_Init+0x28>
 800353a:	2302      	movs	r3, #2
 800353c:	e076      	b.n	800362c <HAL_HCD_HC_Init+0x116>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	212c      	movs	r1, #44	; 0x2c
 800354c:	fb01 f303 	mul.w	r3, r1, r3
 8003550:	4413      	add	r3, r2
 8003552:	333d      	adds	r3, #61	; 0x3d
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3338      	adds	r3, #56	; 0x38
 8003566:	787a      	ldrb	r2, [r7, #1]
 8003568:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3340      	adds	r3, #64	; 0x40
 8003578:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800357a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	212c      	movs	r1, #44	; 0x2c
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4413      	add	r3, r2
 8003588:	3339      	adds	r3, #57	; 0x39
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	333f      	adds	r3, #63	; 0x3f
 800359c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80035a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	78ba      	ldrb	r2, [r7, #2]
 80035a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035aa:	b2d0      	uxtb	r0, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	333a      	adds	r3, #58	; 0x3a
 80035b8:	4602      	mov	r2, r0
 80035ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80035bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	da09      	bge.n	80035d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80035c4:	78fb      	ldrb	r3, [r7, #3]
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	212c      	movs	r1, #44	; 0x2c
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	4413      	add	r3, r2
 80035d0:	333b      	adds	r3, #59	; 0x3b
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e008      	b.n	80035ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	333b      	adds	r3, #59	; 0x3b
 80035e6:	2200      	movs	r2, #0
 80035e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80035ea:	78fb      	ldrb	r3, [r7, #3]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	333c      	adds	r3, #60	; 0x3c
 80035f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80035fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	787c      	ldrb	r4, [r7, #1]
 8003604:	78ba      	ldrb	r2, [r7, #2]
 8003606:	78f9      	ldrb	r1, [r7, #3]
 8003608:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800360a:	9302      	str	r3, [sp, #8]
 800360c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003616:	9300      	str	r3, [sp, #0]
 8003618:	4623      	mov	r3, r4
 800361a:	f004 fce5 	bl	8007fe8 <USB_HC_Init>
 800361e:	4603      	mov	r3, r0
 8003620:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800362a:	7bfb      	ldrb	r3, [r7, #15]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	bd90      	pop	{r4, r7, pc}

08003634 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003640:	2300      	movs	r3, #0
 8003642:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_HCD_HC_Halt+0x1e>
 800364e:	2302      	movs	r3, #2
 8003650:	e00f      	b.n	8003672 <HAL_HCD_HC_Halt+0x3e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f004 ff35 	bl	80084d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	4608      	mov	r0, r1
 8003686:	4611      	mov	r1, r2
 8003688:	461a      	mov	r2, r3
 800368a:	4603      	mov	r3, r0
 800368c:	70fb      	strb	r3, [r7, #3]
 800368e:	460b      	mov	r3, r1
 8003690:	70bb      	strb	r3, [r7, #2]
 8003692:	4613      	mov	r3, r2
 8003694:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003696:	78fb      	ldrb	r3, [r7, #3]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	212c      	movs	r1, #44	; 0x2c
 800369c:	fb01 f303 	mul.w	r3, r1, r3
 80036a0:	4413      	add	r3, r2
 80036a2:	333b      	adds	r3, #59	; 0x3b
 80036a4:	78ba      	ldrb	r2, [r7, #2]
 80036a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036a8:	78fb      	ldrb	r3, [r7, #3]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	333f      	adds	r3, #63	; 0x3f
 80036b6:	787a      	ldrb	r2, [r7, #1]
 80036b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80036ba:	7c3b      	ldrb	r3, [r7, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d112      	bne.n	80036e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80036c0:	78fb      	ldrb	r3, [r7, #3]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3342      	adds	r3, #66	; 0x42
 80036ce:	2203      	movs	r2, #3
 80036d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80036d2:	78fb      	ldrb	r3, [r7, #3]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	212c      	movs	r1, #44	; 0x2c
 80036d8:	fb01 f303 	mul.w	r3, r1, r3
 80036dc:	4413      	add	r3, r2
 80036de:	333d      	adds	r3, #61	; 0x3d
 80036e0:	7f3a      	ldrb	r2, [r7, #28]
 80036e2:	701a      	strb	r2, [r3, #0]
 80036e4:	e008      	b.n	80036f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3342      	adds	r3, #66	; 0x42
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	f200 80c6 	bhi.w	800388c <HAL_HCD_HC_SubmitRequest+0x210>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	08003719 	.word	0x08003719
 800370c:	08003879 	.word	0x08003879
 8003710:	0800377d 	.word	0x0800377d
 8003714:	080037fb 	.word	0x080037fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003718:	7c3b      	ldrb	r3, [r7, #16]
 800371a:	2b01      	cmp	r3, #1
 800371c:	f040 80b8 	bne.w	8003890 <HAL_HCD_HC_SubmitRequest+0x214>
 8003720:	78bb      	ldrb	r3, [r7, #2]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80b4 	bne.w	8003890 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003728:	8b3b      	ldrh	r3, [r7, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	212c      	movs	r1, #44	; 0x2c
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	4413      	add	r3, r2
 800373a:	3355      	adds	r3, #85	; 0x55
 800373c:	2201      	movs	r2, #1
 800373e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3355      	adds	r3, #85	; 0x55
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	212c      	movs	r1, #44	; 0x2c
 800375a:	fb01 f303 	mul.w	r3, r1, r3
 800375e:	4413      	add	r3, r2
 8003760:	3342      	adds	r3, #66	; 0x42
 8003762:	2200      	movs	r2, #0
 8003764:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003766:	e093      	b.n	8003890 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3342      	adds	r3, #66	; 0x42
 8003776:	2202      	movs	r2, #2
 8003778:	701a      	strb	r2, [r3, #0]
      break;
 800377a:	e089      	b.n	8003890 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800377c:	78bb      	ldrb	r3, [r7, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11d      	bne.n	80037be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3355      	adds	r3, #85	; 0x55
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d109      	bne.n	80037aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	3342      	adds	r3, #66	; 0x42
 80037a4:	2200      	movs	r2, #0
 80037a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80037a8:	e073      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	3342      	adds	r3, #66	; 0x42
 80037b8:	2202      	movs	r2, #2
 80037ba:	701a      	strb	r2, [r3, #0]
      break;
 80037bc:	e069      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	212c      	movs	r1, #44	; 0x2c
 80037c4:	fb01 f303 	mul.w	r3, r1, r3
 80037c8:	4413      	add	r3, r2
 80037ca:	3354      	adds	r3, #84	; 0x54
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	212c      	movs	r1, #44	; 0x2c
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3342      	adds	r3, #66	; 0x42
 80037e0:	2200      	movs	r2, #0
 80037e2:	701a      	strb	r2, [r3, #0]
      break;
 80037e4:	e055      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	3342      	adds	r3, #66	; 0x42
 80037f4:	2202      	movs	r2, #2
 80037f6:	701a      	strb	r2, [r3, #0]
      break;
 80037f8:	e04b      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80037fa:	78bb      	ldrb	r3, [r7, #2]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d11d      	bne.n	800383c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003800:	78fb      	ldrb	r3, [r7, #3]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	212c      	movs	r1, #44	; 0x2c
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	4413      	add	r3, r2
 800380c:	3355      	adds	r3, #85	; 0x55
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	212c      	movs	r1, #44	; 0x2c
 800381a:	fb01 f303 	mul.w	r3, r1, r3
 800381e:	4413      	add	r3, r2
 8003820:	3342      	adds	r3, #66	; 0x42
 8003822:	2200      	movs	r2, #0
 8003824:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003826:	e034      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	212c      	movs	r1, #44	; 0x2c
 800382e:	fb01 f303 	mul.w	r3, r1, r3
 8003832:	4413      	add	r3, r2
 8003834:	3342      	adds	r3, #66	; 0x42
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]
      break;
 800383a:	e02a      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	3354      	adds	r3, #84	; 0x54
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	3342      	adds	r3, #66	; 0x42
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
      break;
 8003862:	e016      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003864:	78fb      	ldrb	r3, [r7, #3]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	212c      	movs	r1, #44	; 0x2c
 800386a:	fb01 f303 	mul.w	r3, r1, r3
 800386e:	4413      	add	r3, r2
 8003870:	3342      	adds	r3, #66	; 0x42
 8003872:	2202      	movs	r2, #2
 8003874:	701a      	strb	r2, [r3, #0]
      break;
 8003876:	e00c      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	212c      	movs	r1, #44	; 0x2c
 800387e:	fb01 f303 	mul.w	r3, r1, r3
 8003882:	4413      	add	r3, r2
 8003884:	3342      	adds	r3, #66	; 0x42
 8003886:	2200      	movs	r2, #0
 8003888:	701a      	strb	r2, [r3, #0]
      break;
 800388a:	e002      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003890:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3344      	adds	r3, #68	; 0x44
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	8b3a      	ldrh	r2, [r7, #24]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	202c      	movs	r0, #44	; 0x2c
 80038ac:	fb00 f303 	mul.w	r3, r0, r3
 80038b0:	440b      	add	r3, r1
 80038b2:	334c      	adds	r3, #76	; 0x4c
 80038b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	212c      	movs	r1, #44	; 0x2c
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	4413      	add	r3, r2
 80038c2:	3360      	adds	r3, #96	; 0x60
 80038c4:	2200      	movs	r2, #0
 80038c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	212c      	movs	r1, #44	; 0x2c
 80038ce:	fb01 f303 	mul.w	r3, r1, r3
 80038d2:	4413      	add	r3, r2
 80038d4:	3350      	adds	r3, #80	; 0x50
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80038da:	78fb      	ldrb	r3, [r7, #3]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	212c      	movs	r1, #44	; 0x2c
 80038e0:	fb01 f303 	mul.w	r3, r1, r3
 80038e4:	4413      	add	r3, r2
 80038e6:	3339      	adds	r3, #57	; 0x39
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	212c      	movs	r1, #44	; 0x2c
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	3361      	adds	r3, #97	; 0x61
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	78fb      	ldrb	r3, [r7, #3]
 8003904:	222c      	movs	r2, #44	; 0x2c
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	3338      	adds	r3, #56	; 0x38
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	18d1      	adds	r1, r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	f004 fc88 	bl	800822c <USB_HC_StartXfer>
 800391c:	4603      	mov	r3, r0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop

08003928 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f004 f989 	bl	8007c56 <USB_GetMode>
 8003944:	4603      	mov	r3, r0
 8003946:	2b01      	cmp	r3, #1
 8003948:	f040 80f6 	bne.w	8003b38 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f004 f96d 	bl	8007c30 <USB_ReadInterrupts>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80ec 	beq.w	8003b36 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f004 f964 	bl	8007c30 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800396e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003972:	d104      	bne.n	800397e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800397c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f004 f954 	bl	8007c30 <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003992:	d104      	bne.n	800399e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800399c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 f944 	bl	8007c30 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b2:	d104      	bne.n	80039be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80039bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f004 f934 	bl	8007c30 <USB_ReadInterrupts>
 80039c8:	4603      	mov	r3, r0
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d103      	bne.n	80039da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2202      	movs	r2, #2
 80039d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 f926 	bl	8007c30 <USB_ReadInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ee:	d11c      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80039f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003a0a:	2110      	movs	r1, #16
 8003a0c:	6938      	ldr	r0, [r7, #16]
 8003a0e:	f004 f815 	bl	8007a3c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003a12:	6938      	ldr	r0, [r7, #16]
 8003a14:	f004 f846 	bl	8007aa4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 fa1c 	bl	8007e5c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f006 ffe5 	bl	800a9f4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f004 f8fe 	bl	8007c30 <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a3e:	d102      	bne.n	8003a46 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 f89e 	bl	8004b82 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f004 f8f0 	bl	8007c30 <USB_ReadInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d106      	bne.n	8003a68 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f006 ffae 	bl	800a9bc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2208      	movs	r2, #8
 8003a66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f004 f8df 	bl	8007c30 <USB_ReadInterrupts>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f003 0310 	and.w	r3, r3, #16
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d101      	bne.n	8003a80 <HAL_HCD_IRQHandler+0x158>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_HCD_IRQHandler+0x15a>
 8003a80:	2300      	movs	r3, #0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	699a      	ldr	r2, [r3, #24]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0210 	bic.w	r2, r2, #16
 8003a94:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 ffa1 	bl	80049de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0210 	orr.w	r2, r2, #16
 8003aaa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f004 f8bd 	bl	8007c30 <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003abc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ac0:	d13a      	bne.n	8003b38 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f004 fcf2 	bl	80084b0 <USB_HC_ReadInterrupt>
 8003acc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
 8003ad2:	e025      	b.n	8003b20 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d018      	beq.n	8003b1a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003afa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003afe:	d106      	bne.n	8003b0e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	4619      	mov	r1, r3
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f8ab 	bl	8003c62 <HCD_HC_IN_IRQHandler>
 8003b0c:	e005      	b.n	8003b1a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 fbf9 	bl	800430c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3d4      	bcc.n	8003ad4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b32:	615a      	str	r2, [r3, #20]
 8003b34:	e000      	b.n	8003b38 <HAL_HCD_IRQHandler+0x210>
      return;
 8003b36:	bf00      	nop
    }
  }
}
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_HCD_Start+0x16>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e013      	b.n	8003b7c <HAL_HCD_Start+0x3e>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2101      	movs	r1, #1
 8003b62:	4618      	mov	r0, r3
 8003b64:	f004 f9de 	bl	8007f24 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f003 fef6 	bl	800795e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_HCD_Stop+0x16>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e00d      	b.n	8003bb6 <HAL_HCD_Stop+0x32>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f004 fdcc 	bl	8008744 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f004 f980 	bl	8007ed0 <USB_ResetPort>
 8003bd0:	4603      	mov	r3, r0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	3360      	adds	r3, #96	; 0x60
 8003bf4:	781b      	ldrb	r3, [r3, #0]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c0e:	78fb      	ldrb	r3, [r7, #3]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3350      	adds	r3, #80	; 0x50
 8003c1c:	681b      	ldr	r3, [r3, #0]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 f9c4 	bl	8007fc4 <USB_GetCurrentFrame>
 8003c3c:	4603      	mov	r3, r0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b082      	sub	sp, #8
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f004 f99f 	bl	8007f96 <USB_GetHostSpeed>
 8003c58:	4603      	mov	r3, r0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b086      	sub	sp, #24
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d11a      	bne.n	8003cc8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	015a      	lsls	r2, r3, #5
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	212c      	movs	r1, #44	; 0x2c
 8003caa:	fb01 f303 	mul.w	r3, r1, r3
 8003cae:	4413      	add	r3, r2
 8003cb0:	3361      	adds	r3, #97	; 0x61
 8003cb2:	2206      	movs	r2, #6
 8003cb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	4611      	mov	r1, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f004 fc06 	bl	80084d2 <USB_HC_Halt>
 8003cc6:	e0af      	b.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cde:	d11b      	bne.n	8003d18 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cec:	461a      	mov	r2, r3
 8003cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	212c      	movs	r1, #44	; 0x2c
 8003cfa:	fb01 f303 	mul.w	r3, r1, r3
 8003cfe:	4413      	add	r3, r2
 8003d00:	3361      	adds	r3, #97	; 0x61
 8003d02:	2207      	movs	r2, #7
 8003d04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 fbde 	bl	80084d2 <USB_HC_Halt>
 8003d16:	e087      	b.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0320 	and.w	r3, r3, #32
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d109      	bne.n	8003d42 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	6093      	str	r3, [r2, #8]
 8003d40:	e072      	b.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d11a      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d64:	461a      	mov	r2, r3
 8003d66:	2308      	movs	r3, #8
 8003d68:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	212c      	movs	r1, #44	; 0x2c
 8003d70:	fb01 f303 	mul.w	r3, r1, r3
 8003d74:	4413      	add	r3, r2
 8003d76:	3361      	adds	r3, #97	; 0x61
 8003d78:	2205      	movs	r2, #5
 8003d7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 fba3 	bl	80084d2 <USB_HC_Halt>
 8003d8c:	e04c      	b.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	015a      	lsls	r2, r3, #5
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4413      	add	r3, r2
 8003d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003da4:	d11b      	bne.n	8003dde <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3361      	adds	r3, #97	; 0x61
 8003dc8:	2208      	movs	r2, #8
 8003dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 fb7b 	bl	80084d2 <USB_HC_Halt>
 8003ddc:	e024      	b.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d119      	bne.n	8003e28 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	461a      	mov	r2, r3
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	212c      	movs	r1, #44	; 0x2c
 8003e0c:	fb01 f303 	mul.w	r3, r1, r3
 8003e10:	4413      	add	r3, r2
 8003e12:	3361      	adds	r3, #97	; 0x61
 8003e14:	2206      	movs	r2, #6
 8003e16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 fb55 	bl	80084d2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3e:	d112      	bne.n	8003e66 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f004 fb41 	bl	80084d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e62:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003e64:	e24e      	b.n	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 80df 	bne.w	800403c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d019      	beq.n	8003eba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	212c      	movs	r1, #44	; 0x2c
 8003e8c:	fb01 f303 	mul.w	r3, r1, r3
 8003e90:	4413      	add	r3, r2
 8003e92:	3348      	adds	r3, #72	; 0x48
 8003e94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	0159      	lsls	r1, r3, #5
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ea8:	1ad2      	subs	r2, r2, r3
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	202c      	movs	r0, #44	; 0x2c
 8003eb0:	fb00 f303 	mul.w	r3, r0, r3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3350      	adds	r3, #80	; 0x50
 8003eb8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	212c      	movs	r1, #44	; 0x2c
 8003ec0:	fb01 f303 	mul.w	r3, r1, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	3361      	adds	r3, #97	; 0x61
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	212c      	movs	r1, #44	; 0x2c
 8003ed2:	fb01 f303 	mul.w	r3, r1, r3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	335c      	adds	r3, #92	; 0x5c
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eea:	461a      	mov	r2, r3
 8003eec:	2301      	movs	r3, #1
 8003eee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	212c      	movs	r1, #44	; 0x2c
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	333f      	adds	r3, #63	; 0x3f
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d009      	beq.n	8003f18 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	212c      	movs	r1, #44	; 0x2c
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4413      	add	r3, r2
 8003f10:	333f      	adds	r3, #63	; 0x3f
 8003f12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d111      	bne.n	8003f3c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	4611      	mov	r1, r2
 8003f22:	4618      	mov	r0, r3
 8003f24:	f004 fad5 	bl	80084d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f34:	461a      	mov	r2, r3
 8003f36:	2310      	movs	r3, #16
 8003f38:	6093      	str	r3, [r2, #8]
 8003f3a:	e03a      	b.n	8003fb2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	333f      	adds	r3, #63	; 0x3f
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	d009      	beq.n	8003f64 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	333f      	adds	r3, #63	; 0x3f
 8003f5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d126      	bne.n	8003fb2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	0151      	lsls	r1, r2, #5
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	440a      	add	r2, r1
 8003f7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f82:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	212c      	movs	r1, #44	; 0x2c
 8003f8a:	fb01 f303 	mul.w	r3, r1, r3
 8003f8e:	4413      	add	r3, r2
 8003f90:	3360      	adds	r3, #96	; 0x60
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	202c      	movs	r0, #44	; 0x2c
 8003fa0:	fb00 f303 	mul.w	r3, r0, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3360      	adds	r3, #96	; 0x60
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f006 fd2f 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d12b      	bne.n	8004012 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	212c      	movs	r1, #44	; 0x2c
 8003fc0:	fb01 f303 	mul.w	r3, r1, r3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3348      	adds	r3, #72	; 0x48
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	202c      	movs	r0, #44	; 0x2c
 8003fd0:	fb00 f202 	mul.w	r2, r0, r2
 8003fd4:	440a      	add	r2, r1
 8003fd6:	3240      	adds	r2, #64	; 0x40
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 818e 	beq.w	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	212c      	movs	r1, #44	; 0x2c
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3354      	adds	r3, #84	; 0x54
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	f083 0301 	eor.w	r3, r3, #1
 8003ffc:	b2d8      	uxtb	r0, r3
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	3354      	adds	r3, #84	; 0x54
 800400c:	4602      	mov	r2, r0
 800400e:	701a      	strb	r2, [r3, #0]
}
 8004010:	e178      	b.n	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	3354      	adds	r3, #84	; 0x54
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	f083 0301 	eor.w	r3, r3, #1
 8004026:	b2d8      	uxtb	r0, r3
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3354      	adds	r3, #84	; 0x54
 8004036:	4602      	mov	r2, r0
 8004038:	701a      	strb	r2, [r3, #0]
}
 800403a:	e163      	b.n	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b02      	cmp	r3, #2
 8004050:	f040 80f6 	bne.w	8004240 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	212c      	movs	r1, #44	; 0x2c
 800405a:	fb01 f303 	mul.w	r3, r1, r3
 800405e:	4413      	add	r3, r2
 8004060:	3361      	adds	r3, #97	; 0x61
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d109      	bne.n	800407c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	2201      	movs	r2, #1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e0c9      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	212c      	movs	r1, #44	; 0x2c
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	4413      	add	r3, r2
 8004088:	3361      	adds	r3, #97	; 0x61
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b05      	cmp	r3, #5
 800408e:	d109      	bne.n	80040a4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	212c      	movs	r1, #44	; 0x2c
 8004096:	fb01 f303 	mul.w	r3, r1, r3
 800409a:	4413      	add	r3, r2
 800409c:	3360      	adds	r3, #96	; 0x60
 800409e:	2205      	movs	r2, #5
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e0b5      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	212c      	movs	r1, #44	; 0x2c
 80040aa:	fb01 f303 	mul.w	r3, r1, r3
 80040ae:	4413      	add	r3, r2
 80040b0:	3361      	adds	r3, #97	; 0x61
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d009      	beq.n	80040cc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	212c      	movs	r1, #44	; 0x2c
 80040be:	fb01 f303 	mul.w	r3, r1, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	3361      	adds	r3, #97	; 0x61
 80040c6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d150      	bne.n	800416e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	212c      	movs	r1, #44	; 0x2c
 80040d2:	fb01 f303 	mul.w	r3, r1, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	335c      	adds	r3, #92	; 0x5c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	202c      	movs	r0, #44	; 0x2c
 80040e4:	fb00 f303 	mul.w	r3, r0, r3
 80040e8:	440b      	add	r3, r1
 80040ea:	335c      	adds	r3, #92	; 0x5c
 80040ec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	212c      	movs	r1, #44	; 0x2c
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	4413      	add	r3, r2
 80040fa:	335c      	adds	r3, #92	; 0x5c
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d912      	bls.n	8004128 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	212c      	movs	r1, #44	; 0x2c
 8004108:	fb01 f303 	mul.w	r3, r1, r3
 800410c:	4413      	add	r3, r2
 800410e:	335c      	adds	r3, #92	; 0x5c
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	2204      	movs	r2, #4
 8004124:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004126:	e073      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	212c      	movs	r1, #44	; 0x2c
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3360      	adds	r3, #96	; 0x60
 8004136:	2202      	movs	r2, #2
 8004138:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4413      	add	r3, r2
 8004142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004150:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004158:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	4413      	add	r3, r2
 8004162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800416c:	e050      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	212c      	movs	r1, #44	; 0x2c
 8004174:	fb01 f303 	mul.w	r3, r1, r3
 8004178:	4413      	add	r3, r2
 800417a:	3361      	adds	r3, #97	; 0x61
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d122      	bne.n	80041c8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	212c      	movs	r1, #44	; 0x2c
 8004188:	fb01 f303 	mul.w	r3, r1, r3
 800418c:	4413      	add	r3, r2
 800418e:	3360      	adds	r3, #96	; 0x60
 8004190:	2202      	movs	r2, #2
 8004192:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	015a      	lsls	r2, r3, #5
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	4413      	add	r3, r2
 800419c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041aa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041b2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	e023      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	3361      	adds	r3, #97	; 0x61
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b07      	cmp	r3, #7
 80041da:	d119      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	212c      	movs	r1, #44	; 0x2c
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	4413      	add	r3, r2
 80041e8:	335c      	adds	r3, #92	; 0x5c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	202c      	movs	r0, #44	; 0x2c
 80041f4:	fb00 f303 	mul.w	r3, r0, r3
 80041f8:	440b      	add	r3, r1
 80041fa:	335c      	adds	r3, #92	; 0x5c
 80041fc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	3360      	adds	r3, #96	; 0x60
 800420c:	2204      	movs	r2, #4
 800420e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	2302      	movs	r3, #2
 8004220:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	b2d9      	uxtb	r1, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	202c      	movs	r0, #44	; 0x2c
 800422c:	fb00 f303 	mul.w	r3, r0, r3
 8004230:	4413      	add	r3, r2
 8004232:	3360      	adds	r3, #96	; 0x60
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f006 fbe9 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800423e:	e061      	b.n	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4413      	add	r3, r2
 8004248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b10      	cmp	r3, #16
 8004254:	d156      	bne.n	8004304 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	212c      	movs	r1, #44	; 0x2c
 800425c:	fb01 f303 	mul.w	r3, r1, r3
 8004260:	4413      	add	r3, r2
 8004262:	333f      	adds	r3, #63	; 0x3f
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b03      	cmp	r3, #3
 8004268:	d111      	bne.n	800428e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	335c      	adds	r3, #92	; 0x5c
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f004 f923 	bl	80084d2 <USB_HC_Halt>
 800428c:	e031      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	212c      	movs	r1, #44	; 0x2c
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	4413      	add	r3, r2
 800429a:	333f      	adds	r3, #63	; 0x3f
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d009      	beq.n	80042b6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	333f      	adds	r3, #63	; 0x3f
 80042b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d11d      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	212c      	movs	r1, #44	; 0x2c
 80042bc:	fb01 f303 	mul.w	r3, r1, r3
 80042c0:	4413      	add	r3, r2
 80042c2:	335c      	adds	r3, #92	; 0x5c
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d110      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3361      	adds	r3, #97	; 0x61
 80042de:	2203      	movs	r2, #3
 80042e0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 f8f0 	bl	80084d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2310      	movs	r3, #16
 8004302:	6093      	str	r3, [r2, #8]
}
 8004304:	bf00      	nop
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4413      	add	r3, r2
 800432e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f003 0304 	and.w	r3, r3, #4
 8004338:	2b04      	cmp	r3, #4
 800433a:	d11a      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4413      	add	r3, r2
 8004344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004348:	461a      	mov	r2, r3
 800434a:	2304      	movs	r3, #4
 800434c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3361      	adds	r3, #97	; 0x61
 800435c:	2206      	movs	r2, #6
 800435e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f004 f8b1 	bl	80084d2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004370:	e331      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d12e      	bne.n	80043e6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2320      	movs	r3, #32
 8004398:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	333d      	adds	r3, #61	; 0x3d
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	f040 8313 	bne.w	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	212c      	movs	r1, #44	; 0x2c
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	333d      	adds	r3, #61	; 0x3d
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	212c      	movs	r1, #44	; 0x2c
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	4413      	add	r3, r2
 80043ce:	3360      	adds	r3, #96	; 0x60
 80043d0:	2202      	movs	r2, #2
 80043d2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f004 f877 	bl	80084d2 <USB_HC_Halt>
}
 80043e4:	e2f7      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d112      	bne.n	8004424 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800440a:	461a      	mov	r2, r3
 800440c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004410:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f004 f858 	bl	80084d2 <USB_HC_Halt>
}
 8004422:	e2d8      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b01      	cmp	r3, #1
 8004438:	d140      	bne.n	80044bc <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	212c      	movs	r1, #44	; 0x2c
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	335c      	adds	r3, #92	; 0x5c
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d111      	bne.n	8004486 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	333d      	adds	r3, #61	; 0x3d
 8004470:	2201      	movs	r2, #1
 8004472:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	461a      	mov	r2, r3
 8004494:	2301      	movs	r3, #1
 8004496:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	fb01 f303 	mul.w	r3, r1, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	3361      	adds	r3, #97	; 0x61
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	b2d2      	uxtb	r2, r2
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f004 f80c 	bl	80084d2 <USB_HC_Halt>
}
 80044ba:	e28c      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d12c      	bne.n	800452c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	212c      	movs	r1, #44	; 0x2c
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	4413      	add	r3, r2
 80044de:	3361      	adds	r3, #97	; 0x61
 80044e0:	2204      	movs	r2, #4
 80044e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	212c      	movs	r1, #44	; 0x2c
 80044ea:	fb01 f303 	mul.w	r3, r1, r3
 80044ee:	4413      	add	r3, r2
 80044f0:	333d      	adds	r3, #61	; 0x3d
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	212c      	movs	r1, #44	; 0x2c
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	4413      	add	r3, r2
 8004502:	335c      	adds	r3, #92	; 0x5c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	4611      	mov	r1, r2
 8004512:	4618      	mov	r0, r3
 8004514:	f003 ffdd 	bl	80084d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	461a      	mov	r2, r3
 8004526:	2340      	movs	r3, #64	; 0x40
 8004528:	6093      	str	r3, [r2, #8]
}
 800452a:	e254      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	4413      	add	r3, r2
 8004534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b08      	cmp	r3, #8
 8004540:	d11a      	bne.n	8004578 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	4413      	add	r3, r2
 800454a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800454e:	461a      	mov	r2, r3
 8004550:	2308      	movs	r3, #8
 8004552:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3361      	adds	r3, #97	; 0x61
 8004562:	2205      	movs	r2, #5
 8004564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f003 ffae 	bl	80084d2 <USB_HC_Halt>
}
 8004576:	e22e      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	4413      	add	r3, r2
 8004580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d140      	bne.n	8004610 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	212c      	movs	r1, #44	; 0x2c
 8004594:	fb01 f303 	mul.w	r3, r1, r3
 8004598:	4413      	add	r3, r2
 800459a:	335c      	adds	r3, #92	; 0x5c
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	212c      	movs	r1, #44	; 0x2c
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	4413      	add	r3, r2
 80045ac:	3361      	adds	r3, #97	; 0x61
 80045ae:	2203      	movs	r2, #3
 80045b0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	212c      	movs	r1, #44	; 0x2c
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	333d      	adds	r3, #61	; 0x3d
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d112      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	212c      	movs	r1, #44	; 0x2c
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	333c      	adds	r3, #60	; 0x3c
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d108      	bne.n	80045ec <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	333d      	adds	r3, #61	; 0x3d
 80045e8:	2201      	movs	r2, #1
 80045ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	4611      	mov	r1, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 ff6b 	bl	80084d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	4413      	add	r3, r2
 8004604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004608:	461a      	mov	r2, r3
 800460a:	2310      	movs	r3, #16
 800460c:	6093      	str	r3, [r2, #8]
}
 800460e:	e1e2      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004622:	2b80      	cmp	r3, #128	; 0x80
 8004624:	d164      	bne.n	80046f0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d111      	bne.n	8004652 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3361      	adds	r3, #97	; 0x61
 800463c:	2206      	movs	r2, #6
 800463e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	4611      	mov	r1, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f003 ff41 	bl	80084d2 <USB_HC_Halt>
 8004650:	e044      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	335c      	adds	r3, #92	; 0x5c
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	202c      	movs	r0, #44	; 0x2c
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	440b      	add	r3, r1
 8004670:	335c      	adds	r3, #92	; 0x5c
 8004672:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	212c      	movs	r1, #44	; 0x2c
 800467a:	fb01 f303 	mul.w	r3, r1, r3
 800467e:	4413      	add	r3, r2
 8004680:	335c      	adds	r3, #92	; 0x5c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d920      	bls.n	80046ca <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	335c      	adds	r3, #92	; 0x5c
 8004696:	2200      	movs	r2, #0
 8004698:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	212c      	movs	r1, #44	; 0x2c
 80046a0:	fb01 f303 	mul.w	r3, r1, r3
 80046a4:	4413      	add	r3, r2
 80046a6:	3360      	adds	r3, #96	; 0x60
 80046a8:	2204      	movs	r2, #4
 80046aa:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	202c      	movs	r0, #44	; 0x2c
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	4413      	add	r3, r2
 80046bc:	3360      	adds	r3, #96	; 0x60
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f006 f9a4 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
 80046c8:	e008      	b.n	80046dc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	212c      	movs	r1, #44	; 0x2c
 80046d0:	fb01 f303 	mul.w	r3, r1, r3
 80046d4:	4413      	add	r3, r2
 80046d6:	3360      	adds	r3, #96	; 0x60
 80046d8:	2202      	movs	r2, #2
 80046da:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e8:	461a      	mov	r2, r3
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	6093      	str	r3, [r2, #8]
}
 80046ee:	e172      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d11b      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3361      	adds	r3, #97	; 0x61
 8004716:	2208      	movs	r2, #8
 8004718:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f003 fed4 	bl	80084d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	461a      	mov	r2, r3
 8004738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800473c:	6093      	str	r3, [r2, #8]
}
 800473e:	e14a      	b.n	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b02      	cmp	r3, #2
 8004754:	f040 813f 	bne.w	80049d6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	212c      	movs	r1, #44	; 0x2c
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4413      	add	r3, r2
 8004764:	3361      	adds	r3, #97	; 0x61
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d17d      	bne.n	8004868 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	212c      	movs	r1, #44	; 0x2c
 8004772:	fb01 f303 	mul.w	r3, r1, r3
 8004776:	4413      	add	r3, r2
 8004778:	3360      	adds	r3, #96	; 0x60
 800477a:	2201      	movs	r2, #1
 800477c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	212c      	movs	r1, #44	; 0x2c
 8004784:	fb01 f303 	mul.w	r3, r1, r3
 8004788:	4413      	add	r3, r2
 800478a:	333f      	adds	r3, #63	; 0x3f
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d00a      	beq.n	80047a8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	333f      	adds	r3, #63	; 0x3f
 80047a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	f040 8100 	bne.w	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d113      	bne.n	80047d8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	212c      	movs	r1, #44	; 0x2c
 80047b6:	fb01 f303 	mul.w	r3, r1, r3
 80047ba:	4413      	add	r3, r2
 80047bc:	3355      	adds	r3, #85	; 0x55
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	f083 0301 	eor.w	r3, r3, #1
 80047c4:	b2d8      	uxtb	r0, r3
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	212c      	movs	r1, #44	; 0x2c
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	4413      	add	r3, r2
 80047d2:	3355      	adds	r3, #85	; 0x55
 80047d4:	4602      	mov	r2, r0
 80047d6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	f040 80e3 	bne.w	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	212c      	movs	r1, #44	; 0x2c
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	4413      	add	r3, r2
 80047ee:	334c      	adds	r3, #76	; 0x4c
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 80d8 	beq.w	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	212c      	movs	r1, #44	; 0x2c
 80047fe:	fb01 f303 	mul.w	r3, r1, r3
 8004802:	4413      	add	r3, r2
 8004804:	334c      	adds	r3, #76	; 0x4c
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	202c      	movs	r0, #44	; 0x2c
 800480e:	fb00 f202 	mul.w	r2, r0, r2
 8004812:	440a      	add	r2, r1
 8004814:	3240      	adds	r2, #64	; 0x40
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	4413      	add	r3, r2
 800481a:	3b01      	subs	r3, #1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	202c      	movs	r0, #44	; 0x2c
 8004822:	fb00 f202 	mul.w	r2, r0, r2
 8004826:	440a      	add	r2, r1
 8004828:	3240      	adds	r2, #64	; 0x40
 800482a:	8812      	ldrh	r2, [r2, #0]
 800482c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80b5 	beq.w	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	3355      	adds	r3, #85	; 0x55
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	f083 0301 	eor.w	r3, r3, #1
 8004852:	b2d8      	uxtb	r0, r3
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	212c      	movs	r1, #44	; 0x2c
 800485a:	fb01 f303 	mul.w	r3, r1, r3
 800485e:	4413      	add	r3, r2
 8004860:	3355      	adds	r3, #85	; 0x55
 8004862:	4602      	mov	r2, r0
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e09f      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	212c      	movs	r1, #44	; 0x2c
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	4413      	add	r3, r2
 8004874:	3361      	adds	r3, #97	; 0x61
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d109      	bne.n	8004890 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	212c      	movs	r1, #44	; 0x2c
 8004882:	fb01 f303 	mul.w	r3, r1, r3
 8004886:	4413      	add	r3, r2
 8004888:	3360      	adds	r3, #96	; 0x60
 800488a:	2202      	movs	r2, #2
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e08b      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	212c      	movs	r1, #44	; 0x2c
 8004896:	fb01 f303 	mul.w	r3, r1, r3
 800489a:	4413      	add	r3, r2
 800489c:	3361      	adds	r3, #97	; 0x61
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	d109      	bne.n	80048b8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	212c      	movs	r1, #44	; 0x2c
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	4413      	add	r3, r2
 80048b0:	3360      	adds	r3, #96	; 0x60
 80048b2:	2202      	movs	r2, #2
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	e077      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	212c      	movs	r1, #44	; 0x2c
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	4413      	add	r3, r2
 80048c4:	3361      	adds	r3, #97	; 0x61
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b05      	cmp	r3, #5
 80048ca:	d109      	bne.n	80048e0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	212c      	movs	r1, #44	; 0x2c
 80048d2:	fb01 f303 	mul.w	r3, r1, r3
 80048d6:	4413      	add	r3, r2
 80048d8:	3360      	adds	r3, #96	; 0x60
 80048da:	2205      	movs	r2, #5
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e063      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	212c      	movs	r1, #44	; 0x2c
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	4413      	add	r3, r2
 80048ec:	3361      	adds	r3, #97	; 0x61
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b06      	cmp	r3, #6
 80048f2:	d009      	beq.n	8004908 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	212c      	movs	r1, #44	; 0x2c
 80048fa:	fb01 f303 	mul.w	r3, r1, r3
 80048fe:	4413      	add	r3, r2
 8004900:	3361      	adds	r3, #97	; 0x61
 8004902:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004904:	2b08      	cmp	r3, #8
 8004906:	d14f      	bne.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	212c      	movs	r1, #44	; 0x2c
 800490e:	fb01 f303 	mul.w	r3, r1, r3
 8004912:	4413      	add	r3, r2
 8004914:	335c      	adds	r3, #92	; 0x5c
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	202c      	movs	r0, #44	; 0x2c
 8004920:	fb00 f303 	mul.w	r3, r0, r3
 8004924:	440b      	add	r3, r1
 8004926:	335c      	adds	r3, #92	; 0x5c
 8004928:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	212c      	movs	r1, #44	; 0x2c
 8004930:	fb01 f303 	mul.w	r3, r1, r3
 8004934:	4413      	add	r3, r2
 8004936:	335c      	adds	r3, #92	; 0x5c
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b02      	cmp	r3, #2
 800493c:	d912      	bls.n	8004964 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	212c      	movs	r1, #44	; 0x2c
 8004944:	fb01 f303 	mul.w	r3, r1, r3
 8004948:	4413      	add	r3, r2
 800494a:	335c      	adds	r3, #92	; 0x5c
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	212c      	movs	r1, #44	; 0x2c
 8004956:	fb01 f303 	mul.w	r3, r1, r3
 800495a:	4413      	add	r3, r2
 800495c:	3360      	adds	r3, #96	; 0x60
 800495e:	2204      	movs	r2, #4
 8004960:	701a      	strb	r2, [r3, #0]
 8004962:	e021      	b.n	80049a8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	212c      	movs	r1, #44	; 0x2c
 800496a:	fb01 f303 	mul.w	r3, r1, r3
 800496e:	4413      	add	r3, r2
 8004970:	3360      	adds	r3, #96	; 0x60
 8004972:	2202      	movs	r2, #2
 8004974:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	4413      	add	r3, r2
 800497e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800498c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004994:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	4413      	add	r3, r2
 800499e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a2:	461a      	mov	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	2302      	movs	r3, #2
 80049b8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	b2d9      	uxtb	r1, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	202c      	movs	r0, #44	; 0x2c
 80049c4:	fb00 f303 	mul.w	r3, r0, r3
 80049c8:	4413      	add	r3, r2
 80049ca:	3360      	adds	r3, #96	; 0x60
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f006 f81d 	bl	800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80049d6:	bf00      	nop
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b08a      	sub	sp, #40	; 0x28
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	0c5b      	lsrs	r3, r3, #17
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a12:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d004      	beq.n	8004a24 <HCD_RXQLVL_IRQHandler+0x46>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	f000 80a9 	beq.w	8004b74 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a22:	e0aa      	b.n	8004b7a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f000 80a6 	beq.w	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	212c      	movs	r1, #44	; 0x2c
 8004a32:	fb01 f303 	mul.w	r3, r1, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	3344      	adds	r3, #68	; 0x44
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 809b 	beq.w	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3350      	adds	r3, #80	; 0x50
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	441a      	add	r2, r3
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	202c      	movs	r0, #44	; 0x2c
 8004a5c:	fb00 f303 	mul.w	r3, r0, r3
 8004a60:	440b      	add	r3, r1
 8004a62:	334c      	adds	r3, #76	; 0x4c
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d87a      	bhi.n	8004b60 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	212c      	movs	r1, #44	; 0x2c
 8004a74:	fb01 f303 	mul.w	r3, r1, r3
 8004a78:	4413      	add	r3, r2
 8004a7a:	3344      	adds	r3, #68	; 0x44
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	b292      	uxth	r2, r2
 8004a82:	4619      	mov	r1, r3
 8004a84:	f003 f87c 	bl	8007b80 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	212c      	movs	r1, #44	; 0x2c
 8004a8e:	fb01 f303 	mul.w	r3, r1, r3
 8004a92:	4413      	add	r3, r2
 8004a94:	3344      	adds	r3, #68	; 0x44
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	441a      	add	r2, r3
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	202c      	movs	r0, #44	; 0x2c
 8004aa2:	fb00 f303 	mul.w	r3, r0, r3
 8004aa6:	440b      	add	r3, r1
 8004aa8:	3344      	adds	r3, #68	; 0x44
 8004aaa:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	212c      	movs	r1, #44	; 0x2c
 8004ab2:	fb01 f303 	mul.w	r3, r1, r3
 8004ab6:	4413      	add	r3, r2
 8004ab8:	3350      	adds	r3, #80	; 0x50
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	441a      	add	r2, r3
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	202c      	movs	r0, #44	; 0x2c
 8004ac6:	fb00 f303 	mul.w	r3, r0, r3
 8004aca:	440b      	add	r3, r1
 8004acc:	3350      	adds	r3, #80	; 0x50
 8004ace:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	0cdb      	lsrs	r3, r3, #19
 8004ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	212c      	movs	r1, #44	; 0x2c
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	4413      	add	r3, r2
 8004af2:	3340      	adds	r3, #64	; 0x40
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d13c      	bne.n	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d039      	beq.n	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b1a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b22:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b30:	461a      	mov	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	212c      	movs	r1, #44	; 0x2c
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	4413      	add	r3, r2
 8004b42:	3354      	adds	r3, #84	; 0x54
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f083 0301 	eor.w	r3, r3, #1
 8004b4a:	b2d8      	uxtb	r0, r3
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	212c      	movs	r1, #44	; 0x2c
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	3354      	adds	r3, #84	; 0x54
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	701a      	strb	r2, [r3, #0]
      break;
 8004b5e:	e00b      	b.n	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	212c      	movs	r1, #44	; 0x2c
 8004b66:	fb01 f303 	mul.w	r3, r1, r3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	3360      	adds	r3, #96	; 0x60
 8004b6e:	2204      	movs	r2, #4
 8004b70:	701a      	strb	r2, [r3, #0]
      break;
 8004b72:	e001      	b.n	8004b78 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004b78:	bf00      	nop
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	3728      	adds	r7, #40	; 0x28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b086      	sub	sp, #24
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004bae:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d10b      	bne.n	8004bd2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d102      	bne.n	8004bca <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f005 ff07 	bl	800a9d8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	f043 0302 	orr.w	r3, r3, #2
 8004bd0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d132      	bne.n	8004c42 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f043 0308 	orr.w	r3, r3, #8
 8004be2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 0304 	and.w	r3, r3, #4
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d126      	bne.n	8004c3c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d113      	bne.n	8004c1e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c00:	d106      	bne.n	8004c10 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2102      	movs	r1, #2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f003 f927 	bl	8007e5c <USB_InitFSLSPClkSel>
 8004c0e:	e011      	b.n	8004c34 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2101      	movs	r1, #1
 8004c16:	4618      	mov	r0, r3
 8004c18:	f003 f920 	bl	8007e5c <USB_InitFSLSPClkSel>
 8004c1c:	e00a      	b.n	8004c34 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d106      	bne.n	8004c34 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c32:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f005 fef9 	bl	800aa2c <HAL_HCD_PortEnabled_Callback>
 8004c3a:	e002      	b.n	8004c42 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f005 ff03 	bl	800aa48 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f003 0320 	and.w	r3, r3, #32
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d103      	bne.n	8004c54 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f043 0320 	orr.w	r3, r3, #32
 8004c52:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e12b      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d106      	bne.n	8004c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc feba 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f001 f964 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 8004cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	4a81      	ldr	r2, [pc, #516]	; (8004edc <HAL_I2C_Init+0x274>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d807      	bhi.n	8004cec <HAL_I2C_Init+0x84>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a80      	ldr	r2, [pc, #512]	; (8004ee0 <HAL_I2C_Init+0x278>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	bf94      	ite	ls
 8004ce4:	2301      	movls	r3, #1
 8004ce6:	2300      	movhi	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	e006      	b.n	8004cfa <HAL_I2C_Init+0x92>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a7d      	ldr	r2, [pc, #500]	; (8004ee4 <HAL_I2C_Init+0x27c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bf94      	ite	ls
 8004cf4:	2301      	movls	r3, #1
 8004cf6:	2300      	movhi	r3, #0
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	4a78      	ldr	r2, [pc, #480]	; (8004ee8 <HAL_I2C_Init+0x280>)
 8004d06:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0a:	0c9b      	lsrs	r3, r3, #18
 8004d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a6a      	ldr	r2, [pc, #424]	; (8004edc <HAL_I2C_Init+0x274>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d802      	bhi.n	8004d3c <HAL_I2C_Init+0xd4>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	e009      	b.n	8004d50 <HAL_I2C_Init+0xe8>
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	4a69      	ldr	r2, [pc, #420]	; (8004eec <HAL_I2C_Init+0x284>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	099b      	lsrs	r3, r3, #6
 8004d4e:	3301      	adds	r3, #1
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6812      	ldr	r2, [r2, #0]
 8004d54:	430b      	orrs	r3, r1
 8004d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	495c      	ldr	r1, [pc, #368]	; (8004edc <HAL_I2C_Init+0x274>)
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	d819      	bhi.n	8004da4 <HAL_I2C_Init+0x13c>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	1e59      	subs	r1, r3, #1
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d7e:	1c59      	adds	r1, r3, #1
 8004d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004d84:	400b      	ands	r3, r1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_I2C_Init+0x138>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1e59      	subs	r1, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d9e:	e051      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da0:	2304      	movs	r3, #4
 8004da2:	e04f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d111      	bne.n	8004dd0 <HAL_I2C_Init+0x168>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	440b      	add	r3, r1
 8004dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e012      	b.n	8004df6 <HAL_I2C_Init+0x18e>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	1e58      	subs	r0, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6859      	ldr	r1, [r3, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	0099      	lsls	r1, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004de6:	3301      	adds	r3, #1
 8004de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_I2C_Init+0x196>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e022      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10e      	bne.n	8004e24 <HAL_I2C_Init+0x1bc>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	1e58      	subs	r0, r3, #1
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6859      	ldr	r1, [r3, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	440b      	add	r3, r1
 8004e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e22:	e00f      	b.n	8004e44 <HAL_I2C_Init+0x1dc>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	1e58      	subs	r0, r3, #1
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6859      	ldr	r1, [r3, #4]
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	0099      	lsls	r1, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	6809      	ldr	r1, [r1, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6911      	ldr	r1, [r2, #16]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68d2      	ldr	r2, [r2, #12]
 8004e7e:	4311      	orrs	r1, r2
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	000186a0 	.word	0x000186a0
 8004ee0:	001e847f 	.word	0x001e847f
 8004ee4:	003d08ff 	.word	0x003d08ff
 8004ee8:	431bde83 	.word	0x431bde83
 8004eec:	10624dd3 	.word	0x10624dd3

08004ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d129      	bne.n	8004f5a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2224      	movs	r2, #36	; 0x24
 8004f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0201 	bic.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0210 	bic.w	r2, r2, #16
 8004f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0201 	orr.w	r2, r2, #1
 8004f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e000      	b.n	8004f5c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
  }
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d12a      	bne.n	8004fd8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2224      	movs	r2, #36	; 0x24
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f022 0201 	bic.w	r2, r2, #1
 8004f98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004fa2:	89fb      	ldrh	r3, [r7, #14]
 8004fa4:	f023 030f 	bic.w	r3, r3, #15
 8004fa8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	89fb      	ldrh	r3, [r7, #14]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	89fa      	ldrh	r2, [r7, #14]
 8004fba:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 0201 	orr.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e0bf      	b.n	800517a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fd64 	bl	8001adc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800502a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6999      	ldr	r1, [r3, #24]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005040:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6899      	ldr	r1, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <HAL_LTDC_Init+0x19c>)
 800505c:	400b      	ands	r3, r1
 800505e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	699a      	ldr	r2, [r3, #24]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68d9      	ldr	r1, [r3, #12]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4b3e      	ldr	r3, [pc, #248]	; (8005184 <HAL_LTDC_Init+0x19c>)
 800508a:	400b      	ands	r3, r1
 800508c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68d9      	ldr	r1, [r3, #12]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a1a      	ldr	r2, [r3, #32]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6919      	ldr	r1, [r3, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b33      	ldr	r3, [pc, #204]	; (8005184 <HAL_LTDC_Init+0x19c>)
 80050b8:	400b      	ands	r3, r1
 80050ba:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	6919      	ldr	r1, [r3, #16]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6959      	ldr	r1, [r3, #20]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_LTDC_Init+0x19c>)
 80050e6:	400b      	ands	r3, r1
 80050e8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ee:	041b      	lsls	r3, r3, #16
 80050f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6959      	ldr	r1, [r3, #20]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800510e:	021b      	lsls	r3, r3, #8
 8005110:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005118:	041b      	lsls	r3, r3, #16
 800511a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800512a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800513e:	431a      	orrs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0206 	orr.w	r2, r2, #6
 8005156:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	f000f800 	.word	0xf000f800

08005188 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005196:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0304 	and.w	r3, r3, #4
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d023      	beq.n	80051f2 <HAL_LTDC_IRQHandler+0x6a>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01e      	beq.n	80051f2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0204 	bic.w	r2, r2, #4
 80051c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2204      	movs	r2, #4
 80051ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80051d2:	f043 0201 	orr.w	r2, r3, #1
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f86f 	bl	80052d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d023      	beq.n	8005244 <HAL_LTDC_IRQHandler+0xbc>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d01e      	beq.n	8005244 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0202 	bic.w	r2, r2, #2
 8005214:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2202      	movs	r2, #2
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005224:	f043 0202 	orr.w	r2, r3, #2
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2204      	movs	r2, #4
 8005232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f846 	bl	80052d0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d01b      	beq.n	8005286 <HAL_LTDC_IRQHandler+0xfe>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d016      	beq.n	8005286 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0201 	bic.w	r2, r2, #1
 8005266:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f82f 	bl	80052e4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <HAL_LTDC_IRQHandler+0x140>
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0208 	bic.w	r2, r2, #8
 80052a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2208      	movs	r2, #8
 80052b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f818 	bl	80052f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800530c:	b5b0      	push	{r4, r5, r7, lr}
 800530e:	b084      	sub	sp, #16
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_LTDC_ConfigLayer+0x1a>
 8005322:	2302      	movs	r3, #2
 8005324:	e02c      	b.n	8005380 <HAL_LTDC_ConfigLayer+0x74>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2134      	movs	r1, #52	; 0x34
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4413      	add	r3, r2
 8005342:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4614      	mov	r4, r2
 800534a:	461d      	mov	r5, r3
 800534c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800534e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f811 	bl	8005388 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2201      	movs	r2, #1
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bdb0      	pop	{r4, r5, r7, pc}

08005388 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005388:	b480      	push	{r7}
 800538a:	b089      	sub	sp, #36	; 0x24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	0c1b      	lsrs	r3, r3, #16
 80053a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a4:	4413      	add	r3, r2
 80053a6:	041b      	lsls	r3, r3, #16
 80053a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	01db      	lsls	r3, r3, #7
 80053b4:	4413      	add	r3, r2
 80053b6:	3384      	adds	r3, #132	; 0x84
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	4611      	mov	r1, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	01d2      	lsls	r2, r2, #7
 80053c4:	440a      	add	r2, r1
 80053c6:	3284      	adds	r2, #132	; 0x84
 80053c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80053cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	0c1b      	lsrs	r3, r3, #16
 80053da:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053de:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053e0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4619      	mov	r1, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	01db      	lsls	r3, r3, #7
 80053ec:	440b      	add	r3, r1
 80053ee:	3384      	adds	r3, #132	; 0x84
 80053f0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80053f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005406:	4413      	add	r3, r2
 8005408:	041b      	lsls	r3, r3, #16
 800540a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	461a      	mov	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	01db      	lsls	r3, r3, #7
 8005416:	4413      	add	r3, r2
 8005418:	3384      	adds	r3, #132	; 0x84
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	6812      	ldr	r2, [r2, #0]
 8005420:	4611      	mov	r1, r2
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	01d2      	lsls	r2, r2, #7
 8005426:	440a      	add	r2, r1
 8005428:	3284      	adds	r2, #132	; 0x84
 800542a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800542e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800543e:	4413      	add	r3, r2
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4619      	mov	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	01db      	lsls	r3, r3, #7
 800544c:	440b      	add	r3, r1
 800544e:	3384      	adds	r3, #132	; 0x84
 8005450:	4619      	mov	r1, r3
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	4313      	orrs	r3, r2
 8005456:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	01db      	lsls	r3, r3, #7
 8005462:	4413      	add	r3, r2
 8005464:	3384      	adds	r3, #132	; 0x84
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	4611      	mov	r1, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	01d2      	lsls	r2, r2, #7
 8005472:	440a      	add	r2, r1
 8005474:	3284      	adds	r2, #132	; 0x84
 8005476:	f023 0307 	bic.w	r3, r3, #7
 800547a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	01db      	lsls	r3, r3, #7
 8005486:	4413      	add	r3, r2
 8005488:	3384      	adds	r3, #132	; 0x84
 800548a:	461a      	mov	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80054a2:	041b      	lsls	r3, r3, #16
 80054a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	061b      	lsls	r3, r3, #24
 80054ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	01db      	lsls	r3, r3, #7
 80054b8:	4413      	add	r3, r2
 80054ba:	3384      	adds	r3, #132	; 0x84
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	01db      	lsls	r3, r3, #7
 80054c8:	4413      	add	r3, r2
 80054ca:	3384      	adds	r3, #132	; 0x84
 80054cc:	461a      	mov	r2, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054d8:	461a      	mov	r2, r3
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	431a      	orrs	r2, r3
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4619      	mov	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	01db      	lsls	r3, r3, #7
 80054ec:	440b      	add	r3, r1
 80054ee:	3384      	adds	r3, #132	; 0x84
 80054f0:	4619      	mov	r1, r3
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	461a      	mov	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	01db      	lsls	r3, r3, #7
 8005502:	4413      	add	r3, r2
 8005504:	3384      	adds	r3, #132	; 0x84
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	6812      	ldr	r2, [r2, #0]
 800550c:	4611      	mov	r1, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	01d2      	lsls	r2, r2, #7
 8005512:	440a      	add	r2, r1
 8005514:	3284      	adds	r2, #132	; 0x84
 8005516:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800551a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	01db      	lsls	r3, r3, #7
 8005526:	4413      	add	r3, r2
 8005528:	3384      	adds	r3, #132	; 0x84
 800552a:	461a      	mov	r2, r3
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	01db      	lsls	r3, r3, #7
 800553c:	4413      	add	r3, r2
 800553e:	3384      	adds	r3, #132	; 0x84
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	6812      	ldr	r2, [r2, #0]
 8005546:	4611      	mov	r1, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	01d2      	lsls	r2, r2, #7
 800554c:	440a      	add	r2, r1
 800554e:	3284      	adds	r2, #132	; 0x84
 8005550:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005554:	f023 0307 	bic.w	r3, r3, #7
 8005558:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	69da      	ldr	r2, [r3, #28]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	6809      	ldr	r1, [r1, #0]
 8005566:	4608      	mov	r0, r1
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	01c9      	lsls	r1, r1, #7
 800556c:	4401      	add	r1, r0
 800556e:	3184      	adds	r1, #132	; 0x84
 8005570:	4313      	orrs	r3, r2
 8005572:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	01db      	lsls	r3, r3, #7
 800557e:	4413      	add	r3, r2
 8005580:	3384      	adds	r3, #132	; 0x84
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	461a      	mov	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	01db      	lsls	r3, r3, #7
 800558e:	4413      	add	r3, r2
 8005590:	3384      	adds	r3, #132	; 0x84
 8005592:	461a      	mov	r2, r3
 8005594:	2300      	movs	r3, #0
 8005596:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	461a      	mov	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	01db      	lsls	r3, r3, #7
 80055a2:	4413      	add	r3, r2
 80055a4:	3384      	adds	r3, #132	; 0x84
 80055a6:	461a      	mov	r2, r3
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d102      	bne.n	80055bc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80055b6:	2304      	movs	r3, #4
 80055b8:	61fb      	str	r3, [r7, #28]
 80055ba:	e01b      	b.n	80055f4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80055c4:	2303      	movs	r3, #3
 80055c6:	61fb      	str	r3, [r7, #28]
 80055c8:	e014      	b.n	80055f4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d00b      	beq.n	80055ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d007      	beq.n	80055ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80055de:	2b03      	cmp	r3, #3
 80055e0:	d003      	beq.n	80055ea <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d102      	bne.n	80055f0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80055ea:	2302      	movs	r3, #2
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e001      	b.n	80055f4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80055f0:	2301      	movs	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	461a      	mov	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	01db      	lsls	r3, r3, #7
 80055fe:	4413      	add	r3, r2
 8005600:	3384      	adds	r3, #132	; 0x84
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4611      	mov	r1, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	01d2      	lsls	r2, r2, #7
 800560e:	440a      	add	r2, r1
 8005610:	3284      	adds	r2, #132	; 0x84
 8005612:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005616:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	fb02 f303 	mul.w	r3, r2, r3
 8005622:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1acb      	subs	r3, r1, r3
 800562e:	69f9      	ldr	r1, [r7, #28]
 8005630:	fb01 f303 	mul.w	r3, r1, r3
 8005634:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005636:	68f9      	ldr	r1, [r7, #12]
 8005638:	6809      	ldr	r1, [r1, #0]
 800563a:	4608      	mov	r0, r1
 800563c:	6879      	ldr	r1, [r7, #4]
 800563e:	01c9      	lsls	r1, r1, #7
 8005640:	4401      	add	r1, r0
 8005642:	3184      	adds	r1, #132	; 0x84
 8005644:	4313      	orrs	r3, r2
 8005646:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	01db      	lsls	r3, r3, #7
 8005652:	4413      	add	r3, r2
 8005654:	3384      	adds	r3, #132	; 0x84
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	4611      	mov	r1, r2
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	01d2      	lsls	r2, r2, #7
 8005662:	440a      	add	r2, r1
 8005664:	3284      	adds	r2, #132	; 0x84
 8005666:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	01db      	lsls	r3, r3, #7
 800567a:	4413      	add	r3, r2
 800567c:	3384      	adds	r3, #132	; 0x84
 800567e:	461a      	mov	r2, r3
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	01db      	lsls	r3, r3, #7
 8005690:	4413      	add	r3, r2
 8005692:	3384      	adds	r3, #132	; 0x84
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	4611      	mov	r1, r2
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	01d2      	lsls	r2, r2, #7
 80056a0:	440a      	add	r2, r1
 80056a2:	3284      	adds	r2, #132	; 0x84
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6013      	str	r3, [r2, #0]
}
 80056aa:	bf00      	nop
 80056ac:	3724      	adds	r7, #36	; 0x24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b086      	sub	sp, #24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e267      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d075      	beq.n	80057c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056d6:	4b88      	ldr	r3, [pc, #544]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d00c      	beq.n	80056fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e2:	4b85      	ldr	r3, [pc, #532]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80056ea:	2b08      	cmp	r3, #8
 80056ec:	d112      	bne.n	8005714 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056ee:	4b82      	ldr	r3, [pc, #520]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056fa:	d10b      	bne.n	8005714 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056fc:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d05b      	beq.n	80057c0 <HAL_RCC_OscConfig+0x108>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d157      	bne.n	80057c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e242      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d106      	bne.n	800572c <HAL_RCC_OscConfig+0x74>
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a75      	ldr	r2, [pc, #468]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	e01d      	b.n	8005768 <HAL_RCC_OscConfig+0xb0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005734:	d10c      	bne.n	8005750 <HAL_RCC_OscConfig+0x98>
 8005736:	4b70      	ldr	r3, [pc, #448]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6f      	ldr	r2, [pc, #444]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800573c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	4b6d      	ldr	r3, [pc, #436]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a6c      	ldr	r2, [pc, #432]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	e00b      	b.n	8005768 <HAL_RCC_OscConfig+0xb0>
 8005750:	4b69      	ldr	r3, [pc, #420]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a68      	ldr	r2, [pc, #416]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575a:	6013      	str	r3, [r2, #0]
 800575c:	4b66      	ldr	r3, [pc, #408]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a65      	ldr	r2, [pc, #404]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005766:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d013      	beq.n	8005798 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fc fe70 	bl	8002454 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005778:	f7fc fe6c 	bl	8002454 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b64      	cmp	r3, #100	; 0x64
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e207      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578a:	4b5b      	ldr	r3, [pc, #364]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0xc0>
 8005796:	e014      	b.n	80057c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005798:	f7fc fe5c 	bl	8002454 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057a0:	f7fc fe58 	bl	8002454 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b64      	cmp	r3, #100	; 0x64
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e1f3      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b2:	4b51      	ldr	r3, [pc, #324]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1f0      	bne.n	80057a0 <HAL_RCC_OscConfig+0xe8>
 80057be:	e000      	b.n	80057c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d063      	beq.n	8005896 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 030c 	and.w	r3, r3, #12
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d11c      	bne.n	8005820 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057e6:	4b44      	ldr	r3, [pc, #272]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d116      	bne.n	8005820 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f2:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 0302 	and.w	r3, r3, #2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d005      	beq.n	800580a <HAL_RCC_OscConfig+0x152>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d001      	beq.n	800580a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e1c7      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580a:	4b3b      	ldr	r3, [pc, #236]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4937      	ldr	r1, [pc, #220]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800581a:	4313      	orrs	r3, r2
 800581c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800581e:	e03a      	b.n	8005896 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d020      	beq.n	800586a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <HAL_RCC_OscConfig+0x244>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fc fe11 	bl	8002454 <HAL_GetTick>
 8005832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005836:	f7fc fe0d 	bl	8002454 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e1a8      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005848:	4b2b      	ldr	r3, [pc, #172]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005854:	4b28      	ldr	r3, [pc, #160]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4925      	ldr	r1, [pc, #148]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 8005864:	4313      	orrs	r3, r2
 8005866:	600b      	str	r3, [r1, #0]
 8005868:	e015      	b.n	8005896 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586a:	4b24      	ldr	r3, [pc, #144]	; (80058fc <HAL_RCC_OscConfig+0x244>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005870:	f7fc fdf0 	bl	8002454 <HAL_GetTick>
 8005874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005878:	f7fc fdec 	bl	8002454 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e187      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f0      	bne.n	8005878 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0308 	and.w	r3, r3, #8
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d036      	beq.n	8005910 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058aa:	4b15      	ldr	r3, [pc, #84]	; (8005900 <HAL_RCC_OscConfig+0x248>)
 80058ac:	2201      	movs	r2, #1
 80058ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b0:	f7fc fdd0 	bl	8002454 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058b8:	f7fc fdcc 	bl	8002454 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e167      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCC_OscConfig+0x240>)
 80058cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ce:	f003 0302 	and.w	r3, r3, #2
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d0f0      	beq.n	80058b8 <HAL_RCC_OscConfig+0x200>
 80058d6:	e01b      	b.n	8005910 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCC_OscConfig+0x248>)
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058de:	f7fc fdb9 	bl	8002454 <HAL_GetTick>
 80058e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e4:	e00e      	b.n	8005904 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058e6:	f7fc fdb5 	bl	8002454 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d907      	bls.n	8005904 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e150      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
 80058f8:	40023800 	.word	0x40023800
 80058fc:	42470000 	.word	0x42470000
 8005900:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005904:	4b88      	ldr	r3, [pc, #544]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1ea      	bne.n	80058e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8097 	beq.w	8005a4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591e:	2300      	movs	r3, #0
 8005920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005922:	4b81      	ldr	r3, [pc, #516]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10f      	bne.n	800594e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	4b7d      	ldr	r3, [pc, #500]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a7c      	ldr	r2, [pc, #496]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b7a      	ldr	r3, [pc, #488]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800594e:	4b77      	ldr	r3, [pc, #476]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d118      	bne.n	800598c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595a:	4b74      	ldr	r3, [pc, #464]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a73      	ldr	r2, [pc, #460]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005966:	f7fc fd75 	bl	8002454 <HAL_GetTick>
 800596a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596e:	f7fc fd71 	bl	8002454 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e10c      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005980:	4b6a      	ldr	r3, [pc, #424]	; (8005b2c <HAL_RCC_OscConfig+0x474>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0f0      	beq.n	800596e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d106      	bne.n	80059a2 <HAL_RCC_OscConfig+0x2ea>
 8005994:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a63      	ldr	r2, [pc, #396]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e01c      	b.n	80059dc <HAL_RCC_OscConfig+0x324>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	d10c      	bne.n	80059c4 <HAL_RCC_OscConfig+0x30c>
 80059aa:	4b5f      	ldr	r3, [pc, #380]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ae:	4a5e      	ldr	r2, [pc, #376]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059b0:	f043 0304 	orr.w	r3, r3, #4
 80059b4:	6713      	str	r3, [r2, #112]	; 0x70
 80059b6:	4b5c      	ldr	r3, [pc, #368]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ba:	4a5b      	ldr	r2, [pc, #364]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059bc:	f043 0301 	orr.w	r3, r3, #1
 80059c0:	6713      	str	r3, [r2, #112]	; 0x70
 80059c2:	e00b      	b.n	80059dc <HAL_RCC_OscConfig+0x324>
 80059c4:	4b58      	ldr	r3, [pc, #352]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c8:	4a57      	ldr	r2, [pc, #348]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059ca:	f023 0301 	bic.w	r3, r3, #1
 80059ce:	6713      	str	r3, [r2, #112]	; 0x70
 80059d0:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d4:	4a54      	ldr	r2, [pc, #336]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 80059d6:	f023 0304 	bic.w	r3, r3, #4
 80059da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d015      	beq.n	8005a10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e4:	f7fc fd36 	bl	8002454 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ea:	e00a      	b.n	8005a02 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ec:	f7fc fd32 	bl	8002454 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e0cb      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a02:	4b49      	ldr	r3, [pc, #292]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0ee      	beq.n	80059ec <HAL_RCC_OscConfig+0x334>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a10:	f7fc fd20 	bl	8002454 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a16:	e00a      	b.n	8005a2e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a18:	f7fc fd1c 	bl	8002454 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0b5      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a2e:	4b3e      	ldr	r3, [pc, #248]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	f003 0302 	and.w	r3, r3, #2
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1ee      	bne.n	8005a18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a3a:	7dfb      	ldrb	r3, [r7, #23]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d105      	bne.n	8005a4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a40:	4b39      	ldr	r3, [pc, #228]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	4a38      	ldr	r2, [pc, #224]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80a1 	beq.w	8005b98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d05c      	beq.n	8005b1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d141      	bne.n	8005aee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6a:	4b31      	ldr	r3, [pc, #196]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a70:	f7fc fcf0 	bl	8002454 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a78:	f7fc fcec 	bl	8002454 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e087      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8a:	4b27      	ldr	r3, [pc, #156]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1f0      	bne.n	8005a78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69da      	ldr	r2, [r3, #28]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	019b      	lsls	r3, r3, #6
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aac:	085b      	lsrs	r3, r3, #1
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	041b      	lsls	r3, r3, #16
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	061b      	lsls	r3, r3, #24
 8005aba:	491b      	ldr	r1, [pc, #108]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac0:	4b1b      	ldr	r3, [pc, #108]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac6:	f7fc fcc5 	bl	8002454 <HAL_GetTick>
 8005aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fc fcc1 	bl	8002454 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e05c      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d0f0      	beq.n	8005ace <HAL_RCC_OscConfig+0x416>
 8005aec:	e054      	b.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aee:	4b10      	ldr	r3, [pc, #64]	; (8005b30 <HAL_RCC_OscConfig+0x478>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af4:	f7fc fcae 	bl	8002454 <HAL_GetTick>
 8005af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005afc:	f7fc fcaa 	bl	8002454 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e045      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_OscConfig+0x470>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f0      	bne.n	8005afc <HAL_RCC_OscConfig+0x444>
 8005b1a:	e03d      	b.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e038      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
 8005b28:	40023800 	.word	0x40023800
 8005b2c:	40007000 	.word	0x40007000
 8005b30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <HAL_RCC_OscConfig+0x4ec>)
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d028      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d121      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d11a      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b64:	4013      	ands	r3, r2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d111      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d001      	beq.n	8005b98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800

08005ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e0cc      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bbc:	4b68      	ldr	r3, [pc, #416]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d90c      	bls.n	8005be4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bca:	4b65      	ldr	r3, [pc, #404]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b63      	ldr	r3, [pc, #396]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0b8      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bfc:	4b59      	ldr	r3, [pc, #356]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4a58      	ldr	r2, [pc, #352]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c14:	4b53      	ldr	r3, [pc, #332]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	4a52      	ldr	r2, [pc, #328]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c20:	4b50      	ldr	r3, [pc, #320]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	494d      	ldr	r1, [pc, #308]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d044      	beq.n	8005cc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d119      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e07f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d003      	beq.n	8005c66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d107      	bne.n	8005c76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c66:	4b3f      	ldr	r3, [pc, #252]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e06f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c76:	4b3b      	ldr	r3, [pc, #236]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e067      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 0203 	bic.w	r2, r3, #3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	4934      	ldr	r1, [pc, #208]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c98:	f7fc fbdc 	bl	8002454 <HAL_GetTick>
 8005c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9e:	e00a      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca0:	f7fc fbd8 	bl	8002454 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e04f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 020c 	and.w	r2, r3, #12
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1eb      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc8:	4b25      	ldr	r3, [pc, #148]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d20c      	bcs.n	8005cf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cd6:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cde:	4b20      	ldr	r3, [pc, #128]	; (8005d60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e032      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cfc:	4b19      	ldr	r3, [pc, #100]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4916      	ldr	r1, [pc, #88]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	490e      	ldr	r1, [pc, #56]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d2e:	f000 f821 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	490a      	ldr	r1, [pc, #40]	; (8005d68 <HAL_RCC_ClockConfig+0x1c0>)
 8005d40:	5ccb      	ldrb	r3, [r1, r3]
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	4a09      	ldr	r2, [pc, #36]	; (8005d6c <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <HAL_RCC_ClockConfig+0x1c8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fc f99a 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40023c00 	.word	0x40023c00
 8005d64:	40023800 	.word	0x40023800
 8005d68:	0800c7b8 	.word	0x0800c7b8
 8005d6c:	20000004 	.word	0x20000004
 8005d70:	20000008 	.word	0x20000008

08005d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d78:	b094      	sub	sp, #80	; 0x50
 8005d7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d80:	2300      	movs	r3, #0
 8005d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d84:	2300      	movs	r3, #0
 8005d86:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d8c:	4b79      	ldr	r3, [pc, #484]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	f003 030c 	and.w	r3, r3, #12
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d00d      	beq.n	8005db4 <HAL_RCC_GetSysClockFreq+0x40>
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	f200 80e1 	bhi.w	8005f60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d002      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0x34>
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d003      	beq.n	8005dae <HAL_RCC_GetSysClockFreq+0x3a>
 8005da6:	e0db      	b.n	8005f60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005da8:	4b73      	ldr	r3, [pc, #460]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005daa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005dac:	e0db      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005dae:	4b73      	ldr	r3, [pc, #460]	; (8005f7c <HAL_RCC_GetSysClockFreq+0x208>)
 8005db0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005db2:	e0d8      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db4:	4b6f      	ldr	r3, [pc, #444]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dbe:	4b6d      	ldr	r3, [pc, #436]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d063      	beq.n	8005e92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dca:	4b6a      	ldr	r3, [pc, #424]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ddc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dde:	2300      	movs	r3, #0
 8005de0:	637b      	str	r3, [r7, #52]	; 0x34
 8005de2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005de6:	4622      	mov	r2, r4
 8005de8:	462b      	mov	r3, r5
 8005dea:	f04f 0000 	mov.w	r0, #0
 8005dee:	f04f 0100 	mov.w	r1, #0
 8005df2:	0159      	lsls	r1, r3, #5
 8005df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df8:	0150      	lsls	r0, r2, #5
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	4621      	mov	r1, r4
 8005e00:	1a51      	subs	r1, r2, r1
 8005e02:	6139      	str	r1, [r7, #16]
 8005e04:	4629      	mov	r1, r5
 8005e06:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e18:	4659      	mov	r1, fp
 8005e1a:	018b      	lsls	r3, r1, #6
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e22:	4651      	mov	r1, sl
 8005e24:	018a      	lsls	r2, r1, #6
 8005e26:	4651      	mov	r1, sl
 8005e28:	ebb2 0801 	subs.w	r8, r2, r1
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e32:	f04f 0200 	mov.w	r2, #0
 8005e36:	f04f 0300 	mov.w	r3, #0
 8005e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e46:	4690      	mov	r8, r2
 8005e48:	4699      	mov	r9, r3
 8005e4a:	4623      	mov	r3, r4
 8005e4c:	eb18 0303 	adds.w	r3, r8, r3
 8005e50:	60bb      	str	r3, [r7, #8]
 8005e52:	462b      	mov	r3, r5
 8005e54:	eb49 0303 	adc.w	r3, r9, r3
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e66:	4629      	mov	r1, r5
 8005e68:	024b      	lsls	r3, r1, #9
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e70:	4621      	mov	r1, r4
 8005e72:	024a      	lsls	r2, r1, #9
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e84:	f7fa fa04 	bl	8000290 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e90:	e058      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e92:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	099b      	lsrs	r3, r3, #6
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ea2:	623b      	str	r3, [r7, #32]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	0159      	lsls	r1, r3, #5
 8005eba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ebe:	0150      	lsls	r0, r2, #5
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eca:	4649      	mov	r1, r9
 8005ecc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005edc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ee0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ee8:	eb63 050b 	sbc.w	r5, r3, fp
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	f04f 0300 	mov.w	r3, #0
 8005ef4:	00eb      	lsls	r3, r5, #3
 8005ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efa:	00e2      	lsls	r2, r4, #3
 8005efc:	4614      	mov	r4, r2
 8005efe:	461d      	mov	r5, r3
 8005f00:	4643      	mov	r3, r8
 8005f02:	18e3      	adds	r3, r4, r3
 8005f04:	603b      	str	r3, [r7, #0]
 8005f06:	464b      	mov	r3, r9
 8005f08:	eb45 0303 	adc.w	r3, r5, r3
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	f04f 0200 	mov.w	r2, #0
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	028b      	lsls	r3, r1, #10
 8005f1e:	4621      	mov	r1, r4
 8005f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f24:	4621      	mov	r1, r4
 8005f26:	028a      	lsls	r2, r1, #10
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2e:	2200      	movs	r2, #0
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	61fa      	str	r2, [r7, #28]
 8005f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f38:	f7fa f9aa 	bl	8000290 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4613      	mov	r3, r2
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	0c1b      	lsrs	r3, r3, #16
 8005f4a:	f003 0303 	and.w	r3, r3, #3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005f54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f5e:	e002      	b.n	8005f66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f60:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3750      	adds	r7, #80	; 0x50
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800
 8005f78:	00f42400 	.word	0x00f42400
 8005f7c:	007a1200 	.word	0x007a1200

08005f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f86:	681b      	ldr	r3, [r3, #0]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000004 	.word	0x20000004

08005f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f9c:	f7ff fff0 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	0a9b      	lsrs	r3, r3, #10
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4903      	ldr	r1, [pc, #12]	; (8005fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fae:	5ccb      	ldrb	r3, [r1, r3]
 8005fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40023800 	.word	0x40023800
 8005fbc:	0800c7c8 	.word	0x0800c7c8

08005fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fc4:	f7ff ffdc 	bl	8005f80 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	0b5b      	lsrs	r3, r3, #13
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4903      	ldr	r1, [pc, #12]	; (8005fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fd6:	5ccb      	ldrb	r3, [r1, r3]
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	0800c7c8 	.word	0x0800c7c8

08005fe8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	220f      	movs	r2, #15
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ff8:	4b12      	ldr	r3, [pc, #72]	; (8006044 <HAL_RCC_GetClockConfig+0x5c>)
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f003 0203 	and.w	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <HAL_RCC_GetClockConfig+0x5c>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <HAL_RCC_GetClockConfig+0x5c>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <HAL_RCC_GetClockConfig+0x5c>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	08db      	lsrs	r3, r3, #3
 8006022:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <HAL_RCC_GetClockConfig+0x60>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 020f 	and.w	r2, r3, #15
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	40023800 	.word	0x40023800
 8006048:	40023c00 	.word	0x40023c00

0800604c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006058:	2300      	movs	r3, #0
 800605a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10b      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800607c:	2b00      	cmp	r3, #0
 800607e:	d075      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006080:	4b91      	ldr	r3, [pc, #580]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006086:	f7fc f9e5 	bl	8002454 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800608e:	f7fc f9e1 	bl	8002454 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e189      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a0:	4b8a      	ldr	r3, [pc, #552]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f0      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d009      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	019a      	lsls	r2, r3, #6
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	071b      	lsls	r3, r3, #28
 80060c4:	4981      	ldr	r1, [pc, #516]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d01f      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060d8:	4b7c      	ldr	r3, [pc, #496]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060de:	0f1b      	lsrs	r3, r3, #28
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	019a      	lsls	r2, r3, #6
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	061b      	lsls	r3, r3, #24
 80060f2:	431a      	orrs	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	071b      	lsls	r3, r3, #28
 80060f8:	4974      	ldr	r1, [pc, #464]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006100:	4b72      	ldr	r3, [pc, #456]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006102:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006106:	f023 021f 	bic.w	r2, r3, #31
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	3b01      	subs	r3, #1
 8006110:	496e      	ldr	r1, [pc, #440]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00d      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	019a      	lsls	r2, r3, #6
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	061b      	lsls	r3, r3, #24
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	071b      	lsls	r3, r3, #28
 8006138:	4964      	ldr	r1, [pc, #400]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006140:	4b61      	ldr	r3, [pc, #388]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006146:	f7fc f985 	bl	8002454 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800614e:	f7fc f981 	bl	8002454 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e129      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006160:	4b5a      	ldr	r3, [pc, #360]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006180:	2b00      	cmp	r3, #0
 8006182:	d079      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006184:	4b52      	ldr	r3, [pc, #328]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006186:	2200      	movs	r2, #0
 8006188:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800618a:	f7fc f963 	bl	8002454 <HAL_GetTick>
 800618e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006190:	e008      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006192:	f7fc f95f 	bl	8002454 <HAL_GetTick>
 8006196:	4602      	mov	r2, r0
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	2b02      	cmp	r3, #2
 800619e:	d901      	bls.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e107      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80061a4:	4b49      	ldr	r3, [pc, #292]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061b0:	d0ef      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0304 	and.w	r3, r3, #4
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d020      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061be:	4b43      	ldr	r3, [pc, #268]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c4:	0f1b      	lsrs	r3, r3, #28
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	019a      	lsls	r2, r3, #6
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	061b      	lsls	r3, r3, #24
 80061d8:	431a      	orrs	r2, r3
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	071b      	lsls	r3, r3, #28
 80061de:	493b      	ldr	r1, [pc, #236]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e0:	4313      	orrs	r3, r2
 80061e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061e6:	4b39      	ldr	r3, [pc, #228]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	3b01      	subs	r3, #1
 80061f6:	021b      	lsls	r3, r3, #8
 80061f8:	4934      	ldr	r1, [pc, #208]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d01e      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800620c:	4b2f      	ldr	r3, [pc, #188]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	0e1b      	lsrs	r3, r3, #24
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	019a      	lsls	r2, r3, #6
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	061b      	lsls	r3, r3, #24
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	071b      	lsls	r3, r3, #28
 800622c:	4927      	ldr	r1, [pc, #156]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800622e:	4313      	orrs	r3, r2
 8006230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800623a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	4922      	ldr	r1, [pc, #136]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800624a:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006250:	f7fc f900 	bl	8002454 <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006256:	e008      	b.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006258:	f7fc f8fc 	bl	8002454 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e0a4      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800626a:	4b18      	ldr	r3, [pc, #96]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006272:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006276:	d1ef      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0320 	and.w	r3, r3, #32
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 808b 	beq.w	800639c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
 800628a:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006294:	6413      	str	r3, [r2, #64]	; 0x40
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80062a2:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a0b      	ldr	r2, [pc, #44]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80062a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062ae:	f7fc f8d1 	bl	8002454 <HAL_GetTick>
 80062b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062b4:	e010      	b.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062b6:	f7fc f8cd 	bl	8002454 <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d909      	bls.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e075      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80062c8:	42470068 	.word	0x42470068
 80062cc:	40023800 	.word	0x40023800
 80062d0:	42470070 	.word	0x42470070
 80062d4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062d8:	4b38      	ldr	r3, [pc, #224]	; (80063bc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d0e8      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062e4:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80062e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d02f      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d028      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006302:	4b2f      	ldr	r3, [pc, #188]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800630e:	2201      	movs	r2, #1
 8006310:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006312:	4b2c      	ldr	r3, [pc, #176]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006318:	4a29      	ldr	r2, [pc, #164]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b01      	cmp	r3, #1
 8006328:	d114      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800632a:	f7fc f893 	bl	8002454 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006332:	f7fc f88f 	bl	8002454 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e035      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006348:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d0ee      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006360:	d10d      	bne.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006376:	4912      	ldr	r1, [pc, #72]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006378:	4313      	orrs	r3, r2
 800637a:	608b      	str	r3, [r1, #8]
 800637c:	e005      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006384:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006388:	6093      	str	r3, [r2, #8]
 800638a:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800638c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006396:	490a      	ldr	r1, [pc, #40]	; (80063c0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006398:	4313      	orrs	r3, r2
 800639a:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80063b0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	40007000 	.word	0x40007000
 80063c0:	40023800 	.word	0x40023800
 80063c4:	42470e40 	.word	0x42470e40
 80063c8:	424711e0 	.word	0x424711e0

080063cc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e025      	b.n	800642c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d106      	bne.n	80063fa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f7fb fe3d 	bl	8002074 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f001 f97f 	bl	8007710 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	461a      	mov	r2, r3
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	f001 f9d4 	bl	80077ca <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e07b      	b.n	800653e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006456:	d009      	beq.n	800646c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
 800645e:	e005      	b.n	800646c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb fc58 	bl	8001d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80064b4:	431a      	orrs	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	431a      	orrs	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f0:	ea42 0103 	orr.w	r1, r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	0c1b      	lsrs	r3, r3, #16
 800650a:	f003 0104 	and.w	r1, r3, #4
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	f003 0210 	and.w	r2, r3, #16
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69da      	ldr	r2, [r3, #28]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800652c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e041      	b.n	80065dc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d106      	bne.n	8006572 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7fb fc2d 	bl	8001dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f000 fa95 	bl	8006ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d001      	beq.n	80065fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e04e      	b.n	800669a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0201 	orr.w	r2, r2, #1
 8006612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a23      	ldr	r2, [pc, #140]	; (80066a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d022      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006626:	d01d      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a1f      	ldr	r2, [pc, #124]	; (80066ac <HAL_TIM_Base_Start_IT+0xc8>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d018      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a1e      	ldr	r2, [pc, #120]	; (80066b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d013      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1c      	ldr	r2, [pc, #112]	; (80066b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d00e      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1b      	ldr	r2, [pc, #108]	; (80066b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d009      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a19      	ldr	r2, [pc, #100]	; (80066bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d004      	beq.n	8006664 <HAL_TIM_Base_Start_IT+0x80>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a18      	ldr	r2, [pc, #96]	; (80066c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d111      	bne.n	8006688 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2b06      	cmp	r3, #6
 8006674:	d010      	beq.n	8006698 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f042 0201 	orr.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006686:	e007      	b.n	8006698 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40010000 	.word	0x40010000
 80066ac:	40000400 	.word	0x40000400
 80066b0:	40000800 	.word	0x40000800
 80066b4:	40000c00 	.word	0x40000c00
 80066b8:	40010400 	.word	0x40010400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40001800 	.word	0x40001800

080066c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d122      	bne.n	8006720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0302 	and.w	r3, r3, #2
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d11b      	bne.n	8006720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0202 	mvn.w	r2, #2
 80066f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f9b5 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 800670c:	e005      	b.n	800671a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9a7 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f9b8 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	f003 0304 	and.w	r3, r3, #4
 800672a:	2b04      	cmp	r3, #4
 800672c:	d122      	bne.n	8006774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b04      	cmp	r3, #4
 800673a:	d11b      	bne.n	8006774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0204 	mvn.w	r2, #4
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2202      	movs	r2, #2
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f98b 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f97d 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f98e 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b08      	cmp	r3, #8
 8006780:	d122      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	2b08      	cmp	r3, #8
 800678e:	d11b      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0208 	mvn.w	r2, #8
 8006798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2204      	movs	r2, #4
 800679e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f961 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 80067b4:	e005      	b.n	80067c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f953 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f964 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b10      	cmp	r3, #16
 80067d4:	d122      	bne.n	800681c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b10      	cmp	r3, #16
 80067e2:	d11b      	bne.n	800681c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0210 	mvn.w	r2, #16
 80067ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2208      	movs	r2, #8
 80067f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f937 	bl	8006a76 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f929 	bl	8006a62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f93a 	bl	8006a8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	f003 0301 	and.w	r3, r3, #1
 8006826:	2b01      	cmp	r3, #1
 8006828:	d10e      	bne.n	8006848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f003 0301 	and.w	r3, r3, #1
 8006834:	2b01      	cmp	r3, #1
 8006836:	d107      	bne.n	8006848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f06f 0201 	mvn.w	r2, #1
 8006840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fa fb14 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d10e      	bne.n	8006874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006860:	2b80      	cmp	r3, #128	; 0x80
 8006862:	d107      	bne.n	8006874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fae0 	bl	8006e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d10e      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688c:	2b40      	cmp	r3, #64	; 0x40
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8ff 	bl	8006a9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d10e      	bne.n	80068cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d107      	bne.n	80068cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0220 	mvn.w	r2, #32
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 faaa 	bl	8006e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068cc:	bf00      	nop
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_ConfigClockSource+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e0b4      	b.n	8006a5a <HAL_TIM_ConfigClockSource+0x186>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800690e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006928:	d03e      	beq.n	80069a8 <HAL_TIM_ConfigClockSource+0xd4>
 800692a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692e:	f200 8087 	bhi.w	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006936:	f000 8086 	beq.w	8006a46 <HAL_TIM_ConfigClockSource+0x172>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d87f      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006940:	2b70      	cmp	r3, #112	; 0x70
 8006942:	d01a      	beq.n	800697a <HAL_TIM_ConfigClockSource+0xa6>
 8006944:	2b70      	cmp	r3, #112	; 0x70
 8006946:	d87b      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006948:	2b60      	cmp	r3, #96	; 0x60
 800694a:	d050      	beq.n	80069ee <HAL_TIM_ConfigClockSource+0x11a>
 800694c:	2b60      	cmp	r3, #96	; 0x60
 800694e:	d877      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006950:	2b50      	cmp	r3, #80	; 0x50
 8006952:	d03c      	beq.n	80069ce <HAL_TIM_ConfigClockSource+0xfa>
 8006954:	2b50      	cmp	r3, #80	; 0x50
 8006956:	d873      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006958:	2b40      	cmp	r3, #64	; 0x40
 800695a:	d058      	beq.n	8006a0e <HAL_TIM_ConfigClockSource+0x13a>
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d86f      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006960:	2b30      	cmp	r3, #48	; 0x30
 8006962:	d064      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006964:	2b30      	cmp	r3, #48	; 0x30
 8006966:	d86b      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006968:	2b20      	cmp	r3, #32
 800696a:	d060      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 800696c:	2b20      	cmp	r3, #32
 800696e:	d867      	bhi.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
 8006970:	2b00      	cmp	r3, #0
 8006972:	d05c      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006974:	2b10      	cmp	r3, #16
 8006976:	d05a      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x15a>
 8006978:	e062      	b.n	8006a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	6899      	ldr	r1, [r3, #8]
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f000 f9ad 	bl	8006ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800699c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	609a      	str	r2, [r3, #8]
      break;
 80069a6:	e04f      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	6899      	ldr	r1, [r3, #8]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f000 f996 	bl	8006ce8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	689a      	ldr	r2, [r3, #8]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ca:	609a      	str	r2, [r3, #8]
      break;
 80069cc:	e03c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6818      	ldr	r0, [r3, #0]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	6859      	ldr	r1, [r3, #4]
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	461a      	mov	r2, r3
 80069dc:	f000 f90a 	bl	8006bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2150      	movs	r1, #80	; 0x50
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f963 	bl	8006cb2 <TIM_ITRx_SetConfig>
      break;
 80069ec:	e02c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6818      	ldr	r0, [r3, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	6859      	ldr	r1, [r3, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f000 f929 	bl	8006c52 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2160      	movs	r1, #96	; 0x60
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f953 	bl	8006cb2 <TIM_ITRx_SetConfig>
      break;
 8006a0c:	e01c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6859      	ldr	r1, [r3, #4]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f000 f8ea 	bl	8006bf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2140      	movs	r1, #64	; 0x40
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 f943 	bl	8006cb2 <TIM_ITRx_SetConfig>
      break;
 8006a2c:	e00c      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f000 f93a 	bl	8006cb2 <TIM_ITRx_SetConfig>
      break;
 8006a3e:	e003      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
      break;
 8006a44:	e000      	b.n	8006a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a6a:	bf00      	nop
 8006a6c:	370c      	adds	r7, #12
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a92:	bf00      	nop
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
	...

08006ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a40      	ldr	r2, [pc, #256]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad2:	d00f      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a3d      	ldr	r2, [pc, #244]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00b      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a3c      	ldr	r2, [pc, #240]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a3b      	ldr	r2, [pc, #236]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_Base_SetConfig+0x40>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d108      	bne.n	8006b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a2f      	ldr	r2, [pc, #188]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d02b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b14:	d027      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a2c      	ldr	r2, [pc, #176]	; (8006bcc <TIM_Base_SetConfig+0x118>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d023      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <TIM_Base_SetConfig+0x11c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <TIM_Base_SetConfig+0x120>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d01b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d017      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <TIM_Base_SetConfig+0x128>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d013      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <TIM_Base_SetConfig+0x12c>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00f      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a26      	ldr	r2, [pc, #152]	; (8006be4 <TIM_Base_SetConfig+0x130>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d00b      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a25      	ldr	r2, [pc, #148]	; (8006be8 <TIM_Base_SetConfig+0x134>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d007      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a24      	ldr	r2, [pc, #144]	; (8006bec <TIM_Base_SetConfig+0x138>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d003      	beq.n	8006b66 <TIM_Base_SetConfig+0xb2>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a23      	ldr	r2, [pc, #140]	; (8006bf0 <TIM_Base_SetConfig+0x13c>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d108      	bne.n	8006b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a0a      	ldr	r2, [pc, #40]	; (8006bc8 <TIM_Base_SetConfig+0x114>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0xf8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <TIM_Base_SetConfig+0x124>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d103      	bne.n	8006bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]
}
 8006bba:	bf00      	nop
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000400 	.word	0x40000400
 8006bd0:	40000800 	.word	0x40000800
 8006bd4:	40000c00 	.word	0x40000c00
 8006bd8:	40010400 	.word	0x40010400
 8006bdc:	40014000 	.word	0x40014000
 8006be0:	40014400 	.word	0x40014400
 8006be4:	40014800 	.word	0x40014800
 8006be8:	40001800 	.word	0x40001800
 8006bec:	40001c00 	.word	0x40001c00
 8006bf0:	40002000 	.word	0x40002000

08006bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a1b      	ldr	r3, [r3, #32]
 8006c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f023 0201 	bic.w	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	011b      	lsls	r3, r3, #4
 8006c24:	693a      	ldr	r2, [r7, #16]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f023 030a 	bic.w	r3, r3, #10
 8006c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b087      	sub	sp, #28
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	60f8      	str	r0, [r7, #12]
 8006c5a:	60b9      	str	r1, [r7, #8]
 8006c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f023 0210 	bic.w	r2, r3, #16
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	031b      	lsls	r3, r3, #12
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	621a      	str	r2, [r3, #32]
}
 8006ca6:	bf00      	nop
 8006ca8:	371c      	adds	r7, #28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b085      	sub	sp, #20
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f043 0307 	orr.w	r3, r3, #7
 8006cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	609a      	str	r2, [r3, #8]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	021a      	lsls	r2, r3, #8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	609a      	str	r2, [r3, #8]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e05a      	b.n	8006df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a21      	ldr	r2, [pc, #132]	; (8006e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1d      	ldr	r2, [pc, #116]	; (8006e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1b      	ldr	r2, [pc, #108]	; (8006e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d10c      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40000400 	.word	0x40000400
 8006e0c:	40000800 	.word	0x40000800
 8006e10:	40000c00 	.word	0x40000c00
 8006e14:	40010400 	.word	0x40010400
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40001800 	.word	0x40001800

08006e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e03f      	b.n	8006eda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d106      	bne.n	8006e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7fa ffce 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2224      	movs	r2, #36	; 0x24
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68da      	ldr	r2, [r3, #12]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f9cb 	bl	8007228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695a      	ldr	r2, [r3, #20]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68da      	ldr	r2, [r3, #12]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b08a      	sub	sp, #40	; 0x28
 8006ee6:	af02      	add	r7, sp, #8
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	603b      	str	r3, [r7, #0]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b20      	cmp	r3, #32
 8006f00:	d17c      	bne.n	8006ffc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <HAL_UART_Transmit+0x2c>
 8006f08:	88fb      	ldrh	r3, [r7, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e075      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_UART_Transmit+0x3e>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e06e      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f36:	f7fb fa8d 	bl	8002454 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Transmit+0x82>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006f74:	e02a      	b.n	8006fcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f8e2 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d001      	beq.n	8006f90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e036      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1cf      	bne.n	8006f76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2140      	movs	r1, #64	; 0x40
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f8b2 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d001      	beq.n	8006ff0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e006      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b08a      	sub	sp, #40	; 0x28
 800700a:	af02      	add	r7, sp, #8
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	60b9      	str	r1, [r7, #8]
 8007010:	603b      	str	r3, [r7, #0]
 8007012:	4613      	mov	r3, r2
 8007014:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b20      	cmp	r3, #32
 8007024:	f040 808c 	bne.w	8007140 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Receive+0x2e>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e084      	b.n	8007142 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703e:	2b01      	cmp	r3, #1
 8007040:	d101      	bne.n	8007046 <HAL_UART_Receive+0x40>
 8007042:	2302      	movs	r3, #2
 8007044:	e07d      	b.n	8007142 <HAL_UART_Receive+0x13c>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2222      	movs	r2, #34	; 0x22
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007062:	f7fb f9f7 	bl	8002454 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	88fa      	ldrh	r2, [r7, #6]
 800706c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	88fa      	ldrh	r2, [r7, #6]
 8007072:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800707c:	d108      	bne.n	8007090 <HAL_UART_Receive+0x8a>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d104      	bne.n	8007090 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	61bb      	str	r3, [r7, #24]
 800708e:	e003      	b.n	8007098 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80070a0:	e043      	b.n	800712a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	2200      	movs	r2, #0
 80070aa:	2120      	movs	r1, #32
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f84c 	bl	800714a <UART_WaitOnFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e042      	b.n	8007142 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10c      	bne.n	80070dc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	3302      	adds	r3, #2
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e01f      	b.n	800711c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e4:	d007      	beq.n	80070f6 <HAL_UART_Receive+0xf0>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <HAL_UART_Receive+0xfe>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	e008      	b.n	8007116 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007110:	b2da      	uxtb	r2, r3
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	3301      	adds	r3, #1
 800711a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800712e:	b29b      	uxth	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1b6      	bne.n	80070a2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	e000      	b.n	8007142 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007140:	2302      	movs	r3, #2
  }
}
 8007142:	4618      	mov	r0, r3
 8007144:	3720      	adds	r7, #32
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b090      	sub	sp, #64	; 0x40
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800715a:	e050      	b.n	80071fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800715c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800715e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007162:	d04c      	beq.n	80071fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <UART_WaitOnFlagUntilTimeout+0x30>
 800716a:	f7fb f973 	bl	8002454 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007176:	429a      	cmp	r2, r3
 8007178:	d241      	bcs.n	80071fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	330c      	adds	r3, #12
 8007180:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	e853 3f00 	ldrex	r3, [r3]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800718a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800719a:	637a      	str	r2, [r7, #52]	; 0x34
 800719c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800719e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a2:	e841 2300 	strex	r3, r2, [r1]
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1e5      	bne.n	800717a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3314      	adds	r3, #20
 80071b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	e853 3f00 	ldrex	r3, [r3]
 80071bc:	613b      	str	r3, [r7, #16]
   return(result);
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ce:	623a      	str	r2, [r7, #32]
 80071d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d2:	69f9      	ldr	r1, [r7, #28]
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	e841 2300 	strex	r3, r2, [r1]
 80071da:	61bb      	str	r3, [r7, #24]
   return(result);
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1e5      	bne.n	80071ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e00f      	b.n	800721e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	4013      	ands	r3, r2
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	bf0c      	ite	eq
 800720e:	2301      	moveq	r3, #1
 8007210:	2300      	movne	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	429a      	cmp	r2, r3
 800721a:	d09f      	beq.n	800715c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3740      	adds	r7, #64	; 0x40
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800722c:	b0c0      	sub	sp, #256	; 0x100
 800722e:	af00      	add	r7, sp, #0
 8007230:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	68d9      	ldr	r1, [r3, #12]
 8007246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	ea40 0301 	orr.w	r3, r0, r1
 8007250:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007256:	689a      	ldr	r2, [r3, #8]
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	431a      	orrs	r2, r3
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	431a      	orrs	r2, r3
 8007268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726c:	69db      	ldr	r3, [r3, #28]
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007280:	f021 010c 	bic.w	r1, r1, #12
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800728e:	430b      	orrs	r3, r1
 8007290:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800729e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a2:	6999      	ldr	r1, [r3, #24]
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	ea40 0301 	orr.w	r3, r0, r1
 80072ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b8f      	ldr	r3, [pc, #572]	; (80074f4 <UART_SetConfig+0x2cc>)
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d005      	beq.n	80072c8 <UART_SetConfig+0xa0>
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b8d      	ldr	r3, [pc, #564]	; (80074f8 <UART_SetConfig+0x2d0>)
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d104      	bne.n	80072d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072c8:	f7fe fe7a 	bl	8005fc0 <HAL_RCC_GetPCLK2Freq>
 80072cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072d0:	e003      	b.n	80072da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072d2:	f7fe fe61 	bl	8005f98 <HAL_RCC_GetPCLK1Freq>
 80072d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072e4:	f040 810c 	bne.w	8007500 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072fa:	4622      	mov	r2, r4
 80072fc:	462b      	mov	r3, r5
 80072fe:	1891      	adds	r1, r2, r2
 8007300:	65b9      	str	r1, [r7, #88]	; 0x58
 8007302:	415b      	adcs	r3, r3
 8007304:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007306:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800730a:	4621      	mov	r1, r4
 800730c:	eb12 0801 	adds.w	r8, r2, r1
 8007310:	4629      	mov	r1, r5
 8007312:	eb43 0901 	adc.w	r9, r3, r1
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007322:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007326:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800732a:	4690      	mov	r8, r2
 800732c:	4699      	mov	r9, r3
 800732e:	4623      	mov	r3, r4
 8007330:	eb18 0303 	adds.w	r3, r8, r3
 8007334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007338:	462b      	mov	r3, r5
 800733a:	eb49 0303 	adc.w	r3, r9, r3
 800733e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800734e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007352:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007356:	460b      	mov	r3, r1
 8007358:	18db      	adds	r3, r3, r3
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
 800735c:	4613      	mov	r3, r2
 800735e:	eb42 0303 	adc.w	r3, r2, r3
 8007362:	657b      	str	r3, [r7, #84]	; 0x54
 8007364:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007368:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800736c:	f7f8 ff90 	bl	8000290 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4b61      	ldr	r3, [pc, #388]	; (80074fc <UART_SetConfig+0x2d4>)
 8007376:	fba3 2302 	umull	r2, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	011c      	lsls	r4, r3, #4
 800737e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007382:	2200      	movs	r2, #0
 8007384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007388:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800738c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007390:	4642      	mov	r2, r8
 8007392:	464b      	mov	r3, r9
 8007394:	1891      	adds	r1, r2, r2
 8007396:	64b9      	str	r1, [r7, #72]	; 0x48
 8007398:	415b      	adcs	r3, r3
 800739a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800739c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073a0:	4641      	mov	r1, r8
 80073a2:	eb12 0a01 	adds.w	sl, r2, r1
 80073a6:	4649      	mov	r1, r9
 80073a8:	eb43 0b01 	adc.w	fp, r3, r1
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073c0:	4692      	mov	sl, r2
 80073c2:	469b      	mov	fp, r3
 80073c4:	4643      	mov	r3, r8
 80073c6:	eb1a 0303 	adds.w	r3, sl, r3
 80073ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073ce:	464b      	mov	r3, r9
 80073d0:	eb4b 0303 	adc.w	r3, fp, r3
 80073d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073ec:	460b      	mov	r3, r1
 80073ee:	18db      	adds	r3, r3, r3
 80073f0:	643b      	str	r3, [r7, #64]	; 0x40
 80073f2:	4613      	mov	r3, r2
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	647b      	str	r3, [r7, #68]	; 0x44
 80073fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007402:	f7f8 ff45 	bl	8000290 <__aeabi_uldivmod>
 8007406:	4602      	mov	r2, r0
 8007408:	460b      	mov	r3, r1
 800740a:	4611      	mov	r1, r2
 800740c:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <UART_SetConfig+0x2d4>)
 800740e:	fba3 2301 	umull	r2, r3, r3, r1
 8007412:	095b      	lsrs	r3, r3, #5
 8007414:	2264      	movs	r2, #100	; 0x64
 8007416:	fb02 f303 	mul.w	r3, r2, r3
 800741a:	1acb      	subs	r3, r1, r3
 800741c:	00db      	lsls	r3, r3, #3
 800741e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007422:	4b36      	ldr	r3, [pc, #216]	; (80074fc <UART_SetConfig+0x2d4>)
 8007424:	fba3 2302 	umull	r2, r3, r3, r2
 8007428:	095b      	lsrs	r3, r3, #5
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007430:	441c      	add	r4, r3
 8007432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007436:	2200      	movs	r2, #0
 8007438:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800743c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007440:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007444:	4642      	mov	r2, r8
 8007446:	464b      	mov	r3, r9
 8007448:	1891      	adds	r1, r2, r2
 800744a:	63b9      	str	r1, [r7, #56]	; 0x38
 800744c:	415b      	adcs	r3, r3
 800744e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007450:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007454:	4641      	mov	r1, r8
 8007456:	1851      	adds	r1, r2, r1
 8007458:	6339      	str	r1, [r7, #48]	; 0x30
 800745a:	4649      	mov	r1, r9
 800745c:	414b      	adcs	r3, r1
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	f04f 0300 	mov.w	r3, #0
 8007468:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800746c:	4659      	mov	r1, fp
 800746e:	00cb      	lsls	r3, r1, #3
 8007470:	4651      	mov	r1, sl
 8007472:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007476:	4651      	mov	r1, sl
 8007478:	00ca      	lsls	r2, r1, #3
 800747a:	4610      	mov	r0, r2
 800747c:	4619      	mov	r1, r3
 800747e:	4603      	mov	r3, r0
 8007480:	4642      	mov	r2, r8
 8007482:	189b      	adds	r3, r3, r2
 8007484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007488:	464b      	mov	r3, r9
 800748a:	460a      	mov	r2, r1
 800748c:	eb42 0303 	adc.w	r3, r2, r3
 8007490:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074a8:	460b      	mov	r3, r1
 80074aa:	18db      	adds	r3, r3, r3
 80074ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80074ae:	4613      	mov	r3, r2
 80074b0:	eb42 0303 	adc.w	r3, r2, r3
 80074b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074be:	f7f8 fee7 	bl	8000290 <__aeabi_uldivmod>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4b0d      	ldr	r3, [pc, #52]	; (80074fc <UART_SetConfig+0x2d4>)
 80074c8:	fba3 1302 	umull	r1, r3, r3, r2
 80074cc:	095b      	lsrs	r3, r3, #5
 80074ce:	2164      	movs	r1, #100	; 0x64
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	3332      	adds	r3, #50	; 0x32
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <UART_SetConfig+0x2d4>)
 80074dc:	fba2 2303 	umull	r2, r3, r2, r3
 80074e0:	095b      	lsrs	r3, r3, #5
 80074e2:	f003 0207 	and.w	r2, r3, #7
 80074e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4422      	add	r2, r4
 80074ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074f0:	e105      	b.n	80076fe <UART_SetConfig+0x4d6>
 80074f2:	bf00      	nop
 80074f4:	40011000 	.word	0x40011000
 80074f8:	40011400 	.word	0x40011400
 80074fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007504:	2200      	movs	r2, #0
 8007506:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800750a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800750e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007512:	4642      	mov	r2, r8
 8007514:	464b      	mov	r3, r9
 8007516:	1891      	adds	r1, r2, r2
 8007518:	6239      	str	r1, [r7, #32]
 800751a:	415b      	adcs	r3, r3
 800751c:	627b      	str	r3, [r7, #36]	; 0x24
 800751e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007522:	4641      	mov	r1, r8
 8007524:	1854      	adds	r4, r2, r1
 8007526:	4649      	mov	r1, r9
 8007528:	eb43 0501 	adc.w	r5, r3, r1
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	00eb      	lsls	r3, r5, #3
 8007536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800753a:	00e2      	lsls	r2, r4, #3
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	4643      	mov	r3, r8
 8007542:	18e3      	adds	r3, r4, r3
 8007544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007548:	464b      	mov	r3, r9
 800754a:	eb45 0303 	adc.w	r3, r5, r3
 800754e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800755e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007562:	f04f 0200 	mov.w	r2, #0
 8007566:	f04f 0300 	mov.w	r3, #0
 800756a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800756e:	4629      	mov	r1, r5
 8007570:	008b      	lsls	r3, r1, #2
 8007572:	4621      	mov	r1, r4
 8007574:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007578:	4621      	mov	r1, r4
 800757a:	008a      	lsls	r2, r1, #2
 800757c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007580:	f7f8 fe86 	bl	8000290 <__aeabi_uldivmod>
 8007584:	4602      	mov	r2, r0
 8007586:	460b      	mov	r3, r1
 8007588:	4b60      	ldr	r3, [pc, #384]	; (800770c <UART_SetConfig+0x4e4>)
 800758a:	fba3 2302 	umull	r2, r3, r3, r2
 800758e:	095b      	lsrs	r3, r3, #5
 8007590:	011c      	lsls	r4, r3, #4
 8007592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800759c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	1891      	adds	r1, r2, r2
 80075aa:	61b9      	str	r1, [r7, #24]
 80075ac:	415b      	adcs	r3, r3
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075b4:	4641      	mov	r1, r8
 80075b6:	1851      	adds	r1, r2, r1
 80075b8:	6139      	str	r1, [r7, #16]
 80075ba:	4649      	mov	r1, r9
 80075bc:	414b      	adcs	r3, r1
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	f04f 0200 	mov.w	r2, #0
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075cc:	4659      	mov	r1, fp
 80075ce:	00cb      	lsls	r3, r1, #3
 80075d0:	4651      	mov	r1, sl
 80075d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075d6:	4651      	mov	r1, sl
 80075d8:	00ca      	lsls	r2, r1, #3
 80075da:	4610      	mov	r0, r2
 80075dc:	4619      	mov	r1, r3
 80075de:	4603      	mov	r3, r0
 80075e0:	4642      	mov	r2, r8
 80075e2:	189b      	adds	r3, r3, r2
 80075e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075e8:	464b      	mov	r3, r9
 80075ea:	460a      	mov	r2, r1
 80075ec:	eb42 0303 	adc.w	r3, r2, r3
 80075f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80075fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007600:	f04f 0200 	mov.w	r2, #0
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800760c:	4649      	mov	r1, r9
 800760e:	008b      	lsls	r3, r1, #2
 8007610:	4641      	mov	r1, r8
 8007612:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007616:	4641      	mov	r1, r8
 8007618:	008a      	lsls	r2, r1, #2
 800761a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800761e:	f7f8 fe37 	bl	8000290 <__aeabi_uldivmod>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	4b39      	ldr	r3, [pc, #228]	; (800770c <UART_SetConfig+0x4e4>)
 8007628:	fba3 1302 	umull	r1, r3, r3, r2
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	2164      	movs	r1, #100	; 0x64
 8007630:	fb01 f303 	mul.w	r3, r1, r3
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	3332      	adds	r3, #50	; 0x32
 800763a:	4a34      	ldr	r2, [pc, #208]	; (800770c <UART_SetConfig+0x4e4>)
 800763c:	fba2 2303 	umull	r2, r3, r2, r3
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007646:	441c      	add	r4, r3
 8007648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800764c:	2200      	movs	r2, #0
 800764e:	673b      	str	r3, [r7, #112]	; 0x70
 8007650:	677a      	str	r2, [r7, #116]	; 0x74
 8007652:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	1891      	adds	r1, r2, r2
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	415b      	adcs	r3, r3
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007666:	4641      	mov	r1, r8
 8007668:	1851      	adds	r1, r2, r1
 800766a:	6039      	str	r1, [r7, #0]
 800766c:	4649      	mov	r1, r9
 800766e:	414b      	adcs	r3, r1
 8007670:	607b      	str	r3, [r7, #4]
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800767e:	4659      	mov	r1, fp
 8007680:	00cb      	lsls	r3, r1, #3
 8007682:	4651      	mov	r1, sl
 8007684:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007688:	4651      	mov	r1, sl
 800768a:	00ca      	lsls	r2, r1, #3
 800768c:	4610      	mov	r0, r2
 800768e:	4619      	mov	r1, r3
 8007690:	4603      	mov	r3, r0
 8007692:	4642      	mov	r2, r8
 8007694:	189b      	adds	r3, r3, r2
 8007696:	66bb      	str	r3, [r7, #104]	; 0x68
 8007698:	464b      	mov	r3, r9
 800769a:	460a      	mov	r2, r1
 800769c:	eb42 0303 	adc.w	r3, r2, r3
 80076a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	663b      	str	r3, [r7, #96]	; 0x60
 80076ac:	667a      	str	r2, [r7, #100]	; 0x64
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076ba:	4649      	mov	r1, r9
 80076bc:	008b      	lsls	r3, r1, #2
 80076be:	4641      	mov	r1, r8
 80076c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076c4:	4641      	mov	r1, r8
 80076c6:	008a      	lsls	r2, r1, #2
 80076c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076cc:	f7f8 fde0 	bl	8000290 <__aeabi_uldivmod>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4b0d      	ldr	r3, [pc, #52]	; (800770c <UART_SetConfig+0x4e4>)
 80076d6:	fba3 1302 	umull	r1, r3, r3, r2
 80076da:	095b      	lsrs	r3, r3, #5
 80076dc:	2164      	movs	r1, #100	; 0x64
 80076de:	fb01 f303 	mul.w	r3, r1, r3
 80076e2:	1ad3      	subs	r3, r2, r3
 80076e4:	011b      	lsls	r3, r3, #4
 80076e6:	3332      	adds	r3, #50	; 0x32
 80076e8:	4a08      	ldr	r2, [pc, #32]	; (800770c <UART_SetConfig+0x4e4>)
 80076ea:	fba2 2303 	umull	r2, r3, r2, r3
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f003 020f 	and.w	r2, r3, #15
 80076f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4422      	add	r2, r4
 80076fc:	609a      	str	r2, [r3, #8]
}
 80076fe:	bf00      	nop
 8007700:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007704:	46bd      	mov	sp, r7
 8007706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770a:	bf00      	nop
 800770c:	51eb851f 	.word	0x51eb851f

08007710 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d123      	bne.n	800776a <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800772a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	6851      	ldr	r1, [r2, #4]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	6892      	ldr	r2, [r2, #8]
 8007736:	4311      	orrs	r1, r2
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	68d2      	ldr	r2, [r2, #12]
 800773c:	4311      	orrs	r1, r2
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	6912      	ldr	r2, [r2, #16]
 8007742:	4311      	orrs	r1, r2
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	6952      	ldr	r2, [r2, #20]
 8007748:	4311      	orrs	r1, r2
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	6992      	ldr	r2, [r2, #24]
 800774e:	4311      	orrs	r1, r2
 8007750:	683a      	ldr	r2, [r7, #0]
 8007752:	69d2      	ldr	r2, [r2, #28]
 8007754:	4311      	orrs	r1, r2
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	6a12      	ldr	r2, [r2, #32]
 800775a:	4311      	orrs	r1, r2
 800775c:	683a      	ldr	r2, [r7, #0]
 800775e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007760:	430a      	orrs	r2, r1
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	601a      	str	r2, [r3, #0]
 8007768:	e028      	b.n	80077bc <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	69d9      	ldr	r1, [r3, #28]
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	4319      	orrs	r1, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	430b      	orrs	r3, r1
 8007782:	431a      	orrs	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007790:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	6851      	ldr	r1, [r2, #4]
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	6892      	ldr	r2, [r2, #8]
 800779c:	4311      	orrs	r1, r2
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68d2      	ldr	r2, [r2, #12]
 80077a2:	4311      	orrs	r1, r2
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	6912      	ldr	r2, [r2, #16]
 80077a8:	4311      	orrs	r1, r2
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	6952      	ldr	r2, [r2, #20]
 80077ae:	4311      	orrs	r1, r2
 80077b0:	683a      	ldr	r2, [r7, #0]
 80077b2:	6992      	ldr	r2, [r2, #24]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr

080077ca <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d128      	bne.n	800782e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	1e59      	subs	r1, r3, #1
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	3b01      	subs	r3, #1
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	4319      	orrs	r1, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	021b      	lsls	r3, r3, #8
 80077fc:	4319      	orrs	r1, r3
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	3b01      	subs	r3, #1
 8007804:	031b      	lsls	r3, r3, #12
 8007806:	4319      	orrs	r1, r3
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	3b01      	subs	r3, #1
 800780e:	041b      	lsls	r3, r3, #16
 8007810:	4319      	orrs	r1, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	3b01      	subs	r3, #1
 8007818:	051b      	lsls	r3, r3, #20
 800781a:	4319      	orrs	r1, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	3b01      	subs	r3, #1
 8007822:	061b      	lsls	r3, r3, #24
 8007824:	430b      	orrs	r3, r1
 8007826:	431a      	orrs	r2, r3
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	609a      	str	r2, [r3, #8]
 800782c:	e02f      	b.n	800788e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	68d2      	ldr	r2, [r2, #12]
 800783e:	3a01      	subs	r2, #1
 8007840:	0311      	lsls	r1, r2, #12
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	6952      	ldr	r2, [r2, #20]
 8007846:	3a01      	subs	r2, #1
 8007848:	0512      	lsls	r2, r2, #20
 800784a:	430a      	orrs	r2, r1
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	1e59      	subs	r1, r3, #1
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	3b01      	subs	r3, #1
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	4319      	orrs	r1, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	3b01      	subs	r3, #1
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	4319      	orrs	r1, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	3b01      	subs	r3, #1
 800787a:	041b      	lsls	r3, r3, #16
 800787c:	4319      	orrs	r1, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	3b01      	subs	r3, #1
 8007884:	061b      	lsls	r3, r3, #24
 8007886:	430b      	orrs	r3, r1
 8007888:	431a      	orrs	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800789c:	b084      	sub	sp, #16
 800789e:	b580      	push	{r7, lr}
 80078a0:	b084      	sub	sp, #16
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	f107 001c 	add.w	r0, r7, #28
 80078aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d122      	bne.n	80078fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80078c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80078dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d105      	bne.n	80078ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9c0 	bl	8007c74 <USB_CoreReset>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
 80078f8:	e01a      	b.n	8007930 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f9b4 	bl	8007c74 <USB_CoreReset>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007912:	2b00      	cmp	r3, #0
 8007914:	d106      	bne.n	8007924 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	639a      	str	r2, [r3, #56]	; 0x38
 8007922:	e005      	b.n	8007930 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007932:	2b01      	cmp	r3, #1
 8007934:	d10b      	bne.n	800794e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f043 0206 	orr.w	r2, r3, #6
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f043 0220 	orr.w	r2, r3, #32
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800795a:	b004      	add	sp, #16
 800795c:	4770      	bx	lr

0800795e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f043 0201 	orr.w	r2, r3, #1
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f023 0201 	bic.w	r2, r3, #1
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b084      	sub	sp, #16
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
 80079aa:	460b      	mov	r3, r1
 80079ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d115      	bne.n	80079f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80079d0:	2001      	movs	r0, #1
 80079d2:	f7fa fd4b 	bl	800246c <HAL_Delay>
      ms++;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3301      	adds	r3, #1
 80079da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f93a 	bl	8007c56 <USB_GetMode>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d01e      	beq.n	8007a26 <USB_SetCurrentMode+0x84>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2b31      	cmp	r3, #49	; 0x31
 80079ec:	d9f0      	bls.n	80079d0 <USB_SetCurrentMode+0x2e>
 80079ee:	e01a      	b.n	8007a26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d115      	bne.n	8007a22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007a02:	2001      	movs	r0, #1
 8007a04:	f7fa fd32 	bl	800246c <HAL_Delay>
      ms++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f921 	bl	8007c56 <USB_GetMode>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d005      	beq.n	8007a26 <USB_SetCurrentMode+0x84>
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b31      	cmp	r3, #49	; 0x31
 8007a1e:	d9f0      	bls.n	8007a02 <USB_SetCurrentMode+0x60>
 8007a20:	e001      	b.n	8007a26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e005      	b.n	8007a32 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b32      	cmp	r3, #50	; 0x32
 8007a2a:	d101      	bne.n	8007a30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	4a13      	ldr	r2, [pc, #76]	; (8007aa0 <USB_FlushTxFifo+0x64>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d901      	bls.n	8007a5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	e01b      	b.n	8007a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	daf2      	bge.n	8007a4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	019b      	lsls	r3, r3, #6
 8007a6c:	f043 0220 	orr.w	r2, r3, #32
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	4a08      	ldr	r2, [pc, #32]	; (8007aa0 <USB_FlushTxFifo+0x64>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d901      	bls.n	8007a86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e006      	b.n	8007a94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0320 	and.w	r3, r3, #32
 8007a8e:	2b20      	cmp	r3, #32
 8007a90:	d0f0      	beq.n	8007a74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	00030d40 	.word	0x00030d40

08007aa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	4a11      	ldr	r2, [pc, #68]	; (8007b00 <USB_FlushRxFifo+0x5c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d901      	bls.n	8007ac2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e018      	b.n	8007af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	daf2      	bge.n	8007ab0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007aca:	2300      	movs	r3, #0
 8007acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2210      	movs	r2, #16
 8007ad2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4a08      	ldr	r2, [pc, #32]	; (8007b00 <USB_FlushRxFifo+0x5c>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e006      	b.n	8007af4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	f003 0310 	and.w	r3, r3, #16
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d0f0      	beq.n	8007ad4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	00030d40 	.word	0x00030d40

08007b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b089      	sub	sp, #36	; 0x24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4611      	mov	r1, r2
 8007b10:	461a      	mov	r2, r3
 8007b12:	460b      	mov	r3, r1
 8007b14:	71fb      	strb	r3, [r7, #7]
 8007b16:	4613      	mov	r3, r2
 8007b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d123      	bne.n	8007b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b2a:	88bb      	ldrh	r3, [r7, #4]
 8007b2c:	3303      	adds	r3, #3
 8007b2e:	089b      	lsrs	r3, r3, #2
 8007b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	e018      	b.n	8007b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	031a      	lsls	r2, r3, #12
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b44:	461a      	mov	r2, r3
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	3301      	adds	r3, #1
 8007b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3301      	adds	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	3301      	adds	r3, #1
 8007b68:	61bb      	str	r3, [r7, #24]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3e2      	bcc.n	8007b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3724      	adds	r7, #36	; 0x24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b08b      	sub	sp, #44	; 0x2c
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	089b      	lsrs	r3, r3, #2
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b9e:	88fb      	ldrh	r3, [r7, #6]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	623b      	str	r3, [r7, #32]
 8007baa:	e014      	b.n	8007bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	3301      	adds	r3, #1
 8007bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	3301      	adds	r3, #1
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	623b      	str	r3, [r7, #32]
 8007bd6:	6a3a      	ldr	r2, [r7, #32]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d3e6      	bcc.n	8007bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007bde:	8bfb      	ldrh	r3, [r7, #30]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01e      	beq.n	8007c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f107 0310 	add.w	r3, r7, #16
 8007bf4:	6812      	ldr	r2, [r2, #0]
 8007bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
 8007c04:	b2da      	uxtb	r2, r3
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	701a      	strb	r2, [r3, #0]
      i++;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	3301      	adds	r3, #1
 8007c14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c16:	8bfb      	ldrh	r3, [r7, #30]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c1c:	8bfb      	ldrh	r3, [r7, #30]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1ea      	bne.n	8007bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	372c      	adds	r7, #44	; 0x2c
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4013      	ands	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c48:	68fb      	ldr	r3, [r7, #12]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr

08007c56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b083      	sub	sp, #12
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	f003 0301 	and.w	r3, r3, #1
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
	...

08007c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	3301      	adds	r3, #1
 8007c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4a13      	ldr	r2, [pc, #76]	; (8007cd8 <USB_CoreReset+0x64>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d901      	bls.n	8007c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e01b      	b.n	8007cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	daf2      	bge.n	8007c80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f043 0201 	orr.w	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3301      	adds	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4a09      	ldr	r2, [pc, #36]	; (8007cd8 <USB_CoreReset+0x64>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d901      	bls.n	8007cbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	e006      	b.n	8007cca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d0f0      	beq.n	8007caa <USB_CoreReset+0x36>

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	00030d40 	.word	0x00030d40

08007cdc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cdc:	b084      	sub	sp, #16
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2300      	movs	r3, #0
 8007d00:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d018      	beq.n	8007d64 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d10a      	bne.n	8007d4e <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d46:	f043 0304 	orr.w	r3, r3, #4
 8007d4a:	6013      	str	r3, [r2, #0]
 8007d4c:	e014      	b.n	8007d78 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d5c:	f023 0304 	bic.w	r3, r3, #4
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e009      	b.n	8007d78 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d72:	f023 0304 	bic.w	r3, r3, #4
 8007d76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d78:	2110      	movs	r1, #16
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7ff fe5e 	bl	8007a3c <USB_FlushTxFifo>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff fe8a 	bl	8007aa4 <USB_FlushRxFifo>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	e015      	b.n	8007dcc <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dac:	461a      	mov	r2, r3
 8007dae:	f04f 33ff 	mov.w	r3, #4294967295
 8007db2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d3e5      	bcc.n	8007da0 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8007de0:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007df4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a13      	ldr	r2, [pc, #76]	; (8007e48 <USB_HostInit+0x16c>)
 8007dfa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a13      	ldr	r2, [pc, #76]	; (8007e4c <USB_HostInit+0x170>)
 8007e00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e04:	e009      	b.n	8007e1a <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2280      	movs	r2, #128	; 0x80
 8007e0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a10      	ldr	r2, [pc, #64]	; (8007e50 <USB_HostInit+0x174>)
 8007e10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a0f      	ldr	r2, [pc, #60]	; (8007e54 <USB_HostInit+0x178>)
 8007e16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d105      	bne.n	8007e2c <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	f043 0210 	orr.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699a      	ldr	r2, [r3, #24]
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <USB_HostInit+0x17c>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e44:	b004      	add	sp, #16
 8007e46:	4770      	bx	lr
 8007e48:	01000200 	.word	0x01000200
 8007e4c:	00e00300 	.word	0x00e00300
 8007e50:	00600080 	.word	0x00600080
 8007e54:	004000e0 	.word	0x004000e0
 8007e58:	a3200008 	.word	0xa3200008

08007e5c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007e94:	4313      	orrs	r3, r2
 8007e96:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e98:	78fb      	ldrb	r3, [r7, #3]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d107      	bne.n	8007eae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007eaa:	6053      	str	r3, [r2, #4]
 8007eac:	e009      	b.n	8007ec2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d106      	bne.n	8007ec2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eba:	461a      	mov	r2, r3
 8007ebc:	f241 7370 	movw	r3, #6000	; 0x1770
 8007ec0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007ef0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007efe:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007f00:	2064      	movs	r0, #100	; 0x64
 8007f02:	f7fa fab3 	bl	800246c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f12:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f14:	200a      	movs	r0, #10
 8007f16:	f7fa faa9 	bl	800246c <HAL_Delay>

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f48:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d109      	bne.n	8007f68 <USB_DriveVbus+0x44>
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d106      	bne.n	8007f68 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f66:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f72:	d109      	bne.n	8007f88 <USB_DriveVbus+0x64>
 8007f74:	78fb      	ldrb	r3, [r7, #3]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f86:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	0c5b      	lsrs	r3, r3, #17
 8007fb4:	f003 0303 	and.w	r3, r3, #3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	b29b      	uxth	r3, r3
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe4:	4770      	bx	lr
	...

08007fe8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	4611      	mov	r1, r2
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	70fb      	strb	r3, [r7, #3]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	70bb      	strb	r3, [r7, #2]
 8007ffe:	4613      	mov	r3, r2
 8008000:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008002:	2300      	movs	r3, #0
 8008004:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800800a:	78fb      	ldrb	r3, [r7, #3]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008016:	461a      	mov	r2, r3
 8008018:	f04f 33ff 	mov.w	r3, #4294967295
 800801c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800801e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008022:	2b03      	cmp	r3, #3
 8008024:	d87e      	bhi.n	8008124 <USB_HC_Init+0x13c>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <USB_HC_Init+0x44>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800803d 	.word	0x0800803d
 8008030:	080080e7 	.word	0x080080e7
 8008034:	0800803d 	.word	0x0800803d
 8008038:	080080a9 	.word	0x080080a9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	4413      	add	r3, r2
 8008044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008048:	461a      	mov	r2, r3
 800804a:	f240 439d 	movw	r3, #1181	; 0x49d
 800804e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008050:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008054:	2b00      	cmp	r3, #0
 8008056:	da10      	bge.n	800807a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	4413      	add	r3, r2
 8008060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	78fa      	ldrb	r2, [r7, #3]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	440a      	add	r2, r1
 800806e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008076:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008078:	e057      	b.n	800812a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008082:	2b00      	cmp	r3, #0
 8008084:	d051      	beq.n	800812a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	015a      	lsls	r2, r3, #5
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	4413      	add	r3, r2
 800808e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	78fa      	ldrb	r2, [r7, #3]
 8008096:	0151      	lsls	r1, r2, #5
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	440a      	add	r2, r1
 800809c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080a4:	60d3      	str	r3, [r2, #12]
      break;
 80080a6:	e040      	b.n	800812a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080a8:	78fb      	ldrb	r3, [r7, #3]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b4:	461a      	mov	r2, r3
 80080b6:	f240 639d 	movw	r3, #1693	; 0x69d
 80080ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	da34      	bge.n	800812e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	78fa      	ldrb	r2, [r7, #3]
 80080d4:	0151      	lsls	r1, r2, #5
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	440a      	add	r2, r1
 80080da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080e2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080e4:	e023      	b.n	800812e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080e6:	78fb      	ldrb	r3, [r7, #3]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	461a      	mov	r2, r3
 80080f4:	f240 2325 	movw	r3, #549	; 0x225
 80080f8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080fa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	da17      	bge.n	8008132 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008102:	78fb      	ldrb	r3, [r7, #3]
 8008104:	015a      	lsls	r2, r3, #5
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	4413      	add	r3, r2
 800810a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	78fa      	ldrb	r2, [r7, #3]
 8008112:	0151      	lsls	r1, r2, #5
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	440a      	add	r2, r1
 8008118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800811c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008120:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008122:	e006      	b.n	8008132 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	77fb      	strb	r3, [r7, #31]
      break;
 8008128:	e004      	b.n	8008134 <USB_HC_Init+0x14c>
      break;
 800812a:	bf00      	nop
 800812c:	e002      	b.n	8008134 <USB_HC_Init+0x14c>
      break;
 800812e:	bf00      	nop
 8008130:	e000      	b.n	8008134 <USB_HC_Init+0x14c>
      break;
 8008132:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	4413      	add	r3, r2
 800813c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	78fa      	ldrb	r2, [r7, #3]
 8008144:	0151      	lsls	r1, r2, #5
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	440a      	add	r2, r1
 800814a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800814e:	f043 0302 	orr.w	r3, r3, #2
 8008152:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	78fb      	ldrb	r3, [r7, #3]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	2101      	movs	r1, #1
 8008164:	fa01 f303 	lsl.w	r3, r1, r3
 8008168:	6939      	ldr	r1, [r7, #16]
 800816a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800816e:	4313      	orrs	r3, r2
 8008170:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800817e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	da03      	bge.n	800818e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800818a:	61bb      	str	r3, [r7, #24]
 800818c:	e001      	b.n	8008192 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff feff 	bl	8007f96 <USB_GetHostSpeed>
 8008198:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800819a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d106      	bne.n	80081b0 <USB_HC_Init+0x1c8>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d003      	beq.n	80081b0 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e001      	b.n	80081b4 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081b4:	787b      	ldrb	r3, [r7, #1]
 80081b6:	059b      	lsls	r3, r3, #22
 80081b8:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081bc:	78bb      	ldrb	r3, [r7, #2]
 80081be:	02db      	lsls	r3, r3, #11
 80081c0:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081c4:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081ca:	049b      	lsls	r3, r3, #18
 80081cc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081d2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80081d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081d8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	0159      	lsls	r1, r3, #5
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	440b      	add	r3, r1
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081ea:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081f0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80081f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081f6:	2b03      	cmp	r3, #3
 80081f8:	d003      	beq.n	8008202 <USB_HC_Init+0x21a>
 80081fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d10f      	bne.n	8008222 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	78fa      	ldrb	r2, [r7, #3]
 8008212:	0151      	lsls	r1, r2, #5
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	440a      	add	r2, r1
 8008218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800821c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008220:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008222:	7ffb      	ldrb	r3, [r7, #31]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	; 0x30
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008248:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d02d      	beq.n	80082b2 <USB_HC_StartXfer+0x86>
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	791b      	ldrb	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d129      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d117      	bne.n	8008294 <USB_HC_StartXfer+0x68>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	79db      	ldrb	r3, [r3, #7]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <USB_HC_StartXfer+0x48>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	79db      	ldrb	r3, [r3, #7]
 8008270:	2b02      	cmp	r3, #2
 8008272:	d10f      	bne.n	8008294 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	6a3a      	ldr	r2, [r7, #32]
 8008288:	440a      	add	r2, r1
 800828a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008294:	79fb      	ldrb	r3, [r7, #7]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	795b      	ldrb	r3, [r3, #5]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fa0f 	bl	80086cc <USB_DoPing>
      return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e0f8      	b.n	80084a4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	8912      	ldrh	r2, [r2, #8]
 80082c2:	4413      	add	r3, r2
 80082c4:	3b01      	subs	r3, #1
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	8912      	ldrh	r2, [r2, #8]
 80082ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80082d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80082d2:	8b7b      	ldrh	r3, [r7, #26]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d90b      	bls.n	80082f0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80082d8:	8b7b      	ldrh	r3, [r7, #26]
 80082da:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	8912      	ldrh	r2, [r2, #8]
 80082e2:	fb03 f202 	mul.w	r2, r3, r2
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	611a      	str	r2, [r3, #16]
 80082ea:	e001      	b.n	80082f0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80082ec:	2301      	movs	r3, #1
 80082ee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	78db      	ldrb	r3, [r3, #3]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d007      	beq.n	8008308 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	8912      	ldrh	r2, [r2, #8]
 80082fe:	fb03 f202 	mul.w	r2, r3, r2
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	611a      	str	r2, [r3, #16]
 8008306:	e003      	b.n	8008310 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	695a      	ldr	r2, [r3, #20]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008318:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800831a:	04d9      	lsls	r1, r3, #19
 800831c:	4b63      	ldr	r3, [pc, #396]	; (80084ac <USB_HC_StartXfer+0x280>)
 800831e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008320:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	7a9b      	ldrb	r3, [r3, #10]
 8008326:	075b      	lsls	r3, r3, #29
 8008328:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800832c:	69f9      	ldr	r1, [r7, #28]
 800832e:	0148      	lsls	r0, r1, #5
 8008330:	6a39      	ldr	r1, [r7, #32]
 8008332:	4401      	add	r1, r0
 8008334:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008338:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800833a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	68d9      	ldr	r1, [r3, #12]
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	015a      	lsls	r2, r3, #5
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	4413      	add	r3, r2
 800834e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008352:	460a      	mov	r2, r1
 8008354:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	bf0c      	ite	eq
 8008366:	2301      	moveq	r3, #1
 8008368:	2300      	movne	r3, #0
 800836a:	b2db      	uxtb	r3, r3
 800836c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	4413      	add	r3, r2
 8008376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	6a3a      	ldr	r2, [r7, #32]
 8008382:	440a      	add	r2, r1
 8008384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008388:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800838c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	015a      	lsls	r2, r3, #5
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	4413      	add	r3, r2
 8008396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	7e7b      	ldrb	r3, [r7, #25]
 800839e:	075b      	lsls	r3, r3, #29
 80083a0:	69f9      	ldr	r1, [r7, #28]
 80083a2:	0148      	lsls	r0, r1, #5
 80083a4:	6a39      	ldr	r1, [r7, #32]
 80083a6:	4401      	add	r1, r0
 80083a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	015a      	lsls	r2, r3, #5
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	4413      	add	r3, r2
 80083b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	78db      	ldrb	r3, [r3, #3]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	613b      	str	r3, [r7, #16]
 80083d8:	e003      	b.n	80083e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80083e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083f6:	461a      	mov	r2, r3
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008402:	2300      	movs	r3, #0
 8008404:	e04e      	b.n	80084a4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d149      	bne.n	80084a2 <USB_HC_StartXfer+0x276>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d045      	beq.n	80084a2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	79db      	ldrb	r3, [r3, #7]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d830      	bhi.n	8008480 <USB_HC_StartXfer+0x254>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <USB_HC_StartXfer+0x1f8>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008435 	.word	0x08008435
 8008428:	08008459 	.word	0x08008459
 800842c:	08008435 	.word	0x08008435
 8008430:	08008459 	.word	0x08008459
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	3303      	adds	r3, #3
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800843e:	8afa      	ldrh	r2, [r7, #22]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	b29b      	uxth	r3, r3
 8008446:	429a      	cmp	r2, r3
 8008448:	d91c      	bls.n	8008484 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	f043 0220 	orr.w	r2, r3, #32
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	619a      	str	r2, [r3, #24]
        }
        break;
 8008456:	e015      	b.n	8008484 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	3303      	adds	r3, #3
 800845e:	089b      	lsrs	r3, r3, #2
 8008460:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008462:	8afa      	ldrh	r2, [r7, #22]
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	b29b      	uxth	r3, r3
 800846e:	429a      	cmp	r2, r3
 8008470:	d90a      	bls.n	8008488 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	619a      	str	r2, [r3, #24]
        }
        break;
 800847e:	e003      	b.n	8008488 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008480:	bf00      	nop
 8008482:	e002      	b.n	800848a <USB_HC_StartXfer+0x25e>
        break;
 8008484:	bf00      	nop
 8008486:	e000      	b.n	800848a <USB_HC_StartXfer+0x25e>
        break;
 8008488:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	68d9      	ldr	r1, [r3, #12]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	785a      	ldrb	r2, [r3, #1]
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	b29b      	uxth	r3, r3
 8008498:	2000      	movs	r0, #0
 800849a:	9000      	str	r0, [sp, #0]
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fb31 	bl	8007b04 <USB_WritePacket>
  }

  return HAL_OK;
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3728      	adds	r7, #40	; 0x28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	1ff80000 	.word	0x1ff80000

080084b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	b29b      	uxth	r3, r3
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80084d2:	b480      	push	{r7}
 80084d4:	b089      	sub	sp, #36	; 0x24
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	6078      	str	r0, [r7, #4]
 80084da:	460b      	mov	r3, r1
 80084dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	0c9b      	lsrs	r3, r3, #18
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	4413      	add	r3, r2
 8008508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	0fdb      	lsrs	r3, r3, #31
 8008510:	f003 0301 	and.w	r3, r3, #1
 8008514:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b20      	cmp	r3, #32
 8008520:	d104      	bne.n	800852c <USB_HC_Halt+0x5a>
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	e0c8      	b.n	80086be <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <USB_HC_Halt+0x66>
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b02      	cmp	r3, #2
 8008536:	d163      	bne.n	8008600 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	69ba      	ldr	r2, [r7, #24]
 8008548:	0151      	lsls	r1, r2, #5
 800854a:	69fa      	ldr	r2, [r7, #28]
 800854c:	440a      	add	r2, r1
 800854e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008552:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008556:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f003 0320 	and.w	r3, r3, #32
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 80ab 	bne.w	80086bc <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d133      	bne.n	80085da <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	4413      	add	r3, r2
 800857a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	69ba      	ldr	r2, [r7, #24]
 8008582:	0151      	lsls	r1, r2, #5
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	440a      	add	r2, r1
 8008588:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800858c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008590:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008592:	69bb      	ldr	r3, [r7, #24]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	4413      	add	r3, r2
 800859a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	0151      	lsls	r1, r2, #5
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	440a      	add	r2, r1
 80085a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085b0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	3301      	adds	r3, #1
 80085b6:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085be:	d81d      	bhi.n	80085fc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	015a      	lsls	r2, r3, #5
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	4413      	add	r3, r2
 80085c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80085d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085d6:	d0ec      	beq.n	80085b2 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085d8:	e070      	b.n	80086bc <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	015a      	lsls	r2, r3, #5
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	69ba      	ldr	r2, [r7, #24]
 80085ea:	0151      	lsls	r1, r2, #5
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	440a      	add	r2, r1
 80085f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085f8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085fa:	e05f      	b.n	80086bc <USB_HC_Halt+0x1ea>
            break;
 80085fc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085fe:	e05d      	b.n	80086bc <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	440a      	add	r2, r1
 8008616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800861a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800861e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d133      	bne.n	8008698 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	4413      	add	r3, r2
 8008638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69ba      	ldr	r2, [r7, #24]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	69fa      	ldr	r2, [r7, #28]
 8008644:	440a      	add	r2, r1
 8008646:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800864a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800864e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	69fa      	ldr	r2, [r7, #28]
 8008664:	440a      	add	r2, r1
 8008666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800866a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800866e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800867c:	d81d      	bhi.n	80086ba <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	015a      	lsls	r2, r3, #5
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	4413      	add	r3, r2
 8008686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008694:	d0ec      	beq.n	8008670 <USB_HC_Halt+0x19e>
 8008696:	e011      	b.n	80086bc <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	015a      	lsls	r2, r3, #5
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	4413      	add	r3, r2
 80086a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	0151      	lsls	r1, r2, #5
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	440a      	add	r2, r1
 80086ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086b6:	6013      	str	r3, [r2, #0]
 80086b8:	e000      	b.n	80086bc <USB_HC_Halt+0x1ea>
          break;
 80086ba:	bf00      	nop
    }
  }

  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3724      	adds	r7, #36	; 0x24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
	...

080086cc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086e0:	2301      	movs	r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	04da      	lsls	r2, r3, #19
 80086e8:	4b15      	ldr	r3, [pc, #84]	; (8008740 <USB_DoPing+0x74>)
 80086ea:	4013      	ands	r3, r2
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086fc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4413      	add	r3, r2
 8008706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008714:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800871c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	015a      	lsls	r2, r3, #5
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	4413      	add	r3, r2
 8008726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800872a:	461a      	mov	r2, r3
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	1ff80000 	.word	0x1ff80000

08008744 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b088      	sub	sp, #32
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7ff f911 	bl	8007980 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800875e:	2110      	movs	r1, #16
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff f96b 	bl	8007a3c <USB_FlushTxFifo>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff f997 	bl	8007aa4 <USB_FlushRxFifo>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e01f      	b.n	80087c6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800879c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087a4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087ac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087ba:	461a      	mov	r2, r3
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	3301      	adds	r3, #1
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b0f      	cmp	r3, #15
 80087ca:	d9dc      	bls.n	8008786 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087cc:	2300      	movs	r3, #0
 80087ce:	61bb      	str	r3, [r7, #24]
 80087d0:	e034      	b.n	800883c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087e8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80087f8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	015a      	lsls	r2, r3, #5
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4413      	add	r3, r2
 8008802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008806:	461a      	mov	r2, r3
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008818:	d80c      	bhi.n	8008834 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	015a      	lsls	r2, r3, #5
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800882c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008830:	d0ec      	beq.n	800880c <USB_StopHost+0xc8>
 8008832:	e000      	b.n	8008836 <USB_StopHost+0xf2>
        break;
 8008834:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	3301      	adds	r3, #1
 800883a:	61bb      	str	r3, [r7, #24]
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	2b0f      	cmp	r3, #15
 8008840:	d9c7      	bls.n	80087d2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008848:	461a      	mov	r2, r3
 800884a:	f04f 33ff 	mov.w	r3, #4294967295
 800884e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f7ff f880 	bl	800795e <USB_EnableGlobalInt>

  return ret;
 800885e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008860:	4618      	mov	r0, r3
 8008862:	3720      	adds	r7, #32
 8008864:	46bd      	mov	sp, r7
 8008866:	bd80      	pop	{r7, pc}

08008868 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b089      	sub	sp, #36	; 0x24
 800886c:	af04      	add	r7, sp, #16
 800886e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008870:	2301      	movs	r3, #1
 8008872:	2202      	movs	r2, #2
 8008874:	2102      	movs	r1, #2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fc66 	bl	8009148 <USBH_FindInterface>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2bff      	cmp	r3, #255	; 0xff
 8008884:	d002      	beq.n	800888c <USBH_CDC_InterfaceInit+0x24>
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d901      	bls.n	8008890 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	e13d      	b.n	8008b0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008890:	7bfb      	ldrb	r3, [r7, #15]
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fc3b 	bl	8009110 <USBH_SelectInterface>
 800889a:	4603      	mov	r3, r0
 800889c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80088a4:	2302      	movs	r3, #2
 80088a6:	e131      	b.n	8008b0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80088ae:	2050      	movs	r0, #80	; 0x50
 80088b0:	f002 fb00 	bl	800aeb4 <malloc>
 80088b4:	4603      	mov	r3, r0
 80088b6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80088c8:	2302      	movs	r3, #2
 80088ca:	e11f      	b.n	8008b0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80088cc:	2250      	movs	r2, #80	; 0x50
 80088ce:	2100      	movs	r1, #0
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f002 faff 	bl	800aed4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	211a      	movs	r1, #26
 80088dc:	fb01 f303 	mul.w	r3, r1, r3
 80088e0:	4413      	add	r3, r2
 80088e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	b25b      	sxtb	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	da15      	bge.n	800891a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	211a      	movs	r1, #26
 80088f4:	fb01 f303 	mul.w	r3, r1, r3
 80088f8:	4413      	add	r3, r2
 80088fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80088fe:	781a      	ldrb	r2, [r3, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	211a      	movs	r1, #26
 800890a:	fb01 f303 	mul.w	r3, r1, r3
 800890e:	4413      	add	r3, r2
 8008910:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008914:	881a      	ldrh	r2, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	785b      	ldrb	r3, [r3, #1]
 800891e:	4619      	mov	r1, r3
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 ff2c 	bl	800a77e <USBH_AllocPipe>
 8008926:	4603      	mov	r3, r0
 8008928:	461a      	mov	r2, r3
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	7819      	ldrb	r1, [r3, #0]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7858      	ldrb	r0, [r3, #1]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	8952      	ldrh	r2, [r2, #10]
 8008946:	9202      	str	r2, [sp, #8]
 8008948:	2203      	movs	r2, #3
 800894a:	9201      	str	r2, [sp, #4]
 800894c:	9300      	str	r3, [sp, #0]
 800894e:	4623      	mov	r3, r4
 8008950:	4602      	mov	r2, r0
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f001 fee4 	bl	800a720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2200      	movs	r2, #0
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f002 f9f9 	bl	800ad58 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008966:	2300      	movs	r3, #0
 8008968:	2200      	movs	r2, #0
 800896a:	210a      	movs	r1, #10
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f000 fbeb 	bl	8009148 <USBH_FindInterface>
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2bff      	cmp	r3, #255	; 0xff
 800897a:	d002      	beq.n	8008982 <USBH_CDC_InterfaceInit+0x11a>
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b01      	cmp	r3, #1
 8008980:	d901      	bls.n	8008986 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008982:	2302      	movs	r3, #2
 8008984:	e0c2      	b.n	8008b0c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008986:	7bfb      	ldrb	r3, [r7, #15]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	211a      	movs	r1, #26
 800898c:	fb01 f303 	mul.w	r3, r1, r3
 8008990:	4413      	add	r3, r2
 8008992:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	b25b      	sxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	da16      	bge.n	80089cc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	211a      	movs	r1, #26
 80089a4:	fb01 f303 	mul.w	r3, r1, r3
 80089a8:	4413      	add	r3, r2
 80089aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089ae:	781a      	ldrb	r2, [r3, #0]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	211a      	movs	r1, #26
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	4413      	add	r3, r2
 80089c0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089c4:	881a      	ldrh	r2, [r3, #0]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	835a      	strh	r2, [r3, #26]
 80089ca:	e015      	b.n	80089f8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	211a      	movs	r1, #26
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	4413      	add	r3, r2
 80089d8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80089dc:	781a      	ldrb	r2, [r3, #0]
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089e2:	7bfb      	ldrb	r3, [r7, #15]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	211a      	movs	r1, #26
 80089e8:	fb01 f303 	mul.w	r3, r1, r3
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80089f2:	881a      	ldrh	r2, [r3, #0]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	211a      	movs	r1, #26
 80089fe:	fb01 f303 	mul.w	r3, r1, r3
 8008a02:	4413      	add	r3, r2
 8008a04:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b25b      	sxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	da16      	bge.n	8008a3e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	211a      	movs	r1, #26
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a20:	781a      	ldrb	r2, [r3, #0]
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	211a      	movs	r1, #26
 8008a2c:	fb01 f303 	mul.w	r3, r1, r3
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008a36:	881a      	ldrh	r2, [r3, #0]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	835a      	strh	r2, [r3, #26]
 8008a3c:	e015      	b.n	8008a6a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a3e:	7bfb      	ldrb	r3, [r7, #15]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	211a      	movs	r1, #26
 8008a44:	fb01 f303 	mul.w	r3, r1, r3
 8008a48:	4413      	add	r3, r2
 8008a4a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008a4e:	781a      	ldrb	r2, [r3, #0]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	211a      	movs	r1, #26
 8008a5a:	fb01 f303 	mul.w	r3, r1, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008a64:	881a      	ldrh	r2, [r3, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	7b9b      	ldrb	r3, [r3, #14]
 8008a6e:	4619      	mov	r1, r3
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f001 fe84 	bl	800a77e <USBH_AllocPipe>
 8008a76:	4603      	mov	r3, r0
 8008a78:	461a      	mov	r2, r3
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	7bdb      	ldrb	r3, [r3, #15]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f001 fe7a 	bl	800a77e <USBH_AllocPipe>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	7b59      	ldrb	r1, [r3, #13]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	7b98      	ldrb	r0, [r3, #14]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	8b12      	ldrh	r2, [r2, #24]
 8008aaa:	9202      	str	r2, [sp, #8]
 8008aac:	2202      	movs	r2, #2
 8008aae:	9201      	str	r2, [sp, #4]
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	4623      	mov	r3, r4
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 fe32 	bl	800a720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	7b19      	ldrb	r1, [r3, #12]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	7bd8      	ldrb	r0, [r3, #15]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	8b52      	ldrh	r2, [r2, #26]
 8008ad4:	9202      	str	r2, [sp, #8]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	9201      	str	r2, [sp, #4]
 8008ada:	9300      	str	r3, [sp, #0]
 8008adc:	4623      	mov	r3, r4
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fe1d 	bl	800a720 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	7b5b      	ldrb	r3, [r3, #13]
 8008af2:	2200      	movs	r2, #0
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f002 f92e 	bl	800ad58 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	7b1b      	ldrb	r3, [r3, #12]
 8008b00:	2200      	movs	r2, #0
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f002 f927 	bl	800ad58 <USBH_LL_SetToggle>

  return USBH_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd90      	pop	{r4, r7, pc}

08008b14 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b22:	69db      	ldr	r3, [r3, #28]
 8008b24:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00e      	beq.n	8008b4c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fe12 	bl	800a75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fe3d 	bl	800a7c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	7b1b      	ldrb	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00e      	beq.n	8008b72 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	7b1b      	ldrb	r3, [r3, #12]
 8008b58:	4619      	mov	r1, r3
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f001 fdff 	bl	800a75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	7b1b      	ldrb	r3, [r3, #12]
 8008b64:	4619      	mov	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f001 fe2a 	bl	800a7c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	7b5b      	ldrb	r3, [r3, #13]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00e      	beq.n	8008b98 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	7b5b      	ldrb	r3, [r3, #13]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 fdec 	bl	800a75e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	7b5b      	ldrb	r3, [r3, #13]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 fe17 	bl	800a7c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008baa:	69db      	ldr	r3, [r3, #28]
 8008bac:	4618      	mov	r0, r3
 8008bae:	f002 f989 	bl	800aec4 <free>
    phost->pActiveClass->pData = 0U;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bb8:	2200      	movs	r2, #0
 8008bba:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008bd4:	69db      	ldr	r3, [r3, #28]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3340      	adds	r3, #64	; 0x40
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f8b1 	bl	8008d46 <GetLineCoding>
 8008be4:	4603      	mov	r3, r0
 8008be6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008be8:	7afb      	ldrb	r3, [r7, #11]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d105      	bne.n	8008bfa <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008bf4:	2102      	movs	r1, #2
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008bfa:	7afb      	ldrb	r3, [r7, #11]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008c24:	2b04      	cmp	r3, #4
 8008c26:	d877      	bhi.n	8008d18 <USBH_CDC_Process+0x114>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBH_CDC_Process+0x2c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c45 	.word	0x08008c45
 8008c34:	08008c4b 	.word	0x08008c4b
 8008c38:	08008c7b 	.word	0x08008c7b
 8008c3c:	08008cef 	.word	0x08008cef
 8008c40:	08008cfd 	.word	0x08008cfd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
      break;
 8008c48:	e06d      	b.n	8008d26 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 f897 	bl	8008d84 <SetLineCoding>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c68:	e058      	b.n	8008d1c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008c6a:	7bbb      	ldrb	r3, [r7, #14]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d055      	beq.n	8008d1c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	2204      	movs	r2, #4
 8008c74:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008c78:	e050      	b.n	8008d1c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3340      	adds	r3, #64	; 0x40
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f860 	bl	8008d46 <GetLineCoding>
 8008c86:	4603      	mov	r3, r0
 8008c88:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d126      	bne.n	8008cde <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca2:	791b      	ldrb	r3, [r3, #4]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d13b      	bne.n	8008d20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cb2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d133      	bne.n	8008d20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cc2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d12b      	bne.n	8008d20 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d124      	bne.n	8008d20 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f958 	bl	8008f8c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008cdc:	e020      	b.n	8008d20 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d01d      	beq.n	8008d20 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	2204      	movs	r2, #4
 8008ce8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008cec:	e018      	b.n	8008d20 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f867 	bl	8008dc2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f8da 	bl	8008eae <CDC_ProcessReception>
      break;
 8008cfa:	e014      	b.n	8008d26 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 ffef 	bl	8009ce2 <USBH_ClrFeature>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d10a      	bne.n	8008d24 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8008d16:	e005      	b.n	8008d24 <USBH_CDC_Process+0x120>

    default:
      break;
 8008d18:	bf00      	nop
 8008d1a:	e004      	b.n	8008d26 <USBH_CDC_Process+0x122>
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e002      	b.n	8008d26 <USBH_CDC_Process+0x122>
      break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <USBH_CDC_Process+0x122>
      break;
 8008d24:	bf00      	nop

  }

  return status;
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b082      	sub	sp, #8
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	22a1      	movs	r2, #161	; 0xa1
 8008d54:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2221      	movs	r2, #33	; 0x21
 8008d5a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2207      	movs	r2, #7
 8008d6c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2207      	movs	r2, #7
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fa81 	bl	800a27c <USBH_CtlReq>
 8008d7a:	4603      	mov	r3, r0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b082      	sub	sp, #8
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2221      	movs	r2, #33	; 0x21
 8008d92:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2207      	movs	r2, #7
 8008daa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2207      	movs	r2, #7
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fa62 	bl	800a27c <USBH_CtlReq>
 8008db8:	4603      	mov	r3, r0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b086      	sub	sp, #24
 8008dc6:	af02      	add	r7, sp, #8
 8008dc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dd0:	69db      	ldr	r3, [r3, #28]
 8008dd2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d002      	beq.n	8008de8 <CDC_ProcessTransmission+0x26>
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d023      	beq.n	8008e2e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008de6:	e05e      	b.n	8008ea6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	8b12      	ldrh	r2, [r2, #24]
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d90b      	bls.n	8008e0c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	69d9      	ldr	r1, [r3, #28]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	8b1a      	ldrh	r2, [r3, #24]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	7b5b      	ldrb	r3, [r3, #13]
 8008e00:	2001      	movs	r0, #1
 8008e02:	9000      	str	r0, [sp, #0]
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fc48 	bl	800a69a <USBH_BulkSendData>
 8008e0a:	e00b      	b.n	8008e24 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	7b5b      	ldrb	r3, [r3, #13]
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	9000      	str	r0, [sp, #0]
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fc3b 	bl	800a69a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2202      	movs	r2, #2
 8008e28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e2c:	e03b      	b.n	8008ea6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	7b5b      	ldrb	r3, [r3, #13]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 ff65 	bl	800ad04 <USBH_LL_GetURBState>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008e3e:	7afb      	ldrb	r3, [r7, #11]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d128      	bne.n	8008e96 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	8b12      	ldrh	r2, [r2, #24]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d90e      	bls.n	8008e6e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	8b12      	ldrh	r2, [r2, #24]
 8008e58:	1a9a      	subs	r2, r3, r2
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	8b12      	ldrh	r2, [r2, #24]
 8008e66:	441a      	add	r2, r3
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	61da      	str	r2, [r3, #28]
 8008e6c:	e002      	b.n	8008e74 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d004      	beq.n	8008e86 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008e84:	e00e      	b.n	8008ea4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f868 	bl	8008f64 <USBH_CDC_TransmitCallback>
      break;
 8008e94:	e006      	b.n	8008ea4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e96:	7afb      	ldrb	r3, [r7, #11]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d103      	bne.n	8008ea4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008ea4:	bf00      	nop
  }
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b086      	sub	sp, #24
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ebc:	69db      	ldr	r3, [r3, #28]
 8008ebe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d002      	beq.n	8008ed4 <CDC_ProcessReception+0x26>
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d00e      	beq.n	8008ef0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ed2:	e043      	b.n	8008f5c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	6a19      	ldr	r1, [r3, #32]
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	8b5a      	ldrh	r2, [r3, #26]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	7b1b      	ldrb	r3, [r3, #12]
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 fbff 	bl	800a6e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	2204      	movs	r2, #4
 8008eea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008eee:	e035      	b.n	8008f5c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	7b1b      	ldrb	r3, [r3, #12]
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f001 ff04 	bl	800ad04 <USBH_LL_GetURBState>
 8008efc:	4603      	mov	r3, r0
 8008efe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008f00:	7cfb      	ldrb	r3, [r7, #19]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d129      	bne.n	8008f5a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	7b1b      	ldrb	r3, [r3, #12]
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fe67 	bl	800abe0 <USBH_LL_GetLastXferSize>
 8008f12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d016      	beq.n	8008f4c <CDC_ProcessReception+0x9e>
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	8b5b      	ldrh	r3, [r3, #26]
 8008f22:	461a      	mov	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d910      	bls.n	8008f4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	1ad2      	subs	r2, r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	6a1a      	ldr	r2, [r3, #32]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	441a      	add	r2, r3
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	2203      	movs	r2, #3
 8008f46:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008f4a:	e006      	b.n	8008f5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f80f 	bl	8008f78 <USBH_CDC_ReceiveCallback>
      break;
 8008f5a:	bf00      	nop
  }
}
 8008f5c:	bf00      	nop
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f6c:	bf00      	nop
 8008f6e:	370c      	adds	r7, #12
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f94:	bf00      	nop
 8008f96:	370c      	adds	r7, #12
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	4613      	mov	r3, r2
 8008fac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e029      	b.n	800900c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	79fa      	ldrb	r2, [r7, #7]
 8008fbc:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f000 f81f 	bl	8009014 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	68ba      	ldr	r2, [r7, #8]
 8009000:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f001 fd2d 	bl	800aa64 <USBH_LL_Init>

  return USBH_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	e009      	b.n	800903a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	33e0      	adds	r3, #224	; 0xe0
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	2200      	movs	r2, #0
 8009032:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3301      	adds	r3, #1
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b0f      	cmp	r3, #15
 800903e:	d9f2      	bls.n	8009026 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009040:	2300      	movs	r3, #0
 8009042:	60fb      	str	r3, [r7, #12]
 8009044:	e009      	b.n	800905a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009050:	2200      	movs	r2, #0
 8009052:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009060:	d3f1      	bcc.n	8009046 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2240      	movs	r2, #64	; 0x40
 8009086:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2201      	movs	r2, #1
 800909a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80090c6:	2300      	movs	r3, #0
 80090c8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d016      	beq.n	80090fe <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10e      	bne.n	80090f8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80090e0:	1c59      	adds	r1, r3, #1
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	33de      	adds	r3, #222	; 0xde
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80090f2:	2300      	movs	r3, #0
 80090f4:	73fb      	strb	r3, [r7, #15]
 80090f6:	e004      	b.n	8009102 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80090f8:	2302      	movs	r3, #2
 80090fa:	73fb      	strb	r3, [r7, #15]
 80090fc:	e001      	b.n	8009102 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80090fe:	2302      	movs	r3, #2
 8009100:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009102:	7bfb      	ldrb	r3, [r7, #15]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800911c:	2300      	movs	r3, #0
 800911e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	429a      	cmp	r2, r3
 800912a:	d204      	bcs.n	8009136 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	78fa      	ldrb	r2, [r7, #3]
 8009130:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009134:	e001      	b.n	800913a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009136:	2302      	movs	r3, #2
 8009138:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800913a:	7bfb      	ldrb	r3, [r7, #15]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	4608      	mov	r0, r1
 8009152:	4611      	mov	r1, r2
 8009154:	461a      	mov	r2, r3
 8009156:	4603      	mov	r3, r0
 8009158:	70fb      	strb	r3, [r7, #3]
 800915a:	460b      	mov	r3, r1
 800915c:	70bb      	strb	r3, [r7, #2]
 800915e:	4613      	mov	r3, r2
 8009160:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009170:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009172:	e025      	b.n	80091c0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	221a      	movs	r2, #26
 8009178:	fb02 f303 	mul.w	r3, r2, r3
 800917c:	3308      	adds	r3, #8
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	4413      	add	r3, r2
 8009182:	3302      	adds	r3, #2
 8009184:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	795b      	ldrb	r3, [r3, #5]
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	429a      	cmp	r2, r3
 800918e:	d002      	beq.n	8009196 <USBH_FindInterface+0x4e>
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	2bff      	cmp	r3, #255	; 0xff
 8009194:	d111      	bne.n	80091ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800919a:	78ba      	ldrb	r2, [r7, #2]
 800919c:	429a      	cmp	r2, r3
 800919e:	d002      	beq.n	80091a6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091a0:	78bb      	ldrb	r3, [r7, #2]
 80091a2:	2bff      	cmp	r3, #255	; 0xff
 80091a4:	d109      	bne.n	80091ba <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091aa:	787a      	ldrb	r2, [r7, #1]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d002      	beq.n	80091b6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091b0:	787b      	ldrb	r3, [r7, #1]
 80091b2:	2bff      	cmp	r3, #255	; 0xff
 80091b4:	d101      	bne.n	80091ba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	e006      	b.n	80091c8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
 80091bc:	3301      	adds	r3, #1
 80091be:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d9d6      	bls.n	8009174 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80091c6:	23ff      	movs	r3, #255	; 0xff
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f001 fc87 	bl	800aaf0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80091e2:	2101      	movs	r1, #1
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 fda0 	bl	800ad2a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3708      	adds	r7, #8
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b088      	sub	sp, #32
 80091f8:	af04      	add	r7, sp, #16
 80091fa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80091fc:	2302      	movs	r3, #2
 80091fe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b01      	cmp	r3, #1
 800920e:	d102      	bne.n	8009216 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2203      	movs	r2, #3
 8009214:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b0b      	cmp	r3, #11
 800921e:	f200 81be 	bhi.w	800959e <USBH_Process+0x3aa>
 8009222:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <USBH_Process+0x34>)
 8009224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009228:	08009259 	.word	0x08009259
 800922c:	0800928b 	.word	0x0800928b
 8009230:	080092f3 	.word	0x080092f3
 8009234:	08009539 	.word	0x08009539
 8009238:	0800959f 	.word	0x0800959f
 800923c:	08009397 	.word	0x08009397
 8009240:	080094df 	.word	0x080094df
 8009244:	080093cd 	.word	0x080093cd
 8009248:	080093ed 	.word	0x080093ed
 800924c:	0800940d 	.word	0x0800940d
 8009250:	08009451 	.word	0x08009451
 8009254:	08009521 	.word	0x08009521
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 819e 	beq.w	80095a2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800926c:	20c8      	movs	r0, #200	; 0xc8
 800926e:	f001 fda3 	bl	800adb8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fc99 	bl	800abaa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009288:	e18b      	b.n	80095a2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009290:	2b01      	cmp	r3, #1
 8009292:	d107      	bne.n	80092a4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2202      	movs	r2, #2
 80092a0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092a2:	e18d      	b.n	80095c0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092ae:	d914      	bls.n	80092da <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80092b6:	3301      	adds	r3, #1
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d903      	bls.n	80092d2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	220d      	movs	r2, #13
 80092ce:	701a      	strb	r2, [r3, #0]
      break;
 80092d0:	e176      	b.n	80095c0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]
      break;
 80092d8:	e172      	b.n	80095c0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80092e0:	f103 020a 	add.w	r2, r3, #10
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80092ea:	200a      	movs	r0, #10
 80092ec:	f001 fd64 	bl	800adb8 <USBH_Delay>
      break;
 80092f0:	e166      	b.n	80095c0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009302:	2104      	movs	r1, #4
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009308:	2064      	movs	r0, #100	; 0x64
 800930a:	f001 fd55 	bl	800adb8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fc24 	bl	800ab5c <USBH_LL_GetSpeed>
 8009314:	4603      	mov	r3, r0
 8009316:	461a      	mov	r2, r3
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2205      	movs	r2, #5
 8009322:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009324:	2100      	movs	r1, #0
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 fa29 	bl	800a77e <USBH_AllocPipe>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009334:	2180      	movs	r1, #128	; 0x80
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f001 fa21 	bl	800a77e <USBH_AllocPipe>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7919      	ldrb	r1, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009358:	b292      	uxth	r2, r2
 800935a:	9202      	str	r2, [sp, #8]
 800935c:	2200      	movs	r2, #0
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	4603      	mov	r3, r0
 8009364:	2280      	movs	r2, #128	; 0x80
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f001 f9da 	bl	800a720 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	7959      	ldrb	r1, [r3, #5]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009380:	b292      	uxth	r2, r2
 8009382:	9202      	str	r2, [sp, #8]
 8009384:	2200      	movs	r2, #0
 8009386:	9201      	str	r2, [sp, #4]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	4603      	mov	r3, r0
 800938c:	2200      	movs	r2, #0
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f001 f9c6 	bl	800a720 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009394:	e114      	b.n	80095c0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f918 	bl	80095cc <USBH_HandleEnum>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f040 80fe 	bne.w	80095a6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d103      	bne.n	80093c4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2208      	movs	r2, #8
 80093c0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80093c2:	e0f0      	b.n	80095a6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2207      	movs	r2, #7
 80093c8:	701a      	strb	r2, [r3, #0]
      break;
 80093ca:	e0ec      	b.n	80095a6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 80e9 	beq.w	80095aa <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093de:	2101      	movs	r1, #1
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2208      	movs	r2, #8
 80093e8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80093ea:	e0de      	b.n	80095aa <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	4619      	mov	r1, r3
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 fc2c 	bl	8009c54 <USBH_SetCfg>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f040 80d5 	bne.w	80095ae <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2209      	movs	r2, #9
 8009408:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800940a:	e0d0      	b.n	80095ae <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009412:	f003 0320 	and.w	r3, r3, #32
 8009416:	2b00      	cmp	r3, #0
 8009418:	d016      	beq.n	8009448 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800941a:	2101      	movs	r1, #1
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fc3c 	bl	8009c9a <USBH_SetFeature>
 8009422:	4603      	mov	r3, r0
 8009424:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009426:	7bbb      	ldrb	r3, [r7, #14]
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	d103      	bne.n	8009436 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	220a      	movs	r2, #10
 8009432:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009434:	e0bd      	b.n	80095b2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	f040 80b9 	bne.w	80095b2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	220a      	movs	r2, #10
 8009444:	701a      	strb	r2, [r3, #0]
      break;
 8009446:	e0b4      	b.n	80095b2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	220a      	movs	r2, #10
 800944c:	701a      	strb	r2, [r3, #0]
      break;
 800944e:	e0b0      	b.n	80095b2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 80ad 	beq.w	80095b6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]
 8009468:	e016      	b.n	8009498 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800946a:	7bfa      	ldrb	r2, [r7, #15]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	32de      	adds	r2, #222	; 0xde
 8009470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009474:	791a      	ldrb	r2, [r3, #4]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800947c:	429a      	cmp	r2, r3
 800947e:	d108      	bne.n	8009492 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009480:	7bfa      	ldrb	r2, [r7, #15]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32de      	adds	r2, #222	; 0xde
 8009486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009490:	e005      	b.n	800949e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	3301      	adds	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0e5      	beq.n	800946a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d016      	beq.n	80094d6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2206      	movs	r2, #6
 80094be:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80094c6:	2103      	movs	r1, #3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094cc:	e073      	b.n	80095b6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	220d      	movs	r2, #13
 80094d2:	701a      	strb	r2, [r3, #0]
      break;
 80094d4:	e06f      	b.n	80095b6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	220d      	movs	r2, #13
 80094da:	701a      	strb	r2, [r3, #0]
      break;
 80094dc:	e06b      	b.n	80095b6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d017      	beq.n	8009518 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	4798      	blx	r3
 80094f4:	4603      	mov	r3, r0
 80094f6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d103      	bne.n	8009508 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	220b      	movs	r2, #11
 8009504:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009506:	e058      	b.n	80095ba <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009508:	7bbb      	ldrb	r3, [r7, #14]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	2b02      	cmp	r3, #2
 800950e:	d154      	bne.n	80095ba <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	220d      	movs	r2, #13
 8009514:	701a      	strb	r2, [r3, #0]
      break;
 8009516:	e050      	b.n	80095ba <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	220d      	movs	r2, #13
 800951c:	701a      	strb	r2, [r3, #0]
      break;
 800951e:	e04c      	b.n	80095ba <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d049      	beq.n	80095be <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      }
      break;
 8009536:	e042      	b.n	80095be <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff fd67 	bl	8009014 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800954c:	2b00      	cmp	r3, #0
 800954e:	d009      	beq.n	8009564 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009574:	2105      	movs	r1, #5
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009580:	b2db      	uxtb	r3, r3
 8009582:	2b01      	cmp	r3, #1
 8009584:	d107      	bne.n	8009596 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fe20 	bl	80091d4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009594:	e014      	b.n	80095c0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f001 faaa 	bl	800aaf0 <USBH_LL_Start>
      break;
 800959c:	e010      	b.n	80095c0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800959e:	bf00      	nop
 80095a0:	e00e      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095a2:	bf00      	nop
 80095a4:	e00c      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095a6:	bf00      	nop
 80095a8:	e00a      	b.n	80095c0 <USBH_Process+0x3cc>
    break;
 80095aa:	bf00      	nop
 80095ac:	e008      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095ae:	bf00      	nop
 80095b0:	e006      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095b2:	bf00      	nop
 80095b4:	e004      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095b6:	bf00      	nop
 80095b8:	e002      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <USBH_Process+0x3cc>
      break;
 80095be:	bf00      	nop
  }
  return USBH_OK;
 80095c0:	2300      	movs	r3, #0
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3710      	adds	r7, #16
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop

080095cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b088      	sub	sp, #32
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80095d4:	2301      	movs	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80095d8:	2301      	movs	r3, #1
 80095da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b07      	cmp	r3, #7
 80095e2:	f200 81c1 	bhi.w	8009968 <USBH_HandleEnum+0x39c>
 80095e6:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <USBH_HandleEnum+0x20>)
 80095e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	080096cb 	.word	0x080096cb
 80095f4:	08009735 	.word	0x08009735
 80095f8:	080097c3 	.word	0x080097c3
 80095fc:	0800982d 	.word	0x0800982d
 8009600:	0800989d 	.word	0x0800989d
 8009604:	080098e3 	.word	0x080098e3
 8009608:	08009929 	.word	0x08009929
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800960c:	2108      	movs	r1, #8
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 fa50 	bl	8009ab4 <USBH_Get_DevDesc>
 8009614:	4603      	mov	r3, r0
 8009616:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009618:	7bbb      	ldrb	r3, [r7, #14]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d130      	bne.n	8009680 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7919      	ldrb	r1, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009642:	b292      	uxth	r2, r2
 8009644:	9202      	str	r2, [sp, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	9201      	str	r2, [sp, #4]
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4603      	mov	r3, r0
 800964e:	2280      	movs	r2, #128	; 0x80
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 f865 	bl	800a720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7959      	ldrb	r1, [r3, #5]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800966a:	b292      	uxth	r2, r2
 800966c:	9202      	str	r2, [sp, #8]
 800966e:	2200      	movs	r2, #0
 8009670:	9201      	str	r2, [sp, #4]
 8009672:	9300      	str	r3, [sp, #0]
 8009674:	4603      	mov	r3, r0
 8009676:	2200      	movs	r2, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 f851 	bl	800a720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800967e:	e175      	b.n	800996c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	2b03      	cmp	r3, #3
 8009684:	f040 8172 	bne.w	800996c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800968e:	3301      	adds	r3, #1
 8009690:	b2da      	uxtb	r2, r3
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d903      	bls.n	80096aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	220d      	movs	r2, #13
 80096a6:	701a      	strb	r2, [r3, #0]
      break;
 80096a8:	e160      	b.n	800996c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	795b      	ldrb	r3, [r3, #5]
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 f885 	bl	800a7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	791b      	ldrb	r3, [r3, #4]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f87f 	bl	800a7c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	701a      	strb	r2, [r3, #0]
      break;
 80096c8:	e150      	b.n	800996c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80096ca:	2112      	movs	r1, #18
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f9f1 	bl	8009ab4 <USBH_Get_DevDesc>
 80096d2:	4603      	mov	r3, r0
 80096d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d103      	bne.n	80096e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096e2:	e145      	b.n	8009970 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	f040 8142 	bne.w	8009970 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80096f2:	3301      	adds	r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009702:	2b03      	cmp	r3, #3
 8009704:	d903      	bls.n	800970e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	220d      	movs	r2, #13
 800970a:	701a      	strb	r2, [r3, #0]
      break;
 800970c:	e130      	b.n	8009970 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	795b      	ldrb	r3, [r3, #5]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f853 	bl	800a7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	791b      	ldrb	r3, [r3, #4]
 800971e:	4619      	mov	r1, r3
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f001 f84d 	bl	800a7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
      break;
 8009732:	e11d      	b.n	8009970 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009734:	2101      	movs	r1, #1
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fa68 	bl	8009c0c <USBH_SetAddress>
 800973c:	4603      	mov	r3, r0
 800973e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009740:	7bbb      	ldrb	r3, [r7, #14]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d132      	bne.n	80097ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009746:	2002      	movs	r0, #2
 8009748:	f001 fb36 	bl	800adb8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2203      	movs	r2, #3
 8009758:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7919      	ldrb	r1, [r3, #4]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800976e:	b292      	uxth	r2, r2
 8009770:	9202      	str	r2, [sp, #8]
 8009772:	2200      	movs	r2, #0
 8009774:	9201      	str	r2, [sp, #4]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4603      	mov	r3, r0
 800977a:	2280      	movs	r2, #128	; 0x80
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 ffcf 	bl	800a720 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7959      	ldrb	r1, [r3, #5]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009796:	b292      	uxth	r2, r2
 8009798:	9202      	str	r2, [sp, #8]
 800979a:	2200      	movs	r2, #0
 800979c:	9201      	str	r2, [sp, #4]
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	4603      	mov	r3, r0
 80097a2:	2200      	movs	r2, #0
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 ffbb 	bl	800a720 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80097aa:	e0e3      	b.n	8009974 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097ac:	7bbb      	ldrb	r3, [r7, #14]
 80097ae:	2b03      	cmp	r3, #3
 80097b0:	f040 80e0 	bne.w	8009974 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	220d      	movs	r2, #13
 80097b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	705a      	strb	r2, [r3, #1]
      break;
 80097c0:	e0d8      	b.n	8009974 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80097c2:	2109      	movs	r1, #9
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f99d 	bl	8009b04 <USBH_Get_CfgDesc>
 80097ca:	4603      	mov	r3, r0
 80097cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d103      	bne.n	80097dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2204      	movs	r2, #4
 80097d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097da:	e0cd      	b.n	8009978 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b03      	cmp	r3, #3
 80097e0:	f040 80ca 	bne.w	8009978 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097ea:	3301      	adds	r3, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80097fa:	2b03      	cmp	r3, #3
 80097fc:	d903      	bls.n	8009806 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	220d      	movs	r2, #13
 8009802:	701a      	strb	r2, [r3, #0]
      break;
 8009804:	e0b8      	b.n	8009978 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	795b      	ldrb	r3, [r3, #5]
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 ffd7 	bl	800a7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	791b      	ldrb	r3, [r3, #4]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 ffd1 	bl	800a7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2200      	movs	r2, #0
 8009822:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	701a      	strb	r2, [r3, #0]
      break;
 800982a:	e0a5      	b.n	8009978 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 f965 	bl	8009b04 <USBH_Get_CfgDesc>
 800983a:	4603      	mov	r3, r0
 800983c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800983e:	7bbb      	ldrb	r3, [r7, #14]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d103      	bne.n	800984c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2205      	movs	r2, #5
 8009848:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800984a:	e097      	b.n	800997c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	2b03      	cmp	r3, #3
 8009850:	f040 8094 	bne.w	800997c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800985a:	3301      	adds	r3, #1
 800985c:	b2da      	uxtb	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800986a:	2b03      	cmp	r3, #3
 800986c:	d903      	bls.n	8009876 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	220d      	movs	r2, #13
 8009872:	701a      	strb	r2, [r3, #0]
      break;
 8009874:	e082      	b.n	800997c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	795b      	ldrb	r3, [r3, #5]
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 ff9f 	bl	800a7c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	791b      	ldrb	r3, [r3, #4]
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 ff99 	bl	800a7c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
      break;
 800989a:	e06f      	b.n	800997c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d019      	beq.n	80098da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80098b2:	23ff      	movs	r3, #255	; 0xff
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 f949 	bl	8009b4c <USBH_Get_StringDesc>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2206      	movs	r2, #6
 80098c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098ca:	e059      	b.n	8009980 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098cc:	7bbb      	ldrb	r3, [r7, #14]
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d156      	bne.n	8009980 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2206      	movs	r2, #6
 80098d6:	705a      	strb	r2, [r3, #1]
      break;
 80098d8:	e052      	b.n	8009980 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2206      	movs	r2, #6
 80098de:	705a      	strb	r2, [r3, #1]
      break;
 80098e0:	e04e      	b.n	8009980 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d019      	beq.n	8009920 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80098f8:	23ff      	movs	r3, #255	; 0xff
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 f926 	bl	8009b4c <USBH_Get_StringDesc>
 8009900:	4603      	mov	r3, r0
 8009902:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2207      	movs	r2, #7
 800990e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009910:	e038      	b.n	8009984 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009912:	7bbb      	ldrb	r3, [r7, #14]
 8009914:	2b03      	cmp	r3, #3
 8009916:	d135      	bne.n	8009984 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2207      	movs	r2, #7
 800991c:	705a      	strb	r2, [r3, #1]
      break;
 800991e:	e031      	b.n	8009984 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2207      	movs	r2, #7
 8009924:	705a      	strb	r2, [r3, #1]
      break;
 8009926:	e02d      	b.n	8009984 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800992e:	2b00      	cmp	r3, #0
 8009930:	d017      	beq.n	8009962 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800993e:	23ff      	movs	r3, #255	; 0xff
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 f903 	bl	8009b4c <USBH_Get_StringDesc>
 8009946:	4603      	mov	r3, r0
 8009948:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d102      	bne.n	8009956 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009954:	e018      	b.n	8009988 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009956:	7bbb      	ldrb	r3, [r7, #14]
 8009958:	2b03      	cmp	r3, #3
 800995a:	d115      	bne.n	8009988 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
      break;
 8009960:	e012      	b.n	8009988 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
      break;
 8009966:	e00f      	b.n	8009988 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009968:	bf00      	nop
 800996a:	e00e      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 800996c:	bf00      	nop
 800996e:	e00c      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009970:	bf00      	nop
 8009972:	e00a      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009974:	bf00      	nop
 8009976:	e008      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009978:	bf00      	nop
 800997a:	e006      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 800997c:	bf00      	nop
 800997e:	e004      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009980:	bf00      	nop
 8009982:	e002      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009984:	bf00      	nop
 8009986:	e000      	b.n	800998a <USBH_HandleEnum+0x3be>
      break;
 8009988:	bf00      	nop
  }
  return Status;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	683a      	ldr	r2, [r7, #0]
 80099a2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b082      	sub	sp, #8
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f804 	bl	80099d6 <USBH_HandleSof>
}
 80099ce:	bf00      	nop
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b082      	sub	sp, #8
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b0b      	cmp	r3, #11
 80099e6:	d10a      	bne.n	80099fe <USBH_HandleSof+0x28>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d005      	beq.n	80099fe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	4798      	blx	r3
  }
}
 80099fe:	bf00      	nop
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}

08009a06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a16:	bf00      	nop
}
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009a32:	bf00      	nop
}
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f84a 	bl	800ab26 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	791b      	ldrb	r3, [r3, #4]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f000 fe91 	bl	800a7c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	795b      	ldrb	r3, [r3, #5]
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fe8b 	bl	800a7c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af02      	add	r7, sp, #8
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	460b      	mov	r3, r1
 8009abe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009ac6:	78fb      	ldrb	r3, [r7, #3]
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	9300      	str	r3, [sp, #0]
 8009acc:	4613      	mov	r3, r2
 8009ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f864 	bl	8009ba2 <USBH_GetDescriptor>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d10a      	bne.n	8009afa <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009af0:	78fa      	ldrb	r2, [r7, #3]
 8009af2:	b292      	uxth	r2, r2
 8009af4:	4619      	mov	r1, r3
 8009af6:	f000 f918 	bl	8009d2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af02      	add	r7, sp, #8
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	331c      	adds	r3, #28
 8009b14:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009b16:	887b      	ldrh	r3, [r7, #2]
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b20:	2100      	movs	r1, #0
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 f83d 	bl	8009ba2 <USBH_GetDescriptor>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d107      	bne.n	8009b42 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009b32:	887b      	ldrh	r3, [r7, #2]
 8009b34:	461a      	mov	r2, r3
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f987 	bl	8009e4c <USBH_ParseCfgDesc>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af02      	add	r7, sp, #8
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	607a      	str	r2, [r7, #4]
 8009b56:	461a      	mov	r2, r3
 8009b58:	460b      	mov	r3, r1
 8009b5a:	72fb      	strb	r3, [r7, #11]
 8009b5c:	4613      	mov	r3, r2
 8009b5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009b60:	7afb      	ldrb	r3, [r7, #11]
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009b68:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009b70:	893b      	ldrh	r3, [r7, #8]
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	460b      	mov	r3, r1
 8009b76:	2100      	movs	r1, #0
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f812 	bl	8009ba2 <USBH_GetDescriptor>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009b82:	7dfb      	ldrb	r3, [r7, #23]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d107      	bne.n	8009b98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009b8e:	893a      	ldrh	r2, [r7, #8]
 8009b90:	6879      	ldr	r1, [r7, #4]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f000 fb24 	bl	800a1e0 <USBH_ParseStringDesc>
  }

  return status;
 8009b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3718      	adds	r7, #24
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	60f8      	str	r0, [r7, #12]
 8009baa:	607b      	str	r3, [r7, #4]
 8009bac:	460b      	mov	r3, r1
 8009bae:	72fb      	strb	r3, [r7, #11]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	789b      	ldrb	r3, [r3, #2]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d11c      	bne.n	8009bf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009bbc:	7afb      	ldrb	r3, [r7, #11]
 8009bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2206      	movs	r2, #6
 8009bcc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	893a      	ldrh	r2, [r7, #8]
 8009bd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009bd4:	893b      	ldrh	r3, [r7, #8]
 8009bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009bda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bde:	d104      	bne.n	8009bea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f240 4209 	movw	r2, #1033	; 0x409
 8009be6:	829a      	strh	r2, [r3, #20]
 8009be8:	e002      	b.n	8009bf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8b3a      	ldrh	r2, [r7, #24]
 8009bf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009bf6:	8b3b      	ldrh	r3, [r7, #24]
 8009bf8:	461a      	mov	r2, r3
 8009bfa:	6879      	ldr	r1, [r7, #4]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fb3d 	bl	800a27c <USBH_CtlReq>
 8009c02:	4603      	mov	r3, r0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b082      	sub	sp, #8
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	460b      	mov	r3, r1
 8009c16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	789b      	ldrb	r3, [r3, #2]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d10f      	bne.n	8009c40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2205      	movs	r2, #5
 8009c2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009c2c:	78fb      	ldrb	r3, [r7, #3]
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c40:	2200      	movs	r2, #0
 8009c42:	2100      	movs	r1, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 fb19 	bl	800a27c <USBH_CtlReq>
 8009c4a:	4603      	mov	r3, r0
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	789b      	ldrb	r3, [r3, #2]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d10e      	bne.n	8009c86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2209      	movs	r2, #9
 8009c72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	887a      	ldrh	r2, [r7, #2]
 8009c78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2200      	movs	r2, #0
 8009c84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c86:	2200      	movs	r2, #0
 8009c88:	2100      	movs	r1, #0
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 faf6 	bl	800a27c <USBH_CtlReq>
 8009c90:	4603      	mov	r3, r0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3708      	adds	r7, #8
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}

08009c9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	789b      	ldrb	r3, [r3, #2]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d10f      	bne.n	8009cce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fad2 	bl	800a27c <USBH_CtlReq>
 8009cd8:	4603      	mov	r3, r0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	460b      	mov	r3, r1
 8009cec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	789b      	ldrb	r3, [r3, #2]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d10f      	bne.n	8009d16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d08:	78fb      	ldrb	r3, [r7, #3]
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8009d16:	2200      	movs	r2, #0
 8009d18:	2100      	movs	r1, #0
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 faae 	bl	800a27c <USBH_CtlReq>
 8009d20:	4603      	mov	r3, r0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009d2a:	b480      	push	{r7}
 8009d2c:	b085      	sub	sp, #20
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	781a      	ldrb	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	785a      	ldrb	r2, [r3, #1]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3302      	adds	r3, #2
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3303      	adds	r3, #3
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	021b      	lsls	r3, r3, #8
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	791a      	ldrb	r2, [r3, #4]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	795a      	ldrb	r2, [r3, #5]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	799a      	ldrb	r2, [r3, #6]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	79da      	ldrb	r2, [r3, #7]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	79db      	ldrb	r3, [r3, #7]
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	dc11      	bgt.n	8009db0 <USBH_ParseDevDesc+0x86>
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	db16      	blt.n	8009dbe <USBH_ParseDevDesc+0x94>
 8009d90:	3b08      	subs	r3, #8
 8009d92:	2201      	movs	r2, #1
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8009d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	bf14      	ite	ne
 8009da4:	2301      	movne	r3, #1
 8009da6:	2300      	moveq	r3, #0
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d102      	bne.n	8009db4 <USBH_ParseDevDesc+0x8a>
 8009dae:	e006      	b.n	8009dbe <USBH_ParseDevDesc+0x94>
 8009db0:	2b40      	cmp	r3, #64	; 0x40
 8009db2:	d104      	bne.n	8009dbe <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	79da      	ldrb	r2, [r3, #7]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	71da      	strb	r2, [r3, #7]
      break;
 8009dbc:	e003      	b.n	8009dc6 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2240      	movs	r2, #64	; 0x40
 8009dc2:	71da      	strb	r2, [r3, #7]
      break;
 8009dc4:	bf00      	nop
  }

  if (length > 8U)
 8009dc6:	88fb      	ldrh	r3, [r7, #6]
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d939      	bls.n	8009e40 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	3309      	adds	r3, #9
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	330a      	adds	r3, #10
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	330b      	adds	r3, #11
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	330c      	adds	r3, #12
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	330d      	adds	r3, #13
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	021b      	lsls	r3, r3, #8
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	7b9a      	ldrb	r2, [r3, #14]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	7bda      	ldrb	r2, [r3, #15]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	7c1a      	ldrb	r2, [r3, #16]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	7c5a      	ldrb	r2, [r3, #17]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	745a      	strb	r2, [r3, #17]
  }
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b08c      	sub	sp, #48	; 0x30
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	4613      	mov	r3, r2
 8009e58:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e60:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8009e72:	2300      	movs	r3, #0
 8009e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	785a      	ldrb	r2, [r3, #1]
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	3302      	adds	r3, #2
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	3303      	adds	r3, #3
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	021b      	lsls	r3, r3, #8
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ea8:	bf28      	it	cs
 8009eaa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	791a      	ldrb	r2, [r3, #4]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	795a      	ldrb	r2, [r3, #5]
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	799a      	ldrb	r2, [r3, #6]
 8009ec8:	6a3b      	ldr	r3, [r7, #32]
 8009eca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	79da      	ldrb	r2, [r3, #7]
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	7a1a      	ldrb	r2, [r3, #8]
 8009ed8:	6a3b      	ldr	r3, [r7, #32]
 8009eda:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	2b09      	cmp	r3, #9
 8009ee2:	d002      	beq.n	8009eea <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	2209      	movs	r2, #9
 8009ee8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009eea:	88fb      	ldrh	r3, [r7, #6]
 8009eec:	2b09      	cmp	r3, #9
 8009eee:	f240 809d 	bls.w	800a02c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 8009ef2:	2309      	movs	r3, #9
 8009ef4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009efa:	e081      	b.n	800a000 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009efc:	f107 0316 	add.w	r3, r7, #22
 8009f00:	4619      	mov	r1, r3
 8009f02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f04:	f000 f99f 	bl	800a246 <USBH_GetNextDesc>
 8009f08:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	785b      	ldrb	r3, [r3, #1]
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d176      	bne.n	800a000 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b09      	cmp	r3, #9
 8009f18:	d002      	beq.n	8009f20 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	2209      	movs	r2, #9
 8009f1e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f24:	221a      	movs	r2, #26
 8009f26:	fb02 f303 	mul.w	r3, r2, r3
 8009f2a:	3308      	adds	r3, #8
 8009f2c:	6a3a      	ldr	r2, [r7, #32]
 8009f2e:	4413      	add	r3, r2
 8009f30:	3302      	adds	r3, #2
 8009f32:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f36:	69f8      	ldr	r0, [r7, #28]
 8009f38:	f000 f87e 	bl	800a038 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f46:	e043      	b.n	8009fd0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009f48:	f107 0316 	add.w	r3, r7, #22
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f50:	f000 f979 	bl	800a246 <USBH_GetNextDesc>
 8009f54:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f58:	785b      	ldrb	r3, [r3, #1]
 8009f5a:	2b05      	cmp	r3, #5
 8009f5c:	d138      	bne.n	8009fd0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	795b      	ldrb	r3, [r3, #5]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d10f      	bne.n	8009f86 <USBH_ParseCfgDesc+0x13a>
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	799b      	ldrb	r3, [r3, #6]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d10b      	bne.n	8009f86 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	79db      	ldrb	r3, [r3, #7]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10f      	bne.n	8009f96 <USBH_ParseCfgDesc+0x14a>
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b09      	cmp	r3, #9
 8009f7c:	d00b      	beq.n	8009f96 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	2209      	movs	r2, #9
 8009f82:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f84:	e007      	b.n	8009f96 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8009f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b07      	cmp	r3, #7
 8009f8c:	d004      	beq.n	8009f98 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f90:	2207      	movs	r2, #7
 8009f92:	701a      	strb	r2, [r3, #0]
 8009f94:	e000      	b.n	8009f98 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f96:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009fa0:	3201      	adds	r2, #1
 8009fa2:	00d2      	lsls	r2, r2, #3
 8009fa4:	211a      	movs	r1, #26
 8009fa6:	fb01 f303 	mul.w	r3, r1, r3
 8009faa:	4413      	add	r3, r2
 8009fac:	3308      	adds	r3, #8
 8009fae:	6a3a      	ldr	r2, [r7, #32]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fb8:	69b9      	ldr	r1, [r7, #24]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f86b 	bl	800a096 <USBH_ParseEPDesc>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 8009fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009fca:	3301      	adds	r3, #1
 8009fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d204      	bcs.n	8009fe6 <USBH_ParseCfgDesc+0x19a>
 8009fdc:	6a3b      	ldr	r3, [r7, #32]
 8009fde:	885a      	ldrh	r2, [r3, #2]
 8009fe0:	8afb      	ldrh	r3, [r7, #22]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d8b0      	bhi.n	8009f48 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009fe6:	69fb      	ldr	r3, [r7, #28]
 8009fe8:	791b      	ldrb	r3, [r3, #4]
 8009fea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d201      	bcs.n	8009ff6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e01c      	b.n	800a030 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 8009ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a004:	2b01      	cmp	r3, #1
 800a006:	d805      	bhi.n	800a014 <USBH_ParseCfgDesc+0x1c8>
 800a008:	6a3b      	ldr	r3, [r7, #32]
 800a00a:	885a      	ldrh	r2, [r3, #2]
 800a00c:	8afb      	ldrh	r3, [r7, #22]
 800a00e:	429a      	cmp	r2, r3
 800a010:	f63f af74 	bhi.w	8009efc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	791b      	ldrb	r3, [r3, #4]
 800a018:	2b02      	cmp	r3, #2
 800a01a:	bf28      	it	cs
 800a01c:	2302      	movcs	r3, #2
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a024:	429a      	cmp	r2, r3
 800a026:	d201      	bcs.n	800a02c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a028:	2303      	movs	r3, #3
 800a02a:	e001      	b.n	800a030 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a02c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a030:	4618      	mov	r0, r3
 800a032:	3730      	adds	r7, #48	; 0x30
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781a      	ldrb	r2, [r3, #0]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	785a      	ldrb	r2, [r3, #1]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	789a      	ldrb	r2, [r3, #2]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	78da      	ldrb	r2, [r3, #3]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	791a      	ldrb	r2, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	795a      	ldrb	r2, [r3, #5]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	799a      	ldrb	r2, [r3, #6]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	79da      	ldrb	r2, [r3, #7]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	7a1a      	ldrb	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	721a      	strb	r2, [r3, #8]
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a096:	b480      	push	{r7}
 800a098:	b087      	sub	sp, #28
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	785a      	ldrb	r2, [r3, #1]
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	789a      	ldrb	r2, [r3, #2]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	78da      	ldrb	r2, [r3, #3]
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	3305      	adds	r3, #5
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	b29b      	uxth	r3, r3
 800a0d6:	021b      	lsls	r3, r3, #8
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	799a      	ldrb	r2, [r3, #6]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d102      	bne.n	800a0f8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	75fb      	strb	r3, [r7, #23]
 800a0f6:	e033      	b.n	800a160 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	889b      	ldrh	r3, [r3, #4]
 800a0fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a100:	f023 0307 	bic.w	r3, r3, #7
 800a104:	b29a      	uxth	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	889b      	ldrh	r3, [r3, #4]
 800a10e:	b21a      	sxth	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3304      	adds	r3, #4
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	b299      	uxth	r1, r3
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	3305      	adds	r3, #5
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	b29b      	uxth	r3, r3
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	b29b      	uxth	r3, r3
 800a124:	430b      	orrs	r3, r1
 800a126:	b29b      	uxth	r3, r3
 800a128:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d110      	bne.n	800a152 <USBH_ParseEPDesc+0xbc>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3304      	adds	r3, #4
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	b299      	uxth	r1, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3305      	adds	r3, #5
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	b29b      	uxth	r3, r3
 800a140:	021b      	lsls	r3, r3, #8
 800a142:	b29b      	uxth	r3, r3
 800a144:	430b      	orrs	r3, r1
 800a146:	b29b      	uxth	r3, r3
 800a148:	b21b      	sxth	r3, r3
 800a14a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a14e:	b21b      	sxth	r3, r3
 800a150:	e001      	b.n	800a156 <USBH_ParseEPDesc+0xc0>
 800a152:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a156:	4313      	orrs	r3, r2
 800a158:	b21b      	sxth	r3, r3
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a166:	2b00      	cmp	r3, #0
 800a168:	d116      	bne.n	800a198 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	78db      	ldrb	r3, [r3, #3]
 800a16e:	f003 0303 	and.w	r3, r3, #3
 800a172:	2b01      	cmp	r3, #1
 800a174:	d005      	beq.n	800a182 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	78db      	ldrb	r3, [r3, #3]
 800a17a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d127      	bne.n	800a1d2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	799b      	ldrb	r3, [r3, #6]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <USBH_ParseEPDesc+0xfc>
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	799b      	ldrb	r3, [r3, #6]
 800a18e:	2b10      	cmp	r3, #16
 800a190:	d91f      	bls.n	800a1d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a192:	2303      	movs	r3, #3
 800a194:	75fb      	strb	r3, [r7, #23]
 800a196:	e01c      	b.n	800a1d2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	78db      	ldrb	r3, [r3, #3]
 800a19c:	f003 0303 	and.w	r3, r3, #3
 800a1a0:	2b01      	cmp	r3, #1
 800a1a2:	d10a      	bne.n	800a1ba <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	799b      	ldrb	r3, [r3, #6]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <USBH_ParseEPDesc+0x11e>
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	799b      	ldrb	r3, [r3, #6]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d90e      	bls.n	800a1d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	75fb      	strb	r3, [r7, #23]
 800a1b8:	e00b      	b.n	800a1d2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	78db      	ldrb	r3, [r3, #3]
 800a1be:	f003 0303 	and.w	r3, r3, #3
 800a1c2:	2b03      	cmp	r3, #3
 800a1c4:	d105      	bne.n	800a1d2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	799b      	ldrb	r3, [r3, #6]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	371c      	adds	r7, #28
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b03      	cmp	r3, #3
 800a1f6:	d120      	bne.n	800a23a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	1e9a      	subs	r2, r3, #2
 800a1fe:	88fb      	ldrh	r3, [r7, #6]
 800a200:	4293      	cmp	r3, r2
 800a202:	bf28      	it	cs
 800a204:	4613      	movcs	r3, r2
 800a206:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	3302      	adds	r3, #2
 800a20c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a20e:	2300      	movs	r3, #0
 800a210:	82fb      	strh	r3, [r7, #22]
 800a212:	e00b      	b.n	800a22c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a214:	8afb      	ldrh	r3, [r7, #22]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	4413      	add	r3, r2
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	3301      	adds	r3, #1
 800a224:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a226:	8afb      	ldrh	r3, [r7, #22]
 800a228:	3302      	adds	r3, #2
 800a22a:	82fb      	strh	r3, [r7, #22]
 800a22c:	8afa      	ldrh	r2, [r7, #22]
 800a22e:	8abb      	ldrh	r3, [r7, #20]
 800a230:	429a      	cmp	r2, r3
 800a232:	d3ef      	bcc.n	800a214 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
  }
}
 800a23a:	bf00      	nop
 800a23c:	371c      	adds	r7, #28
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a246:	b480      	push	{r7}
 800a248:	b085      	sub	sp, #20
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
 800a24e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	881a      	ldrh	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	4413      	add	r3, r2
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4413      	add	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a26e:	68fb      	ldr	r3, [r7, #12]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	4613      	mov	r3, r2
 800a288:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a28a:	2301      	movs	r3, #1
 800a28c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	789b      	ldrb	r3, [r3, #2]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d002      	beq.n	800a29c <USBH_CtlReq+0x20>
 800a296:	2b02      	cmp	r3, #2
 800a298:	d00f      	beq.n	800a2ba <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a29a:	e027      	b.n	800a2ec <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	88fa      	ldrh	r2, [r7, #6]
 800a2a6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2b8:	e018      	b.n	800a2ec <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f81c 	bl	800a2f8 <USBH_HandleControl>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <USBH_CtlReq+0x54>
 800a2ca:	7dfb      	ldrb	r3, [r7, #23]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d106      	bne.n	800a2de <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	761a      	strb	r2, [r3, #24]
      break;
 800a2dc:	e005      	b.n	800a2ea <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a2de:	7dfb      	ldrb	r3, [r7, #23]
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d102      	bne.n	800a2ea <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	709a      	strb	r2, [r3, #2]
      break;
 800a2ea:	bf00      	nop
  }
  return status;
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a300:	2301      	movs	r3, #1
 800a302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7e1b      	ldrb	r3, [r3, #24]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	2b0a      	cmp	r3, #10
 800a310:	f200 8156 	bhi.w	800a5c0 <USBH_HandleControl+0x2c8>
 800a314:	a201      	add	r2, pc, #4	; (adr r2, 800a31c <USBH_HandleControl+0x24>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	0800a363 	.word	0x0800a363
 800a324:	0800a3cd 	.word	0x0800a3cd
 800a328:	0800a3f3 	.word	0x0800a3f3
 800a32c:	0800a42b 	.word	0x0800a42b
 800a330:	0800a455 	.word	0x0800a455
 800a334:	0800a4a7 	.word	0x0800a4a7
 800a338:	0800a4c9 	.word	0x0800a4c9
 800a33c:	0800a505 	.word	0x0800a505
 800a340:	0800a52b 	.word	0x0800a52b
 800a344:	0800a569 	.word	0x0800a569
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 0110 	add.w	r1, r3, #16
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	795b      	ldrb	r3, [r3, #5]
 800a352:	461a      	mov	r2, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f943 	bl	800a5e0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2202      	movs	r2, #2
 800a35e:	761a      	strb	r2, [r3, #24]
      break;
 800a360:	e139      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	795b      	ldrb	r3, [r3, #5]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fccb 	bl	800ad04 <USBH_LL_GetURBState>
 800a36e:	4603      	mov	r3, r0
 800a370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a372:	7bbb      	ldrb	r3, [r7, #14]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d11e      	bne.n	800a3b6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7c1b      	ldrb	r3, [r3, #16]
 800a37c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	8adb      	ldrh	r3, [r3, #22]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a38a:	7b7b      	ldrb	r3, [r7, #13]
 800a38c:	2b80      	cmp	r3, #128	; 0x80
 800a38e:	d103      	bne.n	800a398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2203      	movs	r2, #3
 800a394:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a396:	e115      	b.n	800a5c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2205      	movs	r2, #5
 800a39c:	761a      	strb	r2, [r3, #24]
      break;
 800a39e:	e111      	b.n	800a5c4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a3a0:	7b7b      	ldrb	r3, [r7, #13]
 800a3a2:	2b80      	cmp	r3, #128	; 0x80
 800a3a4:	d103      	bne.n	800a3ae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2209      	movs	r2, #9
 800a3aa:	761a      	strb	r2, [r3, #24]
      break;
 800a3ac:	e10a      	b.n	800a5c4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	761a      	strb	r2, [r3, #24]
      break;
 800a3b4:	e106      	b.n	800a5c4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	2b04      	cmp	r3, #4
 800a3ba:	d003      	beq.n	800a3c4 <USBH_HandleControl+0xcc>
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	f040 8100 	bne.w	800a5c4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	220b      	movs	r2, #11
 800a3c8:	761a      	strb	r2, [r3, #24]
      break;
 800a3ca:	e0fb      	b.n	800a5c4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a3d2:	b29a      	uxth	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6899      	ldr	r1, [r3, #8]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	899a      	ldrh	r2, [r3, #12]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	791b      	ldrb	r3, [r3, #4]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 f93a 	bl	800a65e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2204      	movs	r2, #4
 800a3ee:	761a      	strb	r2, [r3, #24]
      break;
 800a3f0:	e0f1      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	791b      	ldrb	r3, [r3, #4]
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fc83 	bl	800ad04 <USBH_LL_GetURBState>
 800a3fe:	4603      	mov	r3, r0
 800a400:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d102      	bne.n	800a40e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2209      	movs	r2, #9
 800a40c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a40e:	7bbb      	ldrb	r3, [r7, #14]
 800a410:	2b05      	cmp	r3, #5
 800a412:	d102      	bne.n	800a41a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a414:	2303      	movs	r3, #3
 800a416:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a418:	e0d6      	b.n	800a5c8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a41a:	7bbb      	ldrb	r3, [r7, #14]
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	f040 80d3 	bne.w	800a5c8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	220b      	movs	r2, #11
 800a426:	761a      	strb	r2, [r3, #24]
      break;
 800a428:	e0ce      	b.n	800a5c8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6899      	ldr	r1, [r3, #8]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	899a      	ldrh	r2, [r3, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	795b      	ldrb	r3, [r3, #5]
 800a436:	2001      	movs	r0, #1
 800a438:	9000      	str	r0, [sp, #0]
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f8ea 	bl	800a614 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a446:	b29a      	uxth	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2206      	movs	r2, #6
 800a450:	761a      	strb	r2, [r3, #24]
      break;
 800a452:	e0c0      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	795b      	ldrb	r3, [r3, #5]
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fc52 	bl	800ad04 <USBH_LL_GetURBState>
 800a460:	4603      	mov	r3, r0
 800a462:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a464:	7bbb      	ldrb	r3, [r7, #14]
 800a466:	2b01      	cmp	r3, #1
 800a468:	d103      	bne.n	800a472 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2207      	movs	r2, #7
 800a46e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a470:	e0ac      	b.n	800a5cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a472:	7bbb      	ldrb	r3, [r7, #14]
 800a474:	2b05      	cmp	r3, #5
 800a476:	d105      	bne.n	800a484 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	220c      	movs	r2, #12
 800a47c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a47e:	2303      	movs	r3, #3
 800a480:	73fb      	strb	r3, [r7, #15]
      break;
 800a482:	e0a3      	b.n	800a5cc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d103      	bne.n	800a492 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2205      	movs	r2, #5
 800a48e:	761a      	strb	r2, [r3, #24]
      break;
 800a490:	e09c      	b.n	800a5cc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a492:	7bbb      	ldrb	r3, [r7, #14]
 800a494:	2b04      	cmp	r3, #4
 800a496:	f040 8099 	bne.w	800a5cc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	220b      	movs	r2, #11
 800a49e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4a4:	e092      	b.n	800a5cc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	791b      	ldrb	r3, [r3, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f8d5 	bl	800a65e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2208      	movs	r2, #8
 800a4c4:	761a      	strb	r2, [r3, #24]

      break;
 800a4c6:	e086      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	791b      	ldrb	r3, [r3, #4]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fc18 	bl	800ad04 <USBH_LL_GetURBState>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d105      	bne.n	800a4ea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	220d      	movs	r2, #13
 800a4e2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4e8:	e072      	b.n	800a5d0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a4ea:	7bbb      	ldrb	r3, [r7, #14]
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d103      	bne.n	800a4f8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	220b      	movs	r2, #11
 800a4f4:	761a      	strb	r2, [r3, #24]
      break;
 800a4f6:	e06b      	b.n	800a5d0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a4f8:	7bbb      	ldrb	r3, [r7, #14]
 800a4fa:	2b05      	cmp	r3, #5
 800a4fc:	d168      	bne.n	800a5d0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a4fe:	2303      	movs	r3, #3
 800a500:	73fb      	strb	r3, [r7, #15]
      break;
 800a502:	e065      	b.n	800a5d0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	795b      	ldrb	r3, [r3, #5]
 800a508:	2201      	movs	r2, #1
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	2200      	movs	r2, #0
 800a50e:	2100      	movs	r1, #0
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 f87f 	bl	800a614 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	220a      	movs	r2, #10
 800a526:	761a      	strb	r2, [r3, #24]
      break;
 800a528:	e055      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	795b      	ldrb	r3, [r3, #5]
 800a52e:	4619      	mov	r1, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fbe7 	bl	800ad04 <USBH_LL_GetURBState>
 800a536:	4603      	mov	r3, r0
 800a538:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a53a:	7bbb      	ldrb	r3, [r7, #14]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d105      	bne.n	800a54c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a540:	2300      	movs	r3, #0
 800a542:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	220d      	movs	r2, #13
 800a548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a54a:	e043      	b.n	800a5d4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a54c:	7bbb      	ldrb	r3, [r7, #14]
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d103      	bne.n	800a55a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2209      	movs	r2, #9
 800a556:	761a      	strb	r2, [r3, #24]
      break;
 800a558:	e03c      	b.n	800a5d4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	2b04      	cmp	r3, #4
 800a55e:	d139      	bne.n	800a5d4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	220b      	movs	r2, #11
 800a564:	761a      	strb	r2, [r3, #24]
      break;
 800a566:	e035      	b.n	800a5d4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	7e5b      	ldrb	r3, [r3, #25]
 800a56c:	3301      	adds	r3, #1
 800a56e:	b2da      	uxtb	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	765a      	strb	r2, [r3, #25]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	7e5b      	ldrb	r3, [r3, #25]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d806      	bhi.n	800a58a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2201      	movs	r2, #1
 800a586:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a588:	e025      	b.n	800a5d6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a590:	2106      	movs	r1, #6
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	795b      	ldrb	r3, [r3, #5]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f90c 	bl	800a7c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	791b      	ldrb	r3, [r3, #4]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 f906 	bl	800a7c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a5be:	e00a      	b.n	800a5d6 <USBH_HandleControl+0x2de>

    default:
      break;
 800a5c0:	bf00      	nop
 800a5c2:	e008      	b.n	800a5d6 <USBH_HandleControl+0x2de>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e006      	b.n	800a5d6 <USBH_HandleControl+0x2de>
      break;
 800a5c8:	bf00      	nop
 800a5ca:	e004      	b.n	800a5d6 <USBH_HandleControl+0x2de>
      break;
 800a5cc:	bf00      	nop
 800a5ce:	e002      	b.n	800a5d6 <USBH_HandleControl+0x2de>
      break;
 800a5d0:	bf00      	nop
 800a5d2:	e000      	b.n	800a5d6 <USBH_HandleControl+0x2de>
      break;
 800a5d4:	bf00      	nop
  }

  return status;
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ee:	79f9      	ldrb	r1, [r7, #7]
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	9303      	str	r3, [sp, #12]
 800a5f4:	2308      	movs	r3, #8
 800a5f6:	9302      	str	r3, [sp, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	2300      	movs	r3, #0
 800a602:	2200      	movs	r2, #0
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fb4c 	bl	800aca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af04      	add	r7, sp, #16
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	460b      	mov	r3, r1
 800a624:	80fb      	strh	r3, [r7, #6]
 800a626:	4613      	mov	r3, r2
 800a628:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a638:	7979      	ldrb	r1, [r7, #5]
 800a63a:	7e3b      	ldrb	r3, [r7, #24]
 800a63c:	9303      	str	r3, [sp, #12]
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	9302      	str	r3, [sp, #8]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	2301      	movs	r3, #1
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	2300      	movs	r3, #0
 800a64c:	2200      	movs	r2, #0
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f000 fb27 	bl	800aca2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b088      	sub	sp, #32
 800a662:	af04      	add	r7, sp, #16
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	4611      	mov	r1, r2
 800a66a:	461a      	mov	r2, r3
 800a66c:	460b      	mov	r3, r1
 800a66e:	80fb      	strh	r3, [r7, #6]
 800a670:	4613      	mov	r3, r2
 800a672:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a674:	7979      	ldrb	r1, [r7, #5]
 800a676:	2300      	movs	r3, #0
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	88fb      	ldrh	r3, [r7, #6]
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	2301      	movs	r3, #1
 800a684:	9300      	str	r3, [sp, #0]
 800a686:	2300      	movs	r3, #0
 800a688:	2201      	movs	r2, #1
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fb09 	bl	800aca2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a690:	2300      	movs	r3, #0

}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af04      	add	r7, sp, #16
 800a6a0:	60f8      	str	r0, [r7, #12]
 800a6a2:	60b9      	str	r1, [r7, #8]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	80fb      	strh	r3, [r7, #6]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6be:	7979      	ldrb	r1, [r7, #5]
 800a6c0:	7e3b      	ldrb	r3, [r7, #24]
 800a6c2:	9303      	str	r3, [sp, #12]
 800a6c4:	88fb      	ldrh	r3, [r7, #6]
 800a6c6:	9302      	str	r3, [sp, #8]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	9301      	str	r3, [sp, #4]
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	2302      	movs	r3, #2
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	68f8      	ldr	r0, [r7, #12]
 800a6d6:	f000 fae4 	bl	800aca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af04      	add	r7, sp, #16
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	80fb      	strh	r3, [r7, #6]
 800a6f6:	4613      	mov	r3, r2
 800a6f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6fa:	7979      	ldrb	r1, [r7, #5]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	9303      	str	r3, [sp, #12]
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	9302      	str	r3, [sp, #8]
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	2301      	movs	r3, #1
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	2302      	movs	r3, #2
 800a70e:	2201      	movs	r2, #1
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f000 fac6 	bl	800aca2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3710      	adds	r7, #16
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b086      	sub	sp, #24
 800a724:	af04      	add	r7, sp, #16
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	4608      	mov	r0, r1
 800a72a:	4611      	mov	r1, r2
 800a72c:	461a      	mov	r2, r3
 800a72e:	4603      	mov	r3, r0
 800a730:	70fb      	strb	r3, [r7, #3]
 800a732:	460b      	mov	r3, r1
 800a734:	70bb      	strb	r3, [r7, #2]
 800a736:	4613      	mov	r3, r2
 800a738:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a73a:	7878      	ldrb	r0, [r7, #1]
 800a73c:	78ba      	ldrb	r2, [r7, #2]
 800a73e:	78f9      	ldrb	r1, [r7, #3]
 800a740:	8b3b      	ldrh	r3, [r7, #24]
 800a742:	9302      	str	r3, [sp, #8]
 800a744:	7d3b      	ldrb	r3, [r7, #20]
 800a746:	9301      	str	r3, [sp, #4]
 800a748:	7c3b      	ldrb	r3, [r7, #16]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4603      	mov	r3, r0
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa59 	bl	800ac06 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b082      	sub	sp, #8
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	460b      	mov	r3, r1
 800a768:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a76a:	78fb      	ldrb	r3, [r7, #3]
 800a76c:	4619      	mov	r1, r3
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fa78 	bl	800ac64 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3708      	adds	r7, #8
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 f836 	bl	800a7fc <USBH_GetFreePipe>
 800a790:	4603      	mov	r3, r0
 800a792:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a794:	89fb      	ldrh	r3, [r7, #14]
 800a796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d00a      	beq.n	800a7b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a79e:	78fa      	ldrb	r2, [r7, #3]
 800a7a0:	89fb      	ldrh	r3, [r7, #14]
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	33e0      	adds	r3, #224	; 0xe0
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	440b      	add	r3, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7b4:	89fb      	ldrh	r3, [r7, #14]
 800a7b6:	b2db      	uxtb	r3, r3
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a7cc:	78fb      	ldrb	r3, [r7, #3]
 800a7ce:	2b0f      	cmp	r3, #15
 800a7d0:	d80d      	bhi.n	800a7ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a7d2:	78fb      	ldrb	r3, [r7, #3]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	33e0      	adds	r3, #224	; 0xe0
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	4413      	add	r3, r2
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	78fb      	ldrb	r3, [r7, #3]
 800a7e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	33e0      	adds	r3, #224	; 0xe0
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b085      	sub	sp, #20
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
 800a80c:	e00f      	b.n	800a82e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	33e0      	adds	r3, #224	; 0xe0
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	4413      	add	r3, r2
 800a818:	685b      	ldr	r3, [r3, #4]
 800a81a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d102      	bne.n	800a828 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
 800a824:	b29b      	uxth	r3, r3
 800a826:	e007      	b.n	800a838 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800a828:	7bfb      	ldrb	r3, [r7, #15]
 800a82a:	3301      	adds	r3, #1
 800a82c:	73fb      	strb	r3, [r7, #15]
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b0f      	cmp	r3, #15
 800a832:	d9ec      	bls.n	800a80e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a834:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3714      	adds	r7, #20
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800a848:	2200      	movs	r2, #0
 800a84a:	490e      	ldr	r1, [pc, #56]	; (800a884 <MX_USB_HOST_Init+0x40>)
 800a84c:	480e      	ldr	r0, [pc, #56]	; (800a888 <MX_USB_HOST_Init+0x44>)
 800a84e:	f7fe fba7 	bl	8008fa0 <USBH_Init>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a858:	f7f6 fb1c 	bl	8000e94 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800a85c:	490b      	ldr	r1, [pc, #44]	; (800a88c <MX_USB_HOST_Init+0x48>)
 800a85e:	480a      	ldr	r0, [pc, #40]	; (800a888 <MX_USB_HOST_Init+0x44>)
 800a860:	f7fe fc2c 	bl	80090bc <USBH_RegisterClass>
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a86a:	f7f6 fb13 	bl	8000e94 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800a86e:	4806      	ldr	r0, [pc, #24]	; (800a888 <MX_USB_HOST_Init+0x44>)
 800a870:	f7fe fcb0 	bl	80091d4 <USBH_Start>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a87a:	f7f6 fb0b 	bl	8000e94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a87e:	bf00      	nop
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	200007e0 	.word	0x200007e0
 800a88c:	20000010 	.word	0x20000010

0800a890 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800a894:	4802      	ldr	r0, [pc, #8]	; (800a8a0 <MX_USB_HOST_Process+0x10>)
 800a896:	f7fe fcad 	bl	80091f4 <USBH_Process>
}
 800a89a:	bf00      	nop
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	200007e0 	.word	0x200007e0

0800a8a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	3b01      	subs	r3, #1
 800a8b4:	2b04      	cmp	r3, #4
 800a8b6:	d819      	bhi.n	800a8ec <USBH_UserProcess+0x48>
 800a8b8:	a201      	add	r2, pc, #4	; (adr r2, 800a8c0 <USBH_UserProcess+0x1c>)
 800a8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8be:	bf00      	nop
 800a8c0:	0800a8ed 	.word	0x0800a8ed
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8ed 	.word	0x0800a8ed
 800a8cc:	0800a8e5 	.word	0x0800a8e5
 800a8d0:	0800a8d5 	.word	0x0800a8d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a8d4:	4b09      	ldr	r3, [pc, #36]	; (800a8fc <USBH_UserProcess+0x58>)
 800a8d6:	2203      	movs	r2, #3
 800a8d8:	701a      	strb	r2, [r3, #0]
  break;
 800a8da:	e008      	b.n	800a8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a8dc:	4b07      	ldr	r3, [pc, #28]	; (800a8fc <USBH_UserProcess+0x58>)
 800a8de:	2202      	movs	r2, #2
 800a8e0:	701a      	strb	r2, [r3, #0]
  break;
 800a8e2:	e004      	b.n	800a8ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a8e4:	4b05      	ldr	r3, [pc, #20]	; (800a8fc <USBH_UserProcess+0x58>)
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	701a      	strb	r2, [r3, #0]
  break;
 800a8ea:	e000      	b.n	800a8ee <USBH_UserProcess+0x4a>

  default:
  break;
 800a8ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a8ee:	bf00      	nop
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	20000bb8 	.word	0x20000bb8

0800a900 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a24      	ldr	r2, [pc, #144]	; (800a9b0 <HAL_HCD_MspInit+0xb0>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d141      	bne.n	800a9a6 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a922:	2300      	movs	r3, #0
 800a924:	613b      	str	r3, [r7, #16]
 800a926:	4b23      	ldr	r3, [pc, #140]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92a:	4a22      	ldr	r2, [pc, #136]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a92c:	f043 0302 	orr.w	r3, r3, #2
 800a930:	6313      	str	r3, [r2, #48]	; 0x30
 800a932:	4b20      	ldr	r3, [pc, #128]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	f003 0302 	and.w	r3, r3, #2
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800a93e:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800a942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a944:	2302      	movs	r3, #2
 800a946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a948:	2300      	movs	r3, #0
 800a94a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a94c:	2300      	movs	r3, #0
 800a94e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a950:	230c      	movs	r3, #12
 800a952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	4619      	mov	r1, r3
 800a95a:	4817      	ldr	r0, [pc, #92]	; (800a9b8 <HAL_HCD_MspInit+0xb8>)
 800a95c:	f7f8 fbb4 	bl	80030c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800a960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a966:	2300      	movs	r3, #0
 800a968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800a96e:	f107 0314 	add.w	r3, r7, #20
 800a972:	4619      	mov	r1, r3
 800a974:	4810      	ldr	r0, [pc, #64]	; (800a9b8 <HAL_HCD_MspInit+0xb8>)
 800a976:	f7f8 fba7 	bl	80030c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a97a:	2300      	movs	r3, #0
 800a97c:	60fb      	str	r3, [r7, #12]
 800a97e:	4b0d      	ldr	r3, [pc, #52]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a982:	4a0c      	ldr	r2, [pc, #48]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a988:	6313      	str	r3, [r2, #48]	; 0x30
 800a98a:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <HAL_HCD_MspInit+0xb4>)
 800a98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a98e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a992:	60fb      	str	r3, [r7, #12]
 800a994:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a996:	2200      	movs	r2, #0
 800a998:	2100      	movs	r1, #0
 800a99a:	204d      	movs	r0, #77	; 0x4d
 800a99c:	f7f7 fe59 	bl	8002652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a9a0:	204d      	movs	r0, #77	; 0x4d
 800a9a2:	f7f7 fe72 	bl	800268a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a9a6:	bf00      	nop
 800a9a8:	3728      	adds	r7, #40	; 0x28
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	40040000 	.word	0x40040000
 800a9b4:	40023800 	.word	0x40023800
 800a9b8:	40020400 	.word	0x40020400

0800a9bc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe fff1 	bl	80099b2 <USBH_LL_IncTimer>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7ff f829 	bl	8009a3e <USBH_LL_Connect>
}
 800a9ec:	bf00      	nop
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff f832 	bl	8009a6c <USBH_LL_Disconnect>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	460b      	mov	r3, r1
 800aa1a:	70fb      	strb	r3, [r7, #3]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe ffe3 	bl	8009a06 <USBH_LL_PortEnabled>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe ffe3 	bl	8009a22 <USBH_LL_PortDisabled>
}
 800aa5c:	bf00      	nop
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}

0800aa64 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d132      	bne.n	800aadc <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800aa76:	4a1c      	ldr	r2, [pc, #112]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800aa86:	4b18      	ldr	r3, [pc, #96]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa88:	4a18      	ldr	r2, [pc, #96]	; (800aaec <USBH_LL_Init+0x88>)
 800aa8a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800aa8c:	4b16      	ldr	r3, [pc, #88]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa8e:	220c      	movs	r2, #12
 800aa90:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800aa92:	4b15      	ldr	r3, [pc, #84]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa94:	2201      	movs	r2, #1
 800aa96:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800aa98:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <USBH_LL_Init+0x84>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800aa9e:	4b12      	ldr	r3, [pc, #72]	; (800aae8 <USBH_LL_Init+0x84>)
 800aaa0:	2202      	movs	r2, #2
 800aaa2:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800aaa4:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <USBH_LL_Init+0x84>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800aaaa:	4b0f      	ldr	r3, [pc, #60]	; (800aae8 <USBH_LL_Init+0x84>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800aab0:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <USBH_LL_Init+0x84>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800aab6:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <USBH_LL_Init+0x84>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800aabc:	480a      	ldr	r0, [pc, #40]	; (800aae8 <USBH_LL_Init+0x84>)
 800aabe:	f7f8 fcc8 	bl	8003452 <HAL_HCD_Init>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d001      	beq.n	800aacc <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800aac8:	f7f6 f9e4 	bl	8000e94 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800aacc:	4806      	ldr	r0, [pc, #24]	; (800aae8 <USBH_LL_Init+0x84>)
 800aace:	f7f9 f8ac 	bl	8003c2a <HAL_HCD_GetCurrentFrame>
 800aad2:	4603      	mov	r3, r0
 800aad4:	4619      	mov	r1, r3
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7fe ff5c 	bl	8009994 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	20000bbc 	.word	0x20000bbc
 800aaec:	40040000 	.word	0x40040000

0800aaf0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aafc:	2300      	movs	r3, #0
 800aafe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f9 f819 	bl	8003b3e <HAL_HCD_Start>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f000 f95c 	bl	800add0 <USBH_Get_USB_Status>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7f9 f821 	bl	8003b84 <HAL_HCD_Stop>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f000 f941 	bl	800add0 <USBH_Get_USB_Status>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab64:	2301      	movs	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7f9 f869 	bl	8003c46 <HAL_HCD_GetCurrentSpeed>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	d00c      	beq.n	800ab94 <USBH_LL_GetSpeed+0x38>
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d80d      	bhi.n	800ab9a <USBH_LL_GetSpeed+0x3e>
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <USBH_LL_GetSpeed+0x2c>
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d003      	beq.n	800ab8e <USBH_LL_GetSpeed+0x32>
 800ab86:	e008      	b.n	800ab9a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab8c:	e008      	b.n	800aba0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
    break;
 800ab92:	e005      	b.n	800aba0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ab94:	2302      	movs	r3, #2
 800ab96:	73fb      	strb	r3, [r7, #15]
    break;
 800ab98:	e002      	b.n	800aba0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9e:	bf00      	nop
  }
  return  speed;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b084      	sub	sp, #16
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7f8 fffc 	bl	8003bbe <HAL_HCD_ResetPort>
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abca:	7bfb      	ldrb	r3, [r7, #15]
 800abcc:	4618      	mov	r0, r3
 800abce:	f000 f8ff 	bl	800add0 <USBH_Get_USB_Status>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	460b      	mov	r3, r1
 800abea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800abf2:	78fa      	ldrb	r2, [r7, #3]
 800abf4:	4611      	mov	r1, r2
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7f9 f803 	bl	8003c02 <HAL_HCD_HC_GetXferCount>
 800abfc:	4603      	mov	r3, r0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac06:	b590      	push	{r4, r7, lr}
 800ac08:	b089      	sub	sp, #36	; 0x24
 800ac0a:	af04      	add	r7, sp, #16
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	4608      	mov	r0, r1
 800ac10:	4611      	mov	r1, r2
 800ac12:	461a      	mov	r2, r3
 800ac14:	4603      	mov	r3, r0
 800ac16:	70fb      	strb	r3, [r7, #3]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70bb      	strb	r3, [r7, #2]
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ac2e:	787c      	ldrb	r4, [r7, #1]
 800ac30:	78ba      	ldrb	r2, [r7, #2]
 800ac32:	78f9      	ldrb	r1, [r7, #3]
 800ac34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ac36:	9302      	str	r3, [sp, #8]
 800ac38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac3c:	9301      	str	r3, [sp, #4]
 800ac3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	4623      	mov	r3, r4
 800ac46:	f7f8 fc66 	bl	8003516 <HAL_HCD_HC_Init>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	4618      	mov	r0, r3
 800ac52:	f000 f8bd 	bl	800add0 <USBH_Get_USB_Status>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3714      	adds	r7, #20
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd90      	pop	{r4, r7, pc}

0800ac64 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac70:	2300      	movs	r3, #0
 800ac72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac74:	2300      	movs	r3, #0
 800ac76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac7e:	78fa      	ldrb	r2, [r7, #3]
 800ac80:	4611      	mov	r1, r2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7f8 fcd6 	bl	8003634 <HAL_HCD_HC_Halt>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f000 f89e 	bl	800add0 <USBH_Get_USB_Status>
 800ac94:	4603      	mov	r3, r0
 800ac96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac98:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800aca2:	b590      	push	{r4, r7, lr}
 800aca4:	b089      	sub	sp, #36	; 0x24
 800aca6:	af04      	add	r7, sp, #16
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	4608      	mov	r0, r1
 800acac:	4611      	mov	r1, r2
 800acae:	461a      	mov	r2, r3
 800acb0:	4603      	mov	r3, r0
 800acb2:	70fb      	strb	r3, [r7, #3]
 800acb4:	460b      	mov	r3, r1
 800acb6:	70bb      	strb	r3, [r7, #2]
 800acb8:	4613      	mov	r3, r2
 800acba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800acca:	787c      	ldrb	r4, [r7, #1]
 800accc:	78ba      	ldrb	r2, [r7, #2]
 800acce:	78f9      	ldrb	r1, [r7, #3]
 800acd0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800acd4:	9303      	str	r3, [sp, #12]
 800acd6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800acd8:	9302      	str	r3, [sp, #8]
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	9301      	str	r3, [sp, #4]
 800acde:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	4623      	mov	r3, r4
 800ace6:	f7f8 fcc9 	bl	800367c <HAL_HCD_HC_SubmitRequest>
 800acea:	4603      	mov	r3, r0
 800acec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 f86d 	bl	800add0 <USBH_Get_USB_Status>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd90      	pop	{r4, r7, pc}

0800ad04 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad16:	78fa      	ldrb	r2, [r7, #3]
 800ad18:	4611      	mov	r1, r2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7f8 ff5d 	bl	8003bda <HAL_HCD_HC_GetURBState>
 800ad20:	4603      	mov	r3, r0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	460b      	mov	r3, r1
 800ad34:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d103      	bne.n	800ad48 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ad40:	78fb      	ldrb	r3, [r7, #3]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f870 	bl	800ae28 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad48:	20c8      	movs	r0, #200	; 0xc8
 800ad4a:	f7f7 fb8f 	bl	800246c <HAL_Delay>
  return USBH_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}

0800ad58 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70fb      	strb	r3, [r7, #3]
 800ad64:	4613      	mov	r3, r2
 800ad66:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad6e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	212c      	movs	r1, #44	; 0x2c
 800ad76:	fb01 f303 	mul.w	r3, r1, r3
 800ad7a:	4413      	add	r3, r2
 800ad7c:	333b      	adds	r3, #59	; 0x3b
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d009      	beq.n	800ad98 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	68fa      	ldr	r2, [r7, #12]
 800ad88:	212c      	movs	r1, #44	; 0x2c
 800ad8a:	fb01 f303 	mul.w	r3, r1, r3
 800ad8e:	4413      	add	r3, r2
 800ad90:	3354      	adds	r3, #84	; 0x54
 800ad92:	78ba      	ldrb	r2, [r7, #2]
 800ad94:	701a      	strb	r2, [r3, #0]
 800ad96:	e008      	b.n	800adaa <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ad98:	78fb      	ldrb	r3, [r7, #3]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	212c      	movs	r1, #44	; 0x2c
 800ad9e:	fb01 f303 	mul.w	r3, r1, r3
 800ada2:	4413      	add	r3, r2
 800ada4:	3355      	adds	r3, #85	; 0x55
 800ada6:	78ba      	ldrb	r2, [r7, #2]
 800ada8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7f7 fb53 	bl	800246c <HAL_Delay>
}
 800adc6:	bf00      	nop
 800adc8:	3708      	adds	r7, #8
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
	...

0800add0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	4603      	mov	r3, r0
 800add8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d817      	bhi.n	800ae14 <USBH_Get_USB_Status+0x44>
 800ade4:	a201      	add	r2, pc, #4	; (adr r2, 800adec <USBH_Get_USB_Status+0x1c>)
 800ade6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adea:	bf00      	nop
 800adec:	0800adfd 	.word	0x0800adfd
 800adf0:	0800ae03 	.word	0x0800ae03
 800adf4:	0800ae09 	.word	0x0800ae09
 800adf8:	0800ae0f 	.word	0x0800ae0f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800adfc:	2300      	movs	r3, #0
 800adfe:	73fb      	strb	r3, [r7, #15]
    break;
 800ae00:	e00b      	b.n	800ae1a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae02:	2302      	movs	r3, #2
 800ae04:	73fb      	strb	r3, [r7, #15]
    break;
 800ae06:	e008      	b.n	800ae1a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae0c:	e005      	b.n	800ae1a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	73fb      	strb	r3, [r7, #15]
    break;
 800ae12:	e002      	b.n	800ae1a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae14:	2302      	movs	r3, #2
 800ae16:	73fb      	strb	r3, [r7, #15]
    break;
 800ae18:	bf00      	nop
  }
  return usb_status;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ae36:	79fb      	ldrb	r3, [r7, #7]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	73fb      	strb	r3, [r7, #15]
 800ae40:	e001      	b.n	800ae46 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	2110      	movs	r1, #16
 800ae4c:	4803      	ldr	r0, [pc, #12]	; (800ae5c <MX_DriverVbusHS+0x34>)
 800ae4e:	f7f8 fae7 	bl	8003420 <HAL_GPIO_WritePin>
}
 800ae52:	bf00      	nop
 800ae54:	3710      	adds	r7, #16
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	40020800 	.word	0x40020800

0800ae60 <__errno>:
 800ae60:	4b01      	ldr	r3, [pc, #4]	; (800ae68 <__errno+0x8>)
 800ae62:	6818      	ldr	r0, [r3, #0]
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	20000030 	.word	0x20000030

0800ae6c <__libc_init_array>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	4d0d      	ldr	r5, [pc, #52]	; (800aea4 <__libc_init_array+0x38>)
 800ae70:	4c0d      	ldr	r4, [pc, #52]	; (800aea8 <__libc_init_array+0x3c>)
 800ae72:	1b64      	subs	r4, r4, r5
 800ae74:	10a4      	asrs	r4, r4, #2
 800ae76:	2600      	movs	r6, #0
 800ae78:	42a6      	cmp	r6, r4
 800ae7a:	d109      	bne.n	800ae90 <__libc_init_array+0x24>
 800ae7c:	4d0b      	ldr	r5, [pc, #44]	; (800aeac <__libc_init_array+0x40>)
 800ae7e:	4c0c      	ldr	r4, [pc, #48]	; (800aeb0 <__libc_init_array+0x44>)
 800ae80:	f001 f834 	bl	800beec <_init>
 800ae84:	1b64      	subs	r4, r4, r5
 800ae86:	10a4      	asrs	r4, r4, #2
 800ae88:	2600      	movs	r6, #0
 800ae8a:	42a6      	cmp	r6, r4
 800ae8c:	d105      	bne.n	800ae9a <__libc_init_array+0x2e>
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae94:	4798      	blx	r3
 800ae96:	3601      	adds	r6, #1
 800ae98:	e7ee      	b.n	800ae78 <__libc_init_array+0xc>
 800ae9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae9e:	4798      	blx	r3
 800aea0:	3601      	adds	r6, #1
 800aea2:	e7f2      	b.n	800ae8a <__libc_init_array+0x1e>
 800aea4:	0800c870 	.word	0x0800c870
 800aea8:	0800c870 	.word	0x0800c870
 800aeac:	0800c870 	.word	0x0800c870
 800aeb0:	0800c874 	.word	0x0800c874

0800aeb4 <malloc>:
 800aeb4:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <malloc+0xc>)
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	f000 b87f 	b.w	800afbc <_malloc_r>
 800aebe:	bf00      	nop
 800aec0:	20000030 	.word	0x20000030

0800aec4 <free>:
 800aec4:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <free+0xc>)
 800aec6:	4601      	mov	r1, r0
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f000 b80b 	b.w	800aee4 <_free_r>
 800aece:	bf00      	nop
 800aed0:	20000030 	.word	0x20000030

0800aed4 <memset>:
 800aed4:	4402      	add	r2, r0
 800aed6:	4603      	mov	r3, r0
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d100      	bne.n	800aede <memset+0xa>
 800aedc:	4770      	bx	lr
 800aede:	f803 1b01 	strb.w	r1, [r3], #1
 800aee2:	e7f9      	b.n	800aed8 <memset+0x4>

0800aee4 <_free_r>:
 800aee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aee6:	2900      	cmp	r1, #0
 800aee8:	d044      	beq.n	800af74 <_free_r+0x90>
 800aeea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeee:	9001      	str	r0, [sp, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f1a1 0404 	sub.w	r4, r1, #4
 800aef6:	bfb8      	it	lt
 800aef8:	18e4      	addlt	r4, r4, r3
 800aefa:	f000 fc51 	bl	800b7a0 <__malloc_lock>
 800aefe:	4a1e      	ldr	r2, [pc, #120]	; (800af78 <_free_r+0x94>)
 800af00:	9801      	ldr	r0, [sp, #4]
 800af02:	6813      	ldr	r3, [r2, #0]
 800af04:	b933      	cbnz	r3, 800af14 <_free_r+0x30>
 800af06:	6063      	str	r3, [r4, #4]
 800af08:	6014      	str	r4, [r2, #0]
 800af0a:	b003      	add	sp, #12
 800af0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af10:	f000 bc4c 	b.w	800b7ac <__malloc_unlock>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d908      	bls.n	800af2a <_free_r+0x46>
 800af18:	6825      	ldr	r5, [r4, #0]
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	428b      	cmp	r3, r1
 800af1e:	bf01      	itttt	eq
 800af20:	6819      	ldreq	r1, [r3, #0]
 800af22:	685b      	ldreq	r3, [r3, #4]
 800af24:	1949      	addeq	r1, r1, r5
 800af26:	6021      	streq	r1, [r4, #0]
 800af28:	e7ed      	b.n	800af06 <_free_r+0x22>
 800af2a:	461a      	mov	r2, r3
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	b10b      	cbz	r3, 800af34 <_free_r+0x50>
 800af30:	42a3      	cmp	r3, r4
 800af32:	d9fa      	bls.n	800af2a <_free_r+0x46>
 800af34:	6811      	ldr	r1, [r2, #0]
 800af36:	1855      	adds	r5, r2, r1
 800af38:	42a5      	cmp	r5, r4
 800af3a:	d10b      	bne.n	800af54 <_free_r+0x70>
 800af3c:	6824      	ldr	r4, [r4, #0]
 800af3e:	4421      	add	r1, r4
 800af40:	1854      	adds	r4, r2, r1
 800af42:	42a3      	cmp	r3, r4
 800af44:	6011      	str	r1, [r2, #0]
 800af46:	d1e0      	bne.n	800af0a <_free_r+0x26>
 800af48:	681c      	ldr	r4, [r3, #0]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	6053      	str	r3, [r2, #4]
 800af4e:	4421      	add	r1, r4
 800af50:	6011      	str	r1, [r2, #0]
 800af52:	e7da      	b.n	800af0a <_free_r+0x26>
 800af54:	d902      	bls.n	800af5c <_free_r+0x78>
 800af56:	230c      	movs	r3, #12
 800af58:	6003      	str	r3, [r0, #0]
 800af5a:	e7d6      	b.n	800af0a <_free_r+0x26>
 800af5c:	6825      	ldr	r5, [r4, #0]
 800af5e:	1961      	adds	r1, r4, r5
 800af60:	428b      	cmp	r3, r1
 800af62:	bf04      	itt	eq
 800af64:	6819      	ldreq	r1, [r3, #0]
 800af66:	685b      	ldreq	r3, [r3, #4]
 800af68:	6063      	str	r3, [r4, #4]
 800af6a:	bf04      	itt	eq
 800af6c:	1949      	addeq	r1, r1, r5
 800af6e:	6021      	streq	r1, [r4, #0]
 800af70:	6054      	str	r4, [r2, #4]
 800af72:	e7ca      	b.n	800af0a <_free_r+0x26>
 800af74:	b003      	add	sp, #12
 800af76:	bd30      	pop	{r4, r5, pc}
 800af78:	20000ec0 	.word	0x20000ec0

0800af7c <sbrk_aligned>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	4e0e      	ldr	r6, [pc, #56]	; (800afb8 <sbrk_aligned+0x3c>)
 800af80:	460c      	mov	r4, r1
 800af82:	6831      	ldr	r1, [r6, #0]
 800af84:	4605      	mov	r5, r0
 800af86:	b911      	cbnz	r1, 800af8e <sbrk_aligned+0x12>
 800af88:	f000 f91a 	bl	800b1c0 <_sbrk_r>
 800af8c:	6030      	str	r0, [r6, #0]
 800af8e:	4621      	mov	r1, r4
 800af90:	4628      	mov	r0, r5
 800af92:	f000 f915 	bl	800b1c0 <_sbrk_r>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	d00a      	beq.n	800afb0 <sbrk_aligned+0x34>
 800af9a:	1cc4      	adds	r4, r0, #3
 800af9c:	f024 0403 	bic.w	r4, r4, #3
 800afa0:	42a0      	cmp	r0, r4
 800afa2:	d007      	beq.n	800afb4 <sbrk_aligned+0x38>
 800afa4:	1a21      	subs	r1, r4, r0
 800afa6:	4628      	mov	r0, r5
 800afa8:	f000 f90a 	bl	800b1c0 <_sbrk_r>
 800afac:	3001      	adds	r0, #1
 800afae:	d101      	bne.n	800afb4 <sbrk_aligned+0x38>
 800afb0:	f04f 34ff 	mov.w	r4, #4294967295
 800afb4:	4620      	mov	r0, r4
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	20000ec4 	.word	0x20000ec4

0800afbc <_malloc_r>:
 800afbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afc0:	1ccd      	adds	r5, r1, #3
 800afc2:	f025 0503 	bic.w	r5, r5, #3
 800afc6:	3508      	adds	r5, #8
 800afc8:	2d0c      	cmp	r5, #12
 800afca:	bf38      	it	cc
 800afcc:	250c      	movcc	r5, #12
 800afce:	2d00      	cmp	r5, #0
 800afd0:	4607      	mov	r7, r0
 800afd2:	db01      	blt.n	800afd8 <_malloc_r+0x1c>
 800afd4:	42a9      	cmp	r1, r5
 800afd6:	d905      	bls.n	800afe4 <_malloc_r+0x28>
 800afd8:	230c      	movs	r3, #12
 800afda:	603b      	str	r3, [r7, #0]
 800afdc:	2600      	movs	r6, #0
 800afde:	4630      	mov	r0, r6
 800afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe4:	4e2e      	ldr	r6, [pc, #184]	; (800b0a0 <_malloc_r+0xe4>)
 800afe6:	f000 fbdb 	bl	800b7a0 <__malloc_lock>
 800afea:	6833      	ldr	r3, [r6, #0]
 800afec:	461c      	mov	r4, r3
 800afee:	bb34      	cbnz	r4, 800b03e <_malloc_r+0x82>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4638      	mov	r0, r7
 800aff4:	f7ff ffc2 	bl	800af7c <sbrk_aligned>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	4604      	mov	r4, r0
 800affc:	d14d      	bne.n	800b09a <_malloc_r+0xde>
 800affe:	6834      	ldr	r4, [r6, #0]
 800b000:	4626      	mov	r6, r4
 800b002:	2e00      	cmp	r6, #0
 800b004:	d140      	bne.n	800b088 <_malloc_r+0xcc>
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	4631      	mov	r1, r6
 800b00a:	4638      	mov	r0, r7
 800b00c:	eb04 0803 	add.w	r8, r4, r3
 800b010:	f000 f8d6 	bl	800b1c0 <_sbrk_r>
 800b014:	4580      	cmp	r8, r0
 800b016:	d13a      	bne.n	800b08e <_malloc_r+0xd2>
 800b018:	6821      	ldr	r1, [r4, #0]
 800b01a:	3503      	adds	r5, #3
 800b01c:	1a6d      	subs	r5, r5, r1
 800b01e:	f025 0503 	bic.w	r5, r5, #3
 800b022:	3508      	adds	r5, #8
 800b024:	2d0c      	cmp	r5, #12
 800b026:	bf38      	it	cc
 800b028:	250c      	movcc	r5, #12
 800b02a:	4629      	mov	r1, r5
 800b02c:	4638      	mov	r0, r7
 800b02e:	f7ff ffa5 	bl	800af7c <sbrk_aligned>
 800b032:	3001      	adds	r0, #1
 800b034:	d02b      	beq.n	800b08e <_malloc_r+0xd2>
 800b036:	6823      	ldr	r3, [r4, #0]
 800b038:	442b      	add	r3, r5
 800b03a:	6023      	str	r3, [r4, #0]
 800b03c:	e00e      	b.n	800b05c <_malloc_r+0xa0>
 800b03e:	6822      	ldr	r2, [r4, #0]
 800b040:	1b52      	subs	r2, r2, r5
 800b042:	d41e      	bmi.n	800b082 <_malloc_r+0xc6>
 800b044:	2a0b      	cmp	r2, #11
 800b046:	d916      	bls.n	800b076 <_malloc_r+0xba>
 800b048:	1961      	adds	r1, r4, r5
 800b04a:	42a3      	cmp	r3, r4
 800b04c:	6025      	str	r5, [r4, #0]
 800b04e:	bf18      	it	ne
 800b050:	6059      	strne	r1, [r3, #4]
 800b052:	6863      	ldr	r3, [r4, #4]
 800b054:	bf08      	it	eq
 800b056:	6031      	streq	r1, [r6, #0]
 800b058:	5162      	str	r2, [r4, r5]
 800b05a:	604b      	str	r3, [r1, #4]
 800b05c:	4638      	mov	r0, r7
 800b05e:	f104 060b 	add.w	r6, r4, #11
 800b062:	f000 fba3 	bl	800b7ac <__malloc_unlock>
 800b066:	f026 0607 	bic.w	r6, r6, #7
 800b06a:	1d23      	adds	r3, r4, #4
 800b06c:	1af2      	subs	r2, r6, r3
 800b06e:	d0b6      	beq.n	800afde <_malloc_r+0x22>
 800b070:	1b9b      	subs	r3, r3, r6
 800b072:	50a3      	str	r3, [r4, r2]
 800b074:	e7b3      	b.n	800afde <_malloc_r+0x22>
 800b076:	6862      	ldr	r2, [r4, #4]
 800b078:	42a3      	cmp	r3, r4
 800b07a:	bf0c      	ite	eq
 800b07c:	6032      	streq	r2, [r6, #0]
 800b07e:	605a      	strne	r2, [r3, #4]
 800b080:	e7ec      	b.n	800b05c <_malloc_r+0xa0>
 800b082:	4623      	mov	r3, r4
 800b084:	6864      	ldr	r4, [r4, #4]
 800b086:	e7b2      	b.n	800afee <_malloc_r+0x32>
 800b088:	4634      	mov	r4, r6
 800b08a:	6876      	ldr	r6, [r6, #4]
 800b08c:	e7b9      	b.n	800b002 <_malloc_r+0x46>
 800b08e:	230c      	movs	r3, #12
 800b090:	603b      	str	r3, [r7, #0]
 800b092:	4638      	mov	r0, r7
 800b094:	f000 fb8a 	bl	800b7ac <__malloc_unlock>
 800b098:	e7a1      	b.n	800afde <_malloc_r+0x22>
 800b09a:	6025      	str	r5, [r4, #0]
 800b09c:	e7de      	b.n	800b05c <_malloc_r+0xa0>
 800b09e:	bf00      	nop
 800b0a0:	20000ec0 	.word	0x20000ec0

0800b0a4 <iprintf>:
 800b0a4:	b40f      	push	{r0, r1, r2, r3}
 800b0a6:	4b0a      	ldr	r3, [pc, #40]	; (800b0d0 <iprintf+0x2c>)
 800b0a8:	b513      	push	{r0, r1, r4, lr}
 800b0aa:	681c      	ldr	r4, [r3, #0]
 800b0ac:	b124      	cbz	r4, 800b0b8 <iprintf+0x14>
 800b0ae:	69a3      	ldr	r3, [r4, #24]
 800b0b0:	b913      	cbnz	r3, 800b0b8 <iprintf+0x14>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	f000 fa6e 	bl	800b594 <__sinit>
 800b0b8:	ab05      	add	r3, sp, #20
 800b0ba:	9a04      	ldr	r2, [sp, #16]
 800b0bc:	68a1      	ldr	r1, [r4, #8]
 800b0be:	9301      	str	r3, [sp, #4]
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fba3 	bl	800b80c <_vfiprintf_r>
 800b0c6:	b002      	add	sp, #8
 800b0c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0cc:	b004      	add	sp, #16
 800b0ce:	4770      	bx	lr
 800b0d0:	20000030 	.word	0x20000030

0800b0d4 <_puts_r>:
 800b0d4:	b570      	push	{r4, r5, r6, lr}
 800b0d6:	460e      	mov	r6, r1
 800b0d8:	4605      	mov	r5, r0
 800b0da:	b118      	cbz	r0, 800b0e4 <_puts_r+0x10>
 800b0dc:	6983      	ldr	r3, [r0, #24]
 800b0de:	b90b      	cbnz	r3, 800b0e4 <_puts_r+0x10>
 800b0e0:	f000 fa58 	bl	800b594 <__sinit>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	68ac      	ldr	r4, [r5, #8]
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_puts_r+0x1c>
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	f000 fa52 	bl	800b594 <__sinit>
 800b0f0:	4b2c      	ldr	r3, [pc, #176]	; (800b1a4 <_puts_r+0xd0>)
 800b0f2:	429c      	cmp	r4, r3
 800b0f4:	d120      	bne.n	800b138 <_puts_r+0x64>
 800b0f6:	686c      	ldr	r4, [r5, #4]
 800b0f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0fa:	07db      	lsls	r3, r3, #31
 800b0fc:	d405      	bmi.n	800b10a <_puts_r+0x36>
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	0598      	lsls	r0, r3, #22
 800b102:	d402      	bmi.n	800b10a <_puts_r+0x36>
 800b104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b106:	f000 fae3 	bl	800b6d0 <__retarget_lock_acquire_recursive>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	0719      	lsls	r1, r3, #28
 800b10e:	d51d      	bpl.n	800b14c <_puts_r+0x78>
 800b110:	6923      	ldr	r3, [r4, #16]
 800b112:	b1db      	cbz	r3, 800b14c <_puts_r+0x78>
 800b114:	3e01      	subs	r6, #1
 800b116:	68a3      	ldr	r3, [r4, #8]
 800b118:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b11c:	3b01      	subs	r3, #1
 800b11e:	60a3      	str	r3, [r4, #8]
 800b120:	bb39      	cbnz	r1, 800b172 <_puts_r+0x9e>
 800b122:	2b00      	cmp	r3, #0
 800b124:	da38      	bge.n	800b198 <_puts_r+0xc4>
 800b126:	4622      	mov	r2, r4
 800b128:	210a      	movs	r1, #10
 800b12a:	4628      	mov	r0, r5
 800b12c:	f000 f858 	bl	800b1e0 <__swbuf_r>
 800b130:	3001      	adds	r0, #1
 800b132:	d011      	beq.n	800b158 <_puts_r+0x84>
 800b134:	250a      	movs	r5, #10
 800b136:	e011      	b.n	800b15c <_puts_r+0x88>
 800b138:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <_puts_r+0xd4>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_puts_r+0x6e>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7da      	b.n	800b0f8 <_puts_r+0x24>
 800b142:	4b1a      	ldr	r3, [pc, #104]	; (800b1ac <_puts_r+0xd8>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7d5      	b.n	800b0f8 <_puts_r+0x24>
 800b14c:	4621      	mov	r1, r4
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 f898 	bl	800b284 <__swsetup_r>
 800b154:	2800      	cmp	r0, #0
 800b156:	d0dd      	beq.n	800b114 <_puts_r+0x40>
 800b158:	f04f 35ff 	mov.w	r5, #4294967295
 800b15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b15e:	07da      	lsls	r2, r3, #31
 800b160:	d405      	bmi.n	800b16e <_puts_r+0x9a>
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	059b      	lsls	r3, r3, #22
 800b166:	d402      	bmi.n	800b16e <_puts_r+0x9a>
 800b168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b16a:	f000 fab2 	bl	800b6d2 <__retarget_lock_release_recursive>
 800b16e:	4628      	mov	r0, r5
 800b170:	bd70      	pop	{r4, r5, r6, pc}
 800b172:	2b00      	cmp	r3, #0
 800b174:	da04      	bge.n	800b180 <_puts_r+0xac>
 800b176:	69a2      	ldr	r2, [r4, #24]
 800b178:	429a      	cmp	r2, r3
 800b17a:	dc06      	bgt.n	800b18a <_puts_r+0xb6>
 800b17c:	290a      	cmp	r1, #10
 800b17e:	d004      	beq.n	800b18a <_puts_r+0xb6>
 800b180:	6823      	ldr	r3, [r4, #0]
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	6022      	str	r2, [r4, #0]
 800b186:	7019      	strb	r1, [r3, #0]
 800b188:	e7c5      	b.n	800b116 <_puts_r+0x42>
 800b18a:	4622      	mov	r2, r4
 800b18c:	4628      	mov	r0, r5
 800b18e:	f000 f827 	bl	800b1e0 <__swbuf_r>
 800b192:	3001      	adds	r0, #1
 800b194:	d1bf      	bne.n	800b116 <_puts_r+0x42>
 800b196:	e7df      	b.n	800b158 <_puts_r+0x84>
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	250a      	movs	r5, #10
 800b19c:	1c5a      	adds	r2, r3, #1
 800b19e:	6022      	str	r2, [r4, #0]
 800b1a0:	701d      	strb	r5, [r3, #0]
 800b1a2:	e7db      	b.n	800b15c <_puts_r+0x88>
 800b1a4:	0800c7f4 	.word	0x0800c7f4
 800b1a8:	0800c814 	.word	0x0800c814
 800b1ac:	0800c7d4 	.word	0x0800c7d4

0800b1b0 <puts>:
 800b1b0:	4b02      	ldr	r3, [pc, #8]	; (800b1bc <puts+0xc>)
 800b1b2:	4601      	mov	r1, r0
 800b1b4:	6818      	ldr	r0, [r3, #0]
 800b1b6:	f7ff bf8d 	b.w	800b0d4 <_puts_r>
 800b1ba:	bf00      	nop
 800b1bc:	20000030 	.word	0x20000030

0800b1c0 <_sbrk_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	4d06      	ldr	r5, [pc, #24]	; (800b1dc <_sbrk_r+0x1c>)
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4608      	mov	r0, r1
 800b1ca:	602b      	str	r3, [r5, #0]
 800b1cc:	f7f7 f89a 	bl	8002304 <_sbrk>
 800b1d0:	1c43      	adds	r3, r0, #1
 800b1d2:	d102      	bne.n	800b1da <_sbrk_r+0x1a>
 800b1d4:	682b      	ldr	r3, [r5, #0]
 800b1d6:	b103      	cbz	r3, 800b1da <_sbrk_r+0x1a>
 800b1d8:	6023      	str	r3, [r4, #0]
 800b1da:	bd38      	pop	{r3, r4, r5, pc}
 800b1dc:	20000ecc 	.word	0x20000ecc

0800b1e0 <__swbuf_r>:
 800b1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e2:	460e      	mov	r6, r1
 800b1e4:	4614      	mov	r4, r2
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	b118      	cbz	r0, 800b1f2 <__swbuf_r+0x12>
 800b1ea:	6983      	ldr	r3, [r0, #24]
 800b1ec:	b90b      	cbnz	r3, 800b1f2 <__swbuf_r+0x12>
 800b1ee:	f000 f9d1 	bl	800b594 <__sinit>
 800b1f2:	4b21      	ldr	r3, [pc, #132]	; (800b278 <__swbuf_r+0x98>)
 800b1f4:	429c      	cmp	r4, r3
 800b1f6:	d12b      	bne.n	800b250 <__swbuf_r+0x70>
 800b1f8:	686c      	ldr	r4, [r5, #4]
 800b1fa:	69a3      	ldr	r3, [r4, #24]
 800b1fc:	60a3      	str	r3, [r4, #8]
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	071a      	lsls	r2, r3, #28
 800b202:	d52f      	bpl.n	800b264 <__swbuf_r+0x84>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b36b      	cbz	r3, 800b264 <__swbuf_r+0x84>
 800b208:	6923      	ldr	r3, [r4, #16]
 800b20a:	6820      	ldr	r0, [r4, #0]
 800b20c:	1ac0      	subs	r0, r0, r3
 800b20e:	6963      	ldr	r3, [r4, #20]
 800b210:	b2f6      	uxtb	r6, r6
 800b212:	4283      	cmp	r3, r0
 800b214:	4637      	mov	r7, r6
 800b216:	dc04      	bgt.n	800b222 <__swbuf_r+0x42>
 800b218:	4621      	mov	r1, r4
 800b21a:	4628      	mov	r0, r5
 800b21c:	f000 f926 	bl	800b46c <_fflush_r>
 800b220:	bb30      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b222:	68a3      	ldr	r3, [r4, #8]
 800b224:	3b01      	subs	r3, #1
 800b226:	60a3      	str	r3, [r4, #8]
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	1c5a      	adds	r2, r3, #1
 800b22c:	6022      	str	r2, [r4, #0]
 800b22e:	701e      	strb	r6, [r3, #0]
 800b230:	6963      	ldr	r3, [r4, #20]
 800b232:	3001      	adds	r0, #1
 800b234:	4283      	cmp	r3, r0
 800b236:	d004      	beq.n	800b242 <__swbuf_r+0x62>
 800b238:	89a3      	ldrh	r3, [r4, #12]
 800b23a:	07db      	lsls	r3, r3, #31
 800b23c:	d506      	bpl.n	800b24c <__swbuf_r+0x6c>
 800b23e:	2e0a      	cmp	r6, #10
 800b240:	d104      	bne.n	800b24c <__swbuf_r+0x6c>
 800b242:	4621      	mov	r1, r4
 800b244:	4628      	mov	r0, r5
 800b246:	f000 f911 	bl	800b46c <_fflush_r>
 800b24a:	b988      	cbnz	r0, 800b270 <__swbuf_r+0x90>
 800b24c:	4638      	mov	r0, r7
 800b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <__swbuf_r+0x9c>)
 800b252:	429c      	cmp	r4, r3
 800b254:	d101      	bne.n	800b25a <__swbuf_r+0x7a>
 800b256:	68ac      	ldr	r4, [r5, #8]
 800b258:	e7cf      	b.n	800b1fa <__swbuf_r+0x1a>
 800b25a:	4b09      	ldr	r3, [pc, #36]	; (800b280 <__swbuf_r+0xa0>)
 800b25c:	429c      	cmp	r4, r3
 800b25e:	bf08      	it	eq
 800b260:	68ec      	ldreq	r4, [r5, #12]
 800b262:	e7ca      	b.n	800b1fa <__swbuf_r+0x1a>
 800b264:	4621      	mov	r1, r4
 800b266:	4628      	mov	r0, r5
 800b268:	f000 f80c 	bl	800b284 <__swsetup_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d0cb      	beq.n	800b208 <__swbuf_r+0x28>
 800b270:	f04f 37ff 	mov.w	r7, #4294967295
 800b274:	e7ea      	b.n	800b24c <__swbuf_r+0x6c>
 800b276:	bf00      	nop
 800b278:	0800c7f4 	.word	0x0800c7f4
 800b27c:	0800c814 	.word	0x0800c814
 800b280:	0800c7d4 	.word	0x0800c7d4

0800b284 <__swsetup_r>:
 800b284:	4b32      	ldr	r3, [pc, #200]	; (800b350 <__swsetup_r+0xcc>)
 800b286:	b570      	push	{r4, r5, r6, lr}
 800b288:	681d      	ldr	r5, [r3, #0]
 800b28a:	4606      	mov	r6, r0
 800b28c:	460c      	mov	r4, r1
 800b28e:	b125      	cbz	r5, 800b29a <__swsetup_r+0x16>
 800b290:	69ab      	ldr	r3, [r5, #24]
 800b292:	b913      	cbnz	r3, 800b29a <__swsetup_r+0x16>
 800b294:	4628      	mov	r0, r5
 800b296:	f000 f97d 	bl	800b594 <__sinit>
 800b29a:	4b2e      	ldr	r3, [pc, #184]	; (800b354 <__swsetup_r+0xd0>)
 800b29c:	429c      	cmp	r4, r3
 800b29e:	d10f      	bne.n	800b2c0 <__swsetup_r+0x3c>
 800b2a0:	686c      	ldr	r4, [r5, #4]
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2a8:	0719      	lsls	r1, r3, #28
 800b2aa:	d42c      	bmi.n	800b306 <__swsetup_r+0x82>
 800b2ac:	06dd      	lsls	r5, r3, #27
 800b2ae:	d411      	bmi.n	800b2d4 <__swsetup_r+0x50>
 800b2b0:	2309      	movs	r3, #9
 800b2b2:	6033      	str	r3, [r6, #0]
 800b2b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b2b8:	81a3      	strh	r3, [r4, #12]
 800b2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b2be:	e03e      	b.n	800b33e <__swsetup_r+0xba>
 800b2c0:	4b25      	ldr	r3, [pc, #148]	; (800b358 <__swsetup_r+0xd4>)
 800b2c2:	429c      	cmp	r4, r3
 800b2c4:	d101      	bne.n	800b2ca <__swsetup_r+0x46>
 800b2c6:	68ac      	ldr	r4, [r5, #8]
 800b2c8:	e7eb      	b.n	800b2a2 <__swsetup_r+0x1e>
 800b2ca:	4b24      	ldr	r3, [pc, #144]	; (800b35c <__swsetup_r+0xd8>)
 800b2cc:	429c      	cmp	r4, r3
 800b2ce:	bf08      	it	eq
 800b2d0:	68ec      	ldreq	r4, [r5, #12]
 800b2d2:	e7e6      	b.n	800b2a2 <__swsetup_r+0x1e>
 800b2d4:	0758      	lsls	r0, r3, #29
 800b2d6:	d512      	bpl.n	800b2fe <__swsetup_r+0x7a>
 800b2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2da:	b141      	cbz	r1, 800b2ee <__swsetup_r+0x6a>
 800b2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2e0:	4299      	cmp	r1, r3
 800b2e2:	d002      	beq.n	800b2ea <__swsetup_r+0x66>
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff fdfd 	bl	800aee4 <_free_r>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	6363      	str	r3, [r4, #52]	; 0x34
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2f4:	81a3      	strh	r3, [r4, #12]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	6063      	str	r3, [r4, #4]
 800b2fa:	6923      	ldr	r3, [r4, #16]
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	89a3      	ldrh	r3, [r4, #12]
 800b300:	f043 0308 	orr.w	r3, r3, #8
 800b304:	81a3      	strh	r3, [r4, #12]
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	b94b      	cbnz	r3, 800b31e <__swsetup_r+0x9a>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b314:	d003      	beq.n	800b31e <__swsetup_r+0x9a>
 800b316:	4621      	mov	r1, r4
 800b318:	4630      	mov	r0, r6
 800b31a:	f000 fa01 	bl	800b720 <__smakebuf_r>
 800b31e:	89a0      	ldrh	r0, [r4, #12]
 800b320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b324:	f010 0301 	ands.w	r3, r0, #1
 800b328:	d00a      	beq.n	800b340 <__swsetup_r+0xbc>
 800b32a:	2300      	movs	r3, #0
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	6963      	ldr	r3, [r4, #20]
 800b330:	425b      	negs	r3, r3
 800b332:	61a3      	str	r3, [r4, #24]
 800b334:	6923      	ldr	r3, [r4, #16]
 800b336:	b943      	cbnz	r3, 800b34a <__swsetup_r+0xc6>
 800b338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b33c:	d1ba      	bne.n	800b2b4 <__swsetup_r+0x30>
 800b33e:	bd70      	pop	{r4, r5, r6, pc}
 800b340:	0781      	lsls	r1, r0, #30
 800b342:	bf58      	it	pl
 800b344:	6963      	ldrpl	r3, [r4, #20]
 800b346:	60a3      	str	r3, [r4, #8]
 800b348:	e7f4      	b.n	800b334 <__swsetup_r+0xb0>
 800b34a:	2000      	movs	r0, #0
 800b34c:	e7f7      	b.n	800b33e <__swsetup_r+0xba>
 800b34e:	bf00      	nop
 800b350:	20000030 	.word	0x20000030
 800b354:	0800c7f4 	.word	0x0800c7f4
 800b358:	0800c814 	.word	0x0800c814
 800b35c:	0800c7d4 	.word	0x0800c7d4

0800b360 <__sflush_r>:
 800b360:	898a      	ldrh	r2, [r1, #12]
 800b362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	4605      	mov	r5, r0
 800b368:	0710      	lsls	r0, r2, #28
 800b36a:	460c      	mov	r4, r1
 800b36c:	d458      	bmi.n	800b420 <__sflush_r+0xc0>
 800b36e:	684b      	ldr	r3, [r1, #4]
 800b370:	2b00      	cmp	r3, #0
 800b372:	dc05      	bgt.n	800b380 <__sflush_r+0x20>
 800b374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b376:	2b00      	cmp	r3, #0
 800b378:	dc02      	bgt.n	800b380 <__sflush_r+0x20>
 800b37a:	2000      	movs	r0, #0
 800b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b382:	2e00      	cmp	r6, #0
 800b384:	d0f9      	beq.n	800b37a <__sflush_r+0x1a>
 800b386:	2300      	movs	r3, #0
 800b388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b38c:	682f      	ldr	r7, [r5, #0]
 800b38e:	602b      	str	r3, [r5, #0]
 800b390:	d032      	beq.n	800b3f8 <__sflush_r+0x98>
 800b392:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b394:	89a3      	ldrh	r3, [r4, #12]
 800b396:	075a      	lsls	r2, r3, #29
 800b398:	d505      	bpl.n	800b3a6 <__sflush_r+0x46>
 800b39a:	6863      	ldr	r3, [r4, #4]
 800b39c:	1ac0      	subs	r0, r0, r3
 800b39e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3a0:	b10b      	cbz	r3, 800b3a6 <__sflush_r+0x46>
 800b3a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3a4:	1ac0      	subs	r0, r0, r3
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3ac:	6a21      	ldr	r1, [r4, #32]
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	47b0      	blx	r6
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	89a3      	ldrh	r3, [r4, #12]
 800b3b6:	d106      	bne.n	800b3c6 <__sflush_r+0x66>
 800b3b8:	6829      	ldr	r1, [r5, #0]
 800b3ba:	291d      	cmp	r1, #29
 800b3bc:	d82c      	bhi.n	800b418 <__sflush_r+0xb8>
 800b3be:	4a2a      	ldr	r2, [pc, #168]	; (800b468 <__sflush_r+0x108>)
 800b3c0:	40ca      	lsrs	r2, r1
 800b3c2:	07d6      	lsls	r6, r2, #31
 800b3c4:	d528      	bpl.n	800b418 <__sflush_r+0xb8>
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	6062      	str	r2, [r4, #4]
 800b3ca:	04d9      	lsls	r1, r3, #19
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	6022      	str	r2, [r4, #0]
 800b3d0:	d504      	bpl.n	800b3dc <__sflush_r+0x7c>
 800b3d2:	1c42      	adds	r2, r0, #1
 800b3d4:	d101      	bne.n	800b3da <__sflush_r+0x7a>
 800b3d6:	682b      	ldr	r3, [r5, #0]
 800b3d8:	b903      	cbnz	r3, 800b3dc <__sflush_r+0x7c>
 800b3da:	6560      	str	r0, [r4, #84]	; 0x54
 800b3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3de:	602f      	str	r7, [r5, #0]
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d0ca      	beq.n	800b37a <__sflush_r+0x1a>
 800b3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3e8:	4299      	cmp	r1, r3
 800b3ea:	d002      	beq.n	800b3f2 <__sflush_r+0x92>
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f7ff fd79 	bl	800aee4 <_free_r>
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	6360      	str	r0, [r4, #52]	; 0x34
 800b3f6:	e7c1      	b.n	800b37c <__sflush_r+0x1c>
 800b3f8:	6a21      	ldr	r1, [r4, #32]
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b0      	blx	r6
 800b400:	1c41      	adds	r1, r0, #1
 800b402:	d1c7      	bne.n	800b394 <__sflush_r+0x34>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d0c4      	beq.n	800b394 <__sflush_r+0x34>
 800b40a:	2b1d      	cmp	r3, #29
 800b40c:	d001      	beq.n	800b412 <__sflush_r+0xb2>
 800b40e:	2b16      	cmp	r3, #22
 800b410:	d101      	bne.n	800b416 <__sflush_r+0xb6>
 800b412:	602f      	str	r7, [r5, #0]
 800b414:	e7b1      	b.n	800b37a <__sflush_r+0x1a>
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	e7ad      	b.n	800b37c <__sflush_r+0x1c>
 800b420:	690f      	ldr	r7, [r1, #16]
 800b422:	2f00      	cmp	r7, #0
 800b424:	d0a9      	beq.n	800b37a <__sflush_r+0x1a>
 800b426:	0793      	lsls	r3, r2, #30
 800b428:	680e      	ldr	r6, [r1, #0]
 800b42a:	bf08      	it	eq
 800b42c:	694b      	ldreq	r3, [r1, #20]
 800b42e:	600f      	str	r7, [r1, #0]
 800b430:	bf18      	it	ne
 800b432:	2300      	movne	r3, #0
 800b434:	eba6 0807 	sub.w	r8, r6, r7
 800b438:	608b      	str	r3, [r1, #8]
 800b43a:	f1b8 0f00 	cmp.w	r8, #0
 800b43e:	dd9c      	ble.n	800b37a <__sflush_r+0x1a>
 800b440:	6a21      	ldr	r1, [r4, #32]
 800b442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b444:	4643      	mov	r3, r8
 800b446:	463a      	mov	r2, r7
 800b448:	4628      	mov	r0, r5
 800b44a:	47b0      	blx	r6
 800b44c:	2800      	cmp	r0, #0
 800b44e:	dc06      	bgt.n	800b45e <__sflush_r+0xfe>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b456:	81a3      	strh	r3, [r4, #12]
 800b458:	f04f 30ff 	mov.w	r0, #4294967295
 800b45c:	e78e      	b.n	800b37c <__sflush_r+0x1c>
 800b45e:	4407      	add	r7, r0
 800b460:	eba8 0800 	sub.w	r8, r8, r0
 800b464:	e7e9      	b.n	800b43a <__sflush_r+0xda>
 800b466:	bf00      	nop
 800b468:	20400001 	.word	0x20400001

0800b46c <_fflush_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	690b      	ldr	r3, [r1, #16]
 800b470:	4605      	mov	r5, r0
 800b472:	460c      	mov	r4, r1
 800b474:	b913      	cbnz	r3, 800b47c <_fflush_r+0x10>
 800b476:	2500      	movs	r5, #0
 800b478:	4628      	mov	r0, r5
 800b47a:	bd38      	pop	{r3, r4, r5, pc}
 800b47c:	b118      	cbz	r0, 800b486 <_fflush_r+0x1a>
 800b47e:	6983      	ldr	r3, [r0, #24]
 800b480:	b90b      	cbnz	r3, 800b486 <_fflush_r+0x1a>
 800b482:	f000 f887 	bl	800b594 <__sinit>
 800b486:	4b14      	ldr	r3, [pc, #80]	; (800b4d8 <_fflush_r+0x6c>)
 800b488:	429c      	cmp	r4, r3
 800b48a:	d11b      	bne.n	800b4c4 <_fflush_r+0x58>
 800b48c:	686c      	ldr	r4, [r5, #4]
 800b48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d0ef      	beq.n	800b476 <_fflush_r+0xa>
 800b496:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b498:	07d0      	lsls	r0, r2, #31
 800b49a:	d404      	bmi.n	800b4a6 <_fflush_r+0x3a>
 800b49c:	0599      	lsls	r1, r3, #22
 800b49e:	d402      	bmi.n	800b4a6 <_fflush_r+0x3a>
 800b4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a2:	f000 f915 	bl	800b6d0 <__retarget_lock_acquire_recursive>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	f7ff ff59 	bl	800b360 <__sflush_r>
 800b4ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4b0:	07da      	lsls	r2, r3, #31
 800b4b2:	4605      	mov	r5, r0
 800b4b4:	d4e0      	bmi.n	800b478 <_fflush_r+0xc>
 800b4b6:	89a3      	ldrh	r3, [r4, #12]
 800b4b8:	059b      	lsls	r3, r3, #22
 800b4ba:	d4dd      	bmi.n	800b478 <_fflush_r+0xc>
 800b4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4be:	f000 f908 	bl	800b6d2 <__retarget_lock_release_recursive>
 800b4c2:	e7d9      	b.n	800b478 <_fflush_r+0xc>
 800b4c4:	4b05      	ldr	r3, [pc, #20]	; (800b4dc <_fflush_r+0x70>)
 800b4c6:	429c      	cmp	r4, r3
 800b4c8:	d101      	bne.n	800b4ce <_fflush_r+0x62>
 800b4ca:	68ac      	ldr	r4, [r5, #8]
 800b4cc:	e7df      	b.n	800b48e <_fflush_r+0x22>
 800b4ce:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <_fflush_r+0x74>)
 800b4d0:	429c      	cmp	r4, r3
 800b4d2:	bf08      	it	eq
 800b4d4:	68ec      	ldreq	r4, [r5, #12]
 800b4d6:	e7da      	b.n	800b48e <_fflush_r+0x22>
 800b4d8:	0800c7f4 	.word	0x0800c7f4
 800b4dc:	0800c814 	.word	0x0800c814
 800b4e0:	0800c7d4 	.word	0x0800c7d4

0800b4e4 <std>:
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	b510      	push	{r4, lr}
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	e9c0 3300 	strd	r3, r3, [r0]
 800b4ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4f2:	6083      	str	r3, [r0, #8]
 800b4f4:	8181      	strh	r1, [r0, #12]
 800b4f6:	6643      	str	r3, [r0, #100]	; 0x64
 800b4f8:	81c2      	strh	r2, [r0, #14]
 800b4fa:	6183      	str	r3, [r0, #24]
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	2208      	movs	r2, #8
 800b500:	305c      	adds	r0, #92	; 0x5c
 800b502:	f7ff fce7 	bl	800aed4 <memset>
 800b506:	4b05      	ldr	r3, [pc, #20]	; (800b51c <std+0x38>)
 800b508:	6263      	str	r3, [r4, #36]	; 0x24
 800b50a:	4b05      	ldr	r3, [pc, #20]	; (800b520 <std+0x3c>)
 800b50c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b50e:	4b05      	ldr	r3, [pc, #20]	; (800b524 <std+0x40>)
 800b510:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b512:	4b05      	ldr	r3, [pc, #20]	; (800b528 <std+0x44>)
 800b514:	6224      	str	r4, [r4, #32]
 800b516:	6323      	str	r3, [r4, #48]	; 0x30
 800b518:	bd10      	pop	{r4, pc}
 800b51a:	bf00      	nop
 800b51c:	0800bd95 	.word	0x0800bd95
 800b520:	0800bdb7 	.word	0x0800bdb7
 800b524:	0800bdef 	.word	0x0800bdef
 800b528:	0800be13 	.word	0x0800be13

0800b52c <_cleanup_r>:
 800b52c:	4901      	ldr	r1, [pc, #4]	; (800b534 <_cleanup_r+0x8>)
 800b52e:	f000 b8af 	b.w	800b690 <_fwalk_reent>
 800b532:	bf00      	nop
 800b534:	0800b46d 	.word	0x0800b46d

0800b538 <__sfmoreglue>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	2268      	movs	r2, #104	; 0x68
 800b53c:	1e4d      	subs	r5, r1, #1
 800b53e:	4355      	muls	r5, r2
 800b540:	460e      	mov	r6, r1
 800b542:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b546:	f7ff fd39 	bl	800afbc <_malloc_r>
 800b54a:	4604      	mov	r4, r0
 800b54c:	b140      	cbz	r0, 800b560 <__sfmoreglue+0x28>
 800b54e:	2100      	movs	r1, #0
 800b550:	e9c0 1600 	strd	r1, r6, [r0]
 800b554:	300c      	adds	r0, #12
 800b556:	60a0      	str	r0, [r4, #8]
 800b558:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b55c:	f7ff fcba 	bl	800aed4 <memset>
 800b560:	4620      	mov	r0, r4
 800b562:	bd70      	pop	{r4, r5, r6, pc}

0800b564 <__sfp_lock_acquire>:
 800b564:	4801      	ldr	r0, [pc, #4]	; (800b56c <__sfp_lock_acquire+0x8>)
 800b566:	f000 b8b3 	b.w	800b6d0 <__retarget_lock_acquire_recursive>
 800b56a:	bf00      	nop
 800b56c:	20000ec9 	.word	0x20000ec9

0800b570 <__sfp_lock_release>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__sfp_lock_release+0x8>)
 800b572:	f000 b8ae 	b.w	800b6d2 <__retarget_lock_release_recursive>
 800b576:	bf00      	nop
 800b578:	20000ec9 	.word	0x20000ec9

0800b57c <__sinit_lock_acquire>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__sinit_lock_acquire+0x8>)
 800b57e:	f000 b8a7 	b.w	800b6d0 <__retarget_lock_acquire_recursive>
 800b582:	bf00      	nop
 800b584:	20000eca 	.word	0x20000eca

0800b588 <__sinit_lock_release>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__sinit_lock_release+0x8>)
 800b58a:	f000 b8a2 	b.w	800b6d2 <__retarget_lock_release_recursive>
 800b58e:	bf00      	nop
 800b590:	20000eca 	.word	0x20000eca

0800b594 <__sinit>:
 800b594:	b510      	push	{r4, lr}
 800b596:	4604      	mov	r4, r0
 800b598:	f7ff fff0 	bl	800b57c <__sinit_lock_acquire>
 800b59c:	69a3      	ldr	r3, [r4, #24]
 800b59e:	b11b      	cbz	r3, 800b5a8 <__sinit+0x14>
 800b5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5a4:	f7ff bff0 	b.w	800b588 <__sinit_lock_release>
 800b5a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b5ac:	6523      	str	r3, [r4, #80]	; 0x50
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <__sinit+0x68>)
 800b5b0:	4a13      	ldr	r2, [pc, #76]	; (800b600 <__sinit+0x6c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800b5b6:	42a3      	cmp	r3, r4
 800b5b8:	bf04      	itt	eq
 800b5ba:	2301      	moveq	r3, #1
 800b5bc:	61a3      	streq	r3, [r4, #24]
 800b5be:	4620      	mov	r0, r4
 800b5c0:	f000 f820 	bl	800b604 <__sfp>
 800b5c4:	6060      	str	r0, [r4, #4]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f000 f81c 	bl	800b604 <__sfp>
 800b5cc:	60a0      	str	r0, [r4, #8]
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	f000 f818 	bl	800b604 <__sfp>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	60e0      	str	r0, [r4, #12]
 800b5d8:	2104      	movs	r1, #4
 800b5da:	6860      	ldr	r0, [r4, #4]
 800b5dc:	f7ff ff82 	bl	800b4e4 <std>
 800b5e0:	68a0      	ldr	r0, [r4, #8]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	2109      	movs	r1, #9
 800b5e6:	f7ff ff7d 	bl	800b4e4 <std>
 800b5ea:	68e0      	ldr	r0, [r4, #12]
 800b5ec:	2202      	movs	r2, #2
 800b5ee:	2112      	movs	r1, #18
 800b5f0:	f7ff ff78 	bl	800b4e4 <std>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	61a3      	str	r3, [r4, #24]
 800b5f8:	e7d2      	b.n	800b5a0 <__sinit+0xc>
 800b5fa:	bf00      	nop
 800b5fc:	0800c7d0 	.word	0x0800c7d0
 800b600:	0800b52d 	.word	0x0800b52d

0800b604 <__sfp>:
 800b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b606:	4607      	mov	r7, r0
 800b608:	f7ff ffac 	bl	800b564 <__sfp_lock_acquire>
 800b60c:	4b1e      	ldr	r3, [pc, #120]	; (800b688 <__sfp+0x84>)
 800b60e:	681e      	ldr	r6, [r3, #0]
 800b610:	69b3      	ldr	r3, [r6, #24]
 800b612:	b913      	cbnz	r3, 800b61a <__sfp+0x16>
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff ffbd 	bl	800b594 <__sinit>
 800b61a:	3648      	adds	r6, #72	; 0x48
 800b61c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b620:	3b01      	subs	r3, #1
 800b622:	d503      	bpl.n	800b62c <__sfp+0x28>
 800b624:	6833      	ldr	r3, [r6, #0]
 800b626:	b30b      	cbz	r3, 800b66c <__sfp+0x68>
 800b628:	6836      	ldr	r6, [r6, #0]
 800b62a:	e7f7      	b.n	800b61c <__sfp+0x18>
 800b62c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b630:	b9d5      	cbnz	r5, 800b668 <__sfp+0x64>
 800b632:	4b16      	ldr	r3, [pc, #88]	; (800b68c <__sfp+0x88>)
 800b634:	60e3      	str	r3, [r4, #12]
 800b636:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b63a:	6665      	str	r5, [r4, #100]	; 0x64
 800b63c:	f000 f847 	bl	800b6ce <__retarget_lock_init_recursive>
 800b640:	f7ff ff96 	bl	800b570 <__sfp_lock_release>
 800b644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b64c:	6025      	str	r5, [r4, #0]
 800b64e:	61a5      	str	r5, [r4, #24]
 800b650:	2208      	movs	r2, #8
 800b652:	4629      	mov	r1, r5
 800b654:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b658:	f7ff fc3c 	bl	800aed4 <memset>
 800b65c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b660:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b664:	4620      	mov	r0, r4
 800b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b668:	3468      	adds	r4, #104	; 0x68
 800b66a:	e7d9      	b.n	800b620 <__sfp+0x1c>
 800b66c:	2104      	movs	r1, #4
 800b66e:	4638      	mov	r0, r7
 800b670:	f7ff ff62 	bl	800b538 <__sfmoreglue>
 800b674:	4604      	mov	r4, r0
 800b676:	6030      	str	r0, [r6, #0]
 800b678:	2800      	cmp	r0, #0
 800b67a:	d1d5      	bne.n	800b628 <__sfp+0x24>
 800b67c:	f7ff ff78 	bl	800b570 <__sfp_lock_release>
 800b680:	230c      	movs	r3, #12
 800b682:	603b      	str	r3, [r7, #0]
 800b684:	e7ee      	b.n	800b664 <__sfp+0x60>
 800b686:	bf00      	nop
 800b688:	0800c7d0 	.word	0x0800c7d0
 800b68c:	ffff0001 	.word	0xffff0001

0800b690 <_fwalk_reent>:
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b694:	4606      	mov	r6, r0
 800b696:	4688      	mov	r8, r1
 800b698:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b69c:	2700      	movs	r7, #0
 800b69e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6a2:	f1b9 0901 	subs.w	r9, r9, #1
 800b6a6:	d505      	bpl.n	800b6b4 <_fwalk_reent+0x24>
 800b6a8:	6824      	ldr	r4, [r4, #0]
 800b6aa:	2c00      	cmp	r4, #0
 800b6ac:	d1f7      	bne.n	800b69e <_fwalk_reent+0xe>
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b4:	89ab      	ldrh	r3, [r5, #12]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d907      	bls.n	800b6ca <_fwalk_reent+0x3a>
 800b6ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	d003      	beq.n	800b6ca <_fwalk_reent+0x3a>
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	47c0      	blx	r8
 800b6c8:	4307      	orrs	r7, r0
 800b6ca:	3568      	adds	r5, #104	; 0x68
 800b6cc:	e7e9      	b.n	800b6a2 <_fwalk_reent+0x12>

0800b6ce <__retarget_lock_init_recursive>:
 800b6ce:	4770      	bx	lr

0800b6d0 <__retarget_lock_acquire_recursive>:
 800b6d0:	4770      	bx	lr

0800b6d2 <__retarget_lock_release_recursive>:
 800b6d2:	4770      	bx	lr

0800b6d4 <__swhatbuf_r>:
 800b6d4:	b570      	push	{r4, r5, r6, lr}
 800b6d6:	460e      	mov	r6, r1
 800b6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	b096      	sub	sp, #88	; 0x58
 800b6e0:	4614      	mov	r4, r2
 800b6e2:	461d      	mov	r5, r3
 800b6e4:	da08      	bge.n	800b6f8 <__swhatbuf_r+0x24>
 800b6e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	602a      	str	r2, [r5, #0]
 800b6ee:	061a      	lsls	r2, r3, #24
 800b6f0:	d410      	bmi.n	800b714 <__swhatbuf_r+0x40>
 800b6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f6:	e00e      	b.n	800b716 <__swhatbuf_r+0x42>
 800b6f8:	466a      	mov	r2, sp
 800b6fa:	f000 fbb1 	bl	800be60 <_fstat_r>
 800b6fe:	2800      	cmp	r0, #0
 800b700:	dbf1      	blt.n	800b6e6 <__swhatbuf_r+0x12>
 800b702:	9a01      	ldr	r2, [sp, #4]
 800b704:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b708:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b70c:	425a      	negs	r2, r3
 800b70e:	415a      	adcs	r2, r3
 800b710:	602a      	str	r2, [r5, #0]
 800b712:	e7ee      	b.n	800b6f2 <__swhatbuf_r+0x1e>
 800b714:	2340      	movs	r3, #64	; 0x40
 800b716:	2000      	movs	r0, #0
 800b718:	6023      	str	r3, [r4, #0]
 800b71a:	b016      	add	sp, #88	; 0x58
 800b71c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b720 <__smakebuf_r>:
 800b720:	898b      	ldrh	r3, [r1, #12]
 800b722:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b724:	079d      	lsls	r5, r3, #30
 800b726:	4606      	mov	r6, r0
 800b728:	460c      	mov	r4, r1
 800b72a:	d507      	bpl.n	800b73c <__smakebuf_r+0x1c>
 800b72c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b730:	6023      	str	r3, [r4, #0]
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	2301      	movs	r3, #1
 800b736:	6163      	str	r3, [r4, #20]
 800b738:	b002      	add	sp, #8
 800b73a:	bd70      	pop	{r4, r5, r6, pc}
 800b73c:	ab01      	add	r3, sp, #4
 800b73e:	466a      	mov	r2, sp
 800b740:	f7ff ffc8 	bl	800b6d4 <__swhatbuf_r>
 800b744:	9900      	ldr	r1, [sp, #0]
 800b746:	4605      	mov	r5, r0
 800b748:	4630      	mov	r0, r6
 800b74a:	f7ff fc37 	bl	800afbc <_malloc_r>
 800b74e:	b948      	cbnz	r0, 800b764 <__smakebuf_r+0x44>
 800b750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b754:	059a      	lsls	r2, r3, #22
 800b756:	d4ef      	bmi.n	800b738 <__smakebuf_r+0x18>
 800b758:	f023 0303 	bic.w	r3, r3, #3
 800b75c:	f043 0302 	orr.w	r3, r3, #2
 800b760:	81a3      	strh	r3, [r4, #12]
 800b762:	e7e3      	b.n	800b72c <__smakebuf_r+0xc>
 800b764:	4b0d      	ldr	r3, [pc, #52]	; (800b79c <__smakebuf_r+0x7c>)
 800b766:	62b3      	str	r3, [r6, #40]	; 0x28
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	6020      	str	r0, [r4, #0]
 800b76c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b770:	81a3      	strh	r3, [r4, #12]
 800b772:	9b00      	ldr	r3, [sp, #0]
 800b774:	6163      	str	r3, [r4, #20]
 800b776:	9b01      	ldr	r3, [sp, #4]
 800b778:	6120      	str	r0, [r4, #16]
 800b77a:	b15b      	cbz	r3, 800b794 <__smakebuf_r+0x74>
 800b77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b780:	4630      	mov	r0, r6
 800b782:	f000 fb7f 	bl	800be84 <_isatty_r>
 800b786:	b128      	cbz	r0, 800b794 <__smakebuf_r+0x74>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f023 0303 	bic.w	r3, r3, #3
 800b78e:	f043 0301 	orr.w	r3, r3, #1
 800b792:	81a3      	strh	r3, [r4, #12]
 800b794:	89a0      	ldrh	r0, [r4, #12]
 800b796:	4305      	orrs	r5, r0
 800b798:	81a5      	strh	r5, [r4, #12]
 800b79a:	e7cd      	b.n	800b738 <__smakebuf_r+0x18>
 800b79c:	0800b52d 	.word	0x0800b52d

0800b7a0 <__malloc_lock>:
 800b7a0:	4801      	ldr	r0, [pc, #4]	; (800b7a8 <__malloc_lock+0x8>)
 800b7a2:	f7ff bf95 	b.w	800b6d0 <__retarget_lock_acquire_recursive>
 800b7a6:	bf00      	nop
 800b7a8:	20000ec8 	.word	0x20000ec8

0800b7ac <__malloc_unlock>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <__malloc_unlock+0x8>)
 800b7ae:	f7ff bf90 	b.w	800b6d2 <__retarget_lock_release_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	20000ec8 	.word	0x20000ec8

0800b7b8 <__sfputc_r>:
 800b7b8:	6893      	ldr	r3, [r2, #8]
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	b410      	push	{r4}
 800b7c0:	6093      	str	r3, [r2, #8]
 800b7c2:	da08      	bge.n	800b7d6 <__sfputc_r+0x1e>
 800b7c4:	6994      	ldr	r4, [r2, #24]
 800b7c6:	42a3      	cmp	r3, r4
 800b7c8:	db01      	blt.n	800b7ce <__sfputc_r+0x16>
 800b7ca:	290a      	cmp	r1, #10
 800b7cc:	d103      	bne.n	800b7d6 <__sfputc_r+0x1e>
 800b7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7d2:	f7ff bd05 	b.w	800b1e0 <__swbuf_r>
 800b7d6:	6813      	ldr	r3, [r2, #0]
 800b7d8:	1c58      	adds	r0, r3, #1
 800b7da:	6010      	str	r0, [r2, #0]
 800b7dc:	7019      	strb	r1, [r3, #0]
 800b7de:	4608      	mov	r0, r1
 800b7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <__sfputs_r>:
 800b7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	460f      	mov	r7, r1
 800b7ec:	4614      	mov	r4, r2
 800b7ee:	18d5      	adds	r5, r2, r3
 800b7f0:	42ac      	cmp	r4, r5
 800b7f2:	d101      	bne.n	800b7f8 <__sfputs_r+0x12>
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e007      	b.n	800b808 <__sfputs_r+0x22>
 800b7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7fc:	463a      	mov	r2, r7
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ffda 	bl	800b7b8 <__sfputc_r>
 800b804:	1c43      	adds	r3, r0, #1
 800b806:	d1f3      	bne.n	800b7f0 <__sfputs_r+0xa>
 800b808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b80c <_vfiprintf_r>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	460d      	mov	r5, r1
 800b812:	b09d      	sub	sp, #116	; 0x74
 800b814:	4614      	mov	r4, r2
 800b816:	4698      	mov	r8, r3
 800b818:	4606      	mov	r6, r0
 800b81a:	b118      	cbz	r0, 800b824 <_vfiprintf_r+0x18>
 800b81c:	6983      	ldr	r3, [r0, #24]
 800b81e:	b90b      	cbnz	r3, 800b824 <_vfiprintf_r+0x18>
 800b820:	f7ff feb8 	bl	800b594 <__sinit>
 800b824:	4b89      	ldr	r3, [pc, #548]	; (800ba4c <_vfiprintf_r+0x240>)
 800b826:	429d      	cmp	r5, r3
 800b828:	d11b      	bne.n	800b862 <_vfiprintf_r+0x56>
 800b82a:	6875      	ldr	r5, [r6, #4]
 800b82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b82e:	07d9      	lsls	r1, r3, #31
 800b830:	d405      	bmi.n	800b83e <_vfiprintf_r+0x32>
 800b832:	89ab      	ldrh	r3, [r5, #12]
 800b834:	059a      	lsls	r2, r3, #22
 800b836:	d402      	bmi.n	800b83e <_vfiprintf_r+0x32>
 800b838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b83a:	f7ff ff49 	bl	800b6d0 <__retarget_lock_acquire_recursive>
 800b83e:	89ab      	ldrh	r3, [r5, #12]
 800b840:	071b      	lsls	r3, r3, #28
 800b842:	d501      	bpl.n	800b848 <_vfiprintf_r+0x3c>
 800b844:	692b      	ldr	r3, [r5, #16]
 800b846:	b9eb      	cbnz	r3, 800b884 <_vfiprintf_r+0x78>
 800b848:	4629      	mov	r1, r5
 800b84a:	4630      	mov	r0, r6
 800b84c:	f7ff fd1a 	bl	800b284 <__swsetup_r>
 800b850:	b1c0      	cbz	r0, 800b884 <_vfiprintf_r+0x78>
 800b852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b854:	07dc      	lsls	r4, r3, #31
 800b856:	d50e      	bpl.n	800b876 <_vfiprintf_r+0x6a>
 800b858:	f04f 30ff 	mov.w	r0, #4294967295
 800b85c:	b01d      	add	sp, #116	; 0x74
 800b85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b862:	4b7b      	ldr	r3, [pc, #492]	; (800ba50 <_vfiprintf_r+0x244>)
 800b864:	429d      	cmp	r5, r3
 800b866:	d101      	bne.n	800b86c <_vfiprintf_r+0x60>
 800b868:	68b5      	ldr	r5, [r6, #8]
 800b86a:	e7df      	b.n	800b82c <_vfiprintf_r+0x20>
 800b86c:	4b79      	ldr	r3, [pc, #484]	; (800ba54 <_vfiprintf_r+0x248>)
 800b86e:	429d      	cmp	r5, r3
 800b870:	bf08      	it	eq
 800b872:	68f5      	ldreq	r5, [r6, #12]
 800b874:	e7da      	b.n	800b82c <_vfiprintf_r+0x20>
 800b876:	89ab      	ldrh	r3, [r5, #12]
 800b878:	0598      	lsls	r0, r3, #22
 800b87a:	d4ed      	bmi.n	800b858 <_vfiprintf_r+0x4c>
 800b87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b87e:	f7ff ff28 	bl	800b6d2 <__retarget_lock_release_recursive>
 800b882:	e7e9      	b.n	800b858 <_vfiprintf_r+0x4c>
 800b884:	2300      	movs	r3, #0
 800b886:	9309      	str	r3, [sp, #36]	; 0x24
 800b888:	2320      	movs	r3, #32
 800b88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b892:	2330      	movs	r3, #48	; 0x30
 800b894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba58 <_vfiprintf_r+0x24c>
 800b898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b89c:	f04f 0901 	mov.w	r9, #1
 800b8a0:	4623      	mov	r3, r4
 800b8a2:	469a      	mov	sl, r3
 800b8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a8:	b10a      	cbz	r2, 800b8ae <_vfiprintf_r+0xa2>
 800b8aa:	2a25      	cmp	r2, #37	; 0x25
 800b8ac:	d1f9      	bne.n	800b8a2 <_vfiprintf_r+0x96>
 800b8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b2:	d00b      	beq.n	800b8cc <_vfiprintf_r+0xc0>
 800b8b4:	465b      	mov	r3, fp
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7ff ff93 	bl	800b7e6 <__sfputs_r>
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f000 80aa 	beq.w	800ba1a <_vfiprintf_r+0x20e>
 800b8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8c8:	445a      	add	r2, fp
 800b8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 80a2 	beq.w	800ba1a <_vfiprintf_r+0x20e>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8e0:	f10a 0a01 	add.w	sl, sl, #1
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	9307      	str	r3, [sp, #28]
 800b8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b8ee:	4654      	mov	r4, sl
 800b8f0:	2205      	movs	r2, #5
 800b8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f6:	4858      	ldr	r0, [pc, #352]	; (800ba58 <_vfiprintf_r+0x24c>)
 800b8f8:	f7f4 fc7a 	bl	80001f0 <memchr>
 800b8fc:	9a04      	ldr	r2, [sp, #16]
 800b8fe:	b9d8      	cbnz	r0, 800b938 <_vfiprintf_r+0x12c>
 800b900:	06d1      	lsls	r1, r2, #27
 800b902:	bf44      	itt	mi
 800b904:	2320      	movmi	r3, #32
 800b906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b90a:	0713      	lsls	r3, r2, #28
 800b90c:	bf44      	itt	mi
 800b90e:	232b      	movmi	r3, #43	; 0x2b
 800b910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b914:	f89a 3000 	ldrb.w	r3, [sl]
 800b918:	2b2a      	cmp	r3, #42	; 0x2a
 800b91a:	d015      	beq.n	800b948 <_vfiprintf_r+0x13c>
 800b91c:	9a07      	ldr	r2, [sp, #28]
 800b91e:	4654      	mov	r4, sl
 800b920:	2000      	movs	r0, #0
 800b922:	f04f 0c0a 	mov.w	ip, #10
 800b926:	4621      	mov	r1, r4
 800b928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b92c:	3b30      	subs	r3, #48	; 0x30
 800b92e:	2b09      	cmp	r3, #9
 800b930:	d94e      	bls.n	800b9d0 <_vfiprintf_r+0x1c4>
 800b932:	b1b0      	cbz	r0, 800b962 <_vfiprintf_r+0x156>
 800b934:	9207      	str	r2, [sp, #28]
 800b936:	e014      	b.n	800b962 <_vfiprintf_r+0x156>
 800b938:	eba0 0308 	sub.w	r3, r0, r8
 800b93c:	fa09 f303 	lsl.w	r3, r9, r3
 800b940:	4313      	orrs	r3, r2
 800b942:	9304      	str	r3, [sp, #16]
 800b944:	46a2      	mov	sl, r4
 800b946:	e7d2      	b.n	800b8ee <_vfiprintf_r+0xe2>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	1d19      	adds	r1, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	9103      	str	r1, [sp, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	bfbb      	ittet	lt
 800b954:	425b      	neglt	r3, r3
 800b956:	f042 0202 	orrlt.w	r2, r2, #2
 800b95a:	9307      	strge	r3, [sp, #28]
 800b95c:	9307      	strlt	r3, [sp, #28]
 800b95e:	bfb8      	it	lt
 800b960:	9204      	strlt	r2, [sp, #16]
 800b962:	7823      	ldrb	r3, [r4, #0]
 800b964:	2b2e      	cmp	r3, #46	; 0x2e
 800b966:	d10c      	bne.n	800b982 <_vfiprintf_r+0x176>
 800b968:	7863      	ldrb	r3, [r4, #1]
 800b96a:	2b2a      	cmp	r3, #42	; 0x2a
 800b96c:	d135      	bne.n	800b9da <_vfiprintf_r+0x1ce>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	1d1a      	adds	r2, r3, #4
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	9203      	str	r2, [sp, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	bfb8      	it	lt
 800b97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b97e:	3402      	adds	r4, #2
 800b980:	9305      	str	r3, [sp, #20]
 800b982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba68 <_vfiprintf_r+0x25c>
 800b986:	7821      	ldrb	r1, [r4, #0]
 800b988:	2203      	movs	r2, #3
 800b98a:	4650      	mov	r0, sl
 800b98c:	f7f4 fc30 	bl	80001f0 <memchr>
 800b990:	b140      	cbz	r0, 800b9a4 <_vfiprintf_r+0x198>
 800b992:	2340      	movs	r3, #64	; 0x40
 800b994:	eba0 000a 	sub.w	r0, r0, sl
 800b998:	fa03 f000 	lsl.w	r0, r3, r0
 800b99c:	9b04      	ldr	r3, [sp, #16]
 800b99e:	4303      	orrs	r3, r0
 800b9a0:	3401      	adds	r4, #1
 800b9a2:	9304      	str	r3, [sp, #16]
 800b9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a8:	482c      	ldr	r0, [pc, #176]	; (800ba5c <_vfiprintf_r+0x250>)
 800b9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9ae:	2206      	movs	r2, #6
 800b9b0:	f7f4 fc1e 	bl	80001f0 <memchr>
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d03f      	beq.n	800ba38 <_vfiprintf_r+0x22c>
 800b9b8:	4b29      	ldr	r3, [pc, #164]	; (800ba60 <_vfiprintf_r+0x254>)
 800b9ba:	bb1b      	cbnz	r3, 800ba04 <_vfiprintf_r+0x1f8>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	3307      	adds	r3, #7
 800b9c0:	f023 0307 	bic.w	r3, r3, #7
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	9303      	str	r3, [sp, #12]
 800b9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9ca:	443b      	add	r3, r7
 800b9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ce:	e767      	b.n	800b8a0 <_vfiprintf_r+0x94>
 800b9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	2001      	movs	r0, #1
 800b9d8:	e7a5      	b.n	800b926 <_vfiprintf_r+0x11a>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	3401      	adds	r4, #1
 800b9de:	9305      	str	r3, [sp, #20]
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	f04f 0c0a 	mov.w	ip, #10
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9ec:	3a30      	subs	r2, #48	; 0x30
 800b9ee:	2a09      	cmp	r2, #9
 800b9f0:	d903      	bls.n	800b9fa <_vfiprintf_r+0x1ee>
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d0c5      	beq.n	800b982 <_vfiprintf_r+0x176>
 800b9f6:	9105      	str	r1, [sp, #20]
 800b9f8:	e7c3      	b.n	800b982 <_vfiprintf_r+0x176>
 800b9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9fe:	4604      	mov	r4, r0
 800ba00:	2301      	movs	r3, #1
 800ba02:	e7f0      	b.n	800b9e6 <_vfiprintf_r+0x1da>
 800ba04:	ab03      	add	r3, sp, #12
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	462a      	mov	r2, r5
 800ba0a:	4b16      	ldr	r3, [pc, #88]	; (800ba64 <_vfiprintf_r+0x258>)
 800ba0c:	a904      	add	r1, sp, #16
 800ba0e:	4630      	mov	r0, r6
 800ba10:	f3af 8000 	nop.w
 800ba14:	4607      	mov	r7, r0
 800ba16:	1c78      	adds	r0, r7, #1
 800ba18:	d1d6      	bne.n	800b9c8 <_vfiprintf_r+0x1bc>
 800ba1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba1c:	07d9      	lsls	r1, r3, #31
 800ba1e:	d405      	bmi.n	800ba2c <_vfiprintf_r+0x220>
 800ba20:	89ab      	ldrh	r3, [r5, #12]
 800ba22:	059a      	lsls	r2, r3, #22
 800ba24:	d402      	bmi.n	800ba2c <_vfiprintf_r+0x220>
 800ba26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba28:	f7ff fe53 	bl	800b6d2 <__retarget_lock_release_recursive>
 800ba2c:	89ab      	ldrh	r3, [r5, #12]
 800ba2e:	065b      	lsls	r3, r3, #25
 800ba30:	f53f af12 	bmi.w	800b858 <_vfiprintf_r+0x4c>
 800ba34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba36:	e711      	b.n	800b85c <_vfiprintf_r+0x50>
 800ba38:	ab03      	add	r3, sp, #12
 800ba3a:	9300      	str	r3, [sp, #0]
 800ba3c:	462a      	mov	r2, r5
 800ba3e:	4b09      	ldr	r3, [pc, #36]	; (800ba64 <_vfiprintf_r+0x258>)
 800ba40:	a904      	add	r1, sp, #16
 800ba42:	4630      	mov	r0, r6
 800ba44:	f000 f880 	bl	800bb48 <_printf_i>
 800ba48:	e7e4      	b.n	800ba14 <_vfiprintf_r+0x208>
 800ba4a:	bf00      	nop
 800ba4c:	0800c7f4 	.word	0x0800c7f4
 800ba50:	0800c814 	.word	0x0800c814
 800ba54:	0800c7d4 	.word	0x0800c7d4
 800ba58:	0800c834 	.word	0x0800c834
 800ba5c:	0800c83e 	.word	0x0800c83e
 800ba60:	00000000 	.word	0x00000000
 800ba64:	0800b7e7 	.word	0x0800b7e7
 800ba68:	0800c83a 	.word	0x0800c83a

0800ba6c <_printf_common>:
 800ba6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba70:	4616      	mov	r6, r2
 800ba72:	4699      	mov	r9, r3
 800ba74:	688a      	ldr	r2, [r1, #8]
 800ba76:	690b      	ldr	r3, [r1, #16]
 800ba78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	bfb8      	it	lt
 800ba80:	4613      	movlt	r3, r2
 800ba82:	6033      	str	r3, [r6, #0]
 800ba84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba88:	4607      	mov	r7, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	b10a      	cbz	r2, 800ba92 <_printf_common+0x26>
 800ba8e:	3301      	adds	r3, #1
 800ba90:	6033      	str	r3, [r6, #0]
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	0699      	lsls	r1, r3, #26
 800ba96:	bf42      	ittt	mi
 800ba98:	6833      	ldrmi	r3, [r6, #0]
 800ba9a:	3302      	addmi	r3, #2
 800ba9c:	6033      	strmi	r3, [r6, #0]
 800ba9e:	6825      	ldr	r5, [r4, #0]
 800baa0:	f015 0506 	ands.w	r5, r5, #6
 800baa4:	d106      	bne.n	800bab4 <_printf_common+0x48>
 800baa6:	f104 0a19 	add.w	sl, r4, #25
 800baaa:	68e3      	ldr	r3, [r4, #12]
 800baac:	6832      	ldr	r2, [r6, #0]
 800baae:	1a9b      	subs	r3, r3, r2
 800bab0:	42ab      	cmp	r3, r5
 800bab2:	dc26      	bgt.n	800bb02 <_printf_common+0x96>
 800bab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bab8:	1e13      	subs	r3, r2, #0
 800baba:	6822      	ldr	r2, [r4, #0]
 800babc:	bf18      	it	ne
 800babe:	2301      	movne	r3, #1
 800bac0:	0692      	lsls	r2, r2, #26
 800bac2:	d42b      	bmi.n	800bb1c <_printf_common+0xb0>
 800bac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bac8:	4649      	mov	r1, r9
 800baca:	4638      	mov	r0, r7
 800bacc:	47c0      	blx	r8
 800bace:	3001      	adds	r0, #1
 800bad0:	d01e      	beq.n	800bb10 <_printf_common+0xa4>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	68e5      	ldr	r5, [r4, #12]
 800bad6:	6832      	ldr	r2, [r6, #0]
 800bad8:	f003 0306 	and.w	r3, r3, #6
 800badc:	2b04      	cmp	r3, #4
 800bade:	bf08      	it	eq
 800bae0:	1aad      	subeq	r5, r5, r2
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	6922      	ldr	r2, [r4, #16]
 800bae6:	bf0c      	ite	eq
 800bae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800baec:	2500      	movne	r5, #0
 800baee:	4293      	cmp	r3, r2
 800baf0:	bfc4      	itt	gt
 800baf2:	1a9b      	subgt	r3, r3, r2
 800baf4:	18ed      	addgt	r5, r5, r3
 800baf6:	2600      	movs	r6, #0
 800baf8:	341a      	adds	r4, #26
 800bafa:	42b5      	cmp	r5, r6
 800bafc:	d11a      	bne.n	800bb34 <_printf_common+0xc8>
 800bafe:	2000      	movs	r0, #0
 800bb00:	e008      	b.n	800bb14 <_printf_common+0xa8>
 800bb02:	2301      	movs	r3, #1
 800bb04:	4652      	mov	r2, sl
 800bb06:	4649      	mov	r1, r9
 800bb08:	4638      	mov	r0, r7
 800bb0a:	47c0      	blx	r8
 800bb0c:	3001      	adds	r0, #1
 800bb0e:	d103      	bne.n	800bb18 <_printf_common+0xac>
 800bb10:	f04f 30ff 	mov.w	r0, #4294967295
 800bb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb18:	3501      	adds	r5, #1
 800bb1a:	e7c6      	b.n	800baaa <_printf_common+0x3e>
 800bb1c:	18e1      	adds	r1, r4, r3
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	2030      	movs	r0, #48	; 0x30
 800bb22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb26:	4422      	add	r2, r4
 800bb28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb30:	3302      	adds	r3, #2
 800bb32:	e7c7      	b.n	800bac4 <_printf_common+0x58>
 800bb34:	2301      	movs	r3, #1
 800bb36:	4622      	mov	r2, r4
 800bb38:	4649      	mov	r1, r9
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	47c0      	blx	r8
 800bb3e:	3001      	adds	r0, #1
 800bb40:	d0e6      	beq.n	800bb10 <_printf_common+0xa4>
 800bb42:	3601      	adds	r6, #1
 800bb44:	e7d9      	b.n	800bafa <_printf_common+0x8e>
	...

0800bb48 <_printf_i>:
 800bb48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb4c:	7e0f      	ldrb	r7, [r1, #24]
 800bb4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb50:	2f78      	cmp	r7, #120	; 0x78
 800bb52:	4691      	mov	r9, r2
 800bb54:	4680      	mov	r8, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	469a      	mov	sl, r3
 800bb5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb5e:	d807      	bhi.n	800bb70 <_printf_i+0x28>
 800bb60:	2f62      	cmp	r7, #98	; 0x62
 800bb62:	d80a      	bhi.n	800bb7a <_printf_i+0x32>
 800bb64:	2f00      	cmp	r7, #0
 800bb66:	f000 80d8 	beq.w	800bd1a <_printf_i+0x1d2>
 800bb6a:	2f58      	cmp	r7, #88	; 0x58
 800bb6c:	f000 80a3 	beq.w	800bcb6 <_printf_i+0x16e>
 800bb70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb78:	e03a      	b.n	800bbf0 <_printf_i+0xa8>
 800bb7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb7e:	2b15      	cmp	r3, #21
 800bb80:	d8f6      	bhi.n	800bb70 <_printf_i+0x28>
 800bb82:	a101      	add	r1, pc, #4	; (adr r1, 800bb88 <_printf_i+0x40>)
 800bb84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb88:	0800bbe1 	.word	0x0800bbe1
 800bb8c:	0800bbf5 	.word	0x0800bbf5
 800bb90:	0800bb71 	.word	0x0800bb71
 800bb94:	0800bb71 	.word	0x0800bb71
 800bb98:	0800bb71 	.word	0x0800bb71
 800bb9c:	0800bb71 	.word	0x0800bb71
 800bba0:	0800bbf5 	.word	0x0800bbf5
 800bba4:	0800bb71 	.word	0x0800bb71
 800bba8:	0800bb71 	.word	0x0800bb71
 800bbac:	0800bb71 	.word	0x0800bb71
 800bbb0:	0800bb71 	.word	0x0800bb71
 800bbb4:	0800bd01 	.word	0x0800bd01
 800bbb8:	0800bc25 	.word	0x0800bc25
 800bbbc:	0800bce3 	.word	0x0800bce3
 800bbc0:	0800bb71 	.word	0x0800bb71
 800bbc4:	0800bb71 	.word	0x0800bb71
 800bbc8:	0800bd23 	.word	0x0800bd23
 800bbcc:	0800bb71 	.word	0x0800bb71
 800bbd0:	0800bc25 	.word	0x0800bc25
 800bbd4:	0800bb71 	.word	0x0800bb71
 800bbd8:	0800bb71 	.word	0x0800bb71
 800bbdc:	0800bceb 	.word	0x0800bceb
 800bbe0:	682b      	ldr	r3, [r5, #0]
 800bbe2:	1d1a      	adds	r2, r3, #4
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	602a      	str	r2, [r5, #0]
 800bbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e0a3      	b.n	800bd3c <_printf_i+0x1f4>
 800bbf4:	6820      	ldr	r0, [r4, #0]
 800bbf6:	6829      	ldr	r1, [r5, #0]
 800bbf8:	0606      	lsls	r6, r0, #24
 800bbfa:	f101 0304 	add.w	r3, r1, #4
 800bbfe:	d50a      	bpl.n	800bc16 <_printf_i+0xce>
 800bc00:	680e      	ldr	r6, [r1, #0]
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	da03      	bge.n	800bc10 <_printf_i+0xc8>
 800bc08:	232d      	movs	r3, #45	; 0x2d
 800bc0a:	4276      	negs	r6, r6
 800bc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc10:	485e      	ldr	r0, [pc, #376]	; (800bd8c <_printf_i+0x244>)
 800bc12:	230a      	movs	r3, #10
 800bc14:	e019      	b.n	800bc4a <_printf_i+0x102>
 800bc16:	680e      	ldr	r6, [r1, #0]
 800bc18:	602b      	str	r3, [r5, #0]
 800bc1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bc1e:	bf18      	it	ne
 800bc20:	b236      	sxthne	r6, r6
 800bc22:	e7ef      	b.n	800bc04 <_printf_i+0xbc>
 800bc24:	682b      	ldr	r3, [r5, #0]
 800bc26:	6820      	ldr	r0, [r4, #0]
 800bc28:	1d19      	adds	r1, r3, #4
 800bc2a:	6029      	str	r1, [r5, #0]
 800bc2c:	0601      	lsls	r1, r0, #24
 800bc2e:	d501      	bpl.n	800bc34 <_printf_i+0xec>
 800bc30:	681e      	ldr	r6, [r3, #0]
 800bc32:	e002      	b.n	800bc3a <_printf_i+0xf2>
 800bc34:	0646      	lsls	r6, r0, #25
 800bc36:	d5fb      	bpl.n	800bc30 <_printf_i+0xe8>
 800bc38:	881e      	ldrh	r6, [r3, #0]
 800bc3a:	4854      	ldr	r0, [pc, #336]	; (800bd8c <_printf_i+0x244>)
 800bc3c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc3e:	bf0c      	ite	eq
 800bc40:	2308      	moveq	r3, #8
 800bc42:	230a      	movne	r3, #10
 800bc44:	2100      	movs	r1, #0
 800bc46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc4a:	6865      	ldr	r5, [r4, #4]
 800bc4c:	60a5      	str	r5, [r4, #8]
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	bfa2      	ittt	ge
 800bc52:	6821      	ldrge	r1, [r4, #0]
 800bc54:	f021 0104 	bicge.w	r1, r1, #4
 800bc58:	6021      	strge	r1, [r4, #0]
 800bc5a:	b90e      	cbnz	r6, 800bc60 <_printf_i+0x118>
 800bc5c:	2d00      	cmp	r5, #0
 800bc5e:	d04d      	beq.n	800bcfc <_printf_i+0x1b4>
 800bc60:	4615      	mov	r5, r2
 800bc62:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc66:	fb03 6711 	mls	r7, r3, r1, r6
 800bc6a:	5dc7      	ldrb	r7, [r0, r7]
 800bc6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc70:	4637      	mov	r7, r6
 800bc72:	42bb      	cmp	r3, r7
 800bc74:	460e      	mov	r6, r1
 800bc76:	d9f4      	bls.n	800bc62 <_printf_i+0x11a>
 800bc78:	2b08      	cmp	r3, #8
 800bc7a:	d10b      	bne.n	800bc94 <_printf_i+0x14c>
 800bc7c:	6823      	ldr	r3, [r4, #0]
 800bc7e:	07de      	lsls	r6, r3, #31
 800bc80:	d508      	bpl.n	800bc94 <_printf_i+0x14c>
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	6861      	ldr	r1, [r4, #4]
 800bc86:	4299      	cmp	r1, r3
 800bc88:	bfde      	ittt	le
 800bc8a:	2330      	movle	r3, #48	; 0x30
 800bc8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc94:	1b52      	subs	r2, r2, r5
 800bc96:	6122      	str	r2, [r4, #16]
 800bc98:	f8cd a000 	str.w	sl, [sp]
 800bc9c:	464b      	mov	r3, r9
 800bc9e:	aa03      	add	r2, sp, #12
 800bca0:	4621      	mov	r1, r4
 800bca2:	4640      	mov	r0, r8
 800bca4:	f7ff fee2 	bl	800ba6c <_printf_common>
 800bca8:	3001      	adds	r0, #1
 800bcaa:	d14c      	bne.n	800bd46 <_printf_i+0x1fe>
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	b004      	add	sp, #16
 800bcb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb6:	4835      	ldr	r0, [pc, #212]	; (800bd8c <_printf_i+0x244>)
 800bcb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bcbc:	6829      	ldr	r1, [r5, #0]
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bcc4:	6029      	str	r1, [r5, #0]
 800bcc6:	061d      	lsls	r5, r3, #24
 800bcc8:	d514      	bpl.n	800bcf4 <_printf_i+0x1ac>
 800bcca:	07df      	lsls	r7, r3, #31
 800bccc:	bf44      	itt	mi
 800bcce:	f043 0320 	orrmi.w	r3, r3, #32
 800bcd2:	6023      	strmi	r3, [r4, #0]
 800bcd4:	b91e      	cbnz	r6, 800bcde <_printf_i+0x196>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	f023 0320 	bic.w	r3, r3, #32
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	2310      	movs	r3, #16
 800bce0:	e7b0      	b.n	800bc44 <_printf_i+0xfc>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	f043 0320 	orr.w	r3, r3, #32
 800bce8:	6023      	str	r3, [r4, #0]
 800bcea:	2378      	movs	r3, #120	; 0x78
 800bcec:	4828      	ldr	r0, [pc, #160]	; (800bd90 <_printf_i+0x248>)
 800bcee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcf2:	e7e3      	b.n	800bcbc <_printf_i+0x174>
 800bcf4:	0659      	lsls	r1, r3, #25
 800bcf6:	bf48      	it	mi
 800bcf8:	b2b6      	uxthmi	r6, r6
 800bcfa:	e7e6      	b.n	800bcca <_printf_i+0x182>
 800bcfc:	4615      	mov	r5, r2
 800bcfe:	e7bb      	b.n	800bc78 <_printf_i+0x130>
 800bd00:	682b      	ldr	r3, [r5, #0]
 800bd02:	6826      	ldr	r6, [r4, #0]
 800bd04:	6961      	ldr	r1, [r4, #20]
 800bd06:	1d18      	adds	r0, r3, #4
 800bd08:	6028      	str	r0, [r5, #0]
 800bd0a:	0635      	lsls	r5, r6, #24
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	d501      	bpl.n	800bd14 <_printf_i+0x1cc>
 800bd10:	6019      	str	r1, [r3, #0]
 800bd12:	e002      	b.n	800bd1a <_printf_i+0x1d2>
 800bd14:	0670      	lsls	r0, r6, #25
 800bd16:	d5fb      	bpl.n	800bd10 <_printf_i+0x1c8>
 800bd18:	8019      	strh	r1, [r3, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	6123      	str	r3, [r4, #16]
 800bd1e:	4615      	mov	r5, r2
 800bd20:	e7ba      	b.n	800bc98 <_printf_i+0x150>
 800bd22:	682b      	ldr	r3, [r5, #0]
 800bd24:	1d1a      	adds	r2, r3, #4
 800bd26:	602a      	str	r2, [r5, #0]
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	6862      	ldr	r2, [r4, #4]
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7f4 fa5e 	bl	80001f0 <memchr>
 800bd34:	b108      	cbz	r0, 800bd3a <_printf_i+0x1f2>
 800bd36:	1b40      	subs	r0, r0, r5
 800bd38:	6060      	str	r0, [r4, #4]
 800bd3a:	6863      	ldr	r3, [r4, #4]
 800bd3c:	6123      	str	r3, [r4, #16]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd44:	e7a8      	b.n	800bc98 <_printf_i+0x150>
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	462a      	mov	r2, r5
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	47d0      	blx	sl
 800bd50:	3001      	adds	r0, #1
 800bd52:	d0ab      	beq.n	800bcac <_printf_i+0x164>
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	079b      	lsls	r3, r3, #30
 800bd58:	d413      	bmi.n	800bd82 <_printf_i+0x23a>
 800bd5a:	68e0      	ldr	r0, [r4, #12]
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	4298      	cmp	r0, r3
 800bd60:	bfb8      	it	lt
 800bd62:	4618      	movlt	r0, r3
 800bd64:	e7a4      	b.n	800bcb0 <_printf_i+0x168>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4632      	mov	r2, r6
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	47d0      	blx	sl
 800bd70:	3001      	adds	r0, #1
 800bd72:	d09b      	beq.n	800bcac <_printf_i+0x164>
 800bd74:	3501      	adds	r5, #1
 800bd76:	68e3      	ldr	r3, [r4, #12]
 800bd78:	9903      	ldr	r1, [sp, #12]
 800bd7a:	1a5b      	subs	r3, r3, r1
 800bd7c:	42ab      	cmp	r3, r5
 800bd7e:	dcf2      	bgt.n	800bd66 <_printf_i+0x21e>
 800bd80:	e7eb      	b.n	800bd5a <_printf_i+0x212>
 800bd82:	2500      	movs	r5, #0
 800bd84:	f104 0619 	add.w	r6, r4, #25
 800bd88:	e7f5      	b.n	800bd76 <_printf_i+0x22e>
 800bd8a:	bf00      	nop
 800bd8c:	0800c845 	.word	0x0800c845
 800bd90:	0800c856 	.word	0x0800c856

0800bd94 <__sread>:
 800bd94:	b510      	push	{r4, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9c:	f000 f894 	bl	800bec8 <_read_r>
 800bda0:	2800      	cmp	r0, #0
 800bda2:	bfab      	itete	ge
 800bda4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bda6:	89a3      	ldrhlt	r3, [r4, #12]
 800bda8:	181b      	addge	r3, r3, r0
 800bdaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdae:	bfac      	ite	ge
 800bdb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdb2:	81a3      	strhlt	r3, [r4, #12]
 800bdb4:	bd10      	pop	{r4, pc}

0800bdb6 <__swrite>:
 800bdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdba:	461f      	mov	r7, r3
 800bdbc:	898b      	ldrh	r3, [r1, #12]
 800bdbe:	05db      	lsls	r3, r3, #23
 800bdc0:	4605      	mov	r5, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	d505      	bpl.n	800bdd4 <__swrite+0x1e>
 800bdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdcc:	2302      	movs	r3, #2
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f000 f868 	bl	800bea4 <_lseek_r>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	4632      	mov	r2, r6
 800bde2:	463b      	mov	r3, r7
 800bde4:	4628      	mov	r0, r5
 800bde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdea:	f000 b817 	b.w	800be1c <_write_r>

0800bdee <__sseek>:
 800bdee:	b510      	push	{r4, lr}
 800bdf0:	460c      	mov	r4, r1
 800bdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf6:	f000 f855 	bl	800bea4 <_lseek_r>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	bf15      	itete	ne
 800be00:	6560      	strne	r0, [r4, #84]	; 0x54
 800be02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be0a:	81a3      	strheq	r3, [r4, #12]
 800be0c:	bf18      	it	ne
 800be0e:	81a3      	strhne	r3, [r4, #12]
 800be10:	bd10      	pop	{r4, pc}

0800be12 <__sclose>:
 800be12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be16:	f000 b813 	b.w	800be40 <_close_r>
	...

0800be1c <_write_r>:
 800be1c:	b538      	push	{r3, r4, r5, lr}
 800be1e:	4d07      	ldr	r5, [pc, #28]	; (800be3c <_write_r+0x20>)
 800be20:	4604      	mov	r4, r0
 800be22:	4608      	mov	r0, r1
 800be24:	4611      	mov	r1, r2
 800be26:	2200      	movs	r2, #0
 800be28:	602a      	str	r2, [r5, #0]
 800be2a:	461a      	mov	r2, r3
 800be2c:	f7f6 fa19 	bl	8002262 <_write>
 800be30:	1c43      	adds	r3, r0, #1
 800be32:	d102      	bne.n	800be3a <_write_r+0x1e>
 800be34:	682b      	ldr	r3, [r5, #0]
 800be36:	b103      	cbz	r3, 800be3a <_write_r+0x1e>
 800be38:	6023      	str	r3, [r4, #0]
 800be3a:	bd38      	pop	{r3, r4, r5, pc}
 800be3c:	20000ecc 	.word	0x20000ecc

0800be40 <_close_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d06      	ldr	r5, [pc, #24]	; (800be5c <_close_r+0x1c>)
 800be44:	2300      	movs	r3, #0
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	602b      	str	r3, [r5, #0]
 800be4c:	f7f6 fa25 	bl	800229a <_close>
 800be50:	1c43      	adds	r3, r0, #1
 800be52:	d102      	bne.n	800be5a <_close_r+0x1a>
 800be54:	682b      	ldr	r3, [r5, #0]
 800be56:	b103      	cbz	r3, 800be5a <_close_r+0x1a>
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	20000ecc 	.word	0x20000ecc

0800be60 <_fstat_r>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4d07      	ldr	r5, [pc, #28]	; (800be80 <_fstat_r+0x20>)
 800be64:	2300      	movs	r3, #0
 800be66:	4604      	mov	r4, r0
 800be68:	4608      	mov	r0, r1
 800be6a:	4611      	mov	r1, r2
 800be6c:	602b      	str	r3, [r5, #0]
 800be6e:	f7f6 fa20 	bl	80022b2 <_fstat>
 800be72:	1c43      	adds	r3, r0, #1
 800be74:	d102      	bne.n	800be7c <_fstat_r+0x1c>
 800be76:	682b      	ldr	r3, [r5, #0]
 800be78:	b103      	cbz	r3, 800be7c <_fstat_r+0x1c>
 800be7a:	6023      	str	r3, [r4, #0]
 800be7c:	bd38      	pop	{r3, r4, r5, pc}
 800be7e:	bf00      	nop
 800be80:	20000ecc 	.word	0x20000ecc

0800be84 <_isatty_r>:
 800be84:	b538      	push	{r3, r4, r5, lr}
 800be86:	4d06      	ldr	r5, [pc, #24]	; (800bea0 <_isatty_r+0x1c>)
 800be88:	2300      	movs	r3, #0
 800be8a:	4604      	mov	r4, r0
 800be8c:	4608      	mov	r0, r1
 800be8e:	602b      	str	r3, [r5, #0]
 800be90:	f7f6 fa1f 	bl	80022d2 <_isatty>
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	d102      	bne.n	800be9e <_isatty_r+0x1a>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	b103      	cbz	r3, 800be9e <_isatty_r+0x1a>
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	20000ecc 	.word	0x20000ecc

0800bea4 <_lseek_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4d07      	ldr	r5, [pc, #28]	; (800bec4 <_lseek_r+0x20>)
 800bea8:	4604      	mov	r4, r0
 800beaa:	4608      	mov	r0, r1
 800beac:	4611      	mov	r1, r2
 800beae:	2200      	movs	r2, #0
 800beb0:	602a      	str	r2, [r5, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	f7f6 fa18 	bl	80022e8 <_lseek>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	d102      	bne.n	800bec2 <_lseek_r+0x1e>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	b103      	cbz	r3, 800bec2 <_lseek_r+0x1e>
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	20000ecc 	.word	0x20000ecc

0800bec8 <_read_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	; (800bee8 <_read_r+0x20>)
 800becc:	4604      	mov	r4, r0
 800bece:	4608      	mov	r0, r1
 800bed0:	4611      	mov	r1, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	f7f6 f9a6 	bl	8002228 <_read>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_read_r+0x1e>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_read_r+0x1e>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20000ecc 	.word	0x20000ecc

0800beec <_init>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr

0800bef8 <_fini>:
 800bef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befa:	bf00      	nop
 800befc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800befe:	bc08      	pop	{r3}
 800bf00:	469e      	mov	lr, r3
 800bf02:	4770      	bx	lr
